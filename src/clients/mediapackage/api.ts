import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class MediaPackageClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public configureLogs(input: shapes.MediaPackageConfigureLogsRequest): MediaPackageConfigureLogs {
    return new MediaPackageConfigureLogs(this, 'ConfigureLogs', this.__resources, input);
  }

  public createChannel(input: shapes.MediaPackageCreateChannelRequest): MediaPackageCreateChannel {
    return new MediaPackageCreateChannel(this, 'CreateChannel', this.__resources, input);
  }

  public createHarvestJob(input: shapes.MediaPackageCreateHarvestJobRequest): MediaPackageCreateHarvestJob {
    return new MediaPackageCreateHarvestJob(this, 'CreateHarvestJob', this.__resources, input);
  }

  public createOriginEndpoint(input: shapes.MediaPackageCreateOriginEndpointRequest): MediaPackageCreateOriginEndpoint {
    return new MediaPackageCreateOriginEndpoint(this, 'CreateOriginEndpoint', this.__resources, input);
  }

  public deleteChannel(input: shapes.MediaPackageDeleteChannelRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DeleteChannel'),
        parameters: {
          Id: input.id,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteChannel', props);
  }

  public deleteOriginEndpoint(input: shapes.MediaPackageDeleteOriginEndpointRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DeleteOriginEndpoint'),
        parameters: {
          Id: input.id,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteOriginEndpoint', props);
  }

  public describeChannel(input: shapes.MediaPackageDescribeChannelRequest): MediaPackageDescribeChannel {
    return new MediaPackageDescribeChannel(this, 'DescribeChannel', this.__resources, input);
  }

  public describeHarvestJob(input: shapes.MediaPackageDescribeHarvestJobRequest): MediaPackageDescribeHarvestJob {
    return new MediaPackageDescribeHarvestJob(this, 'DescribeHarvestJob', this.__resources, input);
  }

  public describeOriginEndpoint(input: shapes.MediaPackageDescribeOriginEndpointRequest): MediaPackageDescribeOriginEndpoint {
    return new MediaPackageDescribeOriginEndpoint(this, 'DescribeOriginEndpoint', this.__resources, input);
  }

  public listChannels(input: shapes.MediaPackageListChannelsRequest): MediaPackageListChannels {
    return new MediaPackageListChannels(this, 'ListChannels', this.__resources, input);
  }

  public listHarvestJobs(input: shapes.MediaPackageListHarvestJobsRequest): MediaPackageListHarvestJobs {
    return new MediaPackageListHarvestJobs(this, 'ListHarvestJobs', this.__resources, input);
  }

  public listOriginEndpoints(input: shapes.MediaPackageListOriginEndpointsRequest): MediaPackageListOriginEndpoints {
    return new MediaPackageListOriginEndpoints(this, 'ListOriginEndpoints', this.__resources, input);
  }

  public listTagsForResource(input: shapes.MediaPackageListTagsForResourceRequest): MediaPackageListTagsForResource {
    return new MediaPackageListTagsForResource(this, 'ListTagsForResource', this.__resources, input);
  }

  public rotateChannelCredentials(input: shapes.MediaPackageRotateChannelCredentialsRequest): MediaPackageRotateChannelCredentials {
    return new MediaPackageRotateChannelCredentials(this, 'RotateChannelCredentials', this.__resources, input);
  }

  public rotateIngestEndpointCredentials(input: shapes.MediaPackageRotateIngestEndpointCredentialsRequest): MediaPackageRotateIngestEndpointCredentials {
    return new MediaPackageRotateIngestEndpointCredentials(this, 'RotateIngestEndpointCredentials', this.__resources, input);
  }

  public tagResource(input: shapes.MediaPackageTagResourceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'tagResource',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.TagResource'),
        parameters: {
          ResourceArn: input.resourceArn,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'TagResource', props);
  }

  public untagResource(input: shapes.MediaPackageUntagResourceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'untagResource',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UntagResource'),
        parameters: {
          ResourceArn: input.resourceArn,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'UntagResource', props);
  }

  public updateChannel(input: shapes.MediaPackageUpdateChannelRequest): MediaPackageUpdateChannel {
    return new MediaPackageUpdateChannel(this, 'UpdateChannel', this.__resources, input);
  }

  public updateOriginEndpoint(input: shapes.MediaPackageUpdateOriginEndpointRequest): MediaPackageUpdateOriginEndpoint {
    return new MediaPackageUpdateOriginEndpoint(this, 'UpdateOriginEndpoint', this.__resources, input);
  }

}

export class MediaPackageConfigureLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageConfigureLogsRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'configureLogs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ConfigureLogs.Arn'),
        outputPath: 'Arn',
        parameters: {
          EgressAccessLogs: {
            LogGroupName: this.input.egressAccessLogs?.logGroupName,
          },
          Id: this.input.id,
          IngressAccessLogs: {
            LogGroupName: this.input.ingressAccessLogs?.logGroupName,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfigureLogs.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'configureLogs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ConfigureLogs.Description'),
        outputPath: 'Description',
        parameters: {
          EgressAccessLogs: {
            LogGroupName: this.input.egressAccessLogs?.logGroupName,
          },
          Id: this.input.id,
          IngressAccessLogs: {
            LogGroupName: this.input.ingressAccessLogs?.logGroupName,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfigureLogs.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get egressAccessLogs(): MediaPackageConfigureLogsEgressAccessLogs {
    return new MediaPackageConfigureLogsEgressAccessLogs(this, 'EgressAccessLogs', this.__resources, this.input);
  }

  public get hlsIngest(): MediaPackageConfigureLogsHlsIngest {
    return new MediaPackageConfigureLogsHlsIngest(this, 'HlsIngest', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'configureLogs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ConfigureLogs.Id'),
        outputPath: 'Id',
        parameters: {
          EgressAccessLogs: {
            LogGroupName: this.input.egressAccessLogs?.logGroupName,
          },
          Id: this.input.id,
          IngressAccessLogs: {
            LogGroupName: this.input.ingressAccessLogs?.logGroupName,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfigureLogs.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get ingressAccessLogs(): MediaPackageConfigureLogsIngressAccessLogs {
    return new MediaPackageConfigureLogsIngressAccessLogs(this, 'IngressAccessLogs', this.__resources, this.input);
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'configureLogs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ConfigureLogs.Tags'),
        outputPath: 'Tags',
        parameters: {
          EgressAccessLogs: {
            LogGroupName: this.input.egressAccessLogs?.logGroupName,
          },
          Id: this.input.id,
          IngressAccessLogs: {
            LogGroupName: this.input.ingressAccessLogs?.logGroupName,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfigureLogs.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaPackageConfigureLogsEgressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageConfigureLogsRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'configureLogs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ConfigureLogs.EgressAccessLogs.LogGroupName'),
        outputPath: 'EgressAccessLogs.LogGroupName',
        parameters: {
          EgressAccessLogs: {
            LogGroupName: this.input.egressAccessLogs?.logGroupName,
          },
          Id: this.input.id,
          IngressAccessLogs: {
            LogGroupName: this.input.ingressAccessLogs?.logGroupName,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfigureLogs.EgressAccessLogs.LogGroupName', props);
    return resource.getResponseField('EgressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageConfigureLogsHlsIngest extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageConfigureLogsRequest) {
    super(scope, id);
  }

  public get ingestEndpoints(): shapes.MediaPackageIngestEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'configureLogs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ConfigureLogs.HlsIngest.IngestEndpoints'),
        outputPath: 'HlsIngest.IngestEndpoints',
        parameters: {
          EgressAccessLogs: {
            LogGroupName: this.input.egressAccessLogs?.logGroupName,
          },
          Id: this.input.id,
          IngressAccessLogs: {
            LogGroupName: this.input.ingressAccessLogs?.logGroupName,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfigureLogs.HlsIngest.IngestEndpoints', props);
    return resource.getResponseField('HlsIngest.IngestEndpoints') as unknown as shapes.MediaPackageIngestEndpoint[];
  }

}

export class MediaPackageConfigureLogsIngressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageConfigureLogsRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'configureLogs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ConfigureLogs.IngressAccessLogs.LogGroupName'),
        outputPath: 'IngressAccessLogs.LogGroupName',
        parameters: {
          EgressAccessLogs: {
            LogGroupName: this.input.egressAccessLogs?.logGroupName,
          },
          Id: this.input.id,
          IngressAccessLogs: {
            LogGroupName: this.input.ingressAccessLogs?.logGroupName,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfigureLogs.IngressAccessLogs.LogGroupName', props);
    return resource.getResponseField('IngressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageCreateChannel extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateChannelRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateChannel.Arn'),
        outputPath: 'Arn',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateChannel.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateChannel.Description'),
        outputPath: 'Description',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateChannel.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get egressAccessLogs(): MediaPackageCreateChannelEgressAccessLogs {
    return new MediaPackageCreateChannelEgressAccessLogs(this, 'EgressAccessLogs', this.__resources, this.input);
  }

  public get hlsIngest(): MediaPackageCreateChannelHlsIngest {
    return new MediaPackageCreateChannelHlsIngest(this, 'HlsIngest', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateChannel.Id'),
        outputPath: 'Id',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateChannel.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get ingressAccessLogs(): MediaPackageCreateChannelIngressAccessLogs {
    return new MediaPackageCreateChannelIngressAccessLogs(this, 'IngressAccessLogs', this.__resources, this.input);
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateChannel.Tags'),
        outputPath: 'Tags',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateChannel.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaPackageCreateChannelEgressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateChannelRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateChannel.EgressAccessLogs.LogGroupName'),
        outputPath: 'EgressAccessLogs.LogGroupName',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateChannel.EgressAccessLogs.LogGroupName', props);
    return resource.getResponseField('EgressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageCreateChannelHlsIngest extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateChannelRequest) {
    super(scope, id);
  }

  public get ingestEndpoints(): shapes.MediaPackageIngestEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateChannel.HlsIngest.IngestEndpoints'),
        outputPath: 'HlsIngest.IngestEndpoints',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateChannel.HlsIngest.IngestEndpoints', props);
    return resource.getResponseField('HlsIngest.IngestEndpoints') as unknown as shapes.MediaPackageIngestEndpoint[];
  }

}

export class MediaPackageCreateChannelIngressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateChannelRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateChannel.IngressAccessLogs.LogGroupName'),
        outputPath: 'IngressAccessLogs.LogGroupName',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateChannel.IngressAccessLogs.LogGroupName', props);
    return resource.getResponseField('IngressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageCreateHarvestJob extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateHarvestJobRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.Arn'),
        outputPath: 'Arn',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.ChannelId'),
        outputPath: 'ChannelId',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.ChannelId', props);
    return resource.getResponseField('ChannelId') as unknown as string;
  }

  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.CreatedAt'),
        outputPath: 'CreatedAt',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.CreatedAt', props);
    return resource.getResponseField('CreatedAt') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.EndTime'),
        outputPath: 'EndTime',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.EndTime', props);
    return resource.getResponseField('EndTime') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.Id'),
        outputPath: 'Id',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get originEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.OriginEndpointId'),
        outputPath: 'OriginEndpointId',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.OriginEndpointId', props);
    return resource.getResponseField('OriginEndpointId') as unknown as string;
  }

  public get s3Destination(): MediaPackageCreateHarvestJobS3Destination {
    return new MediaPackageCreateHarvestJobS3Destination(this, 'S3Destination', this.__resources, this.input);
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.Status'),
        outputPath: 'Status',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class MediaPackageCreateHarvestJobS3Destination extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateHarvestJobRequest) {
    super(scope, id);
  }

  public get bucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.S3Destination.BucketName'),
        outputPath: 'S3Destination.BucketName',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.S3Destination.BucketName', props);
    return resource.getResponseField('S3Destination.BucketName') as unknown as string;
  }

  public get manifestKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.S3Destination.ManifestKey'),
        outputPath: 'S3Destination.ManifestKey',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.S3Destination.ManifestKey', props);
    return resource.getResponseField('S3Destination.ManifestKey') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateHarvestJob.S3Destination.RoleArn'),
        outputPath: 'S3Destination.RoleArn',
        parameters: {
          EndTime: this.input.endTime,
          Id: this.input.id,
          OriginEndpointId: this.input.originEndpointId,
          S3Destination: {
            BucketName: this.input.s3Destination.bucketName,
            ManifestKey: this.input.s3Destination.manifestKey,
            RoleArn: this.input.s3Destination.roleArn,
          },
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateHarvestJob.S3Destination.RoleArn', props);
    return resource.getResponseField('S3Destination.RoleArn') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Arn'),
        outputPath: 'Arn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get authorization(): MediaPackageCreateOriginEndpointAuthorization {
    return new MediaPackageCreateOriginEndpointAuthorization(this, 'Authorization', this.__resources, this.input);
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.ChannelId'),
        outputPath: 'ChannelId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.ChannelId', props);
    return resource.getResponseField('ChannelId') as unknown as string;
  }

  public get cmafPackage(): MediaPackageCreateOriginEndpointCmafPackage {
    return new MediaPackageCreateOriginEndpointCmafPackage(this, 'CmafPackage', this.__resources, this.input);
  }

  public get dashPackage(): MediaPackageCreateOriginEndpointDashPackage {
    return new MediaPackageCreateOriginEndpointDashPackage(this, 'DashPackage', this.__resources, this.input);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Description'),
        outputPath: 'Description',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get hlsPackage(): MediaPackageCreateOriginEndpointHlsPackage {
    return new MediaPackageCreateOriginEndpointHlsPackage(this, 'HlsPackage', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Id'),
        outputPath: 'Id',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get manifestName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.ManifestName'),
        outputPath: 'ManifestName',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.ManifestName', props);
    return resource.getResponseField('ManifestName') as unknown as string;
  }

  public get mssPackage(): MediaPackageCreateOriginEndpointMssPackage {
    return new MediaPackageCreateOriginEndpointMssPackage(this, 'MssPackage', this.__resources, this.input);
  }

  public get origination(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Origination'),
        outputPath: 'Origination',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Origination', props);
    return resource.getResponseField('Origination') as unknown as string;
  }

  public get startoverWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.StartoverWindowSeconds'),
        outputPath: 'StartoverWindowSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.StartoverWindowSeconds', props);
    return resource.getResponseField('StartoverWindowSeconds') as unknown as number;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Tags'),
        outputPath: 'Tags',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

  public get timeDelaySeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.TimeDelaySeconds'),
        outputPath: 'TimeDelaySeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.TimeDelaySeconds', props);
    return resource.getResponseField('TimeDelaySeconds') as unknown as number;
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Url'),
        outputPath: 'Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Url', props);
    return resource.getResponseField('Url') as unknown as string;
  }

  public get whitelist(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Whitelist'),
        outputPath: 'Whitelist',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Whitelist', props);
    return resource.getResponseField('Whitelist') as unknown as string[];
  }

}

export class MediaPackageCreateOriginEndpointAuthorization extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get cdnIdentifierSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Authorization.CdnIdentifierSecret'),
        outputPath: 'Authorization.CdnIdentifierSecret',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Authorization.CdnIdentifierSecret', props);
    return resource.getResponseField('Authorization.CdnIdentifierSecret') as unknown as string;
  }

  public get secretsRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.Authorization.SecretsRoleArn'),
        outputPath: 'Authorization.SecretsRoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.Authorization.SecretsRoleArn', props);
    return resource.getResponseField('Authorization.SecretsRoleArn') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointCmafPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get encryption(): MediaPackageCreateOriginEndpointCmafPackageEncryption {
    return new MediaPackageCreateOriginEndpointCmafPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get hlsManifests(): shapes.MediaPackageHlsManifest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.HlsManifests'),
        outputPath: 'CmafPackage.HlsManifests',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.HlsManifests', props);
    return resource.getResponseField('CmafPackage.HlsManifests') as unknown as shapes.MediaPackageHlsManifest[];
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.SegmentDurationSeconds'),
        outputPath: 'CmafPackage.SegmentDurationSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('CmafPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get segmentPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.SegmentPrefix'),
        outputPath: 'CmafPackage.SegmentPrefix',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.SegmentPrefix', props);
    return resource.getResponseField('CmafPackage.SegmentPrefix') as unknown as string;
  }

  public get streamSelection(): MediaPackageCreateOriginEndpointCmafPackageStreamSelection {
    return new MediaPackageCreateOriginEndpointCmafPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

}

export class MediaPackageCreateOriginEndpointCmafPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'CmafPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('CmafPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get spekeKeyProvider(): MediaPackageCreateOriginEndpointCmafPackageEncryptionSpekeKeyProvider {
    return new MediaPackageCreateOriginEndpointCmafPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageCreateOriginEndpointCmafPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointCmafPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'CmafPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('CmafPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'CmafPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('CmafPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.CmafPackage.StreamSelection.StreamOrder'),
        outputPath: 'CmafPackage.StreamSelection.StreamOrder',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.CmafPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('CmafPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointDashPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get adTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.AdTriggers'),
        outputPath: 'DashPackage.AdTriggers',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.AdTriggers', props);
    return resource.getResponseField('DashPackage.AdTriggers') as unknown as string[];
  }

  public get adsOnDeliveryRestrictions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.AdsOnDeliveryRestrictions'),
        outputPath: 'DashPackage.AdsOnDeliveryRestrictions',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.AdsOnDeliveryRestrictions', props);
    return resource.getResponseField('DashPackage.AdsOnDeliveryRestrictions') as unknown as string;
  }

  public get encryption(): MediaPackageCreateOriginEndpointDashPackageEncryption {
    return new MediaPackageCreateOriginEndpointDashPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get manifestLayout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.ManifestLayout'),
        outputPath: 'DashPackage.ManifestLayout',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.ManifestLayout', props);
    return resource.getResponseField('DashPackage.ManifestLayout') as unknown as string;
  }

  public get manifestWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.ManifestWindowSeconds'),
        outputPath: 'DashPackage.ManifestWindowSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.ManifestWindowSeconds', props);
    return resource.getResponseField('DashPackage.ManifestWindowSeconds') as unknown as number;
  }

  public get minBufferTimeSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.MinBufferTimeSeconds'),
        outputPath: 'DashPackage.MinBufferTimeSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.MinBufferTimeSeconds', props);
    return resource.getResponseField('DashPackage.MinBufferTimeSeconds') as unknown as number;
  }

  public get minUpdatePeriodSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.MinUpdatePeriodSeconds'),
        outputPath: 'DashPackage.MinUpdatePeriodSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.MinUpdatePeriodSeconds', props);
    return resource.getResponseField('DashPackage.MinUpdatePeriodSeconds') as unknown as number;
  }

  public get periodTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.PeriodTriggers'),
        outputPath: 'DashPackage.PeriodTriggers',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.PeriodTriggers', props);
    return resource.getResponseField('DashPackage.PeriodTriggers') as unknown as string[];
  }

  public get profile(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.Profile'),
        outputPath: 'DashPackage.Profile',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.Profile', props);
    return resource.getResponseField('DashPackage.Profile') as unknown as string;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.SegmentDurationSeconds'),
        outputPath: 'DashPackage.SegmentDurationSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('DashPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get segmentTemplateFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.SegmentTemplateFormat'),
        outputPath: 'DashPackage.SegmentTemplateFormat',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.SegmentTemplateFormat', props);
    return resource.getResponseField('DashPackage.SegmentTemplateFormat') as unknown as string;
  }

  public get streamSelection(): MediaPackageCreateOriginEndpointDashPackageStreamSelection {
    return new MediaPackageCreateOriginEndpointDashPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

  public get suggestedPresentationDelaySeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.SuggestedPresentationDelaySeconds'),
        outputPath: 'DashPackage.SuggestedPresentationDelaySeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.SuggestedPresentationDelaySeconds', props);
    return resource.getResponseField('DashPackage.SuggestedPresentationDelaySeconds') as unknown as number;
  }

  public get utcTiming(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.UtcTiming'),
        outputPath: 'DashPackage.UtcTiming',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.UtcTiming', props);
    return resource.getResponseField('DashPackage.UtcTiming') as unknown as string;
  }

  public get utcTimingUri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.UtcTimingUri'),
        outputPath: 'DashPackage.UtcTimingUri',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.UtcTimingUri', props);
    return resource.getResponseField('DashPackage.UtcTimingUri') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointDashPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'DashPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('DashPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get spekeKeyProvider(): MediaPackageCreateOriginEndpointDashPackageEncryptionSpekeKeyProvider {
    return new MediaPackageCreateOriginEndpointDashPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageCreateOriginEndpointDashPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointDashPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'DashPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('DashPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'DashPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('DashPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.DashPackage.StreamSelection.StreamOrder'),
        outputPath: 'DashPackage.StreamSelection.StreamOrder',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.DashPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('DashPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointHlsPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get adMarkers(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.AdMarkers'),
        outputPath: 'HlsPackage.AdMarkers',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.AdMarkers', props);
    return resource.getResponseField('HlsPackage.AdMarkers') as unknown as string;
  }

  public get adTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.AdTriggers'),
        outputPath: 'HlsPackage.AdTriggers',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.AdTriggers', props);
    return resource.getResponseField('HlsPackage.AdTriggers') as unknown as string[];
  }

  public get adsOnDeliveryRestrictions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.AdsOnDeliveryRestrictions'),
        outputPath: 'HlsPackage.AdsOnDeliveryRestrictions',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.AdsOnDeliveryRestrictions', props);
    return resource.getResponseField('HlsPackage.AdsOnDeliveryRestrictions') as unknown as string;
  }

  public get encryption(): MediaPackageCreateOriginEndpointHlsPackageEncryption {
    return new MediaPackageCreateOriginEndpointHlsPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get includeIframeOnlyStream(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.IncludeIframeOnlyStream'),
        outputPath: 'HlsPackage.IncludeIframeOnlyStream',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.IncludeIframeOnlyStream', props);
    return resource.getResponseField('HlsPackage.IncludeIframeOnlyStream') as unknown as boolean;
  }

  public get playlistType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.PlaylistType'),
        outputPath: 'HlsPackage.PlaylistType',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.PlaylistType', props);
    return resource.getResponseField('HlsPackage.PlaylistType') as unknown as string;
  }

  public get playlistWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.PlaylistWindowSeconds'),
        outputPath: 'HlsPackage.PlaylistWindowSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.PlaylistWindowSeconds', props);
    return resource.getResponseField('HlsPackage.PlaylistWindowSeconds') as unknown as number;
  }

  public get programDateTimeIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.ProgramDateTimeIntervalSeconds'),
        outputPath: 'HlsPackage.ProgramDateTimeIntervalSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.ProgramDateTimeIntervalSeconds', props);
    return resource.getResponseField('HlsPackage.ProgramDateTimeIntervalSeconds') as unknown as number;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.SegmentDurationSeconds'),
        outputPath: 'HlsPackage.SegmentDurationSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('HlsPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get streamSelection(): MediaPackageCreateOriginEndpointHlsPackageStreamSelection {
    return new MediaPackageCreateOriginEndpointHlsPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

  public get useAudioRenditionGroup(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.UseAudioRenditionGroup'),
        outputPath: 'HlsPackage.UseAudioRenditionGroup',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.UseAudioRenditionGroup', props);
    return resource.getResponseField('HlsPackage.UseAudioRenditionGroup') as unknown as boolean;
  }

}

export class MediaPackageCreateOriginEndpointHlsPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get constantInitializationVector(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.ConstantInitializationVector'),
        outputPath: 'HlsPackage.Encryption.ConstantInitializationVector',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.ConstantInitializationVector', props);
    return resource.getResponseField('HlsPackage.Encryption.ConstantInitializationVector') as unknown as string;
  }

  public get encryptionMethod(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.EncryptionMethod'),
        outputPath: 'HlsPackage.Encryption.EncryptionMethod',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.EncryptionMethod', props);
    return resource.getResponseField('HlsPackage.Encryption.EncryptionMethod') as unknown as string;
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'HlsPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('HlsPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get repeatExtXKey(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.RepeatExtXKey'),
        outputPath: 'HlsPackage.Encryption.RepeatExtXKey',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.RepeatExtXKey', props);
    return resource.getResponseField('HlsPackage.Encryption.RepeatExtXKey') as unknown as boolean;
  }

  public get spekeKeyProvider(): MediaPackageCreateOriginEndpointHlsPackageEncryptionSpekeKeyProvider {
    return new MediaPackageCreateOriginEndpointHlsPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageCreateOriginEndpointHlsPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointHlsPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'HlsPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('HlsPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'HlsPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('HlsPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.HlsPackage.StreamSelection.StreamOrder'),
        outputPath: 'HlsPackage.StreamSelection.StreamOrder',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.HlsPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('HlsPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointMssPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get encryption(): MediaPackageCreateOriginEndpointMssPackageEncryption {
    return new MediaPackageCreateOriginEndpointMssPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get manifestWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.ManifestWindowSeconds'),
        outputPath: 'MssPackage.ManifestWindowSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.ManifestWindowSeconds', props);
    return resource.getResponseField('MssPackage.ManifestWindowSeconds') as unknown as number;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.SegmentDurationSeconds'),
        outputPath: 'MssPackage.SegmentDurationSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('MssPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get streamSelection(): MediaPackageCreateOriginEndpointMssPackageStreamSelection {
    return new MediaPackageCreateOriginEndpointMssPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

}

export class MediaPackageCreateOriginEndpointMssPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get spekeKeyProvider(): MediaPackageCreateOriginEndpointMssPackageEncryptionSpekeKeyProvider {
    return new MediaPackageCreateOriginEndpointMssPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageCreateOriginEndpointMssPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageCreateOriginEndpointMssPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageCreateOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'MssPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('MssPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'MssPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('MssPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.CreateOriginEndpoint.MssPackage.StreamSelection.StreamOrder'),
        outputPath: 'MssPackage.StreamSelection.StreamOrder',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          ChannelId: this.input.channelId,
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          Tags: this.input.tags,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginEndpoint.MssPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('MssPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageDescribeChannel extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeChannelRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeChannel.Arn'),
        outputPath: 'Arn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeChannel.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeChannel.Description'),
        outputPath: 'Description',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeChannel.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get egressAccessLogs(): MediaPackageDescribeChannelEgressAccessLogs {
    return new MediaPackageDescribeChannelEgressAccessLogs(this, 'EgressAccessLogs', this.__resources, this.input);
  }

  public get hlsIngest(): MediaPackageDescribeChannelHlsIngest {
    return new MediaPackageDescribeChannelHlsIngest(this, 'HlsIngest', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeChannel.Id'),
        outputPath: 'Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeChannel.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get ingressAccessLogs(): MediaPackageDescribeChannelIngressAccessLogs {
    return new MediaPackageDescribeChannelIngressAccessLogs(this, 'IngressAccessLogs', this.__resources, this.input);
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeChannel.Tags'),
        outputPath: 'Tags',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeChannel.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaPackageDescribeChannelEgressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeChannelRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeChannel.EgressAccessLogs.LogGroupName'),
        outputPath: 'EgressAccessLogs.LogGroupName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeChannel.EgressAccessLogs.LogGroupName', props);
    return resource.getResponseField('EgressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageDescribeChannelHlsIngest extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeChannelRequest) {
    super(scope, id);
  }

  public get ingestEndpoints(): shapes.MediaPackageIngestEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeChannel.HlsIngest.IngestEndpoints'),
        outputPath: 'HlsIngest.IngestEndpoints',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeChannel.HlsIngest.IngestEndpoints', props);
    return resource.getResponseField('HlsIngest.IngestEndpoints') as unknown as shapes.MediaPackageIngestEndpoint[];
  }

}

export class MediaPackageDescribeChannelIngressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeChannelRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeChannel.IngressAccessLogs.LogGroupName'),
        outputPath: 'IngressAccessLogs.LogGroupName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeChannel.IngressAccessLogs.LogGroupName', props);
    return resource.getResponseField('IngressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageDescribeHarvestJob extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeHarvestJobRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.Arn'),
        outputPath: 'Arn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.ChannelId'),
        outputPath: 'ChannelId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.ChannelId', props);
    return resource.getResponseField('ChannelId') as unknown as string;
  }

  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.CreatedAt'),
        outputPath: 'CreatedAt',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.CreatedAt', props);
    return resource.getResponseField('CreatedAt') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.EndTime'),
        outputPath: 'EndTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.EndTime', props);
    return resource.getResponseField('EndTime') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.Id'),
        outputPath: 'Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get originEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.OriginEndpointId'),
        outputPath: 'OriginEndpointId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.OriginEndpointId', props);
    return resource.getResponseField('OriginEndpointId') as unknown as string;
  }

  public get s3Destination(): MediaPackageDescribeHarvestJobS3Destination {
    return new MediaPackageDescribeHarvestJobS3Destination(this, 'S3Destination', this.__resources, this.input);
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.Status'),
        outputPath: 'Status',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class MediaPackageDescribeHarvestJobS3Destination extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeHarvestJobRequest) {
    super(scope, id);
  }

  public get bucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.S3Destination.BucketName'),
        outputPath: 'S3Destination.BucketName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.S3Destination.BucketName', props);
    return resource.getResponseField('S3Destination.BucketName') as unknown as string;
  }

  public get manifestKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.S3Destination.ManifestKey'),
        outputPath: 'S3Destination.ManifestKey',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.S3Destination.ManifestKey', props);
    return resource.getResponseField('S3Destination.ManifestKey') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHarvestJob',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeHarvestJob.S3Destination.RoleArn'),
        outputPath: 'S3Destination.RoleArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHarvestJob.S3Destination.RoleArn', props);
    return resource.getResponseField('S3Destination.RoleArn') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Arn'),
        outputPath: 'Arn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get authorization(): MediaPackageDescribeOriginEndpointAuthorization {
    return new MediaPackageDescribeOriginEndpointAuthorization(this, 'Authorization', this.__resources, this.input);
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.ChannelId'),
        outputPath: 'ChannelId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.ChannelId', props);
    return resource.getResponseField('ChannelId') as unknown as string;
  }

  public get cmafPackage(): MediaPackageDescribeOriginEndpointCmafPackage {
    return new MediaPackageDescribeOriginEndpointCmafPackage(this, 'CmafPackage', this.__resources, this.input);
  }

  public get dashPackage(): MediaPackageDescribeOriginEndpointDashPackage {
    return new MediaPackageDescribeOriginEndpointDashPackage(this, 'DashPackage', this.__resources, this.input);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Description'),
        outputPath: 'Description',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get hlsPackage(): MediaPackageDescribeOriginEndpointHlsPackage {
    return new MediaPackageDescribeOriginEndpointHlsPackage(this, 'HlsPackage', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Id'),
        outputPath: 'Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get manifestName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.ManifestName'),
        outputPath: 'ManifestName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.ManifestName', props);
    return resource.getResponseField('ManifestName') as unknown as string;
  }

  public get mssPackage(): MediaPackageDescribeOriginEndpointMssPackage {
    return new MediaPackageDescribeOriginEndpointMssPackage(this, 'MssPackage', this.__resources, this.input);
  }

  public get origination(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Origination'),
        outputPath: 'Origination',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Origination', props);
    return resource.getResponseField('Origination') as unknown as string;
  }

  public get startoverWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.StartoverWindowSeconds'),
        outputPath: 'StartoverWindowSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.StartoverWindowSeconds', props);
    return resource.getResponseField('StartoverWindowSeconds') as unknown as number;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Tags'),
        outputPath: 'Tags',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

  public get timeDelaySeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.TimeDelaySeconds'),
        outputPath: 'TimeDelaySeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.TimeDelaySeconds', props);
    return resource.getResponseField('TimeDelaySeconds') as unknown as number;
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Url'),
        outputPath: 'Url',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Url', props);
    return resource.getResponseField('Url') as unknown as string;
  }

  public get whitelist(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Whitelist'),
        outputPath: 'Whitelist',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Whitelist', props);
    return resource.getResponseField('Whitelist') as unknown as string[];
  }

}

export class MediaPackageDescribeOriginEndpointAuthorization extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get cdnIdentifierSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Authorization.CdnIdentifierSecret'),
        outputPath: 'Authorization.CdnIdentifierSecret',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Authorization.CdnIdentifierSecret', props);
    return resource.getResponseField('Authorization.CdnIdentifierSecret') as unknown as string;
  }

  public get secretsRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.Authorization.SecretsRoleArn'),
        outputPath: 'Authorization.SecretsRoleArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.Authorization.SecretsRoleArn', props);
    return resource.getResponseField('Authorization.SecretsRoleArn') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointCmafPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get encryption(): MediaPackageDescribeOriginEndpointCmafPackageEncryption {
    return new MediaPackageDescribeOriginEndpointCmafPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get hlsManifests(): shapes.MediaPackageHlsManifest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.HlsManifests'),
        outputPath: 'CmafPackage.HlsManifests',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.HlsManifests', props);
    return resource.getResponseField('CmafPackage.HlsManifests') as unknown as shapes.MediaPackageHlsManifest[];
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.SegmentDurationSeconds'),
        outputPath: 'CmafPackage.SegmentDurationSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('CmafPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get segmentPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.SegmentPrefix'),
        outputPath: 'CmafPackage.SegmentPrefix',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.SegmentPrefix', props);
    return resource.getResponseField('CmafPackage.SegmentPrefix') as unknown as string;
  }

  public get streamSelection(): MediaPackageDescribeOriginEndpointCmafPackageStreamSelection {
    return new MediaPackageDescribeOriginEndpointCmafPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

}

export class MediaPackageDescribeOriginEndpointCmafPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'CmafPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('CmafPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get spekeKeyProvider(): MediaPackageDescribeOriginEndpointCmafPackageEncryptionSpekeKeyProvider {
    return new MediaPackageDescribeOriginEndpointCmafPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageDescribeOriginEndpointCmafPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointCmafPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'CmafPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('CmafPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'CmafPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('CmafPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.CmafPackage.StreamSelection.StreamOrder'),
        outputPath: 'CmafPackage.StreamSelection.StreamOrder',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.CmafPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('CmafPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointDashPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get adTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.AdTriggers'),
        outputPath: 'DashPackage.AdTriggers',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.AdTriggers', props);
    return resource.getResponseField('DashPackage.AdTriggers') as unknown as string[];
  }

  public get adsOnDeliveryRestrictions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.AdsOnDeliveryRestrictions'),
        outputPath: 'DashPackage.AdsOnDeliveryRestrictions',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.AdsOnDeliveryRestrictions', props);
    return resource.getResponseField('DashPackage.AdsOnDeliveryRestrictions') as unknown as string;
  }

  public get encryption(): MediaPackageDescribeOriginEndpointDashPackageEncryption {
    return new MediaPackageDescribeOriginEndpointDashPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get manifestLayout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.ManifestLayout'),
        outputPath: 'DashPackage.ManifestLayout',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.ManifestLayout', props);
    return resource.getResponseField('DashPackage.ManifestLayout') as unknown as string;
  }

  public get manifestWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.ManifestWindowSeconds'),
        outputPath: 'DashPackage.ManifestWindowSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.ManifestWindowSeconds', props);
    return resource.getResponseField('DashPackage.ManifestWindowSeconds') as unknown as number;
  }

  public get minBufferTimeSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.MinBufferTimeSeconds'),
        outputPath: 'DashPackage.MinBufferTimeSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.MinBufferTimeSeconds', props);
    return resource.getResponseField('DashPackage.MinBufferTimeSeconds') as unknown as number;
  }

  public get minUpdatePeriodSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.MinUpdatePeriodSeconds'),
        outputPath: 'DashPackage.MinUpdatePeriodSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.MinUpdatePeriodSeconds', props);
    return resource.getResponseField('DashPackage.MinUpdatePeriodSeconds') as unknown as number;
  }

  public get periodTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.PeriodTriggers'),
        outputPath: 'DashPackage.PeriodTriggers',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.PeriodTriggers', props);
    return resource.getResponseField('DashPackage.PeriodTriggers') as unknown as string[];
  }

  public get profile(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.Profile'),
        outputPath: 'DashPackage.Profile',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.Profile', props);
    return resource.getResponseField('DashPackage.Profile') as unknown as string;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.SegmentDurationSeconds'),
        outputPath: 'DashPackage.SegmentDurationSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('DashPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get segmentTemplateFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.SegmentTemplateFormat'),
        outputPath: 'DashPackage.SegmentTemplateFormat',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.SegmentTemplateFormat', props);
    return resource.getResponseField('DashPackage.SegmentTemplateFormat') as unknown as string;
  }

  public get streamSelection(): MediaPackageDescribeOriginEndpointDashPackageStreamSelection {
    return new MediaPackageDescribeOriginEndpointDashPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

  public get suggestedPresentationDelaySeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.SuggestedPresentationDelaySeconds'),
        outputPath: 'DashPackage.SuggestedPresentationDelaySeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.SuggestedPresentationDelaySeconds', props);
    return resource.getResponseField('DashPackage.SuggestedPresentationDelaySeconds') as unknown as number;
  }

  public get utcTiming(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.UtcTiming'),
        outputPath: 'DashPackage.UtcTiming',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.UtcTiming', props);
    return resource.getResponseField('DashPackage.UtcTiming') as unknown as string;
  }

  public get utcTimingUri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.UtcTimingUri'),
        outputPath: 'DashPackage.UtcTimingUri',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.UtcTimingUri', props);
    return resource.getResponseField('DashPackage.UtcTimingUri') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointDashPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'DashPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('DashPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get spekeKeyProvider(): MediaPackageDescribeOriginEndpointDashPackageEncryptionSpekeKeyProvider {
    return new MediaPackageDescribeOriginEndpointDashPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageDescribeOriginEndpointDashPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointDashPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'DashPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('DashPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'DashPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('DashPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.DashPackage.StreamSelection.StreamOrder'),
        outputPath: 'DashPackage.StreamSelection.StreamOrder',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.DashPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('DashPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointHlsPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get adMarkers(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.AdMarkers'),
        outputPath: 'HlsPackage.AdMarkers',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.AdMarkers', props);
    return resource.getResponseField('HlsPackage.AdMarkers') as unknown as string;
  }

  public get adTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.AdTriggers'),
        outputPath: 'HlsPackage.AdTriggers',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.AdTriggers', props);
    return resource.getResponseField('HlsPackage.AdTriggers') as unknown as string[];
  }

  public get adsOnDeliveryRestrictions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.AdsOnDeliveryRestrictions'),
        outputPath: 'HlsPackage.AdsOnDeliveryRestrictions',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.AdsOnDeliveryRestrictions', props);
    return resource.getResponseField('HlsPackage.AdsOnDeliveryRestrictions') as unknown as string;
  }

  public get encryption(): MediaPackageDescribeOriginEndpointHlsPackageEncryption {
    return new MediaPackageDescribeOriginEndpointHlsPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get includeIframeOnlyStream(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.IncludeIframeOnlyStream'),
        outputPath: 'HlsPackage.IncludeIframeOnlyStream',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.IncludeIframeOnlyStream', props);
    return resource.getResponseField('HlsPackage.IncludeIframeOnlyStream') as unknown as boolean;
  }

  public get playlistType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.PlaylistType'),
        outputPath: 'HlsPackage.PlaylistType',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.PlaylistType', props);
    return resource.getResponseField('HlsPackage.PlaylistType') as unknown as string;
  }

  public get playlistWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.PlaylistWindowSeconds'),
        outputPath: 'HlsPackage.PlaylistWindowSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.PlaylistWindowSeconds', props);
    return resource.getResponseField('HlsPackage.PlaylistWindowSeconds') as unknown as number;
  }

  public get programDateTimeIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.ProgramDateTimeIntervalSeconds'),
        outputPath: 'HlsPackage.ProgramDateTimeIntervalSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.ProgramDateTimeIntervalSeconds', props);
    return resource.getResponseField('HlsPackage.ProgramDateTimeIntervalSeconds') as unknown as number;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.SegmentDurationSeconds'),
        outputPath: 'HlsPackage.SegmentDurationSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('HlsPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get streamSelection(): MediaPackageDescribeOriginEndpointHlsPackageStreamSelection {
    return new MediaPackageDescribeOriginEndpointHlsPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

  public get useAudioRenditionGroup(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.UseAudioRenditionGroup'),
        outputPath: 'HlsPackage.UseAudioRenditionGroup',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.UseAudioRenditionGroup', props);
    return resource.getResponseField('HlsPackage.UseAudioRenditionGroup') as unknown as boolean;
  }

}

export class MediaPackageDescribeOriginEndpointHlsPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get constantInitializationVector(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.ConstantInitializationVector'),
        outputPath: 'HlsPackage.Encryption.ConstantInitializationVector',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.ConstantInitializationVector', props);
    return resource.getResponseField('HlsPackage.Encryption.ConstantInitializationVector') as unknown as string;
  }

  public get encryptionMethod(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.EncryptionMethod'),
        outputPath: 'HlsPackage.Encryption.EncryptionMethod',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.EncryptionMethod', props);
    return resource.getResponseField('HlsPackage.Encryption.EncryptionMethod') as unknown as string;
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'HlsPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('HlsPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get repeatExtXKey(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.RepeatExtXKey'),
        outputPath: 'HlsPackage.Encryption.RepeatExtXKey',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.RepeatExtXKey', props);
    return resource.getResponseField('HlsPackage.Encryption.RepeatExtXKey') as unknown as boolean;
  }

  public get spekeKeyProvider(): MediaPackageDescribeOriginEndpointHlsPackageEncryptionSpekeKeyProvider {
    return new MediaPackageDescribeOriginEndpointHlsPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageDescribeOriginEndpointHlsPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointHlsPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'HlsPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('HlsPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'HlsPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('HlsPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.HlsPackage.StreamSelection.StreamOrder'),
        outputPath: 'HlsPackage.StreamSelection.StreamOrder',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.HlsPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('HlsPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointMssPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get encryption(): MediaPackageDescribeOriginEndpointMssPackageEncryption {
    return new MediaPackageDescribeOriginEndpointMssPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get manifestWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.ManifestWindowSeconds'),
        outputPath: 'MssPackage.ManifestWindowSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.ManifestWindowSeconds', props);
    return resource.getResponseField('MssPackage.ManifestWindowSeconds') as unknown as number;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.SegmentDurationSeconds'),
        outputPath: 'MssPackage.SegmentDurationSeconds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('MssPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get streamSelection(): MediaPackageDescribeOriginEndpointMssPackageStreamSelection {
    return new MediaPackageDescribeOriginEndpointMssPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

}

export class MediaPackageDescribeOriginEndpointMssPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get spekeKeyProvider(): MediaPackageDescribeOriginEndpointMssPackageEncryptionSpekeKeyProvider {
    return new MediaPackageDescribeOriginEndpointMssPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageDescribeOriginEndpointMssPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageDescribeOriginEndpointMssPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageDescribeOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'MssPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('MssPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'MssPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('MssPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.DescribeOriginEndpoint.MssPackage.StreamSelection.StreamOrder'),
        outputPath: 'MssPackage.StreamSelection.StreamOrder',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOriginEndpoint.MssPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('MssPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageListChannels extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageListChannelsRequest) {
    super(scope, id);
  }

  public get channels(): shapes.MediaPackageChannel[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listChannels',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ListChannels.Channels'),
        outputPath: 'Channels',
        parameters: {
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListChannels.Channels', props);
    return resource.getResponseField('Channels') as unknown as shapes.MediaPackageChannel[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listChannels',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ListChannels.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListChannels.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaPackageListHarvestJobs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageListHarvestJobsRequest) {
    super(scope, id);
  }

  public get harvestJobs(): shapes.MediaPackageHarvestJob[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listHarvestJobs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ListHarvestJobs.HarvestJobs'),
        outputPath: 'HarvestJobs',
        parameters: {
          IncludeChannelId: this.input.includeChannelId,
          IncludeStatus: this.input.includeStatus,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListHarvestJobs.HarvestJobs', props);
    return resource.getResponseField('HarvestJobs') as unknown as shapes.MediaPackageHarvestJob[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listHarvestJobs',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ListHarvestJobs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          IncludeChannelId: this.input.includeChannelId,
          IncludeStatus: this.input.includeStatus,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListHarvestJobs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaPackageListOriginEndpoints extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageListOriginEndpointsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listOriginEndpoints',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ListOriginEndpoints.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ChannelId: this.input.channelId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListOriginEndpoints.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get originEndpoints(): shapes.MediaPackageOriginEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listOriginEndpoints',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ListOriginEndpoints.OriginEndpoints'),
        outputPath: 'OriginEndpoints',
        parameters: {
          ChannelId: this.input.channelId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListOriginEndpoints.OriginEndpoints', props);
    return resource.getResponseField('OriginEndpoints') as unknown as shapes.MediaPackageOriginEndpoint[];
  }

}

export class MediaPackageListTagsForResource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageListTagsForResourceRequest) {
    super(scope, id);
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listTagsForResource',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.ListTagsForResource.Tags'),
        outputPath: 'Tags',
        parameters: {
          ResourceArn: this.input.resourceArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListTagsForResource.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaPackageRotateChannelCredentials extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageRotateChannelCredentialsRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateChannelCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateChannelCredentials.Arn'),
        outputPath: 'Arn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateChannelCredentials.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateChannelCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateChannelCredentials.Description'),
        outputPath: 'Description',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateChannelCredentials.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get egressAccessLogs(): MediaPackageRotateChannelCredentialsEgressAccessLogs {
    return new MediaPackageRotateChannelCredentialsEgressAccessLogs(this, 'EgressAccessLogs', this.__resources, this.input);
  }

  public get hlsIngest(): MediaPackageRotateChannelCredentialsHlsIngest {
    return new MediaPackageRotateChannelCredentialsHlsIngest(this, 'HlsIngest', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateChannelCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateChannelCredentials.Id'),
        outputPath: 'Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateChannelCredentials.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get ingressAccessLogs(): MediaPackageRotateChannelCredentialsIngressAccessLogs {
    return new MediaPackageRotateChannelCredentialsIngressAccessLogs(this, 'IngressAccessLogs', this.__resources, this.input);
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateChannelCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateChannelCredentials.Tags'),
        outputPath: 'Tags',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateChannelCredentials.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaPackageRotateChannelCredentialsEgressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageRotateChannelCredentialsRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateChannelCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateChannelCredentials.EgressAccessLogs.LogGroupName'),
        outputPath: 'EgressAccessLogs.LogGroupName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateChannelCredentials.EgressAccessLogs.LogGroupName', props);
    return resource.getResponseField('EgressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageRotateChannelCredentialsHlsIngest extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageRotateChannelCredentialsRequest) {
    super(scope, id);
  }

  public get ingestEndpoints(): shapes.MediaPackageIngestEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateChannelCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateChannelCredentials.HlsIngest.IngestEndpoints'),
        outputPath: 'HlsIngest.IngestEndpoints',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateChannelCredentials.HlsIngest.IngestEndpoints', props);
    return resource.getResponseField('HlsIngest.IngestEndpoints') as unknown as shapes.MediaPackageIngestEndpoint[];
  }

}

export class MediaPackageRotateChannelCredentialsIngressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageRotateChannelCredentialsRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateChannelCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateChannelCredentials.IngressAccessLogs.LogGroupName'),
        outputPath: 'IngressAccessLogs.LogGroupName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateChannelCredentials.IngressAccessLogs.LogGroupName', props);
    return resource.getResponseField('IngressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageRotateIngestEndpointCredentials extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageRotateIngestEndpointCredentialsRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateIngestEndpointCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateIngestEndpointCredentials.Arn'),
        outputPath: 'Arn',
        parameters: {
          Id: this.input.id,
          IngestEndpointId: this.input.ingestEndpointId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateIngestEndpointCredentials.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateIngestEndpointCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateIngestEndpointCredentials.Description'),
        outputPath: 'Description',
        parameters: {
          Id: this.input.id,
          IngestEndpointId: this.input.ingestEndpointId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateIngestEndpointCredentials.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get egressAccessLogs(): MediaPackageRotateIngestEndpointCredentialsEgressAccessLogs {
    return new MediaPackageRotateIngestEndpointCredentialsEgressAccessLogs(this, 'EgressAccessLogs', this.__resources, this.input);
  }

  public get hlsIngest(): MediaPackageRotateIngestEndpointCredentialsHlsIngest {
    return new MediaPackageRotateIngestEndpointCredentialsHlsIngest(this, 'HlsIngest', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateIngestEndpointCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateIngestEndpointCredentials.Id'),
        outputPath: 'Id',
        parameters: {
          Id: this.input.id,
          IngestEndpointId: this.input.ingestEndpointId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateIngestEndpointCredentials.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get ingressAccessLogs(): MediaPackageRotateIngestEndpointCredentialsIngressAccessLogs {
    return new MediaPackageRotateIngestEndpointCredentialsIngressAccessLogs(this, 'IngressAccessLogs', this.__resources, this.input);
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateIngestEndpointCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateIngestEndpointCredentials.Tags'),
        outputPath: 'Tags',
        parameters: {
          Id: this.input.id,
          IngestEndpointId: this.input.ingestEndpointId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateIngestEndpointCredentials.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaPackageRotateIngestEndpointCredentialsEgressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageRotateIngestEndpointCredentialsRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateIngestEndpointCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateIngestEndpointCredentials.EgressAccessLogs.LogGroupName'),
        outputPath: 'EgressAccessLogs.LogGroupName',
        parameters: {
          Id: this.input.id,
          IngestEndpointId: this.input.ingestEndpointId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateIngestEndpointCredentials.EgressAccessLogs.LogGroupName', props);
    return resource.getResponseField('EgressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageRotateIngestEndpointCredentialsHlsIngest extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageRotateIngestEndpointCredentialsRequest) {
    super(scope, id);
  }

  public get ingestEndpoints(): shapes.MediaPackageIngestEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateIngestEndpointCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateIngestEndpointCredentials.HlsIngest.IngestEndpoints'),
        outputPath: 'HlsIngest.IngestEndpoints',
        parameters: {
          Id: this.input.id,
          IngestEndpointId: this.input.ingestEndpointId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateIngestEndpointCredentials.HlsIngest.IngestEndpoints', props);
    return resource.getResponseField('HlsIngest.IngestEndpoints') as unknown as shapes.MediaPackageIngestEndpoint[];
  }

}

export class MediaPackageRotateIngestEndpointCredentialsIngressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageRotateIngestEndpointCredentialsRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rotateIngestEndpointCredentials',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.RotateIngestEndpointCredentials.IngressAccessLogs.LogGroupName'),
        outputPath: 'IngressAccessLogs.LogGroupName',
        parameters: {
          Id: this.input.id,
          IngestEndpointId: this.input.ingestEndpointId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RotateIngestEndpointCredentials.IngressAccessLogs.LogGroupName', props);
    return resource.getResponseField('IngressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageUpdateChannel extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateChannelRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateChannel.Arn'),
        outputPath: 'Arn',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateChannel.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateChannel.Description'),
        outputPath: 'Description',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateChannel.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get egressAccessLogs(): MediaPackageUpdateChannelEgressAccessLogs {
    return new MediaPackageUpdateChannelEgressAccessLogs(this, 'EgressAccessLogs', this.__resources, this.input);
  }

  public get hlsIngest(): MediaPackageUpdateChannelHlsIngest {
    return new MediaPackageUpdateChannelHlsIngest(this, 'HlsIngest', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateChannel.Id'),
        outputPath: 'Id',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateChannel.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get ingressAccessLogs(): MediaPackageUpdateChannelIngressAccessLogs {
    return new MediaPackageUpdateChannelIngressAccessLogs(this, 'IngressAccessLogs', this.__resources, this.input);
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateChannel.Tags'),
        outputPath: 'Tags',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateChannel.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaPackageUpdateChannelEgressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateChannelRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateChannel.EgressAccessLogs.LogGroupName'),
        outputPath: 'EgressAccessLogs.LogGroupName',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateChannel.EgressAccessLogs.LogGroupName', props);
    return resource.getResponseField('EgressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageUpdateChannelHlsIngest extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateChannelRequest) {
    super(scope, id);
  }

  public get ingestEndpoints(): shapes.MediaPackageIngestEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateChannel.HlsIngest.IngestEndpoints'),
        outputPath: 'HlsIngest.IngestEndpoints',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateChannel.HlsIngest.IngestEndpoints', props);
    return resource.getResponseField('HlsIngest.IngestEndpoints') as unknown as shapes.MediaPackageIngestEndpoint[];
  }

}

export class MediaPackageUpdateChannelIngressAccessLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateChannelRequest) {
    super(scope, id);
  }

  public get logGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateChannel.IngressAccessLogs.LogGroupName'),
        outputPath: 'IngressAccessLogs.LogGroupName',
        parameters: {
          Description: this.input.description,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateChannel.IngressAccessLogs.LogGroupName', props);
    return resource.getResponseField('IngressAccessLogs.LogGroupName') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Arn'),
        outputPath: 'Arn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get authorization(): MediaPackageUpdateOriginEndpointAuthorization {
    return new MediaPackageUpdateOriginEndpointAuthorization(this, 'Authorization', this.__resources, this.input);
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.ChannelId'),
        outputPath: 'ChannelId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.ChannelId', props);
    return resource.getResponseField('ChannelId') as unknown as string;
  }

  public get cmafPackage(): MediaPackageUpdateOriginEndpointCmafPackage {
    return new MediaPackageUpdateOriginEndpointCmafPackage(this, 'CmafPackage', this.__resources, this.input);
  }

  public get dashPackage(): MediaPackageUpdateOriginEndpointDashPackage {
    return new MediaPackageUpdateOriginEndpointDashPackage(this, 'DashPackage', this.__resources, this.input);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Description'),
        outputPath: 'Description',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get hlsPackage(): MediaPackageUpdateOriginEndpointHlsPackage {
    return new MediaPackageUpdateOriginEndpointHlsPackage(this, 'HlsPackage', this.__resources, this.input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Id'),
        outputPath: 'Id',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get manifestName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.ManifestName'),
        outputPath: 'ManifestName',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.ManifestName', props);
    return resource.getResponseField('ManifestName') as unknown as string;
  }

  public get mssPackage(): MediaPackageUpdateOriginEndpointMssPackage {
    return new MediaPackageUpdateOriginEndpointMssPackage(this, 'MssPackage', this.__resources, this.input);
  }

  public get origination(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Origination'),
        outputPath: 'Origination',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Origination', props);
    return resource.getResponseField('Origination') as unknown as string;
  }

  public get startoverWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.StartoverWindowSeconds'),
        outputPath: 'StartoverWindowSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.StartoverWindowSeconds', props);
    return resource.getResponseField('StartoverWindowSeconds') as unknown as number;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Tags'),
        outputPath: 'Tags',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

  public get timeDelaySeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.TimeDelaySeconds'),
        outputPath: 'TimeDelaySeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.TimeDelaySeconds', props);
    return resource.getResponseField('TimeDelaySeconds') as unknown as number;
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Url'),
        outputPath: 'Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Url', props);
    return resource.getResponseField('Url') as unknown as string;
  }

  public get whitelist(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Whitelist'),
        outputPath: 'Whitelist',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Whitelist', props);
    return resource.getResponseField('Whitelist') as unknown as string[];
  }

}

export class MediaPackageUpdateOriginEndpointAuthorization extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get cdnIdentifierSecret(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Authorization.CdnIdentifierSecret'),
        outputPath: 'Authorization.CdnIdentifierSecret',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Authorization.CdnIdentifierSecret', props);
    return resource.getResponseField('Authorization.CdnIdentifierSecret') as unknown as string;
  }

  public get secretsRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.Authorization.SecretsRoleArn'),
        outputPath: 'Authorization.SecretsRoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.Authorization.SecretsRoleArn', props);
    return resource.getResponseField('Authorization.SecretsRoleArn') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointCmafPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get encryption(): MediaPackageUpdateOriginEndpointCmafPackageEncryption {
    return new MediaPackageUpdateOriginEndpointCmafPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get hlsManifests(): shapes.MediaPackageHlsManifest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.HlsManifests'),
        outputPath: 'CmafPackage.HlsManifests',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.HlsManifests', props);
    return resource.getResponseField('CmafPackage.HlsManifests') as unknown as shapes.MediaPackageHlsManifest[];
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.SegmentDurationSeconds'),
        outputPath: 'CmafPackage.SegmentDurationSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('CmafPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get segmentPrefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.SegmentPrefix'),
        outputPath: 'CmafPackage.SegmentPrefix',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.SegmentPrefix', props);
    return resource.getResponseField('CmafPackage.SegmentPrefix') as unknown as string;
  }

  public get streamSelection(): MediaPackageUpdateOriginEndpointCmafPackageStreamSelection {
    return new MediaPackageUpdateOriginEndpointCmafPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

}

export class MediaPackageUpdateOriginEndpointCmafPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'CmafPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('CmafPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get spekeKeyProvider(): MediaPackageUpdateOriginEndpointCmafPackageEncryptionSpekeKeyProvider {
    return new MediaPackageUpdateOriginEndpointCmafPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageUpdateOriginEndpointCmafPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'CmafPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('CmafPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointCmafPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'CmafPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('CmafPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'CmafPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('CmafPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.CmafPackage.StreamSelection.StreamOrder'),
        outputPath: 'CmafPackage.StreamSelection.StreamOrder',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.CmafPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('CmafPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointDashPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get adTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.AdTriggers'),
        outputPath: 'DashPackage.AdTriggers',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.AdTriggers', props);
    return resource.getResponseField('DashPackage.AdTriggers') as unknown as string[];
  }

  public get adsOnDeliveryRestrictions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.AdsOnDeliveryRestrictions'),
        outputPath: 'DashPackage.AdsOnDeliveryRestrictions',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.AdsOnDeliveryRestrictions', props);
    return resource.getResponseField('DashPackage.AdsOnDeliveryRestrictions') as unknown as string;
  }

  public get encryption(): MediaPackageUpdateOriginEndpointDashPackageEncryption {
    return new MediaPackageUpdateOriginEndpointDashPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get manifestLayout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.ManifestLayout'),
        outputPath: 'DashPackage.ManifestLayout',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.ManifestLayout', props);
    return resource.getResponseField('DashPackage.ManifestLayout') as unknown as string;
  }

  public get manifestWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.ManifestWindowSeconds'),
        outputPath: 'DashPackage.ManifestWindowSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.ManifestWindowSeconds', props);
    return resource.getResponseField('DashPackage.ManifestWindowSeconds') as unknown as number;
  }

  public get minBufferTimeSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.MinBufferTimeSeconds'),
        outputPath: 'DashPackage.MinBufferTimeSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.MinBufferTimeSeconds', props);
    return resource.getResponseField('DashPackage.MinBufferTimeSeconds') as unknown as number;
  }

  public get minUpdatePeriodSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.MinUpdatePeriodSeconds'),
        outputPath: 'DashPackage.MinUpdatePeriodSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.MinUpdatePeriodSeconds', props);
    return resource.getResponseField('DashPackage.MinUpdatePeriodSeconds') as unknown as number;
  }

  public get periodTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.PeriodTriggers'),
        outputPath: 'DashPackage.PeriodTriggers',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.PeriodTriggers', props);
    return resource.getResponseField('DashPackage.PeriodTriggers') as unknown as string[];
  }

  public get profile(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.Profile'),
        outputPath: 'DashPackage.Profile',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.Profile', props);
    return resource.getResponseField('DashPackage.Profile') as unknown as string;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.SegmentDurationSeconds'),
        outputPath: 'DashPackage.SegmentDurationSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('DashPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get segmentTemplateFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.SegmentTemplateFormat'),
        outputPath: 'DashPackage.SegmentTemplateFormat',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.SegmentTemplateFormat', props);
    return resource.getResponseField('DashPackage.SegmentTemplateFormat') as unknown as string;
  }

  public get streamSelection(): MediaPackageUpdateOriginEndpointDashPackageStreamSelection {
    return new MediaPackageUpdateOriginEndpointDashPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

  public get suggestedPresentationDelaySeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.SuggestedPresentationDelaySeconds'),
        outputPath: 'DashPackage.SuggestedPresentationDelaySeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.SuggestedPresentationDelaySeconds', props);
    return resource.getResponseField('DashPackage.SuggestedPresentationDelaySeconds') as unknown as number;
  }

  public get utcTiming(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.UtcTiming'),
        outputPath: 'DashPackage.UtcTiming',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.UtcTiming', props);
    return resource.getResponseField('DashPackage.UtcTiming') as unknown as string;
  }

  public get utcTimingUri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.UtcTimingUri'),
        outputPath: 'DashPackage.UtcTimingUri',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.UtcTimingUri', props);
    return resource.getResponseField('DashPackage.UtcTimingUri') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointDashPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'DashPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('DashPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get spekeKeyProvider(): MediaPackageUpdateOriginEndpointDashPackageEncryptionSpekeKeyProvider {
    return new MediaPackageUpdateOriginEndpointDashPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageUpdateOriginEndpointDashPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'DashPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('DashPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointDashPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'DashPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('DashPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'DashPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('DashPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.DashPackage.StreamSelection.StreamOrder'),
        outputPath: 'DashPackage.StreamSelection.StreamOrder',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.DashPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('DashPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointHlsPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get adMarkers(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.AdMarkers'),
        outputPath: 'HlsPackage.AdMarkers',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.AdMarkers', props);
    return resource.getResponseField('HlsPackage.AdMarkers') as unknown as string;
  }

  public get adTriggers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.AdTriggers'),
        outputPath: 'HlsPackage.AdTriggers',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.AdTriggers', props);
    return resource.getResponseField('HlsPackage.AdTriggers') as unknown as string[];
  }

  public get adsOnDeliveryRestrictions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.AdsOnDeliveryRestrictions'),
        outputPath: 'HlsPackage.AdsOnDeliveryRestrictions',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.AdsOnDeliveryRestrictions', props);
    return resource.getResponseField('HlsPackage.AdsOnDeliveryRestrictions') as unknown as string;
  }

  public get encryption(): MediaPackageUpdateOriginEndpointHlsPackageEncryption {
    return new MediaPackageUpdateOriginEndpointHlsPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get includeIframeOnlyStream(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.IncludeIframeOnlyStream'),
        outputPath: 'HlsPackage.IncludeIframeOnlyStream',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.IncludeIframeOnlyStream', props);
    return resource.getResponseField('HlsPackage.IncludeIframeOnlyStream') as unknown as boolean;
  }

  public get playlistType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.PlaylistType'),
        outputPath: 'HlsPackage.PlaylistType',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.PlaylistType', props);
    return resource.getResponseField('HlsPackage.PlaylistType') as unknown as string;
  }

  public get playlistWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.PlaylistWindowSeconds'),
        outputPath: 'HlsPackage.PlaylistWindowSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.PlaylistWindowSeconds', props);
    return resource.getResponseField('HlsPackage.PlaylistWindowSeconds') as unknown as number;
  }

  public get programDateTimeIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.ProgramDateTimeIntervalSeconds'),
        outputPath: 'HlsPackage.ProgramDateTimeIntervalSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.ProgramDateTimeIntervalSeconds', props);
    return resource.getResponseField('HlsPackage.ProgramDateTimeIntervalSeconds') as unknown as number;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.SegmentDurationSeconds'),
        outputPath: 'HlsPackage.SegmentDurationSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('HlsPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get streamSelection(): MediaPackageUpdateOriginEndpointHlsPackageStreamSelection {
    return new MediaPackageUpdateOriginEndpointHlsPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

  public get useAudioRenditionGroup(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.UseAudioRenditionGroup'),
        outputPath: 'HlsPackage.UseAudioRenditionGroup',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.UseAudioRenditionGroup', props);
    return resource.getResponseField('HlsPackage.UseAudioRenditionGroup') as unknown as boolean;
  }

}

export class MediaPackageUpdateOriginEndpointHlsPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get constantInitializationVector(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.ConstantInitializationVector'),
        outputPath: 'HlsPackage.Encryption.ConstantInitializationVector',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.ConstantInitializationVector', props);
    return resource.getResponseField('HlsPackage.Encryption.ConstantInitializationVector') as unknown as string;
  }

  public get encryptionMethod(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.EncryptionMethod'),
        outputPath: 'HlsPackage.Encryption.EncryptionMethod',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.EncryptionMethod', props);
    return resource.getResponseField('HlsPackage.Encryption.EncryptionMethod') as unknown as string;
  }

  public get keyRotationIntervalSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.KeyRotationIntervalSeconds'),
        outputPath: 'HlsPackage.Encryption.KeyRotationIntervalSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.KeyRotationIntervalSeconds', props);
    return resource.getResponseField('HlsPackage.Encryption.KeyRotationIntervalSeconds') as unknown as number;
  }

  public get repeatExtXKey(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.RepeatExtXKey'),
        outputPath: 'HlsPackage.Encryption.RepeatExtXKey',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.RepeatExtXKey', props);
    return resource.getResponseField('HlsPackage.Encryption.RepeatExtXKey') as unknown as boolean;
  }

  public get spekeKeyProvider(): MediaPackageUpdateOriginEndpointHlsPackageEncryptionSpekeKeyProvider {
    return new MediaPackageUpdateOriginEndpointHlsPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageUpdateOriginEndpointHlsPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'HlsPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('HlsPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointHlsPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'HlsPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('HlsPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'HlsPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('HlsPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.HlsPackage.StreamSelection.StreamOrder'),
        outputPath: 'HlsPackage.StreamSelection.StreamOrder',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.HlsPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('HlsPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointMssPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get encryption(): MediaPackageUpdateOriginEndpointMssPackageEncryption {
    return new MediaPackageUpdateOriginEndpointMssPackageEncryption(this, 'Encryption', this.__resources, this.input);
  }

  public get manifestWindowSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.ManifestWindowSeconds'),
        outputPath: 'MssPackage.ManifestWindowSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.ManifestWindowSeconds', props);
    return resource.getResponseField('MssPackage.ManifestWindowSeconds') as unknown as number;
  }

  public get segmentDurationSeconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.SegmentDurationSeconds'),
        outputPath: 'MssPackage.SegmentDurationSeconds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.SegmentDurationSeconds', props);
    return resource.getResponseField('MssPackage.SegmentDurationSeconds') as unknown as number;
  }

  public get streamSelection(): MediaPackageUpdateOriginEndpointMssPackageStreamSelection {
    return new MediaPackageUpdateOriginEndpointMssPackageStreamSelection(this, 'StreamSelection', this.__resources, this.input);
  }

}

export class MediaPackageUpdateOriginEndpointMssPackageEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get spekeKeyProvider(): MediaPackageUpdateOriginEndpointMssPackageEncryptionSpekeKeyProvider {
    return new MediaPackageUpdateOriginEndpointMssPackageEncryptionSpekeKeyProvider(this, 'SpekeKeyProvider', this.__resources, this.input);
  }

}

export class MediaPackageUpdateOriginEndpointMssPackageEncryptionSpekeKeyProvider extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.CertificateArn'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.CertificateArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.CertificateArn', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.CertificateArn') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.ResourceId'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.ResourceId',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.ResourceId', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.ResourceId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.RoleArn'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.RoleArn',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.RoleArn', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.RoleArn') as unknown as string;
  }

  public get systemIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.SystemIds'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.SystemIds',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.SystemIds', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.SystemIds') as unknown as string[];
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.Url'),
        outputPath: 'MssPackage.Encryption.SpekeKeyProvider.Url',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.Encryption.SpekeKeyProvider.Url', props);
    return resource.getResponseField('MssPackage.Encryption.SpekeKeyProvider.Url') as unknown as string;
  }

}

export class MediaPackageUpdateOriginEndpointMssPackageStreamSelection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.MediaPackageUpdateOriginEndpointRequest) {
    super(scope, id);
  }

  public get maxVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.StreamSelection.MaxVideoBitsPerSecond'),
        outputPath: 'MssPackage.StreamSelection.MaxVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.StreamSelection.MaxVideoBitsPerSecond', props);
    return resource.getResponseField('MssPackage.StreamSelection.MaxVideoBitsPerSecond') as unknown as number;
  }

  public get minVideoBitsPerSecond(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.StreamSelection.MinVideoBitsPerSecond'),
        outputPath: 'MssPackage.StreamSelection.MinVideoBitsPerSecond',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.StreamSelection.MinVideoBitsPerSecond', props);
    return resource.getResponseField('MssPackage.StreamSelection.MinVideoBitsPerSecond') as unknown as number;
  }

  public get streamOrder(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginEndpoint',
        service: 'MediaPackage',
        physicalResourceId: cr.PhysicalResourceId.of('MediaPackage.UpdateOriginEndpoint.MssPackage.StreamSelection.StreamOrder'),
        outputPath: 'MssPackage.StreamSelection.StreamOrder',
        parameters: {
          Authorization: {
            CdnIdentifierSecret: this.input.authorization?.cdnIdentifierSecret,
            SecretsRoleArn: this.input.authorization?.secretsRoleArn,
          },
          CmafPackage: {
            Encryption: {
              KeyRotationIntervalSeconds: this.input.cmafPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.cmafPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.cmafPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.cmafPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.cmafPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            HlsManifests: this.input.cmafPackage?.hlsManifests,
            SegmentDurationSeconds: this.input.cmafPackage?.segmentDurationSeconds,
            SegmentPrefix: this.input.cmafPackage?.segmentPrefix,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.cmafPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.cmafPackage?.streamSelection?.streamOrder,
            },
          },
          DashPackage: {
            AdTriggers: this.input.dashPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.dashPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              KeyRotationIntervalSeconds: this.input.dashPackage?.encryption?.keyRotationIntervalSeconds,
              SpekeKeyProvider: {
                CertificateArn: this.input.dashPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.dashPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.dashPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.dashPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.dashPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestLayout: this.input.dashPackage?.manifestLayout,
            ManifestWindowSeconds: this.input.dashPackage?.manifestWindowSeconds,
            MinBufferTimeSeconds: this.input.dashPackage?.minBufferTimeSeconds,
            MinUpdatePeriodSeconds: this.input.dashPackage?.minUpdatePeriodSeconds,
            PeriodTriggers: this.input.dashPackage?.periodTriggers,
            Profile: this.input.dashPackage?.profile,
            SegmentDurationSeconds: this.input.dashPackage?.segmentDurationSeconds,
            SegmentTemplateFormat: this.input.dashPackage?.segmentTemplateFormat,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.dashPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.dashPackage?.streamSelection?.streamOrder,
            },
            SuggestedPresentationDelaySeconds: this.input.dashPackage?.suggestedPresentationDelaySeconds,
            UtcTiming: this.input.dashPackage?.utcTiming,
            UtcTimingUri: this.input.dashPackage?.utcTimingUri,
          },
          Description: this.input.description,
          HlsPackage: {
            AdMarkers: this.input.hlsPackage?.adMarkers,
            AdTriggers: this.input.hlsPackage?.adTriggers,
            AdsOnDeliveryRestrictions: this.input.hlsPackage?.adsOnDeliveryRestrictions,
            Encryption: {
              ConstantInitializationVector: this.input.hlsPackage?.encryption?.constantInitializationVector,
              EncryptionMethod: this.input.hlsPackage?.encryption?.encryptionMethod,
              KeyRotationIntervalSeconds: this.input.hlsPackage?.encryption?.keyRotationIntervalSeconds,
              RepeatExtXKey: this.input.hlsPackage?.encryption?.repeatExtXKey,
              SpekeKeyProvider: {
                CertificateArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.hlsPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.hlsPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.hlsPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.hlsPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            IncludeIframeOnlyStream: this.input.hlsPackage?.includeIframeOnlyStream,
            PlaylistType: this.input.hlsPackage?.playlistType,
            PlaylistWindowSeconds: this.input.hlsPackage?.playlistWindowSeconds,
            ProgramDateTimeIntervalSeconds: this.input.hlsPackage?.programDateTimeIntervalSeconds,
            SegmentDurationSeconds: this.input.hlsPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.hlsPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.hlsPackage?.streamSelection?.streamOrder,
            },
            UseAudioRenditionGroup: this.input.hlsPackage?.useAudioRenditionGroup,
          },
          Id: this.input.id,
          ManifestName: this.input.manifestName,
          MssPackage: {
            Encryption: {
              SpekeKeyProvider: {
                CertificateArn: this.input.mssPackage?.encryption?.spekeKeyProvider.certificateArn,
                ResourceId: this.input.mssPackage?.encryption?.spekeKeyProvider.resourceId,
                RoleArn: this.input.mssPackage?.encryption?.spekeKeyProvider.roleArn,
                SystemIds: this.input.mssPackage?.encryption?.spekeKeyProvider.systemIds,
                Url: this.input.mssPackage?.encryption?.spekeKeyProvider.url,
              },
            },
            ManifestWindowSeconds: this.input.mssPackage?.manifestWindowSeconds,
            SegmentDurationSeconds: this.input.mssPackage?.segmentDurationSeconds,
            StreamSelection: {
              MaxVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.maxVideoBitsPerSecond,
              MinVideoBitsPerSecond: this.input.mssPackage?.streamSelection?.minVideoBitsPerSecond,
              StreamOrder: this.input.mssPackage?.streamSelection?.streamOrder,
            },
          },
          Origination: this.input.origination,
          StartoverWindowSeconds: this.input.startoverWindowSeconds,
          TimeDelaySeconds: this.input.timeDelaySeconds,
          Whitelist: this.input.whitelist,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginEndpoint.MssPackage.StreamSelection.StreamOrder', props);
    return resource.getResponseField('MssPackage.StreamSelection.StreamOrder') as unknown as string;
  }

}

