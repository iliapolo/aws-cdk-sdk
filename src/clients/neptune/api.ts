import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class NeptuneClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public addRoleToDbCluster(input: shapes.NeptuneAddRoleToDbClusterMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addRoleToDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddRoleToDBCluster'),
        parameters: {
          DBClusterIdentifier: input.dbClusterIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddRoleToDBCluster', props);
  }

  public addSourceIdentifierToSubscription(input: shapes.NeptuneAddSourceIdentifierToSubscriptionMessage): NeptuneResponsesAddSourceIdentifierToSubscription {
    return new NeptuneResponsesAddSourceIdentifierToSubscription(this, this.__resources, input);
  }

  public addTagsToResource(input: shapes.NeptuneAddTagsToResourceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addTagsToResource',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddTagsToResource'),
        parameters: {
          ResourceName: input.resourceName,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddTagsToResource', props);
  }

  public applyPendingMaintenanceAction(input: shapes.NeptuneApplyPendingMaintenanceActionMessage): NeptuneResponsesApplyPendingMaintenanceAction {
    return new NeptuneResponsesApplyPendingMaintenanceAction(this, this.__resources, input);
  }

  public copyDbClusterParameterGroup(input: shapes.NeptuneCopyDbClusterParameterGroupMessage): NeptuneResponsesCopyDbClusterParameterGroup {
    return new NeptuneResponsesCopyDbClusterParameterGroup(this, this.__resources, input);
  }

  public copyDbClusterSnapshot(input: shapes.NeptuneCopyDbClusterSnapshotMessage): NeptuneResponsesCopyDbClusterSnapshot {
    return new NeptuneResponsesCopyDbClusterSnapshot(this, this.__resources, input);
  }

  public copyDbParameterGroup(input: shapes.NeptuneCopyDbParameterGroupMessage): NeptuneResponsesCopyDbParameterGroup {
    return new NeptuneResponsesCopyDbParameterGroup(this, this.__resources, input);
  }

  public createDbCluster(input: shapes.NeptuneCreateDbClusterMessage): NeptuneResponsesCreateDbCluster {
    return new NeptuneResponsesCreateDbCluster(this, this.__resources, input);
  }

  public createDbClusterEndpoint(input: shapes.NeptuneCreateDbClusterEndpointMessage): NeptuneResponsesCreateDbClusterEndpoint {
    return new NeptuneResponsesCreateDbClusterEndpoint(this, this.__resources, input);
  }

  public createDbClusterParameterGroup(input: shapes.NeptuneCreateDbClusterParameterGroupMessage): NeptuneResponsesCreateDbClusterParameterGroup {
    return new NeptuneResponsesCreateDbClusterParameterGroup(this, this.__resources, input);
  }

  public createDbClusterSnapshot(input: shapes.NeptuneCreateDbClusterSnapshotMessage): NeptuneResponsesCreateDbClusterSnapshot {
    return new NeptuneResponsesCreateDbClusterSnapshot(this, this.__resources, input);
  }

  public createDbInstance(input: shapes.NeptuneCreateDbInstanceMessage): NeptuneResponsesCreateDbInstance {
    return new NeptuneResponsesCreateDbInstance(this, this.__resources, input);
  }

  public createDbParameterGroup(input: shapes.NeptuneCreateDbParameterGroupMessage): NeptuneResponsesCreateDbParameterGroup {
    return new NeptuneResponsesCreateDbParameterGroup(this, this.__resources, input);
  }

  public createDbSubnetGroup(input: shapes.NeptuneCreateDbSubnetGroupMessage): NeptuneResponsesCreateDbSubnetGroup {
    return new NeptuneResponsesCreateDbSubnetGroup(this, this.__resources, input);
  }

  public createEventSubscription(input: shapes.NeptuneCreateEventSubscriptionMessage): NeptuneResponsesCreateEventSubscription {
    return new NeptuneResponsesCreateEventSubscription(this, this.__resources, input);
  }

  public deleteDbCluster(input: shapes.NeptuneDeleteDbClusterMessage): NeptuneResponsesDeleteDbCluster {
    return new NeptuneResponsesDeleteDbCluster(this, this.__resources, input);
  }

  public deleteDbClusterEndpoint(input: shapes.NeptuneDeleteDbClusterEndpointMessage): NeptuneResponsesDeleteDbClusterEndpoint {
    return new NeptuneResponsesDeleteDbClusterEndpoint(this, this.__resources, input);
  }

  public deleteDbClusterParameterGroup(input: shapes.NeptuneDeleteDbClusterParameterGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterParameterGroup'),
        parameters: {
          DBClusterParameterGroupName: input.dbClusterParameterGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBClusterParameterGroup', props);
  }

  public deleteDbClusterSnapshot(input: shapes.NeptuneDeleteDbClusterSnapshotMessage): NeptuneResponsesDeleteDbClusterSnapshot {
    return new NeptuneResponsesDeleteDbClusterSnapshot(this, this.__resources, input);
  }

  public deleteDbInstance(input: shapes.NeptuneDeleteDbInstanceMessage): NeptuneResponsesDeleteDbInstance {
    return new NeptuneResponsesDeleteDbInstance(this, this.__resources, input);
  }

  public deleteDbParameterGroup(input: shapes.NeptuneDeleteDbParameterGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBParameterGroup'),
        parameters: {
          DBParameterGroupName: input.dbParameterGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBParameterGroup', props);
  }

  public deleteDbSubnetGroup(input: shapes.NeptuneDeleteDbSubnetGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBSubnetGroup'),
        parameters: {
          DBSubnetGroupName: input.dbSubnetGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBSubnetGroup', props);
  }

  public deleteEventSubscription(input: shapes.NeptuneDeleteEventSubscriptionMessage): NeptuneResponsesDeleteEventSubscription {
    return new NeptuneResponsesDeleteEventSubscription(this, this.__resources, input);
  }

  public describeDbClusterEndpoints(input: shapes.NeptuneDescribeDbClusterEndpointsMessage): NeptuneResponsesDescribeDbClusterEndpoints {
    return new NeptuneResponsesDescribeDbClusterEndpoints(this, this.__resources, input);
  }

  public describeDbClusterParameterGroups(input: shapes.NeptuneDescribeDbClusterParameterGroupsMessage): NeptuneResponsesDescribeDbClusterParameterGroups {
    return new NeptuneResponsesDescribeDbClusterParameterGroups(this, this.__resources, input);
  }

  public describeDbClusterParameters(input: shapes.NeptuneDescribeDbClusterParametersMessage): NeptuneResponsesDescribeDbClusterParameters {
    return new NeptuneResponsesDescribeDbClusterParameters(this, this.__resources, input);
  }

  public describeDbClusterSnapshotAttributes(input: shapes.NeptuneDescribeDbClusterSnapshotAttributesMessage): NeptuneResponsesDescribeDbClusterSnapshotAttributes {
    return new NeptuneResponsesDescribeDbClusterSnapshotAttributes(this, this.__resources, input);
  }

  public describeDbClusterSnapshots(input: shapes.NeptuneDescribeDbClusterSnapshotsMessage): NeptuneResponsesDescribeDbClusterSnapshots {
    return new NeptuneResponsesDescribeDbClusterSnapshots(this, this.__resources, input);
  }

  public describeDbClusters(input: shapes.NeptuneDescribeDbClustersMessage): NeptuneResponsesDescribeDbClusters {
    return new NeptuneResponsesDescribeDbClusters(this, this.__resources, input);
  }

  public describeDbEngineVersions(input: shapes.NeptuneDescribeDbEngineVersionsMessage): NeptuneResponsesDescribeDbEngineVersions {
    return new NeptuneResponsesDescribeDbEngineVersions(this, this.__resources, input);
  }

  public describeDbInstances(input: shapes.NeptuneDescribeDbInstancesMessage): NeptuneResponsesDescribeDbInstances {
    return new NeptuneResponsesDescribeDbInstances(this, this.__resources, input);
  }

  public describeDbParameterGroups(input: shapes.NeptuneDescribeDbParameterGroupsMessage): NeptuneResponsesDescribeDbParameterGroups {
    return new NeptuneResponsesDescribeDbParameterGroups(this, this.__resources, input);
  }

  public describeDbParameters(input: shapes.NeptuneDescribeDbParametersMessage): NeptuneResponsesDescribeDbParameters {
    return new NeptuneResponsesDescribeDbParameters(this, this.__resources, input);
  }

  public describeDbSubnetGroups(input: shapes.NeptuneDescribeDbSubnetGroupsMessage): NeptuneResponsesDescribeDbSubnetGroups {
    return new NeptuneResponsesDescribeDbSubnetGroups(this, this.__resources, input);
  }

  public describeEngineDefaultClusterParameters(input: shapes.NeptuneDescribeEngineDefaultClusterParametersMessage): NeptuneResponsesDescribeEngineDefaultClusterParameters {
    return new NeptuneResponsesDescribeEngineDefaultClusterParameters(this, this.__resources, input);
  }

  public describeEngineDefaultParameters(input: shapes.NeptuneDescribeEngineDefaultParametersMessage): NeptuneResponsesDescribeEngineDefaultParameters {
    return new NeptuneResponsesDescribeEngineDefaultParameters(this, this.__resources, input);
  }

  public describeEventCategories(input: shapes.NeptuneDescribeEventCategoriesMessage): NeptuneResponsesDescribeEventCategories {
    return new NeptuneResponsesDescribeEventCategories(this, this.__resources, input);
  }

  public describeEventSubscriptions(input: shapes.NeptuneDescribeEventSubscriptionsMessage): NeptuneResponsesDescribeEventSubscriptions {
    return new NeptuneResponsesDescribeEventSubscriptions(this, this.__resources, input);
  }

  public describeEvents(input: shapes.NeptuneDescribeEventsMessage): NeptuneResponsesDescribeEvents {
    return new NeptuneResponsesDescribeEvents(this, this.__resources, input);
  }

  public describeOrderableDbInstanceOptions(input: shapes.NeptuneDescribeOrderableDbInstanceOptionsMessage): NeptuneResponsesDescribeOrderableDbInstanceOptions {
    return new NeptuneResponsesDescribeOrderableDbInstanceOptions(this, this.__resources, input);
  }

  public describePendingMaintenanceActions(input: shapes.NeptuneDescribePendingMaintenanceActionsMessage): NeptuneResponsesDescribePendingMaintenanceActions {
    return new NeptuneResponsesDescribePendingMaintenanceActions(this, this.__resources, input);
  }

  public describeValidDbInstanceModifications(input: shapes.NeptuneDescribeValidDbInstanceModificationsMessage): NeptuneResponsesDescribeValidDbInstanceModifications {
    return new NeptuneResponsesDescribeValidDbInstanceModifications(this, this.__resources, input);
  }

  public failoverDbCluster(input: shapes.NeptuneFailoverDbClusterMessage): NeptuneResponsesFailoverDbCluster {
    return new NeptuneResponsesFailoverDbCluster(this, this.__resources, input);
  }

  public listTagsForResource(input: shapes.NeptuneListTagsForResourceMessage): NeptuneResponsesListTagsForResource {
    return new NeptuneResponsesListTagsForResource(this, this.__resources, input);
  }

  public modifyDbCluster(input: shapes.NeptuneModifyDbClusterMessage): NeptuneResponsesModifyDbCluster {
    return new NeptuneResponsesModifyDbCluster(this, this.__resources, input);
  }

  public modifyDbClusterEndpoint(input: shapes.NeptuneModifyDbClusterEndpointMessage): NeptuneResponsesModifyDbClusterEndpoint {
    return new NeptuneResponsesModifyDbClusterEndpoint(this, this.__resources, input);
  }

  public modifyDbClusterParameterGroup(input: shapes.NeptuneModifyDbClusterParameterGroupMessage): NeptuneResponsesModifyDbClusterParameterGroup {
    return new NeptuneResponsesModifyDbClusterParameterGroup(this, this.__resources, input);
  }

  public modifyDbClusterSnapshotAttribute(input: shapes.NeptuneModifyDbClusterSnapshotAttributeMessage): NeptuneResponsesModifyDbClusterSnapshotAttribute {
    return new NeptuneResponsesModifyDbClusterSnapshotAttribute(this, this.__resources, input);
  }

  public modifyDbInstance(input: shapes.NeptuneModifyDbInstanceMessage): NeptuneResponsesModifyDbInstance {
    return new NeptuneResponsesModifyDbInstance(this, this.__resources, input);
  }

  public modifyDbParameterGroup(input: shapes.NeptuneModifyDbParameterGroupMessage): NeptuneResponsesModifyDbParameterGroup {
    return new NeptuneResponsesModifyDbParameterGroup(this, this.__resources, input);
  }

  public modifyDbSubnetGroup(input: shapes.NeptuneModifyDbSubnetGroupMessage): NeptuneResponsesModifyDbSubnetGroup {
    return new NeptuneResponsesModifyDbSubnetGroup(this, this.__resources, input);
  }

  public modifyEventSubscription(input: shapes.NeptuneModifyEventSubscriptionMessage): NeptuneResponsesModifyEventSubscription {
    return new NeptuneResponsesModifyEventSubscription(this, this.__resources, input);
  }

  public promoteReadReplicaDbCluster(input: shapes.NeptunePromoteReadReplicaDbClusterMessage): NeptuneResponsesPromoteReadReplicaDbCluster {
    return new NeptuneResponsesPromoteReadReplicaDbCluster(this, this.__resources, input);
  }

  public rebootDbInstance(input: shapes.NeptuneRebootDbInstanceMessage): NeptuneResponsesRebootDbInstance {
    return new NeptuneResponsesRebootDbInstance(this, this.__resources, input);
  }

  public removeRoleFromDbCluster(input: shapes.NeptuneRemoveRoleFromDbClusterMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeRoleFromDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveRoleFromDBCluster'),
        parameters: {
          DBClusterIdentifier: input.dbClusterIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveRoleFromDBCluster', props);
  }

  public removeSourceIdentifierFromSubscription(input: shapes.NeptuneRemoveSourceIdentifierFromSubscriptionMessage): NeptuneResponsesRemoveSourceIdentifierFromSubscription {
    return new NeptuneResponsesRemoveSourceIdentifierFromSubscription(this, this.__resources, input);
  }

  public removeTagsFromResource(input: shapes.NeptuneRemoveTagsFromResourceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeTagsFromResource',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveTagsFromResource'),
        parameters: {
          ResourceName: input.resourceName,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveTagsFromResource', props);
  }

  public resetDbClusterParameterGroup(input: shapes.NeptuneResetDbClusterParameterGroupMessage): NeptuneResponsesResetDbClusterParameterGroup {
    return new NeptuneResponsesResetDbClusterParameterGroup(this, this.__resources, input);
  }

  public resetDbParameterGroup(input: shapes.NeptuneResetDbParameterGroupMessage): NeptuneResponsesResetDbParameterGroup {
    return new NeptuneResponsesResetDbParameterGroup(this, this.__resources, input);
  }

  public restoreDbClusterFromSnapshot(input: shapes.NeptuneRestoreDbClusterFromSnapshotMessage): NeptuneResponsesRestoreDbClusterFromSnapshot {
    return new NeptuneResponsesRestoreDbClusterFromSnapshot(this, this.__resources, input);
  }

  public restoreDbClusterToPointInTime(input: shapes.NeptuneRestoreDbClusterToPointInTimeMessage): NeptuneResponsesRestoreDbClusterToPointInTime {
    return new NeptuneResponsesRestoreDbClusterToPointInTime(this, this.__resources, input);
  }

  public startDbCluster(input: shapes.NeptuneStartDbClusterMessage): NeptuneResponsesStartDbCluster {
    return new NeptuneResponsesStartDbCluster(this, this.__resources, input);
  }

  public stopDbCluster(input: shapes.NeptuneStopDbClusterMessage): NeptuneResponsesStopDbCluster {
    return new NeptuneResponsesStopDbCluster(this, this.__resources, input);
  }

}

export class NeptuneResponsesAddSourceIdentifierToSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneAddSourceIdentifierToSubscriptionMessage) {
  }

  public get eventSubscription(): NeptuneResponsesAddSourceIdentifierToSubscriptionEventSubscription {
    return new NeptuneResponsesAddSourceIdentifierToSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesAddSourceIdentifierToSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneAddSourceIdentifierToSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.AddSourceIdentifierToSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class NeptuneResponsesApplyPendingMaintenanceAction {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneApplyPendingMaintenanceActionMessage) {
  }

  public get resourcePendingMaintenanceActions(): NeptuneResponsesApplyPendingMaintenanceActionResourcePendingMaintenanceActions {
    return new NeptuneResponsesApplyPendingMaintenanceActionResourcePendingMaintenanceActions(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesApplyPendingMaintenanceActionResourcePendingMaintenanceActions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneApplyPendingMaintenanceActionMessage) {
  }

  public get resourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'applyPendingMaintenanceAction',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.ResourceIdentifier'),
        outputPath: 'ResourcePendingMaintenanceActions.ResourceIdentifier',
        parameters: {
          ResourceIdentifier: this.__input.resourceIdentifier,
          ApplyAction: this.__input.applyAction,
          OptInType: this.__input.optInType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.ResourceIdentifier', props);
    return resource.getResponseField('ResourcePendingMaintenanceActions.ResourceIdentifier') as unknown as string;
  }

  public get pendingMaintenanceActionDetails(): shapes.NeptunePendingMaintenanceAction[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'applyPendingMaintenanceAction',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails'),
        outputPath: 'ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails',
        parameters: {
          ResourceIdentifier: this.__input.resourceIdentifier,
          ApplyAction: this.__input.applyAction,
          OptInType: this.__input.optInType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails', props);
    return resource.getResponseField('ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails') as unknown as shapes.NeptunePendingMaintenanceAction[];
  }

}

export class NeptuneResponsesCopyDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCopyDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroup(): NeptuneResponsesCopyDbClusterParameterGroupDbClusterParameterGroup {
    return new NeptuneResponsesCopyDbClusterParameterGroupDbClusterParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCopyDbClusterParameterGroupDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCopyDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupName',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.__input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.__input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.__input.targetDbClusterParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBClusterParameterGroup.DBParameterGroupFamily',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.__input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.__input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.__input.targetDbClusterParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBClusterParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterParameterGroup.DBClusterParameterGroup.Description'),
        outputPath: 'DBClusterParameterGroup.Description',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.__input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.__input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.__input.targetDbClusterParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.Description', props);
    return resource.getResponseField('DBClusterParameterGroup.Description') as unknown as string;
  }

  public get dbClusterParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupArn',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.__input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.__input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.__input.targetDbClusterParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesCopyDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCopyDbClusterSnapshotMessage) {
  }

  public get dbClusterSnapshot(): NeptuneResponsesCopyDbClusterSnapshotDbClusterSnapshot {
    return new NeptuneResponsesCopyDbClusterSnapshotDbClusterSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCopyDbClusterSnapshotDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCopyDbClusterSnapshotMessage) {
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

}

export class NeptuneResponsesCopyDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCopyDbParameterGroupMessage) {
  }

  public get dbParameterGroup(): NeptuneResponsesCopyDbParameterGroupDbParameterGroup {
    return new NeptuneResponsesCopyDbParameterGroupDbParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCopyDbParameterGroupDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCopyDbParameterGroupMessage) {
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroup.DBParameterGroupName',
        parameters: {
          SourceDBParameterGroupIdentifier: this.__input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.__input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.__input.targetDbParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBParameterGroup.DBParameterGroupFamily',
        parameters: {
          SourceDBParameterGroupIdentifier: this.__input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.__input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.__input.targetDbParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBParameterGroup.DBParameterGroup.Description'),
        outputPath: 'DBParameterGroup.Description',
        parameters: {
          SourceDBParameterGroupIdentifier: this.__input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.__input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.__input.targetDbParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBParameterGroup.DBParameterGroup.Description', props);
    return resource.getResponseField('DBParameterGroup.Description') as unknown as string;
  }

  public get dbParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupArn'),
        outputPath: 'DBParameterGroup.DBParameterGroupArn',
        parameters: {
          SourceDBParameterGroupIdentifier: this.__input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.__input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.__input.targetDbParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupArn', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesCreateDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbClusterMessage) {
  }

  public get dbCluster(): NeptuneResponsesCreateDbClusterDbCluster {
    return new NeptuneResponsesCreateDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCreateDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBCluster.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

export class NeptuneResponsesCreateDbClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbClusterEndpointMessage) {
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class NeptuneResponsesCreateDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroup(): NeptuneResponsesCreateDbClusterParameterGroupDbClusterParameterGroup {
    return new NeptuneResponsesCreateDbClusterParameterGroupDbClusterParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCreateDbClusterParameterGroupDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBClusterParameterGroup.DBParameterGroupFamily',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBClusterParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterParameterGroup.DBClusterParameterGroup.Description'),
        outputPath: 'DBClusterParameterGroup.Description',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.Description', props);
    return resource.getResponseField('DBClusterParameterGroup.Description') as unknown as string;
  }

  public get dbClusterParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupArn',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesCreateDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbClusterSnapshotMessage) {
  }

  public get dbClusterSnapshot(): NeptuneResponsesCreateDbClusterSnapshotDbClusterSnapshot {
    return new NeptuneResponsesCreateDbClusterSnapshotDbClusterSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCreateDbClusterSnapshotDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbClusterSnapshotMessage) {
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

}

export class NeptuneResponsesCreateDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbInstanceMessage) {
  }

  public get dbInstance(): NeptuneResponsesCreateDbInstanceDbInstance {
    return new NeptuneResponsesCreateDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCreateDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): NeptuneResponsesCreateDbInstanceDbInstanceEndpoint {
    return new NeptuneResponsesCreateDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.NeptuneDbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.NeptuneDbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.NeptuneDbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.NeptuneDbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): NeptuneResponsesCreateDbInstanceDbInstanceDbSubnetGroup {
    return new NeptuneResponsesCreateDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): NeptuneResponsesCreateDbInstanceDbInstancePendingModifiedValues {
    return new NeptuneResponsesCreateDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.NeptuneOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.NeptuneOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.NeptuneDbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.NeptuneDbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.NeptuneDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.NeptuneDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

}

export class NeptuneResponsesCreateDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class NeptuneResponsesCreateDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.NeptuneSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.NeptuneSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesCreateDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): NeptuneResponsesCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new NeptuneResponsesCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class NeptuneResponsesCreateDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbParameterGroupMessage) {
  }

  public get dbParameterGroup(): NeptuneResponsesCreateDbParameterGroupDbParameterGroup {
    return new NeptuneResponsesCreateDbParameterGroupDbParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCreateDbParameterGroupDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbParameterGroupMessage) {
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroup.DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBParameterGroup.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBParameterGroup.DBParameterGroup.Description'),
        outputPath: 'DBParameterGroup.Description',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBParameterGroup.DBParameterGroup.Description', props);
    return resource.getResponseField('DBParameterGroup.Description') as unknown as string;
  }

  public get dbParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupArn'),
        outputPath: 'DBParameterGroup.DBParameterGroupArn',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupArn', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesCreateDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbSubnetGroupMessage) {
  }

  public get dbSubnetGroup(): NeptuneResponsesCreateDbSubnetGroupDbSubnetGroup {
    return new NeptuneResponsesCreateDbSubnetGroupDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCreateDbSubnetGroupDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateDbSubnetGroupMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBSubnetGroup.DBSubnetGroup.VpcId'),
        outputPath: 'DBSubnetGroup.VpcId',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.NeptuneSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBSubnetGroup.DBSubnetGroup.Subnets'),
        outputPath: 'DBSubnetGroup.Subnets',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBSubnetGroup.Subnets') as unknown as shapes.NeptuneSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesCreateEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateEventSubscriptionMessage) {
  }

  public get eventSubscription(): NeptuneResponsesCreateEventSubscriptionEventSubscription {
    return new NeptuneResponsesCreateEventSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesCreateEventSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneCreateEventSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.CreateEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class NeptuneResponsesDeleteDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbClusterMessage) {
  }

  public get dbCluster(): NeptuneResponsesDeleteDbClusterDbCluster {
    return new NeptuneResponsesDeleteDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDeleteDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBCluster.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

export class NeptuneResponsesDeleteDbClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbClusterEndpointMessage) {
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class NeptuneResponsesDeleteDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbClusterSnapshotMessage) {
  }

  public get dbClusterSnapshot(): NeptuneResponsesDeleteDbClusterSnapshotDbClusterSnapshot {
    return new NeptuneResponsesDeleteDbClusterSnapshotDbClusterSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDeleteDbClusterSnapshotDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbClusterSnapshotMessage) {
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

}

export class NeptuneResponsesDeleteDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbInstanceMessage) {
  }

  public get dbInstance(): NeptuneResponsesDeleteDbInstanceDbInstance {
    return new NeptuneResponsesDeleteDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDeleteDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): NeptuneResponsesDeleteDbInstanceDbInstanceEndpoint {
    return new NeptuneResponsesDeleteDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.NeptuneDbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.NeptuneDbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.NeptuneDbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.NeptuneDbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): NeptuneResponsesDeleteDbInstanceDbInstanceDbSubnetGroup {
    return new NeptuneResponsesDeleteDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): NeptuneResponsesDeleteDbInstanceDbInstancePendingModifiedValues {
    return new NeptuneResponsesDeleteDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.NeptuneOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.NeptuneOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.NeptuneDbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.NeptuneDbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.NeptuneDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.NeptuneDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

}

export class NeptuneResponsesDeleteDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class NeptuneResponsesDeleteDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.NeptuneSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.NeptuneSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesDeleteDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): NeptuneResponsesDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new NeptuneResponsesDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class NeptuneResponsesDeleteEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteEventSubscriptionMessage) {
  }

  public get eventSubscription(): NeptuneResponsesDeleteEventSubscriptionEventSubscription {
    return new NeptuneResponsesDeleteEventSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDeleteEventSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDeleteEventSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DeleteEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class NeptuneResponsesDescribeDbClusterEndpoints {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbClusterEndpointsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterEndpoints',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterEndpoints.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterEndpoints.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterEndpoints(): shapes.NeptuneDbClusterEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterEndpoints',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterEndpoints.DBClusterEndpoints'),
        outputPath: 'DBClusterEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterEndpoints.DBClusterEndpoints', props);
    return resource.getResponseField('DBClusterEndpoints') as unknown as shapes.NeptuneDbClusterEndpoint[];
  }

}

export class NeptuneResponsesDescribeDbClusterParameterGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbClusterParameterGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameterGroups',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterParameterGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterParameterGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterParameterGroups(): shapes.NeptuneDbClusterParameterGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameterGroups',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterParameterGroups.DBClusterParameterGroups'),
        outputPath: 'DBClusterParameterGroups',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterParameterGroups.DBClusterParameterGroups', props);
    return resource.getResponseField('DBClusterParameterGroups') as unknown as shapes.NeptuneDbClusterParameterGroup[];
  }

}

export class NeptuneResponsesDescribeDbClusterParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbClusterParametersMessage) {
  }

  public get parameters(): shapes.NeptuneParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterParameters.Parameters'),
        outputPath: 'Parameters',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Source: this.__input.source,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterParameters.Parameters', props);
    return resource.getResponseField('Parameters') as unknown as shapes.NeptuneParameter[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterParameters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Source: this.__input.source,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterParameters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class NeptuneResponsesDescribeDbClusterSnapshotAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbClusterSnapshotAttributesMessage) {
  }

  public get dbClusterSnapshotAttributesResult(): NeptuneResponsesDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult {
    return new NeptuneResponsesDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbClusterSnapshotAttributesMessage) {
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshotAttributes',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterSnapshotAttributes(): shapes.NeptuneDbClusterSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshotAttributes',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes') as unknown as shapes.NeptuneDbClusterSnapshotAttribute[];
  }

}

export class NeptuneResponsesDescribeDbClusterSnapshots {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbClusterSnapshotsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshots',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterSnapshots.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          SnapshotType: this.__input.snapshotType,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          IncludeShared: this.__input.includeShared,
          IncludePublic: this.__input.includePublic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterSnapshots.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterSnapshots(): shapes.NeptuneDbClusterSnapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshots',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusterSnapshots.DBClusterSnapshots'),
        outputPath: 'DBClusterSnapshots',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          SnapshotType: this.__input.snapshotType,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          IncludeShared: this.__input.includeShared,
          IncludePublic: this.__input.includePublic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterSnapshots.DBClusterSnapshots', props);
    return resource.getResponseField('DBClusterSnapshots') as unknown as shapes.NeptuneDbClusterSnapshot[];
  }

}

export class NeptuneResponsesDescribeDbClusters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbClustersMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusters(): shapes.NeptuneDbCluster[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBClusters.DBClusters'),
        outputPath: 'DBClusters',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusters.DBClusters', props);
    return resource.getResponseField('DBClusters') as unknown as shapes.NeptuneDbCluster[];
  }

}

export class NeptuneResponsesDescribeDbEngineVersions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbEngineVersionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbEngineVersions',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBEngineVersions.Marker'),
        outputPath: 'Marker',
        parameters: {
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          DefaultOnly: this.__input.defaultOnly,
          ListSupportedCharacterSets: this.__input.listSupportedCharacterSets,
          ListSupportedTimezones: this.__input.listSupportedTimezones,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBEngineVersions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbEngineVersions(): shapes.NeptuneDbEngineVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbEngineVersions',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBEngineVersions.DBEngineVersions'),
        outputPath: 'DBEngineVersions',
        parameters: {
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          DefaultOnly: this.__input.defaultOnly,
          ListSupportedCharacterSets: this.__input.listSupportedCharacterSets,
          ListSupportedTimezones: this.__input.listSupportedTimezones,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBEngineVersions.DBEngineVersions', props);
    return resource.getResponseField('DBEngineVersions') as unknown as shapes.NeptuneDbEngineVersion[];
  }

}

export class NeptuneResponsesDescribeDbInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbInstancesMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstances',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBInstances.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBInstances.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbInstances(): shapes.NeptuneDbInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstances',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBInstances.DBInstances'),
        outputPath: 'DBInstances',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBInstances.DBInstances', props);
    return resource.getResponseField('DBInstances') as unknown as shapes.NeptuneDbInstance[];
  }

}

export class NeptuneResponsesDescribeDbParameterGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbParameterGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameterGroups',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBParameterGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBParameterGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbParameterGroups(): shapes.NeptuneDbParameterGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameterGroups',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBParameterGroups.DBParameterGroups'),
        outputPath: 'DBParameterGroups',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBParameterGroups.DBParameterGroups', props);
    return resource.getResponseField('DBParameterGroups') as unknown as shapes.NeptuneDbParameterGroup[];
  }

}

export class NeptuneResponsesDescribeDbParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbParametersMessage) {
  }

  public get parameters(): shapes.NeptuneParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBParameters.Parameters'),
        outputPath: 'Parameters',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Source: this.__input.source,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBParameters.Parameters', props);
    return resource.getResponseField('Parameters') as unknown as shapes.NeptuneParameter[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBParameters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Source: this.__input.source,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBParameters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class NeptuneResponsesDescribeDbSubnetGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeDbSubnetGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSubnetGroups',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBSubnetGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSubnetGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbSubnetGroups(): shapes.NeptuneDbSubnetGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSubnetGroups',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeDBSubnetGroups.DBSubnetGroups'),
        outputPath: 'DBSubnetGroups',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSubnetGroups.DBSubnetGroups', props);
    return resource.getResponseField('DBSubnetGroups') as unknown as shapes.NeptuneDbSubnetGroup[];
  }

}

export class NeptuneResponsesDescribeEngineDefaultClusterParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeEngineDefaultClusterParametersMessage) {
  }

  public get engineDefaults(): NeptuneResponsesDescribeEngineDefaultClusterParametersEngineDefaults {
    return new NeptuneResponsesDescribeEngineDefaultClusterParametersEngineDefaults(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDescribeEngineDefaultClusterParametersEngineDefaults {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeEngineDefaultClusterParametersMessage) {
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEngineDefaultClusterParameters.EngineDefaults.DBParameterGroupFamily'),
        outputPath: 'EngineDefaults.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultClusterParameters.EngineDefaults.DBParameterGroupFamily', props);
    return resource.getResponseField('EngineDefaults.DBParameterGroupFamily') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEngineDefaultClusterParameters.EngineDefaults.Marker'),
        outputPath: 'EngineDefaults.Marker',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultClusterParameters.EngineDefaults.Marker', props);
    return resource.getResponseField('EngineDefaults.Marker') as unknown as string;
  }

  public get parameters(): shapes.NeptuneParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEngineDefaultClusterParameters.EngineDefaults.Parameters'),
        outputPath: 'EngineDefaults.Parameters',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultClusterParameters.EngineDefaults.Parameters', props);
    return resource.getResponseField('EngineDefaults.Parameters') as unknown as shapes.NeptuneParameter[];
  }

}

export class NeptuneResponsesDescribeEngineDefaultParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeEngineDefaultParametersMessage) {
  }

  public get engineDefaults(): NeptuneResponsesDescribeEngineDefaultParametersEngineDefaults {
    return new NeptuneResponsesDescribeEngineDefaultParametersEngineDefaults(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDescribeEngineDefaultParametersEngineDefaults {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeEngineDefaultParametersMessage) {
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEngineDefaultParameters.EngineDefaults.DBParameterGroupFamily'),
        outputPath: 'EngineDefaults.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultParameters.EngineDefaults.DBParameterGroupFamily', props);
    return resource.getResponseField('EngineDefaults.DBParameterGroupFamily') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEngineDefaultParameters.EngineDefaults.Marker'),
        outputPath: 'EngineDefaults.Marker',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultParameters.EngineDefaults.Marker', props);
    return resource.getResponseField('EngineDefaults.Marker') as unknown as string;
  }

  public get parameters(): shapes.NeptuneParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEngineDefaultParameters.EngineDefaults.Parameters'),
        outputPath: 'EngineDefaults.Parameters',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultParameters.EngineDefaults.Parameters', props);
    return resource.getResponseField('EngineDefaults.Parameters') as unknown as shapes.NeptuneParameter[];
  }

}

export class NeptuneResponsesDescribeEventCategories {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeEventCategoriesMessage) {
  }

  public get eventCategoriesMapList(): shapes.NeptuneEventCategoriesMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventCategories',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEventCategories.EventCategoriesMapList'),
        outputPath: 'EventCategoriesMapList',
        parameters: {
          SourceType: this.__input.sourceType,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventCategories.EventCategoriesMapList', props);
    return resource.getResponseField('EventCategoriesMapList') as unknown as shapes.NeptuneEventCategoriesMap[];
  }

}

export class NeptuneResponsesDescribeEventSubscriptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeEventSubscriptionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEventSubscriptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventSubscriptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get eventSubscriptionsList(): shapes.NeptuneEventSubscription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEventSubscriptions.EventSubscriptionsList'),
        outputPath: 'EventSubscriptionsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventSubscriptions.EventSubscriptionsList', props);
    return resource.getResponseField('EventSubscriptionsList') as unknown as shapes.NeptuneEventSubscription[];
  }

}

export class NeptuneResponsesDescribeEvents {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeEventsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEvents.Marker'),
        outputPath: 'Marker',
        parameters: {
          SourceIdentifier: this.__input.sourceIdentifier,
          SourceType: this.__input.sourceType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Duration: this.__input.duration,
          EventCategories: this.__input.eventCategories,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEvents.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get events(): shapes.NeptuneEvent[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeEvents.Events'),
        outputPath: 'Events',
        parameters: {
          SourceIdentifier: this.__input.sourceIdentifier,
          SourceType: this.__input.sourceType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Duration: this.__input.duration,
          EventCategories: this.__input.eventCategories,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEvents.Events', props);
    return resource.getResponseField('Events') as unknown as shapes.NeptuneEvent[];
  }

}

export class NeptuneResponsesDescribeOrderableDbInstanceOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeOrderableDbInstanceOptionsMessage) {
  }

  public get orderableDbInstanceOptions(): shapes.NeptuneOrderableDbInstanceOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableDbInstanceOptions',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeOrderableDBInstanceOptions.OrderableDBInstanceOptions'),
        outputPath: 'OrderableDBInstanceOptions',
        parameters: {
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DBInstanceClass: this.__input.dbInstanceClass,
          LicenseModel: this.__input.licenseModel,
          Vpc: this.__input.vpc,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOrderableDBInstanceOptions.OrderableDBInstanceOptions', props);
    return resource.getResponseField('OrderableDBInstanceOptions') as unknown as shapes.NeptuneOrderableDbInstanceOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableDbInstanceOptions',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeOrderableDBInstanceOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DBInstanceClass: this.__input.dbInstanceClass,
          LicenseModel: this.__input.licenseModel,
          Vpc: this.__input.vpc,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOrderableDBInstanceOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class NeptuneResponsesDescribePendingMaintenanceActions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribePendingMaintenanceActionsMessage) {
  }

  public get pendingMaintenanceActions(): shapes.NeptuneResourcePendingMaintenanceActions[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePendingMaintenanceActions',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribePendingMaintenanceActions.PendingMaintenanceActions'),
        outputPath: 'PendingMaintenanceActions',
        parameters: {
          ResourceIdentifier: this.__input.resourceIdentifier,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePendingMaintenanceActions.PendingMaintenanceActions', props);
    return resource.getResponseField('PendingMaintenanceActions') as unknown as shapes.NeptuneResourcePendingMaintenanceActions[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePendingMaintenanceActions',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribePendingMaintenanceActions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ResourceIdentifier: this.__input.resourceIdentifier,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePendingMaintenanceActions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class NeptuneResponsesDescribeValidDbInstanceModifications {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeValidDbInstanceModificationsMessage) {
  }

  public get validDbInstanceModificationsMessage(): NeptuneResponsesDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage {
    return new NeptuneResponsesDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneDescribeValidDbInstanceModificationsMessage) {
  }

  public get storage(): shapes.NeptuneValidStorageOptions[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeValidDbInstanceModifications',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.Storage'),
        outputPath: 'ValidDBInstanceModificationsMessage.Storage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.Storage', props);
    return resource.getResponseField('ValidDBInstanceModificationsMessage.Storage') as unknown as shapes.NeptuneValidStorageOptions[];
  }

}

export class NeptuneResponsesFailoverDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneFailoverDbClusterMessage) {
  }

  public get dbCluster(): NeptuneResponsesFailoverDbClusterDbCluster {
    return new NeptuneResponsesFailoverDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesFailoverDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneFailoverDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.FailoverDBCluster.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

export class NeptuneResponsesListTagsForResource {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneListTagsForResourceMessage) {
  }

  public get tagList(): shapes.NeptuneTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listTagsForResource',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ListTagsForResource.TagList'),
        outputPath: 'TagList',
        parameters: {
          ResourceName: this.__input.resourceName,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListTagsForResource.TagList', props);
    return resource.getResponseField('TagList') as unknown as shapes.NeptuneTag[];
  }

}

export class NeptuneResponsesModifyDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbClusterMessage) {
  }

  public get dbCluster(): NeptuneResponsesModifyDbClusterDbCluster {
    return new NeptuneResponsesModifyDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesModifyDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBCluster.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

export class NeptuneResponsesModifyDbClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbClusterEndpointMessage) {
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class NeptuneResponsesModifyDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroupName') as unknown as string;
  }

}

export class NeptuneResponsesModifyDbClusterSnapshotAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbClusterSnapshotAttributeMessage) {
  }

  public get dbClusterSnapshotAttributesResult(): NeptuneResponsesModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult {
    return new NeptuneResponsesModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbClusterSnapshotAttributeMessage) {
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterSnapshotAttribute',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          AttributeName: this.__input.attributeName,
          ValuesToAdd: this.__input.valuesToAdd,
          ValuesToRemove: this.__input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterSnapshotAttributes(): shapes.NeptuneDbClusterSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterSnapshotAttribute',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          AttributeName: this.__input.attributeName,
          ValuesToAdd: this.__input.valuesToAdd,
          ValuesToRemove: this.__input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes') as unknown as shapes.NeptuneDbClusterSnapshotAttribute[];
  }

}

export class NeptuneResponsesModifyDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbInstanceMessage) {
  }

  public get dbInstance(): NeptuneResponsesModifyDbInstanceDbInstance {
    return new NeptuneResponsesModifyDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesModifyDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): NeptuneResponsesModifyDbInstanceDbInstanceEndpoint {
    return new NeptuneResponsesModifyDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.NeptuneDbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.NeptuneDbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.NeptuneDbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.NeptuneDbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): NeptuneResponsesModifyDbInstanceDbInstanceDbSubnetGroup {
    return new NeptuneResponsesModifyDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): NeptuneResponsesModifyDbInstanceDbInstancePendingModifiedValues {
    return new NeptuneResponsesModifyDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.NeptuneOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.NeptuneOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.NeptuneDbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.NeptuneDbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.NeptuneDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.NeptuneDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

}

export class NeptuneResponsesModifyDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class NeptuneResponsesModifyDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.NeptuneSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.NeptuneSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesModifyDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): NeptuneResponsesModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new NeptuneResponsesModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class NeptuneResponsesModifyDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbParameterGroupMessage) {
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroupName') as unknown as string;
  }

}

export class NeptuneResponsesModifyDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbSubnetGroupMessage) {
  }

  public get dbSubnetGroup(): NeptuneResponsesModifyDbSubnetGroupDbSubnetGroup {
    return new NeptuneResponsesModifyDbSubnetGroupDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesModifyDbSubnetGroupDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyDbSubnetGroupMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBSubnetGroup.DBSubnetGroup.VpcId'),
        outputPath: 'DBSubnetGroup.VpcId',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.NeptuneSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBSubnetGroup.DBSubnetGroup.Subnets'),
        outputPath: 'DBSubnetGroup.Subnets',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBSubnetGroup.Subnets') as unknown as shapes.NeptuneSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesModifyEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyEventSubscriptionMessage) {
  }

  public get eventSubscription(): NeptuneResponsesModifyEventSubscriptionEventSubscription {
    return new NeptuneResponsesModifyEventSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesModifyEventSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneModifyEventSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ModifyEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class NeptuneResponsesPromoteReadReplicaDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptunePromoteReadReplicaDbClusterMessage) {
  }

  public get dbCluster(): NeptuneResponsesPromoteReadReplicaDbClusterDbCluster {
    return new NeptuneResponsesPromoteReadReplicaDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesPromoteReadReplicaDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptunePromoteReadReplicaDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.PromoteReadReplicaDBCluster.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

export class NeptuneResponsesRebootDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRebootDbInstanceMessage) {
  }

  public get dbInstance(): NeptuneResponsesRebootDbInstanceDbInstance {
    return new NeptuneResponsesRebootDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesRebootDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRebootDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): NeptuneResponsesRebootDbInstanceDbInstanceEndpoint {
    return new NeptuneResponsesRebootDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.NeptuneDbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.NeptuneDbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.NeptuneDbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.NeptuneDbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): NeptuneResponsesRebootDbInstanceDbInstanceDbSubnetGroup {
    return new NeptuneResponsesRebootDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): NeptuneResponsesRebootDbInstanceDbInstancePendingModifiedValues {
    return new NeptuneResponsesRebootDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.NeptuneOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.NeptuneOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.NeptuneDbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.NeptuneDbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.NeptuneDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.NeptuneDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

}

export class NeptuneResponsesRebootDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRebootDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class NeptuneResponsesRebootDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRebootDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.NeptuneSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.NeptuneSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class NeptuneResponsesRebootDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRebootDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): NeptuneResponsesRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new NeptuneResponsesRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRebootDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class NeptuneResponsesRemoveSourceIdentifierFromSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRemoveSourceIdentifierFromSubscriptionMessage) {
  }

  public get eventSubscription(): NeptuneResponsesRemoveSourceIdentifierFromSubscriptionEventSubscription {
    return new NeptuneResponsesRemoveSourceIdentifierFromSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesRemoveSourceIdentifierFromSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRemoveSourceIdentifierFromSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RemoveSourceIdentifierFromSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class NeptuneResponsesResetDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneResetDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetDbClusterParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ResetDBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          ResetAllParameters: this.__input.resetAllParameters,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetDBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroupName') as unknown as string;
  }

}

export class NeptuneResponsesResetDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneResetDbParameterGroupMessage) {
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetDbParameterGroup',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.ResetDBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          ResetAllParameters: this.__input.resetAllParameters,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetDBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroupName') as unknown as string;
  }

}

export class NeptuneResponsesRestoreDbClusterFromSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRestoreDbClusterFromSnapshotMessage) {
  }

  public get dbCluster(): NeptuneResponsesRestoreDbClusterFromSnapshotDbCluster {
    return new NeptuneResponsesRestoreDbClusterFromSnapshotDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesRestoreDbClusterFromSnapshotDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRestoreDbClusterFromSnapshotMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterFromSnapshot.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

export class NeptuneResponsesRestoreDbClusterToPointInTime {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRestoreDbClusterToPointInTimeMessage) {
  }

  public get dbCluster(): NeptuneResponsesRestoreDbClusterToPointInTimeDbCluster {
    return new NeptuneResponsesRestoreDbClusterToPointInTimeDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesRestoreDbClusterToPointInTimeDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneRestoreDbClusterToPointInTimeMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.RestoreDBClusterToPointInTime.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

export class NeptuneResponsesStartDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneStartDbClusterMessage) {
  }

  public get dbCluster(): NeptuneResponsesStartDbClusterDbCluster {
    return new NeptuneResponsesStartDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesStartDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneStartDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StartDBCluster.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

export class NeptuneResponsesStopDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneStopDbClusterMessage) {
  }

  public get dbCluster(): NeptuneResponsesStopDbClusterDbCluster {
    return new NeptuneResponsesStopDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class NeptuneResponsesStopDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.NeptuneStopDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.NeptuneDbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.NeptuneDbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.NeptuneDbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.NeptuneDbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.NeptuneVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.NeptuneVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.NeptuneDbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.NeptuneDbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get automaticRestartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'Neptune',
        physicalResourceId: cr.PhysicalResourceId.of('Neptune.StopDBCluster.DBCluster.AutomaticRestartTime'),
        outputPath: 'DBCluster.AutomaticRestartTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.AutomaticRestartTime', props);
    return resource.getResponseField('DBCluster.AutomaticRestartTime') as unknown as string;
  }

}

