import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class Ec2Client extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public acceptReservedInstancesExchangeQuote(input: shapes.Ec2AcceptReservedInstancesExchangeQuoteRequest): EC2AcceptReservedInstancesExchangeQuote {
    return new EC2AcceptReservedInstancesExchangeQuote(this, 'AcceptReservedInstancesExchangeQuote', this.__resources, input);
  }

  public acceptTransitGatewayPeeringAttachment(input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest): EC2AcceptTransitGatewayPeeringAttachment {
    return new EC2AcceptTransitGatewayPeeringAttachment(this, 'AcceptTransitGatewayPeeringAttachment', this.__resources, input);
  }

  public acceptTransitGatewayVpcAttachment(input: shapes.Ec2AcceptTransitGatewayVpcAttachmentRequest): EC2AcceptTransitGatewayVpcAttachment {
    return new EC2AcceptTransitGatewayVpcAttachment(this, 'AcceptTransitGatewayVpcAttachment', this.__resources, input);
  }

  public acceptVpcEndpointConnections(input: shapes.Ec2AcceptVpcEndpointConnectionsRequest): EC2AcceptVpcEndpointConnections {
    return new EC2AcceptVpcEndpointConnections(this, 'AcceptVpcEndpointConnections', this.__resources, input);
  }

  public acceptVpcPeeringConnection(input: shapes.Ec2AcceptVpcPeeringConnectionRequest): EC2AcceptVpcPeeringConnection {
    return new EC2AcceptVpcPeeringConnection(this, 'AcceptVpcPeeringConnection', this.__resources, input);
  }

  public advertiseByoipCidr(input: shapes.Ec2AdvertiseByoipCidrRequest): EC2AdvertiseByoipCidr {
    return new EC2AdvertiseByoipCidr(this, 'AdvertiseByoipCidr', this.__resources, input);
  }

  public allocateAddress(input: shapes.Ec2AllocateAddressRequest): EC2AllocateAddress {
    return new EC2AllocateAddress(this, 'AllocateAddress', this.__resources, input);
  }

  public allocateHosts(input: shapes.Ec2AllocateHostsRequest): EC2AllocateHosts {
    return new EC2AllocateHosts(this, 'AllocateHosts', this.__resources, input);
  }

  public applySecurityGroupsToClientVpnTargetNetwork(input: shapes.Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest): EC2ApplySecurityGroupsToClientVpnTargetNetwork {
    return new EC2ApplySecurityGroupsToClientVpnTargetNetwork(this, 'ApplySecurityGroupsToClientVpnTargetNetwork', this.__resources, input);
  }

  public assignIpv6Addresses(input: shapes.Ec2AssignIpv6AddressesRequest): EC2AssignIpv6Addresses {
    return new EC2AssignIpv6Addresses(this, 'AssignIpv6Addresses', this.__resources, input);
  }

  public assignPrivateIpAddresses(input: shapes.Ec2AssignPrivateIpAddressesRequest): EC2AssignPrivateIpAddresses {
    return new EC2AssignPrivateIpAddresses(this, 'AssignPrivateIpAddresses', this.__resources, input);
  }

  public associateAddress(input: shapes.Ec2AssociateAddressRequest): EC2AssociateAddress {
    return new EC2AssociateAddress(this, 'AssociateAddress', this.__resources, input);
  }

  public associateClientVpnTargetNetwork(input: shapes.Ec2AssociateClientVpnTargetNetworkRequest): EC2AssociateClientVpnTargetNetwork {
    return new EC2AssociateClientVpnTargetNetwork(this, 'AssociateClientVpnTargetNetwork', this.__resources, input);
  }

  public associateDhcpOptions(input: shapes.Ec2AssociateDhcpOptionsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateDhcpOptions'),
        parameters: {
          DhcpOptionsId: input.dhcpOptionsId,
          VpcId: input.vpcId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AssociateDhcpOptions', props);
  }

  public associateEnclaveCertificateIamRole(input: shapes.Ec2AssociateEnclaveCertificateIamRoleRequest): EC2AssociateEnclaveCertificateIamRole {
    return new EC2AssociateEnclaveCertificateIamRole(this, 'AssociateEnclaveCertificateIamRole', this.__resources, input);
  }

  public associateIamInstanceProfile(input: shapes.Ec2AssociateIamInstanceProfileRequest): EC2AssociateIamInstanceProfile {
    return new EC2AssociateIamInstanceProfile(this, 'AssociateIamInstanceProfile', this.__resources, input);
  }

  public associateRouteTable(input: shapes.Ec2AssociateRouteTableRequest): EC2AssociateRouteTable {
    return new EC2AssociateRouteTable(this, 'AssociateRouteTable', this.__resources, input);
  }

  public associateSubnetCidrBlock(input: shapes.Ec2AssociateSubnetCidrBlockRequest): EC2AssociateSubnetCidrBlock {
    return new EC2AssociateSubnetCidrBlock(this, 'AssociateSubnetCidrBlock', this.__resources, input);
  }

  public associateTransitGatewayMulticastDomain(input: shapes.Ec2AssociateTransitGatewayMulticastDomainRequest): EC2AssociateTransitGatewayMulticastDomain {
    return new EC2AssociateTransitGatewayMulticastDomain(this, 'AssociateTransitGatewayMulticastDomain', this.__resources, input);
  }

  public associateTransitGatewayRouteTable(input: shapes.Ec2AssociateTransitGatewayRouteTableRequest): EC2AssociateTransitGatewayRouteTable {
    return new EC2AssociateTransitGatewayRouteTable(this, 'AssociateTransitGatewayRouteTable', this.__resources, input);
  }

  public associateVpcCidrBlock(input: shapes.Ec2AssociateVpcCidrBlockRequest): EC2AssociateVpcCidrBlock {
    return new EC2AssociateVpcCidrBlock(this, 'AssociateVpcCidrBlock', this.__resources, input);
  }

  public attachClassicLinkVpc(input: shapes.Ec2AttachClassicLinkVpcRequest): EC2AttachClassicLinkVpc {
    return new EC2AttachClassicLinkVpc(this, 'AttachClassicLinkVpc', this.__resources, input);
  }

  public attachInternetGateway(input: shapes.Ec2AttachInternetGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachInternetGateway'),
        parameters: {
          DryRun: input.dryRun,
          InternetGatewayId: input.internetGatewayId,
          VpcId: input.vpcId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AttachInternetGateway', props);
  }

  public attachNetworkInterface(input: shapes.Ec2AttachNetworkInterfaceRequest): EC2AttachNetworkInterface {
    return new EC2AttachNetworkInterface(this, 'AttachNetworkInterface', this.__resources, input);
  }

  public attachVolume(input: shapes.Ec2AttachVolumeRequest): EC2AttachVolume {
    return new EC2AttachVolume(this, 'AttachVolume', this.__resources, input);
  }

  public attachVpnGateway(input: shapes.Ec2AttachVpnGatewayRequest): EC2AttachVpnGateway {
    return new EC2AttachVpnGateway(this, 'AttachVpnGateway', this.__resources, input);
  }

  public authorizeClientVpnIngress(input: shapes.Ec2AuthorizeClientVpnIngressRequest): EC2AuthorizeClientVpnIngress {
    return new EC2AuthorizeClientVpnIngress(this, 'AuthorizeClientVpnIngress', this.__resources, input);
  }

  public authorizeSecurityGroupEgress(input: shapes.Ec2AuthorizeSecurityGroupEgressRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSecurityGroupEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeSecurityGroupEgress'),
        parameters: {
          DryRun: input.dryRun,
          GroupId: input.groupId,
          IpPermissions: input.ipPermissions,
          CidrIp: input.cidrIp,
          FromPort: input.fromPort,
          IpProtocol: input.ipProtocol,
          ToPort: input.toPort,
          SourceSecurityGroupName: input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: input.sourceSecurityGroupOwnerId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AuthorizeSecurityGroupEgress', props);
  }

  public authorizeSecurityGroupIngress(input: shapes.Ec2AuthorizeSecurityGroupIngressRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSecurityGroupIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeSecurityGroupIngress'),
        parameters: {
          CidrIp: input.cidrIp,
          FromPort: input.fromPort,
          GroupId: input.groupId,
          GroupName: input.groupName,
          IpPermissions: input.ipPermissions,
          IpProtocol: input.ipProtocol,
          SourceSecurityGroupName: input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: input.sourceSecurityGroupOwnerId,
          ToPort: input.toPort,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AuthorizeSecurityGroupIngress', props);
  }

  public bundleInstance(input: shapes.Ec2BundleInstanceRequest): EC2BundleInstance {
    return new EC2BundleInstance(this, 'BundleInstance', this.__resources, input);
  }

  public cancelBundleTask(input: shapes.Ec2CancelBundleTaskRequest): EC2CancelBundleTask {
    return new EC2CancelBundleTask(this, 'CancelBundleTask', this.__resources, input);
  }

  public cancelCapacityReservation(input: shapes.Ec2CancelCapacityReservationRequest): EC2CancelCapacityReservation {
    return new EC2CancelCapacityReservation(this, 'CancelCapacityReservation', this.__resources, input);
  }

  public cancelConversionTask(input: shapes.Ec2CancelConversionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelConversionTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelConversionTask'),
        parameters: {
          ConversionTaskId: input.conversionTaskId,
          DryRun: input.dryRun,
          ReasonMessage: input.reasonMessage,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CancelConversionTask', props);
  }

  public cancelExportTask(input: shapes.Ec2CancelExportTaskRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelExportTask'),
        parameters: {
          ExportTaskId: input.exportTaskId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CancelExportTask', props);
  }

  public cancelImportTask(input: shapes.Ec2CancelImportTaskRequest): EC2CancelImportTask {
    return new EC2CancelImportTask(this, 'CancelImportTask', this.__resources, input);
  }

  public cancelReservedInstancesListing(input: shapes.Ec2CancelReservedInstancesListingRequest): EC2CancelReservedInstancesListing {
    return new EC2CancelReservedInstancesListing(this, 'CancelReservedInstancesListing', this.__resources, input);
  }

  public cancelSpotFleetRequests(input: shapes.Ec2CancelSpotFleetRequestsRequest): EC2CancelSpotFleetRequests {
    return new EC2CancelSpotFleetRequests(this, 'CancelSpotFleetRequests', this.__resources, input);
  }

  public cancelSpotInstanceRequests(input: shapes.Ec2CancelSpotInstanceRequestsRequest): EC2CancelSpotInstanceRequests {
    return new EC2CancelSpotInstanceRequests(this, 'CancelSpotInstanceRequests', this.__resources, input);
  }

  public confirmProductInstance(input: shapes.Ec2ConfirmProductInstanceRequest): EC2ConfirmProductInstance {
    return new EC2ConfirmProductInstance(this, 'ConfirmProductInstance', this.__resources, input);
  }

  public copyFpgaImage(input: shapes.Ec2CopyFpgaImageRequest): EC2CopyFpgaImage {
    return new EC2CopyFpgaImage(this, 'CopyFpgaImage', this.__resources, input);
  }

  public copyImage(input: shapes.Ec2CopyImageRequest): EC2CopyImage {
    return new EC2CopyImage(this, 'CopyImage', this.__resources, input);
  }

  public copySnapshot(input: shapes.Ec2CopySnapshotRequest): EC2CopySnapshot {
    return new EC2CopySnapshot(this, 'CopySnapshot', this.__resources, input);
  }

  public createCapacityReservation(input: shapes.Ec2CreateCapacityReservationRequest): EC2CreateCapacityReservation {
    return new EC2CreateCapacityReservation(this, 'CreateCapacityReservation', this.__resources, input);
  }

  public createCarrierGateway(input: shapes.Ec2CreateCarrierGatewayRequest): EC2CreateCarrierGateway {
    return new EC2CreateCarrierGateway(this, 'CreateCarrierGateway', this.__resources, input);
  }

  public createClientVpnEndpoint(input: shapes.Ec2CreateClientVpnEndpointRequest): EC2CreateClientVpnEndpoint {
    return new EC2CreateClientVpnEndpoint(this, 'CreateClientVpnEndpoint', this.__resources, input);
  }

  public createClientVpnRoute(input: shapes.Ec2CreateClientVpnRouteRequest): EC2CreateClientVpnRoute {
    return new EC2CreateClientVpnRoute(this, 'CreateClientVpnRoute', this.__resources, input);
  }

  public createCustomerGateway(input: shapes.Ec2CreateCustomerGatewayRequest): EC2CreateCustomerGateway {
    return new EC2CreateCustomerGateway(this, 'CreateCustomerGateway', this.__resources, input);
  }

  public createDefaultSubnet(input: shapes.Ec2CreateDefaultSubnetRequest): EC2CreateDefaultSubnet {
    return new EC2CreateDefaultSubnet(this, 'CreateDefaultSubnet', this.__resources, input);
  }

  public createDefaultVpc(input: shapes.Ec2CreateDefaultVpcRequest): EC2CreateDefaultVpc {
    return new EC2CreateDefaultVpc(this, 'CreateDefaultVpc', this.__resources, input);
  }

  public createDhcpOptions(input: shapes.Ec2CreateDhcpOptionsRequest): EC2CreateDhcpOptions {
    return new EC2CreateDhcpOptions(this, 'CreateDhcpOptions', this.__resources, input);
  }

  public createEgressOnlyInternetGateway(input: shapes.Ec2CreateEgressOnlyInternetGatewayRequest): EC2CreateEgressOnlyInternetGateway {
    return new EC2CreateEgressOnlyInternetGateway(this, 'CreateEgressOnlyInternetGateway', this.__resources, input);
  }

  public createFleet(input: shapes.Ec2CreateFleetRequest): EC2CreateFleet {
    return new EC2CreateFleet(this, 'CreateFleet', this.__resources, input);
  }

  public createFlowLogs(input: shapes.Ec2CreateFlowLogsRequest): EC2CreateFlowLogs {
    return new EC2CreateFlowLogs(this, 'CreateFlowLogs', this.__resources, input);
  }

  public createFpgaImage(input: shapes.Ec2CreateFpgaImageRequest): EC2CreateFpgaImage {
    return new EC2CreateFpgaImage(this, 'CreateFpgaImage', this.__resources, input);
  }

  public createImage(input: shapes.Ec2CreateImageRequest): EC2CreateImage {
    return new EC2CreateImage(this, 'CreateImage', this.__resources, input);
  }

  public createInstanceExportTask(input: shapes.Ec2CreateInstanceExportTaskRequest): EC2CreateInstanceExportTask {
    return new EC2CreateInstanceExportTask(this, 'CreateInstanceExportTask', this.__resources, input);
  }

  public createInternetGateway(input: shapes.Ec2CreateInternetGatewayRequest): EC2CreateInternetGateway {
    return new EC2CreateInternetGateway(this, 'CreateInternetGateway', this.__resources, input);
  }

  public createKeyPair(input: shapes.Ec2CreateKeyPairRequest): EC2CreateKeyPair {
    return new EC2CreateKeyPair(this, 'CreateKeyPair', this.__resources, input);
  }

  public createLaunchTemplate(input: shapes.Ec2CreateLaunchTemplateRequest): EC2CreateLaunchTemplate {
    return new EC2CreateLaunchTemplate(this, 'CreateLaunchTemplate', this.__resources, input);
  }

  public createLaunchTemplateVersion(input: shapes.Ec2CreateLaunchTemplateVersionRequest): EC2CreateLaunchTemplateVersion {
    return new EC2CreateLaunchTemplateVersion(this, 'CreateLaunchTemplateVersion', this.__resources, input);
  }

  public createLocalGatewayRoute(input: shapes.Ec2CreateLocalGatewayRouteRequest): EC2CreateLocalGatewayRoute {
    return new EC2CreateLocalGatewayRoute(this, 'CreateLocalGatewayRoute', this.__resources, input);
  }

  public createLocalGatewayRouteTableVpcAssociation(input: shapes.Ec2CreateLocalGatewayRouteTableVpcAssociationRequest): EC2CreateLocalGatewayRouteTableVpcAssociation {
    return new EC2CreateLocalGatewayRouteTableVpcAssociation(this, 'CreateLocalGatewayRouteTableVpcAssociation', this.__resources, input);
  }

  public createManagedPrefixList(input: shapes.Ec2CreateManagedPrefixListRequest): EC2CreateManagedPrefixList {
    return new EC2CreateManagedPrefixList(this, 'CreateManagedPrefixList', this.__resources, input);
  }

  public createNatGateway(input: shapes.Ec2CreateNatGatewayRequest): EC2CreateNatGateway {
    return new EC2CreateNatGateway(this, 'CreateNatGateway', this.__resources, input);
  }

  public createNetworkAcl(input: shapes.Ec2CreateNetworkAclRequest): EC2CreateNetworkAcl {
    return new EC2CreateNetworkAcl(this, 'CreateNetworkAcl', this.__resources, input);
  }

  public createNetworkAclEntry(input: shapes.Ec2CreateNetworkAclEntryRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAclEntry',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAclEntry'),
        parameters: {
          CidrBlock: input.cidrBlock,
          DryRun: input.dryRun,
          Egress: input.egress,
          IcmpTypeCode: {
            Code: input.icmpTypeCode?.code,
            Type: input.icmpTypeCode?.type,
          },
          Ipv6CidrBlock: input.ipv6CidrBlock,
          NetworkAclId: input.networkAclId,
          PortRange: {
            From: input.portRange?.from,
            To: input.portRange?.to,
          },
          Protocol: input.protocol,
          RuleAction: input.ruleAction,
          RuleNumber: input.ruleNumber,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateNetworkAclEntry', props);
  }

  public createNetworkInterface(input: shapes.Ec2CreateNetworkInterfaceRequest): EC2CreateNetworkInterface {
    return new EC2CreateNetworkInterface(this, 'CreateNetworkInterface', this.__resources, input);
  }

  public createNetworkInterfacePermission(input: shapes.Ec2CreateNetworkInterfacePermissionRequest): EC2CreateNetworkInterfacePermission {
    return new EC2CreateNetworkInterfacePermission(this, 'CreateNetworkInterfacePermission', this.__resources, input);
  }

  public createPlacementGroup(input: shapes.Ec2CreatePlacementGroupRequest): EC2CreatePlacementGroup {
    return new EC2CreatePlacementGroup(this, 'CreatePlacementGroup', this.__resources, input);
  }

  public createReservedInstancesListing(input: shapes.Ec2CreateReservedInstancesListingRequest): EC2CreateReservedInstancesListing {
    return new EC2CreateReservedInstancesListing(this, 'CreateReservedInstancesListing', this.__resources, input);
  }

  public createRoute(input: shapes.Ec2CreateRouteRequest): EC2CreateRoute {
    return new EC2CreateRoute(this, 'CreateRoute', this.__resources, input);
  }

  public createRouteTable(input: shapes.Ec2CreateRouteTableRequest): EC2CreateRouteTable {
    return new EC2CreateRouteTable(this, 'CreateRouteTable', this.__resources, input);
  }

  public createSecurityGroup(input: shapes.Ec2CreateSecurityGroupRequest): EC2CreateSecurityGroup {
    return new EC2CreateSecurityGroup(this, 'CreateSecurityGroup', this.__resources, input);
  }

  public createSnapshot(input: shapes.Ec2CreateSnapshotRequest): EC2CreateSnapshot {
    return new EC2CreateSnapshot(this, 'CreateSnapshot', this.__resources, input);
  }

  public createSnapshots(input: shapes.Ec2CreateSnapshotsRequest): EC2CreateSnapshots {
    return new EC2CreateSnapshots(this, 'CreateSnapshots', this.__resources, input);
  }

  public createSpotDatafeedSubscription(input: shapes.Ec2CreateSpotDatafeedSubscriptionRequest): EC2CreateSpotDatafeedSubscription {
    return new EC2CreateSpotDatafeedSubscription(this, 'CreateSpotDatafeedSubscription', this.__resources, input);
  }

  public createSubnet(input: shapes.Ec2CreateSubnetRequest): EC2CreateSubnet {
    return new EC2CreateSubnet(this, 'CreateSubnet', this.__resources, input);
  }

  public createTags(input: shapes.Ec2CreateTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTags',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTags'),
        parameters: {
          DryRun: input.dryRun,
          Resources: input.resources,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateTags', props);
  }

  public createTrafficMirrorFilter(input: shapes.Ec2CreateTrafficMirrorFilterRequest): EC2CreateTrafficMirrorFilter {
    return new EC2CreateTrafficMirrorFilter(this, 'CreateTrafficMirrorFilter', this.__resources, input);
  }

  public createTrafficMirrorFilterRule(input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest): EC2CreateTrafficMirrorFilterRule {
    return new EC2CreateTrafficMirrorFilterRule(this, 'CreateTrafficMirrorFilterRule', this.__resources, input);
  }

  public createTrafficMirrorSession(input: shapes.Ec2CreateTrafficMirrorSessionRequest): EC2CreateTrafficMirrorSession {
    return new EC2CreateTrafficMirrorSession(this, 'CreateTrafficMirrorSession', this.__resources, input);
  }

  public createTrafficMirrorTarget(input: shapes.Ec2CreateTrafficMirrorTargetRequest): EC2CreateTrafficMirrorTarget {
    return new EC2CreateTrafficMirrorTarget(this, 'CreateTrafficMirrorTarget', this.__resources, input);
  }

  public createTransitGateway(input: shapes.Ec2CreateTransitGatewayRequest): EC2CreateTransitGateway {
    return new EC2CreateTransitGateway(this, 'CreateTransitGateway', this.__resources, input);
  }

  public createTransitGatewayMulticastDomain(input: shapes.Ec2CreateTransitGatewayMulticastDomainRequest): EC2CreateTransitGatewayMulticastDomain {
    return new EC2CreateTransitGatewayMulticastDomain(this, 'CreateTransitGatewayMulticastDomain', this.__resources, input);
  }

  public createTransitGatewayPeeringAttachment(input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest): EC2CreateTransitGatewayPeeringAttachment {
    return new EC2CreateTransitGatewayPeeringAttachment(this, 'CreateTransitGatewayPeeringAttachment', this.__resources, input);
  }

  public createTransitGatewayPrefixListReference(input: shapes.Ec2CreateTransitGatewayPrefixListReferenceRequest): EC2CreateTransitGatewayPrefixListReference {
    return new EC2CreateTransitGatewayPrefixListReference(this, 'CreateTransitGatewayPrefixListReference', this.__resources, input);
  }

  public createTransitGatewayRoute(input: shapes.Ec2CreateTransitGatewayRouteRequest): EC2CreateTransitGatewayRoute {
    return new EC2CreateTransitGatewayRoute(this, 'CreateTransitGatewayRoute', this.__resources, input);
  }

  public createTransitGatewayRouteTable(input: shapes.Ec2CreateTransitGatewayRouteTableRequest): EC2CreateTransitGatewayRouteTable {
    return new EC2CreateTransitGatewayRouteTable(this, 'CreateTransitGatewayRouteTable', this.__resources, input);
  }

  public createTransitGatewayVpcAttachment(input: shapes.Ec2CreateTransitGatewayVpcAttachmentRequest): EC2CreateTransitGatewayVpcAttachment {
    return new EC2CreateTransitGatewayVpcAttachment(this, 'CreateTransitGatewayVpcAttachment', this.__resources, input);
  }

  public createVolume(input: shapes.Ec2CreateVolumeRequest): EC2CreateVolume {
    return new EC2CreateVolume(this, 'CreateVolume', this.__resources, input);
  }

  public createVpc(input: shapes.Ec2CreateVpcRequest): EC2CreateVpc {
    return new EC2CreateVpc(this, 'CreateVpc', this.__resources, input);
  }

  public createVpcEndpoint(input: shapes.Ec2CreateVpcEndpointRequest): EC2CreateVpcEndpoint {
    return new EC2CreateVpcEndpoint(this, 'CreateVpcEndpoint', this.__resources, input);
  }

  public createVpcEndpointConnectionNotification(input: shapes.Ec2CreateVpcEndpointConnectionNotificationRequest): EC2CreateVpcEndpointConnectionNotification {
    return new EC2CreateVpcEndpointConnectionNotification(this, 'CreateVpcEndpointConnectionNotification', this.__resources, input);
  }

  public createVpcEndpointServiceConfiguration(input: shapes.Ec2CreateVpcEndpointServiceConfigurationRequest): EC2CreateVpcEndpointServiceConfiguration {
    return new EC2CreateVpcEndpointServiceConfiguration(this, 'CreateVpcEndpointServiceConfiguration', this.__resources, input);
  }

  public createVpcPeeringConnection(input: shapes.Ec2CreateVpcPeeringConnectionRequest): EC2CreateVpcPeeringConnection {
    return new EC2CreateVpcPeeringConnection(this, 'CreateVpcPeeringConnection', this.__resources, input);
  }

  public createVpnConnection(input: shapes.Ec2CreateVpnConnectionRequest): EC2CreateVpnConnection {
    return new EC2CreateVpnConnection(this, 'CreateVpnConnection', this.__resources, input);
  }

  public createVpnConnectionRoute(input: shapes.Ec2CreateVpnConnectionRouteRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnectionRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnectionRoute'),
        parameters: {
          DestinationCidrBlock: input.destinationCidrBlock,
          VpnConnectionId: input.vpnConnectionId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateVpnConnectionRoute', props);
  }

  public createVpnGateway(input: shapes.Ec2CreateVpnGatewayRequest): EC2CreateVpnGateway {
    return new EC2CreateVpnGateway(this, 'CreateVpnGateway', this.__resources, input);
  }

  public deleteCarrierGateway(input: shapes.Ec2DeleteCarrierGatewayRequest): EC2DeleteCarrierGateway {
    return new EC2DeleteCarrierGateway(this, 'DeleteCarrierGateway', this.__resources, input);
  }

  public deleteClientVpnEndpoint(input: shapes.Ec2DeleteClientVpnEndpointRequest): EC2DeleteClientVpnEndpoint {
    return new EC2DeleteClientVpnEndpoint(this, 'DeleteClientVpnEndpoint', this.__resources, input);
  }

  public deleteClientVpnRoute(input: shapes.Ec2DeleteClientVpnRouteRequest): EC2DeleteClientVpnRoute {
    return new EC2DeleteClientVpnRoute(this, 'DeleteClientVpnRoute', this.__resources, input);
  }

  public deleteCustomerGateway(input: shapes.Ec2DeleteCustomerGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCustomerGateway'),
        parameters: {
          CustomerGatewayId: input.customerGatewayId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteCustomerGateway', props);
  }

  public deleteDhcpOptions(input: shapes.Ec2DeleteDhcpOptionsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteDhcpOptions'),
        parameters: {
          DhcpOptionsId: input.dhcpOptionsId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDhcpOptions', props);
  }

  public deleteEgressOnlyInternetGateway(input: shapes.Ec2DeleteEgressOnlyInternetGatewayRequest): EC2DeleteEgressOnlyInternetGateway {
    return new EC2DeleteEgressOnlyInternetGateway(this, 'DeleteEgressOnlyInternetGateway', this.__resources, input);
  }

  public deleteFleets(input: shapes.Ec2DeleteFleetsRequest): EC2DeleteFleets {
    return new EC2DeleteFleets(this, 'DeleteFleets', this.__resources, input);
  }

  public deleteFlowLogs(input: shapes.Ec2DeleteFlowLogsRequest): EC2DeleteFlowLogs {
    return new EC2DeleteFlowLogs(this, 'DeleteFlowLogs', this.__resources, input);
  }

  public deleteFpgaImage(input: shapes.Ec2DeleteFpgaImageRequest): EC2DeleteFpgaImage {
    return new EC2DeleteFpgaImage(this, 'DeleteFpgaImage', this.__resources, input);
  }

  public deleteInternetGateway(input: shapes.Ec2DeleteInternetGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteInternetGateway'),
        parameters: {
          DryRun: input.dryRun,
          InternetGatewayId: input.internetGatewayId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteInternetGateway', props);
  }

  public deleteKeyPair(input: shapes.Ec2DeleteKeyPairRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteKeyPair'),
        parameters: {
          KeyName: input.keyName,
          KeyPairId: input.keyPairId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteKeyPair', props);
  }

  public deleteLaunchTemplate(input: shapes.Ec2DeleteLaunchTemplateRequest): EC2DeleteLaunchTemplate {
    return new EC2DeleteLaunchTemplate(this, 'DeleteLaunchTemplate', this.__resources, input);
  }

  public deleteLaunchTemplateVersions(input: shapes.Ec2DeleteLaunchTemplateVersionsRequest): EC2DeleteLaunchTemplateVersions {
    return new EC2DeleteLaunchTemplateVersions(this, 'DeleteLaunchTemplateVersions', this.__resources, input);
  }

  public deleteLocalGatewayRoute(input: shapes.Ec2DeleteLocalGatewayRouteRequest): EC2DeleteLocalGatewayRoute {
    return new EC2DeleteLocalGatewayRoute(this, 'DeleteLocalGatewayRoute', this.__resources, input);
  }

  public deleteLocalGatewayRouteTableVpcAssociation(input: shapes.Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest): EC2DeleteLocalGatewayRouteTableVpcAssociation {
    return new EC2DeleteLocalGatewayRouteTableVpcAssociation(this, 'DeleteLocalGatewayRouteTableVpcAssociation', this.__resources, input);
  }

  public deleteManagedPrefixList(input: shapes.Ec2DeleteManagedPrefixListRequest): EC2DeleteManagedPrefixList {
    return new EC2DeleteManagedPrefixList(this, 'DeleteManagedPrefixList', this.__resources, input);
  }

  public deleteNatGateway(input: shapes.Ec2DeleteNatGatewayRequest): EC2DeleteNatGateway {
    return new EC2DeleteNatGateway(this, 'DeleteNatGateway', this.__resources, input);
  }

  public deleteNetworkAcl(input: shapes.Ec2DeleteNetworkAclRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkAcl'),
        parameters: {
          DryRun: input.dryRun,
          NetworkAclId: input.networkAclId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteNetworkAcl', props);
  }

  public deleteNetworkAclEntry(input: shapes.Ec2DeleteNetworkAclEntryRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkAclEntry',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkAclEntry'),
        parameters: {
          DryRun: input.dryRun,
          Egress: input.egress,
          NetworkAclId: input.networkAclId,
          RuleNumber: input.ruleNumber,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteNetworkAclEntry', props);
  }

  public deleteNetworkInterface(input: shapes.Ec2DeleteNetworkInterfaceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkInterface'),
        parameters: {
          DryRun: input.dryRun,
          NetworkInterfaceId: input.networkInterfaceId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteNetworkInterface', props);
  }

  public deleteNetworkInterfacePermission(input: shapes.Ec2DeleteNetworkInterfacePermissionRequest): EC2DeleteNetworkInterfacePermission {
    return new EC2DeleteNetworkInterfacePermission(this, 'DeleteNetworkInterfacePermission', this.__resources, input);
  }

  public deletePlacementGroup(input: shapes.Ec2DeletePlacementGroupRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeletePlacementGroup'),
        parameters: {
          DryRun: input.dryRun,
          GroupName: input.groupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeletePlacementGroup', props);
  }

  public deleteQueuedReservedInstances(input: shapes.Ec2DeleteQueuedReservedInstancesRequest): EC2DeleteQueuedReservedInstances {
    return new EC2DeleteQueuedReservedInstances(this, 'DeleteQueuedReservedInstances', this.__resources, input);
  }

  public deleteRoute(input: shapes.Ec2DeleteRouteRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteRoute'),
        parameters: {
          DestinationCidrBlock: input.destinationCidrBlock,
          DestinationIpv6CidrBlock: input.destinationIpv6CidrBlock,
          DestinationPrefixListId: input.destinationPrefixListId,
          DryRun: input.dryRun,
          RouteTableId: input.routeTableId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteRoute', props);
  }

  public deleteRouteTable(input: shapes.Ec2DeleteRouteTableRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteRouteTable'),
        parameters: {
          DryRun: input.dryRun,
          RouteTableId: input.routeTableId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteRouteTable', props);
  }

  public deleteSecurityGroup(input: shapes.Ec2DeleteSecurityGroupRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSecurityGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSecurityGroup'),
        parameters: {
          GroupId: input.groupId,
          GroupName: input.groupName,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSecurityGroup', props);
  }

  public deleteSnapshot(input: shapes.Ec2DeleteSnapshotRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSnapshot'),
        parameters: {
          SnapshotId: input.snapshotId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSnapshot', props);
  }

  public deleteSpotDatafeedSubscription(input: shapes.Ec2DeleteSpotDatafeedSubscriptionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSpotDatafeedSubscription'),
        parameters: {
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSpotDatafeedSubscription', props);
  }

  public deleteSubnet(input: shapes.Ec2DeleteSubnetRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnet'),
        parameters: {
          SubnetId: input.subnetId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSubnet', props);
  }

  public deleteTags(input: shapes.Ec2DeleteTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTags',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTags'),
        parameters: {
          DryRun: input.dryRun,
          Resources: input.resources,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteTags', props);
  }

  public deleteTrafficMirrorFilter(input: shapes.Ec2DeleteTrafficMirrorFilterRequest): EC2DeleteTrafficMirrorFilter {
    return new EC2DeleteTrafficMirrorFilter(this, 'DeleteTrafficMirrorFilter', this.__resources, input);
  }

  public deleteTrafficMirrorFilterRule(input: shapes.Ec2DeleteTrafficMirrorFilterRuleRequest): EC2DeleteTrafficMirrorFilterRule {
    return new EC2DeleteTrafficMirrorFilterRule(this, 'DeleteTrafficMirrorFilterRule', this.__resources, input);
  }

  public deleteTrafficMirrorSession(input: shapes.Ec2DeleteTrafficMirrorSessionRequest): EC2DeleteTrafficMirrorSession {
    return new EC2DeleteTrafficMirrorSession(this, 'DeleteTrafficMirrorSession', this.__resources, input);
  }

  public deleteTrafficMirrorTarget(input: shapes.Ec2DeleteTrafficMirrorTargetRequest): EC2DeleteTrafficMirrorTarget {
    return new EC2DeleteTrafficMirrorTarget(this, 'DeleteTrafficMirrorTarget', this.__resources, input);
  }

  public deleteTransitGateway(input: shapes.Ec2DeleteTransitGatewayRequest): EC2DeleteTransitGateway {
    return new EC2DeleteTransitGateway(this, 'DeleteTransitGateway', this.__resources, input);
  }

  public deleteTransitGatewayMulticastDomain(input: shapes.Ec2DeleteTransitGatewayMulticastDomainRequest): EC2DeleteTransitGatewayMulticastDomain {
    return new EC2DeleteTransitGatewayMulticastDomain(this, 'DeleteTransitGatewayMulticastDomain', this.__resources, input);
  }

  public deleteTransitGatewayPeeringAttachment(input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest): EC2DeleteTransitGatewayPeeringAttachment {
    return new EC2DeleteTransitGatewayPeeringAttachment(this, 'DeleteTransitGatewayPeeringAttachment', this.__resources, input);
  }

  public deleteTransitGatewayPrefixListReference(input: shapes.Ec2DeleteTransitGatewayPrefixListReferenceRequest): EC2DeleteTransitGatewayPrefixListReference {
    return new EC2DeleteTransitGatewayPrefixListReference(this, 'DeleteTransitGatewayPrefixListReference', this.__resources, input);
  }

  public deleteTransitGatewayRoute(input: shapes.Ec2DeleteTransitGatewayRouteRequest): EC2DeleteTransitGatewayRoute {
    return new EC2DeleteTransitGatewayRoute(this, 'DeleteTransitGatewayRoute', this.__resources, input);
  }

  public deleteTransitGatewayRouteTable(input: shapes.Ec2DeleteTransitGatewayRouteTableRequest): EC2DeleteTransitGatewayRouteTable {
    return new EC2DeleteTransitGatewayRouteTable(this, 'DeleteTransitGatewayRouteTable', this.__resources, input);
  }

  public deleteTransitGatewayVpcAttachment(input: shapes.Ec2DeleteTransitGatewayVpcAttachmentRequest): EC2DeleteTransitGatewayVpcAttachment {
    return new EC2DeleteTransitGatewayVpcAttachment(this, 'DeleteTransitGatewayVpcAttachment', this.__resources, input);
  }

  public deleteVolume(input: shapes.Ec2DeleteVolumeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVolume'),
        parameters: {
          VolumeId: input.volumeId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVolume', props);
  }

  public deleteVpc(input: shapes.Ec2DeleteVpcRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpc'),
        parameters: {
          VpcId: input.vpcId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVpc', props);
  }

  public deleteVpcEndpointConnectionNotifications(input: shapes.Ec2DeleteVpcEndpointConnectionNotificationsRequest): EC2DeleteVpcEndpointConnectionNotifications {
    return new EC2DeleteVpcEndpointConnectionNotifications(this, 'DeleteVpcEndpointConnectionNotifications', this.__resources, input);
  }

  public deleteVpcEndpointServiceConfigurations(input: shapes.Ec2DeleteVpcEndpointServiceConfigurationsRequest): EC2DeleteVpcEndpointServiceConfigurations {
    return new EC2DeleteVpcEndpointServiceConfigurations(this, 'DeleteVpcEndpointServiceConfigurations', this.__resources, input);
  }

  public deleteVpcEndpoints(input: shapes.Ec2DeleteVpcEndpointsRequest): EC2DeleteVpcEndpoints {
    return new EC2DeleteVpcEndpoints(this, 'DeleteVpcEndpoints', this.__resources, input);
  }

  public deleteVpcPeeringConnection(input: shapes.Ec2DeleteVpcPeeringConnectionRequest): EC2DeleteVpcPeeringConnection {
    return new EC2DeleteVpcPeeringConnection(this, 'DeleteVpcPeeringConnection', this.__resources, input);
  }

  public deleteVpnConnection(input: shapes.Ec2DeleteVpnConnectionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpnConnection'),
        parameters: {
          VpnConnectionId: input.vpnConnectionId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVpnConnection', props);
  }

  public deleteVpnConnectionRoute(input: shapes.Ec2DeleteVpnConnectionRouteRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpnConnectionRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpnConnectionRoute'),
        parameters: {
          DestinationCidrBlock: input.destinationCidrBlock,
          VpnConnectionId: input.vpnConnectionId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVpnConnectionRoute', props);
  }

  public deleteVpnGateway(input: shapes.Ec2DeleteVpnGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpnGateway'),
        parameters: {
          VpnGatewayId: input.vpnGatewayId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVpnGateway', props);
  }

  public deprovisionByoipCidr(input: shapes.Ec2DeprovisionByoipCidrRequest): EC2DeprovisionByoipCidr {
    return new EC2DeprovisionByoipCidr(this, 'DeprovisionByoipCidr', this.__resources, input);
  }

  public deregisterImage(input: shapes.Ec2DeregisterImageRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterImage'),
        parameters: {
          ImageId: input.imageId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeregisterImage', props);
  }

  public deregisterInstanceEventNotificationAttributes(input: shapes.Ec2DeregisterInstanceEventNotificationAttributesRequest): EC2DeregisterInstanceEventNotificationAttributes {
    return new EC2DeregisterInstanceEventNotificationAttributes(this, 'DeregisterInstanceEventNotificationAttributes', this.__resources, input);
  }

  public deregisterTransitGatewayMulticastGroupMembers(input: shapes.Ec2DeregisterTransitGatewayMulticastGroupMembersRequest): EC2DeregisterTransitGatewayMulticastGroupMembers {
    return new EC2DeregisterTransitGatewayMulticastGroupMembers(this, 'DeregisterTransitGatewayMulticastGroupMembers', this.__resources, input);
  }

  public deregisterTransitGatewayMulticastGroupSources(input: shapes.Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest): EC2DeregisterTransitGatewayMulticastGroupSources {
    return new EC2DeregisterTransitGatewayMulticastGroupSources(this, 'DeregisterTransitGatewayMulticastGroupSources', this.__resources, input);
  }

  public describeAccountAttributes(input: shapes.Ec2DescribeAccountAttributesRequest): EC2DescribeAccountAttributes {
    return new EC2DescribeAccountAttributes(this, 'DescribeAccountAttributes', this.__resources, input);
  }

  public describeAddresses(input: shapes.Ec2DescribeAddressesRequest): EC2DescribeAddresses {
    return new EC2DescribeAddresses(this, 'DescribeAddresses', this.__resources, input);
  }

  public describeAggregateIdFormat(input: shapes.Ec2DescribeAggregateIdFormatRequest): EC2DescribeAggregateIdFormat {
    return new EC2DescribeAggregateIdFormat(this, 'DescribeAggregateIdFormat', this.__resources, input);
  }

  public describeAvailabilityZones(input: shapes.Ec2DescribeAvailabilityZonesRequest): EC2DescribeAvailabilityZones {
    return new EC2DescribeAvailabilityZones(this, 'DescribeAvailabilityZones', this.__resources, input);
  }

  public describeBundleTasks(input: shapes.Ec2DescribeBundleTasksRequest): EC2DescribeBundleTasks {
    return new EC2DescribeBundleTasks(this, 'DescribeBundleTasks', this.__resources, input);
  }

  public describeByoipCidrs(input: shapes.Ec2DescribeByoipCidrsRequest): EC2DescribeByoipCidrs {
    return new EC2DescribeByoipCidrs(this, 'DescribeByoipCidrs', this.__resources, input);
  }

  public describeCapacityReservations(input: shapes.Ec2DescribeCapacityReservationsRequest): EC2DescribeCapacityReservations {
    return new EC2DescribeCapacityReservations(this, 'DescribeCapacityReservations', this.__resources, input);
  }

  public describeCarrierGateways(input: shapes.Ec2DescribeCarrierGatewaysRequest): EC2DescribeCarrierGateways {
    return new EC2DescribeCarrierGateways(this, 'DescribeCarrierGateways', this.__resources, input);
  }

  public describeClassicLinkInstances(input: shapes.Ec2DescribeClassicLinkInstancesRequest): EC2DescribeClassicLinkInstances {
    return new EC2DescribeClassicLinkInstances(this, 'DescribeClassicLinkInstances', this.__resources, input);
  }

  public describeClientVpnAuthorizationRules(input: shapes.Ec2DescribeClientVpnAuthorizationRulesRequest): EC2DescribeClientVpnAuthorizationRules {
    return new EC2DescribeClientVpnAuthorizationRules(this, 'DescribeClientVpnAuthorizationRules', this.__resources, input);
  }

  public describeClientVpnConnections(input: shapes.Ec2DescribeClientVpnConnectionsRequest): EC2DescribeClientVpnConnections {
    return new EC2DescribeClientVpnConnections(this, 'DescribeClientVpnConnections', this.__resources, input);
  }

  public describeClientVpnEndpoints(input: shapes.Ec2DescribeClientVpnEndpointsRequest): EC2DescribeClientVpnEndpoints {
    return new EC2DescribeClientVpnEndpoints(this, 'DescribeClientVpnEndpoints', this.__resources, input);
  }

  public describeClientVpnRoutes(input: shapes.Ec2DescribeClientVpnRoutesRequest): EC2DescribeClientVpnRoutes {
    return new EC2DescribeClientVpnRoutes(this, 'DescribeClientVpnRoutes', this.__resources, input);
  }

  public describeClientVpnTargetNetworks(input: shapes.Ec2DescribeClientVpnTargetNetworksRequest): EC2DescribeClientVpnTargetNetworks {
    return new EC2DescribeClientVpnTargetNetworks(this, 'DescribeClientVpnTargetNetworks', this.__resources, input);
  }

  public describeCoipPools(input: shapes.Ec2DescribeCoipPoolsRequest): EC2DescribeCoipPools {
    return new EC2DescribeCoipPools(this, 'DescribeCoipPools', this.__resources, input);
  }

  public describeConversionTasks(input: shapes.Ec2DescribeConversionTasksRequest): EC2DescribeConversionTasks {
    return new EC2DescribeConversionTasks(this, 'DescribeConversionTasks', this.__resources, input);
  }

  public describeCustomerGateways(input: shapes.Ec2DescribeCustomerGatewaysRequest): EC2DescribeCustomerGateways {
    return new EC2DescribeCustomerGateways(this, 'DescribeCustomerGateways', this.__resources, input);
  }

  public describeDhcpOptions(input: shapes.Ec2DescribeDhcpOptionsRequest): EC2DescribeDhcpOptions {
    return new EC2DescribeDhcpOptions(this, 'DescribeDhcpOptions', this.__resources, input);
  }

  public describeEgressOnlyInternetGateways(input: shapes.Ec2DescribeEgressOnlyInternetGatewaysRequest): EC2DescribeEgressOnlyInternetGateways {
    return new EC2DescribeEgressOnlyInternetGateways(this, 'DescribeEgressOnlyInternetGateways', this.__resources, input);
  }

  public describeElasticGpus(input: shapes.Ec2DescribeElasticGpusRequest): EC2DescribeElasticGpus {
    return new EC2DescribeElasticGpus(this, 'DescribeElasticGpus', this.__resources, input);
  }

  public describeExportImageTasks(input: shapes.Ec2DescribeExportImageTasksRequest): EC2DescribeExportImageTasks {
    return new EC2DescribeExportImageTasks(this, 'DescribeExportImageTasks', this.__resources, input);
  }

  public describeExportTasks(input: shapes.Ec2DescribeExportTasksRequest): EC2DescribeExportTasks {
    return new EC2DescribeExportTasks(this, 'DescribeExportTasks', this.__resources, input);
  }

  public describeFastSnapshotRestores(input: shapes.Ec2DescribeFastSnapshotRestoresRequest): EC2DescribeFastSnapshotRestores {
    return new EC2DescribeFastSnapshotRestores(this, 'DescribeFastSnapshotRestores', this.__resources, input);
  }

  public describeFleetHistory(input: shapes.Ec2DescribeFleetHistoryRequest): EC2DescribeFleetHistory {
    return new EC2DescribeFleetHistory(this, 'DescribeFleetHistory', this.__resources, input);
  }

  public describeFleetInstances(input: shapes.Ec2DescribeFleetInstancesRequest): EC2DescribeFleetInstances {
    return new EC2DescribeFleetInstances(this, 'DescribeFleetInstances', this.__resources, input);
  }

  public describeFleets(input: shapes.Ec2DescribeFleetsRequest): EC2DescribeFleets {
    return new EC2DescribeFleets(this, 'DescribeFleets', this.__resources, input);
  }

  public describeFlowLogs(input: shapes.Ec2DescribeFlowLogsRequest): EC2DescribeFlowLogs {
    return new EC2DescribeFlowLogs(this, 'DescribeFlowLogs', this.__resources, input);
  }

  public describeFpgaImageAttribute(input: shapes.Ec2DescribeFpgaImageAttributeRequest): EC2DescribeFpgaImageAttribute {
    return new EC2DescribeFpgaImageAttribute(this, 'DescribeFpgaImageAttribute', this.__resources, input);
  }

  public describeFpgaImages(input: shapes.Ec2DescribeFpgaImagesRequest): EC2DescribeFpgaImages {
    return new EC2DescribeFpgaImages(this, 'DescribeFpgaImages', this.__resources, input);
  }

  public describeHostReservationOfferings(input: shapes.Ec2DescribeHostReservationOfferingsRequest): EC2DescribeHostReservationOfferings {
    return new EC2DescribeHostReservationOfferings(this, 'DescribeHostReservationOfferings', this.__resources, input);
  }

  public describeHostReservations(input: shapes.Ec2DescribeHostReservationsRequest): EC2DescribeHostReservations {
    return new EC2DescribeHostReservations(this, 'DescribeHostReservations', this.__resources, input);
  }

  public describeHosts(input: shapes.Ec2DescribeHostsRequest): EC2DescribeHosts {
    return new EC2DescribeHosts(this, 'DescribeHosts', this.__resources, input);
  }

  public describeIamInstanceProfileAssociations(input: shapes.Ec2DescribeIamInstanceProfileAssociationsRequest): EC2DescribeIamInstanceProfileAssociations {
    return new EC2DescribeIamInstanceProfileAssociations(this, 'DescribeIamInstanceProfileAssociations', this.__resources, input);
  }

  public describeIdFormat(input: shapes.Ec2DescribeIdFormatRequest): EC2DescribeIdFormat {
    return new EC2DescribeIdFormat(this, 'DescribeIdFormat', this.__resources, input);
  }

  public describeIdentityIdFormat(input: shapes.Ec2DescribeIdentityIdFormatRequest): EC2DescribeIdentityIdFormat {
    return new EC2DescribeIdentityIdFormat(this, 'DescribeIdentityIdFormat', this.__resources, input);
  }

  public describeImageAttribute(input: shapes.Ec2DescribeImageAttributeRequest): EC2DescribeImageAttribute {
    return new EC2DescribeImageAttribute(this, 'DescribeImageAttribute', this.__resources, input);
  }

  public describeImages(input: shapes.Ec2DescribeImagesRequest): EC2DescribeImages {
    return new EC2DescribeImages(this, 'DescribeImages', this.__resources, input);
  }

  public describeImportImageTasks(input: shapes.Ec2DescribeImportImageTasksRequest): EC2DescribeImportImageTasks {
    return new EC2DescribeImportImageTasks(this, 'DescribeImportImageTasks', this.__resources, input);
  }

  public describeImportSnapshotTasks(input: shapes.Ec2DescribeImportSnapshotTasksRequest): EC2DescribeImportSnapshotTasks {
    return new EC2DescribeImportSnapshotTasks(this, 'DescribeImportSnapshotTasks', this.__resources, input);
  }

  public describeInstanceAttribute(input: shapes.Ec2DescribeInstanceAttributeRequest): EC2DescribeInstanceAttribute {
    return new EC2DescribeInstanceAttribute(this, 'DescribeInstanceAttribute', this.__resources, input);
  }

  public describeInstanceCreditSpecifications(input: shapes.Ec2DescribeInstanceCreditSpecificationsRequest): EC2DescribeInstanceCreditSpecifications {
    return new EC2DescribeInstanceCreditSpecifications(this, 'DescribeInstanceCreditSpecifications', this.__resources, input);
  }

  public describeInstanceEventNotificationAttributes(input: shapes.Ec2DescribeInstanceEventNotificationAttributesRequest): EC2DescribeInstanceEventNotificationAttributes {
    return new EC2DescribeInstanceEventNotificationAttributes(this, 'DescribeInstanceEventNotificationAttributes', this.__resources, input);
  }

  public describeInstanceStatus(input: shapes.Ec2DescribeInstanceStatusRequest): EC2DescribeInstanceStatus {
    return new EC2DescribeInstanceStatus(this, 'DescribeInstanceStatus', this.__resources, input);
  }

  public describeInstanceTypeOfferings(input: shapes.Ec2DescribeInstanceTypeOfferingsRequest): EC2DescribeInstanceTypeOfferings {
    return new EC2DescribeInstanceTypeOfferings(this, 'DescribeInstanceTypeOfferings', this.__resources, input);
  }

  public describeInstanceTypes(input: shapes.Ec2DescribeInstanceTypesRequest): EC2DescribeInstanceTypes {
    return new EC2DescribeInstanceTypes(this, 'DescribeInstanceTypes', this.__resources, input);
  }

  public describeInstances(input: shapes.Ec2DescribeInstancesRequest): EC2DescribeInstances {
    return new EC2DescribeInstances(this, 'DescribeInstances', this.__resources, input);
  }

  public describeInternetGateways(input: shapes.Ec2DescribeInternetGatewaysRequest): EC2DescribeInternetGateways {
    return new EC2DescribeInternetGateways(this, 'DescribeInternetGateways', this.__resources, input);
  }

  public describeIpv6Pools(input: shapes.Ec2DescribeIpv6PoolsRequest): EC2DescribeIpv6Pools {
    return new EC2DescribeIpv6Pools(this, 'DescribeIpv6Pools', this.__resources, input);
  }

  public describeKeyPairs(input: shapes.Ec2DescribeKeyPairsRequest): EC2DescribeKeyPairs {
    return new EC2DescribeKeyPairs(this, 'DescribeKeyPairs', this.__resources, input);
  }

  public describeLaunchTemplateVersions(input: shapes.Ec2DescribeLaunchTemplateVersionsRequest): EC2DescribeLaunchTemplateVersions {
    return new EC2DescribeLaunchTemplateVersions(this, 'DescribeLaunchTemplateVersions', this.__resources, input);
  }

  public describeLaunchTemplates(input: shapes.Ec2DescribeLaunchTemplatesRequest): EC2DescribeLaunchTemplates {
    return new EC2DescribeLaunchTemplates(this, 'DescribeLaunchTemplates', this.__resources, input);
  }

  public describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(input: shapes.Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest): EC2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations {
    return new EC2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(this, 'DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations', this.__resources, input);
  }

  public describeLocalGatewayRouteTableVpcAssociations(input: shapes.Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest): EC2DescribeLocalGatewayRouteTableVpcAssociations {
    return new EC2DescribeLocalGatewayRouteTableVpcAssociations(this, 'DescribeLocalGatewayRouteTableVpcAssociations', this.__resources, input);
  }

  public describeLocalGatewayRouteTables(input: shapes.Ec2DescribeLocalGatewayRouteTablesRequest): EC2DescribeLocalGatewayRouteTables {
    return new EC2DescribeLocalGatewayRouteTables(this, 'DescribeLocalGatewayRouteTables', this.__resources, input);
  }

  public describeLocalGatewayVirtualInterfaceGroups(input: shapes.Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest): EC2DescribeLocalGatewayVirtualInterfaceGroups {
    return new EC2DescribeLocalGatewayVirtualInterfaceGroups(this, 'DescribeLocalGatewayVirtualInterfaceGroups', this.__resources, input);
  }

  public describeLocalGatewayVirtualInterfaces(input: shapes.Ec2DescribeLocalGatewayVirtualInterfacesRequest): EC2DescribeLocalGatewayVirtualInterfaces {
    return new EC2DescribeLocalGatewayVirtualInterfaces(this, 'DescribeLocalGatewayVirtualInterfaces', this.__resources, input);
  }

  public describeLocalGateways(input: shapes.Ec2DescribeLocalGatewaysRequest): EC2DescribeLocalGateways {
    return new EC2DescribeLocalGateways(this, 'DescribeLocalGateways', this.__resources, input);
  }

  public describeManagedPrefixLists(input: shapes.Ec2DescribeManagedPrefixListsRequest): EC2DescribeManagedPrefixLists {
    return new EC2DescribeManagedPrefixLists(this, 'DescribeManagedPrefixLists', this.__resources, input);
  }

  public describeMovingAddresses(input: shapes.Ec2DescribeMovingAddressesRequest): EC2DescribeMovingAddresses {
    return new EC2DescribeMovingAddresses(this, 'DescribeMovingAddresses', this.__resources, input);
  }

  public describeNatGateways(input: shapes.Ec2DescribeNatGatewaysRequest): EC2DescribeNatGateways {
    return new EC2DescribeNatGateways(this, 'DescribeNatGateways', this.__resources, input);
  }

  public describeNetworkAcls(input: shapes.Ec2DescribeNetworkAclsRequest): EC2DescribeNetworkAcls {
    return new EC2DescribeNetworkAcls(this, 'DescribeNetworkAcls', this.__resources, input);
  }

  public describeNetworkInterfaceAttribute(input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest): EC2DescribeNetworkInterfaceAttribute {
    return new EC2DescribeNetworkInterfaceAttribute(this, 'DescribeNetworkInterfaceAttribute', this.__resources, input);
  }

  public describeNetworkInterfacePermissions(input: shapes.Ec2DescribeNetworkInterfacePermissionsRequest): EC2DescribeNetworkInterfacePermissions {
    return new EC2DescribeNetworkInterfacePermissions(this, 'DescribeNetworkInterfacePermissions', this.__resources, input);
  }

  public describeNetworkInterfaces(input: shapes.Ec2DescribeNetworkInterfacesRequest): EC2DescribeNetworkInterfaces {
    return new EC2DescribeNetworkInterfaces(this, 'DescribeNetworkInterfaces', this.__resources, input);
  }

  public describePlacementGroups(input: shapes.Ec2DescribePlacementGroupsRequest): EC2DescribePlacementGroups {
    return new EC2DescribePlacementGroups(this, 'DescribePlacementGroups', this.__resources, input);
  }

  public describePrefixLists(input: shapes.Ec2DescribePrefixListsRequest): EC2DescribePrefixLists {
    return new EC2DescribePrefixLists(this, 'DescribePrefixLists', this.__resources, input);
  }

  public describePrincipalIdFormat(input: shapes.Ec2DescribePrincipalIdFormatRequest): EC2DescribePrincipalIdFormat {
    return new EC2DescribePrincipalIdFormat(this, 'DescribePrincipalIdFormat', this.__resources, input);
  }

  public describePublicIpv4Pools(input: shapes.Ec2DescribePublicIpv4PoolsRequest): EC2DescribePublicIpv4Pools {
    return new EC2DescribePublicIpv4Pools(this, 'DescribePublicIpv4Pools', this.__resources, input);
  }

  public describeRegions(input: shapes.Ec2DescribeRegionsRequest): EC2DescribeRegions {
    return new EC2DescribeRegions(this, 'DescribeRegions', this.__resources, input);
  }

  public describeReservedInstances(input: shapes.Ec2DescribeReservedInstancesRequest): EC2DescribeReservedInstances {
    return new EC2DescribeReservedInstances(this, 'DescribeReservedInstances', this.__resources, input);
  }

  public describeReservedInstancesListings(input: shapes.Ec2DescribeReservedInstancesListingsRequest): EC2DescribeReservedInstancesListings {
    return new EC2DescribeReservedInstancesListings(this, 'DescribeReservedInstancesListings', this.__resources, input);
  }

  public describeReservedInstancesModifications(input: shapes.Ec2DescribeReservedInstancesModificationsRequest): EC2DescribeReservedInstancesModifications {
    return new EC2DescribeReservedInstancesModifications(this, 'DescribeReservedInstancesModifications', this.__resources, input);
  }

  public describeReservedInstancesOfferings(input: shapes.Ec2DescribeReservedInstancesOfferingsRequest): EC2DescribeReservedInstancesOfferings {
    return new EC2DescribeReservedInstancesOfferings(this, 'DescribeReservedInstancesOfferings', this.__resources, input);
  }

  public describeRouteTables(input: shapes.Ec2DescribeRouteTablesRequest): EC2DescribeRouteTables {
    return new EC2DescribeRouteTables(this, 'DescribeRouteTables', this.__resources, input);
  }

  public describeScheduledInstanceAvailability(input: shapes.Ec2DescribeScheduledInstanceAvailabilityRequest): EC2DescribeScheduledInstanceAvailability {
    return new EC2DescribeScheduledInstanceAvailability(this, 'DescribeScheduledInstanceAvailability', this.__resources, input);
  }

  public describeScheduledInstances(input: shapes.Ec2DescribeScheduledInstancesRequest): EC2DescribeScheduledInstances {
    return new EC2DescribeScheduledInstances(this, 'DescribeScheduledInstances', this.__resources, input);
  }

  public describeSecurityGroupReferences(input: shapes.Ec2DescribeSecurityGroupReferencesRequest): EC2DescribeSecurityGroupReferences {
    return new EC2DescribeSecurityGroupReferences(this, 'DescribeSecurityGroupReferences', this.__resources, input);
  }

  public describeSecurityGroups(input: shapes.Ec2DescribeSecurityGroupsRequest): EC2DescribeSecurityGroups {
    return new EC2DescribeSecurityGroups(this, 'DescribeSecurityGroups', this.__resources, input);
  }

  public describeSnapshotAttribute(input: shapes.Ec2DescribeSnapshotAttributeRequest): EC2DescribeSnapshotAttribute {
    return new EC2DescribeSnapshotAttribute(this, 'DescribeSnapshotAttribute', this.__resources, input);
  }

  public describeSnapshots(input: shapes.Ec2DescribeSnapshotsRequest): EC2DescribeSnapshots {
    return new EC2DescribeSnapshots(this, 'DescribeSnapshots', this.__resources, input);
  }

  public describeSpotDatafeedSubscription(input: shapes.Ec2DescribeSpotDatafeedSubscriptionRequest): EC2DescribeSpotDatafeedSubscription {
    return new EC2DescribeSpotDatafeedSubscription(this, 'DescribeSpotDatafeedSubscription', this.__resources, input);
  }

  public describeSpotFleetInstances(input: shapes.Ec2DescribeSpotFleetInstancesRequest): EC2DescribeSpotFleetInstances {
    return new EC2DescribeSpotFleetInstances(this, 'DescribeSpotFleetInstances', this.__resources, input);
  }

  public describeSpotFleetRequestHistory(input: shapes.Ec2DescribeSpotFleetRequestHistoryRequest): EC2DescribeSpotFleetRequestHistory {
    return new EC2DescribeSpotFleetRequestHistory(this, 'DescribeSpotFleetRequestHistory', this.__resources, input);
  }

  public describeSpotFleetRequests(input: shapes.Ec2DescribeSpotFleetRequestsRequest): EC2DescribeSpotFleetRequests {
    return new EC2DescribeSpotFleetRequests(this, 'DescribeSpotFleetRequests', this.__resources, input);
  }

  public describeSpotInstanceRequests(input: shapes.Ec2DescribeSpotInstanceRequestsRequest): EC2DescribeSpotInstanceRequests {
    return new EC2DescribeSpotInstanceRequests(this, 'DescribeSpotInstanceRequests', this.__resources, input);
  }

  public describeSpotPriceHistory(input: shapes.Ec2DescribeSpotPriceHistoryRequest): EC2DescribeSpotPriceHistory {
    return new EC2DescribeSpotPriceHistory(this, 'DescribeSpotPriceHistory', this.__resources, input);
  }

  public describeStaleSecurityGroups(input: shapes.Ec2DescribeStaleSecurityGroupsRequest): EC2DescribeStaleSecurityGroups {
    return new EC2DescribeStaleSecurityGroups(this, 'DescribeStaleSecurityGroups', this.__resources, input);
  }

  public describeSubnets(input: shapes.Ec2DescribeSubnetsRequest): EC2DescribeSubnets {
    return new EC2DescribeSubnets(this, 'DescribeSubnets', this.__resources, input);
  }

  public describeTags(input: shapes.Ec2DescribeTagsRequest): EC2DescribeTags {
    return new EC2DescribeTags(this, 'DescribeTags', this.__resources, input);
  }

  public describeTrafficMirrorFilters(input: shapes.Ec2DescribeTrafficMirrorFiltersRequest): EC2DescribeTrafficMirrorFilters {
    return new EC2DescribeTrafficMirrorFilters(this, 'DescribeTrafficMirrorFilters', this.__resources, input);
  }

  public describeTrafficMirrorSessions(input: shapes.Ec2DescribeTrafficMirrorSessionsRequest): EC2DescribeTrafficMirrorSessions {
    return new EC2DescribeTrafficMirrorSessions(this, 'DescribeTrafficMirrorSessions', this.__resources, input);
  }

  public describeTrafficMirrorTargets(input: shapes.Ec2DescribeTrafficMirrorTargetsRequest): EC2DescribeTrafficMirrorTargets {
    return new EC2DescribeTrafficMirrorTargets(this, 'DescribeTrafficMirrorTargets', this.__resources, input);
  }

  public describeTransitGatewayAttachments(input: shapes.Ec2DescribeTransitGatewayAttachmentsRequest): EC2DescribeTransitGatewayAttachments {
    return new EC2DescribeTransitGatewayAttachments(this, 'DescribeTransitGatewayAttachments', this.__resources, input);
  }

  public describeTransitGatewayMulticastDomains(input: shapes.Ec2DescribeTransitGatewayMulticastDomainsRequest): EC2DescribeTransitGatewayMulticastDomains {
    return new EC2DescribeTransitGatewayMulticastDomains(this, 'DescribeTransitGatewayMulticastDomains', this.__resources, input);
  }

  public describeTransitGatewayPeeringAttachments(input: shapes.Ec2DescribeTransitGatewayPeeringAttachmentsRequest): EC2DescribeTransitGatewayPeeringAttachments {
    return new EC2DescribeTransitGatewayPeeringAttachments(this, 'DescribeTransitGatewayPeeringAttachments', this.__resources, input);
  }

  public describeTransitGatewayRouteTables(input: shapes.Ec2DescribeTransitGatewayRouteTablesRequest): EC2DescribeTransitGatewayRouteTables {
    return new EC2DescribeTransitGatewayRouteTables(this, 'DescribeTransitGatewayRouteTables', this.__resources, input);
  }

  public describeTransitGatewayVpcAttachments(input: shapes.Ec2DescribeTransitGatewayVpcAttachmentsRequest): EC2DescribeTransitGatewayVpcAttachments {
    return new EC2DescribeTransitGatewayVpcAttachments(this, 'DescribeTransitGatewayVpcAttachments', this.__resources, input);
  }

  public describeTransitGateways(input: shapes.Ec2DescribeTransitGatewaysRequest): EC2DescribeTransitGateways {
    return new EC2DescribeTransitGateways(this, 'DescribeTransitGateways', this.__resources, input);
  }

  public describeVolumeAttribute(input: shapes.Ec2DescribeVolumeAttributeRequest): EC2DescribeVolumeAttribute {
    return new EC2DescribeVolumeAttribute(this, 'DescribeVolumeAttribute', this.__resources, input);
  }

  public describeVolumeStatus(input: shapes.Ec2DescribeVolumeStatusRequest): EC2DescribeVolumeStatus {
    return new EC2DescribeVolumeStatus(this, 'DescribeVolumeStatus', this.__resources, input);
  }

  public describeVolumes(input: shapes.Ec2DescribeVolumesRequest): EC2DescribeVolumes {
    return new EC2DescribeVolumes(this, 'DescribeVolumes', this.__resources, input);
  }

  public describeVolumesModifications(input: shapes.Ec2DescribeVolumesModificationsRequest): EC2DescribeVolumesModifications {
    return new EC2DescribeVolumesModifications(this, 'DescribeVolumesModifications', this.__resources, input);
  }

  public describeVpcAttribute(input: shapes.Ec2DescribeVpcAttributeRequest): EC2DescribeVpcAttribute {
    return new EC2DescribeVpcAttribute(this, 'DescribeVpcAttribute', this.__resources, input);
  }

  public describeVpcClassicLink(input: shapes.Ec2DescribeVpcClassicLinkRequest): EC2DescribeVpcClassicLink {
    return new EC2DescribeVpcClassicLink(this, 'DescribeVpcClassicLink', this.__resources, input);
  }

  public describeVpcClassicLinkDnsSupport(input: shapes.Ec2DescribeVpcClassicLinkDnsSupportRequest): EC2DescribeVpcClassicLinkDnsSupport {
    return new EC2DescribeVpcClassicLinkDnsSupport(this, 'DescribeVpcClassicLinkDnsSupport', this.__resources, input);
  }

  public describeVpcEndpointConnectionNotifications(input: shapes.Ec2DescribeVpcEndpointConnectionNotificationsRequest): EC2DescribeVpcEndpointConnectionNotifications {
    return new EC2DescribeVpcEndpointConnectionNotifications(this, 'DescribeVpcEndpointConnectionNotifications', this.__resources, input);
  }

  public describeVpcEndpointConnections(input: shapes.Ec2DescribeVpcEndpointConnectionsRequest): EC2DescribeVpcEndpointConnections {
    return new EC2DescribeVpcEndpointConnections(this, 'DescribeVpcEndpointConnections', this.__resources, input);
  }

  public describeVpcEndpointServiceConfigurations(input: shapes.Ec2DescribeVpcEndpointServiceConfigurationsRequest): EC2DescribeVpcEndpointServiceConfigurations {
    return new EC2DescribeVpcEndpointServiceConfigurations(this, 'DescribeVpcEndpointServiceConfigurations', this.__resources, input);
  }

  public describeVpcEndpointServicePermissions(input: shapes.Ec2DescribeVpcEndpointServicePermissionsRequest): EC2DescribeVpcEndpointServicePermissions {
    return new EC2DescribeVpcEndpointServicePermissions(this, 'DescribeVpcEndpointServicePermissions', this.__resources, input);
  }

  public describeVpcEndpointServices(input: shapes.Ec2DescribeVpcEndpointServicesRequest): EC2DescribeVpcEndpointServices {
    return new EC2DescribeVpcEndpointServices(this, 'DescribeVpcEndpointServices', this.__resources, input);
  }

  public describeVpcEndpoints(input: shapes.Ec2DescribeVpcEndpointsRequest): EC2DescribeVpcEndpoints {
    return new EC2DescribeVpcEndpoints(this, 'DescribeVpcEndpoints', this.__resources, input);
  }

  public describeVpcPeeringConnections(input: shapes.Ec2DescribeVpcPeeringConnectionsRequest): EC2DescribeVpcPeeringConnections {
    return new EC2DescribeVpcPeeringConnections(this, 'DescribeVpcPeeringConnections', this.__resources, input);
  }

  public describeVpcs(input: shapes.Ec2DescribeVpcsRequest): EC2DescribeVpcs {
    return new EC2DescribeVpcs(this, 'DescribeVpcs', this.__resources, input);
  }

  public describeVpnConnections(input: shapes.Ec2DescribeVpnConnectionsRequest): EC2DescribeVpnConnections {
    return new EC2DescribeVpnConnections(this, 'DescribeVpnConnections', this.__resources, input);
  }

  public describeVpnGateways(input: shapes.Ec2DescribeVpnGatewaysRequest): EC2DescribeVpnGateways {
    return new EC2DescribeVpnGateways(this, 'DescribeVpnGateways', this.__resources, input);
  }

  public detachClassicLinkVpc(input: shapes.Ec2DetachClassicLinkVpcRequest): EC2DetachClassicLinkVpc {
    return new EC2DetachClassicLinkVpc(this, 'DetachClassicLinkVpc', this.__resources, input);
  }

  public detachInternetGateway(input: shapes.Ec2DetachInternetGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachInternetGateway'),
        parameters: {
          DryRun: input.dryRun,
          InternetGatewayId: input.internetGatewayId,
          VpcId: input.vpcId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DetachInternetGateway', props);
  }

  public detachNetworkInterface(input: shapes.Ec2DetachNetworkInterfaceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachNetworkInterface'),
        parameters: {
          AttachmentId: input.attachmentId,
          DryRun: input.dryRun,
          Force: input.force,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DetachNetworkInterface', props);
  }

  public detachVolume(input: shapes.Ec2DetachVolumeRequest): EC2DetachVolume {
    return new EC2DetachVolume(this, 'DetachVolume', this.__resources, input);
  }

  public detachVpnGateway(input: shapes.Ec2DetachVpnGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVpnGateway'),
        parameters: {
          VpcId: input.vpcId,
          VpnGatewayId: input.vpnGatewayId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DetachVpnGateway', props);
  }

  public disableEbsEncryptionByDefault(input: shapes.Ec2DisableEbsEncryptionByDefaultRequest): EC2DisableEbsEncryptionByDefault {
    return new EC2DisableEbsEncryptionByDefault(this, 'DisableEbsEncryptionByDefault', this.__resources, input);
  }

  public disableFastSnapshotRestores(input: shapes.Ec2DisableFastSnapshotRestoresRequest): EC2DisableFastSnapshotRestores {
    return new EC2DisableFastSnapshotRestores(this, 'DisableFastSnapshotRestores', this.__resources, input);
  }

  public disableTransitGatewayRouteTablePropagation(input: shapes.Ec2DisableTransitGatewayRouteTablePropagationRequest): EC2DisableTransitGatewayRouteTablePropagation {
    return new EC2DisableTransitGatewayRouteTablePropagation(this, 'DisableTransitGatewayRouteTablePropagation', this.__resources, input);
  }

  public disableVgwRoutePropagation(input: shapes.Ec2DisableVgwRoutePropagationRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableVgwRoutePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableVgwRoutePropagation'),
        parameters: {
          GatewayId: input.gatewayId,
          RouteTableId: input.routeTableId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DisableVgwRoutePropagation', props);
  }

  public disableVpcClassicLink(input: shapes.Ec2DisableVpcClassicLinkRequest): EC2DisableVpcClassicLink {
    return new EC2DisableVpcClassicLink(this, 'DisableVpcClassicLink', this.__resources, input);
  }

  public disableVpcClassicLinkDnsSupport(input: shapes.Ec2DisableVpcClassicLinkDnsSupportRequest): EC2DisableVpcClassicLinkDnsSupport {
    return new EC2DisableVpcClassicLinkDnsSupport(this, 'DisableVpcClassicLinkDnsSupport', this.__resources, input);
  }

  public disassociateAddress(input: shapes.Ec2DisassociateAddressRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateAddress'),
        parameters: {
          AssociationId: input.associationId,
          PublicIp: input.publicIp,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DisassociateAddress', props);
  }

  public disassociateClientVpnTargetNetwork(input: shapes.Ec2DisassociateClientVpnTargetNetworkRequest): EC2DisassociateClientVpnTargetNetwork {
    return new EC2DisassociateClientVpnTargetNetwork(this, 'DisassociateClientVpnTargetNetwork', this.__resources, input);
  }

  public disassociateEnclaveCertificateIamRole(input: shapes.Ec2DisassociateEnclaveCertificateIamRoleRequest): EC2DisassociateEnclaveCertificateIamRole {
    return new EC2DisassociateEnclaveCertificateIamRole(this, 'DisassociateEnclaveCertificateIamRole', this.__resources, input);
  }

  public disassociateIamInstanceProfile(input: shapes.Ec2DisassociateIamInstanceProfileRequest): EC2DisassociateIamInstanceProfile {
    return new EC2DisassociateIamInstanceProfile(this, 'DisassociateIamInstanceProfile', this.__resources, input);
  }

  public disassociateRouteTable(input: shapes.Ec2DisassociateRouteTableRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateRouteTable'),
        parameters: {
          AssociationId: input.associationId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DisassociateRouteTable', props);
  }

  public disassociateSubnetCidrBlock(input: shapes.Ec2DisassociateSubnetCidrBlockRequest): EC2DisassociateSubnetCidrBlock {
    return new EC2DisassociateSubnetCidrBlock(this, 'DisassociateSubnetCidrBlock', this.__resources, input);
  }

  public disassociateTransitGatewayMulticastDomain(input: shapes.Ec2DisassociateTransitGatewayMulticastDomainRequest): EC2DisassociateTransitGatewayMulticastDomain {
    return new EC2DisassociateTransitGatewayMulticastDomain(this, 'DisassociateTransitGatewayMulticastDomain', this.__resources, input);
  }

  public disassociateTransitGatewayRouteTable(input: shapes.Ec2DisassociateTransitGatewayRouteTableRequest): EC2DisassociateTransitGatewayRouteTable {
    return new EC2DisassociateTransitGatewayRouteTable(this, 'DisassociateTransitGatewayRouteTable', this.__resources, input);
  }

  public disassociateVpcCidrBlock(input: shapes.Ec2DisassociateVpcCidrBlockRequest): EC2DisassociateVpcCidrBlock {
    return new EC2DisassociateVpcCidrBlock(this, 'DisassociateVpcCidrBlock', this.__resources, input);
  }

  public enableEbsEncryptionByDefault(input: shapes.Ec2EnableEbsEncryptionByDefaultRequest): EC2EnableEbsEncryptionByDefault {
    return new EC2EnableEbsEncryptionByDefault(this, 'EnableEbsEncryptionByDefault', this.__resources, input);
  }

  public enableFastSnapshotRestores(input: shapes.Ec2EnableFastSnapshotRestoresRequest): EC2EnableFastSnapshotRestores {
    return new EC2EnableFastSnapshotRestores(this, 'EnableFastSnapshotRestores', this.__resources, input);
  }

  public enableTransitGatewayRouteTablePropagation(input: shapes.Ec2EnableTransitGatewayRouteTablePropagationRequest): EC2EnableTransitGatewayRouteTablePropagation {
    return new EC2EnableTransitGatewayRouteTablePropagation(this, 'EnableTransitGatewayRouteTablePropagation', this.__resources, input);
  }

  public enableVgwRoutePropagation(input: shapes.Ec2EnableVgwRoutePropagationRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableVgwRoutePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableVgwRoutePropagation'),
        parameters: {
          GatewayId: input.gatewayId,
          RouteTableId: input.routeTableId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'EnableVgwRoutePropagation', props);
  }

  public enableVolumeIo(input: shapes.Ec2EnableVolumeIoRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableVolumeIo',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableVolumeIO'),
        parameters: {
          DryRun: input.dryRun,
          VolumeId: input.volumeId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'EnableVolumeIO', props);
  }

  public enableVpcClassicLink(input: shapes.Ec2EnableVpcClassicLinkRequest): EC2EnableVpcClassicLink {
    return new EC2EnableVpcClassicLink(this, 'EnableVpcClassicLink', this.__resources, input);
  }

  public enableVpcClassicLinkDnsSupport(input: shapes.Ec2EnableVpcClassicLinkDnsSupportRequest): EC2EnableVpcClassicLinkDnsSupport {
    return new EC2EnableVpcClassicLinkDnsSupport(this, 'EnableVpcClassicLinkDnsSupport', this.__resources, input);
  }

  public exportClientVpnClientCertificateRevocationList(input: shapes.Ec2ExportClientVpnClientCertificateRevocationListRequest): EC2ExportClientVpnClientCertificateRevocationList {
    return new EC2ExportClientVpnClientCertificateRevocationList(this, 'ExportClientVpnClientCertificateRevocationList', this.__resources, input);
  }

  public exportClientVpnClientConfiguration(input: shapes.Ec2ExportClientVpnClientConfigurationRequest): EC2ExportClientVpnClientConfiguration {
    return new EC2ExportClientVpnClientConfiguration(this, 'ExportClientVpnClientConfiguration', this.__resources, input);
  }

  public exportImage(input: shapes.Ec2ExportImageRequest): EC2ExportImage {
    return new EC2ExportImage(this, 'ExportImage', this.__resources, input);
  }

  public exportTransitGatewayRoutes(input: shapes.Ec2ExportTransitGatewayRoutesRequest): EC2ExportTransitGatewayRoutes {
    return new EC2ExportTransitGatewayRoutes(this, 'ExportTransitGatewayRoutes', this.__resources, input);
  }

  public fetchAssociatedEnclaveCertificateIamRoles(input: shapes.Ec2GetAssociatedEnclaveCertificateIamRolesRequest): EC2FetchAssociatedEnclaveCertificateIamRoles {
    return new EC2FetchAssociatedEnclaveCertificateIamRoles(this, 'FetchAssociatedEnclaveCertificateIamRoles', this.__resources, input);
  }

  public fetchAssociatedIpv6PoolCidrs(input: shapes.Ec2GetAssociatedIpv6PoolCidrsRequest): EC2FetchAssociatedIpv6PoolCidrs {
    return new EC2FetchAssociatedIpv6PoolCidrs(this, 'FetchAssociatedIpv6PoolCidrs', this.__resources, input);
  }

  public fetchCapacityReservationUsage(input: shapes.Ec2GetCapacityReservationUsageRequest): EC2FetchCapacityReservationUsage {
    return new EC2FetchCapacityReservationUsage(this, 'FetchCapacityReservationUsage', this.__resources, input);
  }

  public fetchCoipPoolUsage(input: shapes.Ec2GetCoipPoolUsageRequest): EC2FetchCoipPoolUsage {
    return new EC2FetchCoipPoolUsage(this, 'FetchCoipPoolUsage', this.__resources, input);
  }

  public fetchConsoleOutput(input: shapes.Ec2GetConsoleOutputRequest): EC2FetchConsoleOutput {
    return new EC2FetchConsoleOutput(this, 'FetchConsoleOutput', this.__resources, input);
  }

  public fetchConsoleScreenshot(input: shapes.Ec2GetConsoleScreenshotRequest): EC2FetchConsoleScreenshot {
    return new EC2FetchConsoleScreenshot(this, 'FetchConsoleScreenshot', this.__resources, input);
  }

  public fetchDefaultCreditSpecification(input: shapes.Ec2GetDefaultCreditSpecificationRequest): EC2FetchDefaultCreditSpecification {
    return new EC2FetchDefaultCreditSpecification(this, 'FetchDefaultCreditSpecification', this.__resources, input);
  }

  public fetchEbsDefaultKmsKeyId(input: shapes.Ec2GetEbsDefaultKmsKeyIdRequest): EC2FetchEbsDefaultKmsKeyId {
    return new EC2FetchEbsDefaultKmsKeyId(this, 'FetchEbsDefaultKmsKeyId', this.__resources, input);
  }

  public fetchEbsEncryptionByDefault(input: shapes.Ec2GetEbsEncryptionByDefaultRequest): EC2FetchEbsEncryptionByDefault {
    return new EC2FetchEbsEncryptionByDefault(this, 'FetchEbsEncryptionByDefault', this.__resources, input);
  }

  public fetchGroupsForCapacityReservation(input: shapes.Ec2GetGroupsForCapacityReservationRequest): EC2FetchGroupsForCapacityReservation {
    return new EC2FetchGroupsForCapacityReservation(this, 'FetchGroupsForCapacityReservation', this.__resources, input);
  }

  public fetchHostReservationPurchasePreview(input: shapes.Ec2GetHostReservationPurchasePreviewRequest): EC2FetchHostReservationPurchasePreview {
    return new EC2FetchHostReservationPurchasePreview(this, 'FetchHostReservationPurchasePreview', this.__resources, input);
  }

  public fetchLaunchTemplateData(input: shapes.Ec2GetLaunchTemplateDataRequest): EC2FetchLaunchTemplateData {
    return new EC2FetchLaunchTemplateData(this, 'FetchLaunchTemplateData', this.__resources, input);
  }

  public fetchManagedPrefixListAssociations(input: shapes.Ec2GetManagedPrefixListAssociationsRequest): EC2FetchManagedPrefixListAssociations {
    return new EC2FetchManagedPrefixListAssociations(this, 'FetchManagedPrefixListAssociations', this.__resources, input);
  }

  public fetchManagedPrefixListEntries(input: shapes.Ec2GetManagedPrefixListEntriesRequest): EC2FetchManagedPrefixListEntries {
    return new EC2FetchManagedPrefixListEntries(this, 'FetchManagedPrefixListEntries', this.__resources, input);
  }

  public fetchPasswordData(input: shapes.Ec2GetPasswordDataRequest): EC2FetchPasswordData {
    return new EC2FetchPasswordData(this, 'FetchPasswordData', this.__resources, input);
  }

  public fetchReservedInstancesExchangeQuote(input: shapes.Ec2GetReservedInstancesExchangeQuoteRequest): EC2FetchReservedInstancesExchangeQuote {
    return new EC2FetchReservedInstancesExchangeQuote(this, 'FetchReservedInstancesExchangeQuote', this.__resources, input);
  }

  public fetchTransitGatewayAttachmentPropagations(input: shapes.Ec2GetTransitGatewayAttachmentPropagationsRequest): EC2FetchTransitGatewayAttachmentPropagations {
    return new EC2FetchTransitGatewayAttachmentPropagations(this, 'FetchTransitGatewayAttachmentPropagations', this.__resources, input);
  }

  public fetchTransitGatewayMulticastDomainAssociations(input: shapes.Ec2GetTransitGatewayMulticastDomainAssociationsRequest): EC2FetchTransitGatewayMulticastDomainAssociations {
    return new EC2FetchTransitGatewayMulticastDomainAssociations(this, 'FetchTransitGatewayMulticastDomainAssociations', this.__resources, input);
  }

  public fetchTransitGatewayPrefixListReferences(input: shapes.Ec2GetTransitGatewayPrefixListReferencesRequest): EC2FetchTransitGatewayPrefixListReferences {
    return new EC2FetchTransitGatewayPrefixListReferences(this, 'FetchTransitGatewayPrefixListReferences', this.__resources, input);
  }

  public fetchTransitGatewayRouteTableAssociations(input: shapes.Ec2GetTransitGatewayRouteTableAssociationsRequest): EC2FetchTransitGatewayRouteTableAssociations {
    return new EC2FetchTransitGatewayRouteTableAssociations(this, 'FetchTransitGatewayRouteTableAssociations', this.__resources, input);
  }

  public fetchTransitGatewayRouteTablePropagations(input: shapes.Ec2GetTransitGatewayRouteTablePropagationsRequest): EC2FetchTransitGatewayRouteTablePropagations {
    return new EC2FetchTransitGatewayRouteTablePropagations(this, 'FetchTransitGatewayRouteTablePropagations', this.__resources, input);
  }

  public importClientVpnClientCertificateRevocationList(input: shapes.Ec2ImportClientVpnClientCertificateRevocationListRequest): EC2ImportClientVpnClientCertificateRevocationList {
    return new EC2ImportClientVpnClientCertificateRevocationList(this, 'ImportClientVpnClientCertificateRevocationList', this.__resources, input);
  }

  public importImage(input: shapes.Ec2ImportImageRequest): EC2ImportImage {
    return new EC2ImportImage(this, 'ImportImage', this.__resources, input);
  }

  public importInstance(input: shapes.Ec2ImportInstanceRequest): EC2ImportInstance {
    return new EC2ImportInstance(this, 'ImportInstance', this.__resources, input);
  }

  public importKeyPair(input: shapes.Ec2ImportKeyPairRequest): EC2ImportKeyPair {
    return new EC2ImportKeyPair(this, 'ImportKeyPair', this.__resources, input);
  }

  public importSnapshot(input: shapes.Ec2ImportSnapshotRequest): EC2ImportSnapshot {
    return new EC2ImportSnapshot(this, 'ImportSnapshot', this.__resources, input);
  }

  public importVolume(input: shapes.Ec2ImportVolumeRequest): EC2ImportVolume {
    return new EC2ImportVolume(this, 'ImportVolume', this.__resources, input);
  }

  public modifyAvailabilityZoneGroup(input: shapes.Ec2ModifyAvailabilityZoneGroupRequest): EC2ModifyAvailabilityZoneGroup {
    return new EC2ModifyAvailabilityZoneGroup(this, 'ModifyAvailabilityZoneGroup', this.__resources, input);
  }

  public modifyCapacityReservation(input: shapes.Ec2ModifyCapacityReservationRequest): EC2ModifyCapacityReservation {
    return new EC2ModifyCapacityReservation(this, 'ModifyCapacityReservation', this.__resources, input);
  }

  public modifyClientVpnEndpoint(input: shapes.Ec2ModifyClientVpnEndpointRequest): EC2ModifyClientVpnEndpoint {
    return new EC2ModifyClientVpnEndpoint(this, 'ModifyClientVpnEndpoint', this.__resources, input);
  }

  public modifyDefaultCreditSpecification(input: shapes.Ec2ModifyDefaultCreditSpecificationRequest): EC2ModifyDefaultCreditSpecification {
    return new EC2ModifyDefaultCreditSpecification(this, 'ModifyDefaultCreditSpecification', this.__resources, input);
  }

  public modifyEbsDefaultKmsKeyId(input: shapes.Ec2ModifyEbsDefaultKmsKeyIdRequest): EC2ModifyEbsDefaultKmsKeyId {
    return new EC2ModifyEbsDefaultKmsKeyId(this, 'ModifyEbsDefaultKmsKeyId', this.__resources, input);
  }

  public modifyFleet(input: shapes.Ec2ModifyFleetRequest): EC2ModifyFleet {
    return new EC2ModifyFleet(this, 'ModifyFleet', this.__resources, input);
  }

  public modifyFpgaImageAttribute(input: shapes.Ec2ModifyFpgaImageAttributeRequest): EC2ModifyFpgaImageAttribute {
    return new EC2ModifyFpgaImageAttribute(this, 'ModifyFpgaImageAttribute', this.__resources, input);
  }

  public modifyHosts(input: shapes.Ec2ModifyHostsRequest): EC2ModifyHosts {
    return new EC2ModifyHosts(this, 'ModifyHosts', this.__resources, input);
  }

  public modifyIdFormat(input: shapes.Ec2ModifyIdFormatRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyIdFormat'),
        parameters: {
          Resource: input.resource,
          UseLongIds: input.useLongIds,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyIdFormat', props);
  }

  public modifyIdentityIdFormat(input: shapes.Ec2ModifyIdentityIdFormatRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyIdentityIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyIdentityIdFormat'),
        parameters: {
          PrincipalArn: input.principalArn,
          Resource: input.resource,
          UseLongIds: input.useLongIds,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyIdentityIdFormat', props);
  }

  public modifyImageAttribute(input: shapes.Ec2ModifyImageAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyImageAttribute'),
        parameters: {
          Attribute: input.attribute,
          Description: {
            Value: input.description?.value,
          },
          ImageId: input.imageId,
          LaunchPermission: {
            Add: input.launchPermission?.add,
            Remove: input.launchPermission?.remove,
          },
          OperationType: input.operationType,
          ProductCodes: input.productCodes,
          UserGroups: input.userGroups,
          UserIds: input.userIds,
          Value: input.value,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyImageAttribute', props);
  }

  public modifyInstanceAttribute(input: shapes.Ec2ModifyInstanceAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceAttribute'),
        parameters: {
          SourceDestCheck: {
            Value: input.sourceDestCheck?.value,
          },
          Attribute: input.attribute,
          BlockDeviceMappings: input.blockDeviceMappings,
          DisableApiTermination: {
            Value: input.disableApiTermination?.value,
          },
          DryRun: input.dryRun,
          EbsOptimized: {
            Value: input.ebsOptimized?.value,
          },
          EnaSupport: {
            Value: input.enaSupport?.value,
          },
          Groups: input.groups,
          InstanceId: input.instanceId,
          InstanceInitiatedShutdownBehavior: {
            Value: input.instanceInitiatedShutdownBehavior?.value,
          },
          InstanceType: {
            Value: input.instanceType?.value,
          },
          Kernel: {
            Value: input.kernel?.value,
          },
          Ramdisk: {
            Value: input.ramdisk?.value,
          },
          SriovNetSupport: {
            Value: input.sriovNetSupport?.value,
          },
          UserData: {
            Value: {
            },
          },
          Value: input.value,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyInstanceAttribute', props);
  }

  public modifyInstanceCapacityReservationAttributes(input: shapes.Ec2ModifyInstanceCapacityReservationAttributesRequest): EC2ModifyInstanceCapacityReservationAttributes {
    return new EC2ModifyInstanceCapacityReservationAttributes(this, 'ModifyInstanceCapacityReservationAttributes', this.__resources, input);
  }

  public modifyInstanceCreditSpecification(input: shapes.Ec2ModifyInstanceCreditSpecificationRequest): EC2ModifyInstanceCreditSpecification {
    return new EC2ModifyInstanceCreditSpecification(this, 'ModifyInstanceCreditSpecification', this.__resources, input);
  }

  public modifyInstanceEventStartTime(input: shapes.Ec2ModifyInstanceEventStartTimeRequest): EC2ModifyInstanceEventStartTime {
    return new EC2ModifyInstanceEventStartTime(this, 'ModifyInstanceEventStartTime', this.__resources, input);
  }

  public modifyInstanceMetadataOptions(input: shapes.Ec2ModifyInstanceMetadataOptionsRequest): EC2ModifyInstanceMetadataOptions {
    return new EC2ModifyInstanceMetadataOptions(this, 'ModifyInstanceMetadataOptions', this.__resources, input);
  }

  public modifyInstancePlacement(input: shapes.Ec2ModifyInstancePlacementRequest): EC2ModifyInstancePlacement {
    return new EC2ModifyInstancePlacement(this, 'ModifyInstancePlacement', this.__resources, input);
  }

  public modifyLaunchTemplate(input: shapes.Ec2ModifyLaunchTemplateRequest): EC2ModifyLaunchTemplate {
    return new EC2ModifyLaunchTemplate(this, 'ModifyLaunchTemplate', this.__resources, input);
  }

  public modifyManagedPrefixList(input: shapes.Ec2ModifyManagedPrefixListRequest): EC2ModifyManagedPrefixList {
    return new EC2ModifyManagedPrefixList(this, 'ModifyManagedPrefixList', this.__resources, input);
  }

  public modifyNetworkInterfaceAttribute(input: shapes.Ec2ModifyNetworkInterfaceAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyNetworkInterfaceAttribute'),
        parameters: {
          Attachment: {
            AttachmentId: input.attachment?.attachmentId,
            DeleteOnTermination: input.attachment?.deleteOnTermination,
          },
          Description: {
            Value: input.description?.value,
          },
          DryRun: input.dryRun,
          Groups: input.groups,
          NetworkInterfaceId: input.networkInterfaceId,
          SourceDestCheck: {
            Value: input.sourceDestCheck?.value,
          },
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyNetworkInterfaceAttribute', props);
  }

  public modifyReservedInstances(input: shapes.Ec2ModifyReservedInstancesRequest): EC2ModifyReservedInstances {
    return new EC2ModifyReservedInstances(this, 'ModifyReservedInstances', this.__resources, input);
  }

  public modifySnapshotAttribute(input: shapes.Ec2ModifySnapshotAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifySnapshotAttribute'),
        parameters: {
          Attribute: input.attribute,
          CreateVolumePermission: {
            Add: input.createVolumePermission?.add,
            Remove: input.createVolumePermission?.remove,
          },
          GroupNames: input.groupNames,
          OperationType: input.operationType,
          SnapshotId: input.snapshotId,
          UserIds: input.userIds,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifySnapshotAttribute', props);
  }

  public modifySpotFleetRequest(input: shapes.Ec2ModifySpotFleetRequestRequest): EC2ModifySpotFleetRequest {
    return new EC2ModifySpotFleetRequest(this, 'ModifySpotFleetRequest', this.__resources, input);
  }

  public modifySubnetAttribute(input: shapes.Ec2ModifySubnetAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySubnetAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifySubnetAttribute'),
        parameters: {
          AssignIpv6AddressOnCreation: {
            Value: input.assignIpv6AddressOnCreation?.value,
          },
          MapPublicIpOnLaunch: {
            Value: input.mapPublicIpOnLaunch?.value,
          },
          SubnetId: input.subnetId,
          MapCustomerOwnedIpOnLaunch: {
            Value: input.mapCustomerOwnedIpOnLaunch?.value,
          },
          CustomerOwnedIpv4Pool: input.customerOwnedIpv4Pool,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifySubnetAttribute', props);
  }

  public modifyTrafficMirrorFilterNetworkServices(input: shapes.Ec2ModifyTrafficMirrorFilterNetworkServicesRequest): EC2ModifyTrafficMirrorFilterNetworkServices {
    return new EC2ModifyTrafficMirrorFilterNetworkServices(this, 'ModifyTrafficMirrorFilterNetworkServices', this.__resources, input);
  }

  public modifyTrafficMirrorFilterRule(input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest): EC2ModifyTrafficMirrorFilterRule {
    return new EC2ModifyTrafficMirrorFilterRule(this, 'ModifyTrafficMirrorFilterRule', this.__resources, input);
  }

  public modifyTrafficMirrorSession(input: shapes.Ec2ModifyTrafficMirrorSessionRequest): EC2ModifyTrafficMirrorSession {
    return new EC2ModifyTrafficMirrorSession(this, 'ModifyTrafficMirrorSession', this.__resources, input);
  }

  public modifyTransitGateway(input: shapes.Ec2ModifyTransitGatewayRequest): EC2ModifyTransitGateway {
    return new EC2ModifyTransitGateway(this, 'ModifyTransitGateway', this.__resources, input);
  }

  public modifyTransitGatewayPrefixListReference(input: shapes.Ec2ModifyTransitGatewayPrefixListReferenceRequest): EC2ModifyTransitGatewayPrefixListReference {
    return new EC2ModifyTransitGatewayPrefixListReference(this, 'ModifyTransitGatewayPrefixListReference', this.__resources, input);
  }

  public modifyTransitGatewayVpcAttachment(input: shapes.Ec2ModifyTransitGatewayVpcAttachmentRequest): EC2ModifyTransitGatewayVpcAttachment {
    return new EC2ModifyTransitGatewayVpcAttachment(this, 'ModifyTransitGatewayVpcAttachment', this.__resources, input);
  }

  public modifyVolume(input: shapes.Ec2ModifyVolumeRequest): EC2ModifyVolume {
    return new EC2ModifyVolume(this, 'ModifyVolume', this.__resources, input);
  }

  public modifyVolumeAttribute(input: shapes.Ec2ModifyVolumeAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolumeAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolumeAttribute'),
        parameters: {
          AutoEnableIO: {
            Value: input.autoEnableIo?.value,
          },
          VolumeId: input.volumeId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyVolumeAttribute', props);
  }

  public modifyVpcAttribute(input: shapes.Ec2ModifyVpcAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcAttribute'),
        parameters: {
          EnableDnsHostnames: {
            Value: input.enableDnsHostnames?.value,
          },
          EnableDnsSupport: {
            Value: input.enableDnsSupport?.value,
          },
          VpcId: input.vpcId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyVpcAttribute', props);
  }

  public modifyVpcEndpoint(input: shapes.Ec2ModifyVpcEndpointRequest): EC2ModifyVpcEndpoint {
    return new EC2ModifyVpcEndpoint(this, 'ModifyVpcEndpoint', this.__resources, input);
  }

  public modifyVpcEndpointConnectionNotification(input: shapes.Ec2ModifyVpcEndpointConnectionNotificationRequest): EC2ModifyVpcEndpointConnectionNotification {
    return new EC2ModifyVpcEndpointConnectionNotification(this, 'ModifyVpcEndpointConnectionNotification', this.__resources, input);
  }

  public modifyVpcEndpointServiceConfiguration(input: shapes.Ec2ModifyVpcEndpointServiceConfigurationRequest): EC2ModifyVpcEndpointServiceConfiguration {
    return new EC2ModifyVpcEndpointServiceConfiguration(this, 'ModifyVpcEndpointServiceConfiguration', this.__resources, input);
  }

  public modifyVpcEndpointServicePermissions(input: shapes.Ec2ModifyVpcEndpointServicePermissionsRequest): EC2ModifyVpcEndpointServicePermissions {
    return new EC2ModifyVpcEndpointServicePermissions(this, 'ModifyVpcEndpointServicePermissions', this.__resources, input);
  }

  public modifyVpcPeeringConnectionOptions(input: shapes.Ec2ModifyVpcPeeringConnectionOptionsRequest): EC2ModifyVpcPeeringConnectionOptions {
    return new EC2ModifyVpcPeeringConnectionOptions(this, 'ModifyVpcPeeringConnectionOptions', this.__resources, input);
  }

  public modifyVpcTenancy(input: shapes.Ec2ModifyVpcTenancyRequest): EC2ModifyVpcTenancy {
    return new EC2ModifyVpcTenancy(this, 'ModifyVpcTenancy', this.__resources, input);
  }

  public modifyVpnConnection(input: shapes.Ec2ModifyVpnConnectionRequest): EC2ModifyVpnConnection {
    return new EC2ModifyVpnConnection(this, 'ModifyVpnConnection', this.__resources, input);
  }

  public modifyVpnConnectionOptions(input: shapes.Ec2ModifyVpnConnectionOptionsRequest): EC2ModifyVpnConnectionOptions {
    return new EC2ModifyVpnConnectionOptions(this, 'ModifyVpnConnectionOptions', this.__resources, input);
  }

  public modifyVpnTunnelCertificate(input: shapes.Ec2ModifyVpnTunnelCertificateRequest): EC2ModifyVpnTunnelCertificate {
    return new EC2ModifyVpnTunnelCertificate(this, 'ModifyVpnTunnelCertificate', this.__resources, input);
  }

  public modifyVpnTunnelOptions(input: shapes.Ec2ModifyVpnTunnelOptionsRequest): EC2ModifyVpnTunnelOptions {
    return new EC2ModifyVpnTunnelOptions(this, 'ModifyVpnTunnelOptions', this.__resources, input);
  }

  public monitorInstances(input: shapes.Ec2MonitorInstancesRequest): EC2MonitorInstances {
    return new EC2MonitorInstances(this, 'MonitorInstances', this.__resources, input);
  }

  public moveAddressToVpc(input: shapes.Ec2MoveAddressToVpcRequest): EC2MoveAddressToVpc {
    return new EC2MoveAddressToVpc(this, 'MoveAddressToVpc', this.__resources, input);
  }

  public provisionByoipCidr(input: shapes.Ec2ProvisionByoipCidrRequest): EC2ProvisionByoipCidr {
    return new EC2ProvisionByoipCidr(this, 'ProvisionByoipCidr', this.__resources, input);
  }

  public purchaseHostReservation(input: shapes.Ec2PurchaseHostReservationRequest): EC2PurchaseHostReservation {
    return new EC2PurchaseHostReservation(this, 'PurchaseHostReservation', this.__resources, input);
  }

  public purchaseReservedInstancesOffering(input: shapes.Ec2PurchaseReservedInstancesOfferingRequest): EC2PurchaseReservedInstancesOffering {
    return new EC2PurchaseReservedInstancesOffering(this, 'PurchaseReservedInstancesOffering', this.__resources, input);
  }

  public purchaseScheduledInstances(input: shapes.Ec2PurchaseScheduledInstancesRequest): EC2PurchaseScheduledInstances {
    return new EC2PurchaseScheduledInstances(this, 'PurchaseScheduledInstances', this.__resources, input);
  }

  public rebootInstances(input: shapes.Ec2RebootInstancesRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RebootInstances'),
        parameters: {
          InstanceIds: input.instanceIds,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RebootInstances', props);
  }

  public registerImage(input: shapes.Ec2RegisterImageRequest): EC2RegisterImage {
    return new EC2RegisterImage(this, 'RegisterImage', this.__resources, input);
  }

  public registerInstanceEventNotificationAttributes(input: shapes.Ec2RegisterInstanceEventNotificationAttributesRequest): EC2RegisterInstanceEventNotificationAttributes {
    return new EC2RegisterInstanceEventNotificationAttributes(this, 'RegisterInstanceEventNotificationAttributes', this.__resources, input);
  }

  public registerTransitGatewayMulticastGroupMembers(input: shapes.Ec2RegisterTransitGatewayMulticastGroupMembersRequest): EC2RegisterTransitGatewayMulticastGroupMembers {
    return new EC2RegisterTransitGatewayMulticastGroupMembers(this, 'RegisterTransitGatewayMulticastGroupMembers', this.__resources, input);
  }

  public registerTransitGatewayMulticastGroupSources(input: shapes.Ec2RegisterTransitGatewayMulticastGroupSourcesRequest): EC2RegisterTransitGatewayMulticastGroupSources {
    return new EC2RegisterTransitGatewayMulticastGroupSources(this, 'RegisterTransitGatewayMulticastGroupSources', this.__resources, input);
  }

  public rejectTransitGatewayPeeringAttachment(input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest): EC2RejectTransitGatewayPeeringAttachment {
    return new EC2RejectTransitGatewayPeeringAttachment(this, 'RejectTransitGatewayPeeringAttachment', this.__resources, input);
  }

  public rejectTransitGatewayVpcAttachment(input: shapes.Ec2RejectTransitGatewayVpcAttachmentRequest): EC2RejectTransitGatewayVpcAttachment {
    return new EC2RejectTransitGatewayVpcAttachment(this, 'RejectTransitGatewayVpcAttachment', this.__resources, input);
  }

  public rejectVpcEndpointConnections(input: shapes.Ec2RejectVpcEndpointConnectionsRequest): EC2RejectVpcEndpointConnections {
    return new EC2RejectVpcEndpointConnections(this, 'RejectVpcEndpointConnections', this.__resources, input);
  }

  public rejectVpcPeeringConnection(input: shapes.Ec2RejectVpcPeeringConnectionRequest): EC2RejectVpcPeeringConnection {
    return new EC2RejectVpcPeeringConnection(this, 'RejectVpcPeeringConnection', this.__resources, input);
  }

  public releaseAddress(input: shapes.Ec2ReleaseAddressRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'releaseAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReleaseAddress'),
        parameters: {
          AllocationId: input.allocationId,
          PublicIp: input.publicIp,
          NetworkBorderGroup: input.networkBorderGroup,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ReleaseAddress', props);
  }

  public releaseHosts(input: shapes.Ec2ReleaseHostsRequest): EC2ReleaseHosts {
    return new EC2ReleaseHosts(this, 'ReleaseHosts', this.__resources, input);
  }

  public replaceIamInstanceProfileAssociation(input: shapes.Ec2ReplaceIamInstanceProfileAssociationRequest): EC2ReplaceIamInstanceProfileAssociation {
    return new EC2ReplaceIamInstanceProfileAssociation(this, 'ReplaceIamInstanceProfileAssociation', this.__resources, input);
  }

  public replaceNetworkAclAssociation(input: shapes.Ec2ReplaceNetworkAclAssociationRequest): EC2ReplaceNetworkAclAssociation {
    return new EC2ReplaceNetworkAclAssociation(this, 'ReplaceNetworkAclAssociation', this.__resources, input);
  }

  public replaceNetworkAclEntry(input: shapes.Ec2ReplaceNetworkAclEntryRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceNetworkAclEntry',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceNetworkAclEntry'),
        parameters: {
          CidrBlock: input.cidrBlock,
          DryRun: input.dryRun,
          Egress: input.egress,
          IcmpTypeCode: {
            Code: input.icmpTypeCode?.code,
            Type: input.icmpTypeCode?.type,
          },
          Ipv6CidrBlock: input.ipv6CidrBlock,
          NetworkAclId: input.networkAclId,
          PortRange: {
            From: input.portRange?.from,
            To: input.portRange?.to,
          },
          Protocol: input.protocol,
          RuleAction: input.ruleAction,
          RuleNumber: input.ruleNumber,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ReplaceNetworkAclEntry', props);
  }

  public replaceRoute(input: shapes.Ec2ReplaceRouteRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceRoute'),
        parameters: {
          DestinationCidrBlock: input.destinationCidrBlock,
          DestinationIpv6CidrBlock: input.destinationIpv6CidrBlock,
          DestinationPrefixListId: input.destinationPrefixListId,
          DryRun: input.dryRun,
          VpcEndpointId: input.vpcEndpointId,
          EgressOnlyInternetGatewayId: input.egressOnlyInternetGatewayId,
          GatewayId: input.gatewayId,
          InstanceId: input.instanceId,
          LocalTarget: input.localTarget,
          NatGatewayId: input.natGatewayId,
          TransitGatewayId: input.transitGatewayId,
          LocalGatewayId: input.localGatewayId,
          CarrierGatewayId: input.carrierGatewayId,
          NetworkInterfaceId: input.networkInterfaceId,
          RouteTableId: input.routeTableId,
          VpcPeeringConnectionId: input.vpcPeeringConnectionId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ReplaceRoute', props);
  }

  public replaceRouteTableAssociation(input: shapes.Ec2ReplaceRouteTableAssociationRequest): EC2ReplaceRouteTableAssociation {
    return new EC2ReplaceRouteTableAssociation(this, 'ReplaceRouteTableAssociation', this.__resources, input);
  }

  public replaceTransitGatewayRoute(input: shapes.Ec2ReplaceTransitGatewayRouteRequest): EC2ReplaceTransitGatewayRoute {
    return new EC2ReplaceTransitGatewayRoute(this, 'ReplaceTransitGatewayRoute', this.__resources, input);
  }

  public reportInstanceStatus(input: shapes.Ec2ReportInstanceStatusRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'reportInstanceStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReportInstanceStatus'),
        parameters: {
          Description: input.description,
          DryRun: input.dryRun,
          EndTime: input.endTime,
          Instances: input.instances,
          ReasonCodes: input.reasonCodes,
          StartTime: input.startTime,
          Status: input.status,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ReportInstanceStatus', props);
  }

  public requestSpotFleet(input: shapes.Ec2RequestSpotFleetRequest): EC2RequestSpotFleet {
    return new EC2RequestSpotFleet(this, 'RequestSpotFleet', this.__resources, input);
  }

  public requestSpotInstances(input: shapes.Ec2RequestSpotInstancesRequest): EC2RequestSpotInstances {
    return new EC2RequestSpotInstances(this, 'RequestSpotInstances', this.__resources, input);
  }

  public resetEbsDefaultKmsKeyId(input: shapes.Ec2ResetEbsDefaultKmsKeyIdRequest): EC2ResetEbsDefaultKmsKeyId {
    return new EC2ResetEbsDefaultKmsKeyId(this, 'ResetEbsDefaultKmsKeyId', this.__resources, input);
  }

  public resetFpgaImageAttribute(input: shapes.Ec2ResetFpgaImageAttributeRequest): EC2ResetFpgaImageAttribute {
    return new EC2ResetFpgaImageAttribute(this, 'ResetFpgaImageAttribute', this.__resources, input);
  }

  public resetImageAttribute(input: shapes.Ec2ResetImageAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetImageAttribute'),
        parameters: {
          Attribute: input.attribute,
          ImageId: input.imageId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ResetImageAttribute', props);
  }

  public resetInstanceAttribute(input: shapes.Ec2ResetInstanceAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetInstanceAttribute'),
        parameters: {
          Attribute: input.attribute,
          DryRun: input.dryRun,
          InstanceId: input.instanceId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ResetInstanceAttribute', props);
  }

  public resetNetworkInterfaceAttribute(input: shapes.Ec2ResetNetworkInterfaceAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetNetworkInterfaceAttribute'),
        parameters: {
          DryRun: input.dryRun,
          NetworkInterfaceId: input.networkInterfaceId,
          SourceDestCheck: input.sourceDestCheck,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ResetNetworkInterfaceAttribute', props);
  }

  public resetSnapshotAttribute(input: shapes.Ec2ResetSnapshotAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetSnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetSnapshotAttribute'),
        parameters: {
          Attribute: input.attribute,
          SnapshotId: input.snapshotId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ResetSnapshotAttribute', props);
  }

  public restoreAddressToClassic(input: shapes.Ec2RestoreAddressToClassicRequest): EC2RestoreAddressToClassic {
    return new EC2RestoreAddressToClassic(this, 'RestoreAddressToClassic', this.__resources, input);
  }

  public restoreManagedPrefixListVersion(input: shapes.Ec2RestoreManagedPrefixListVersionRequest): EC2RestoreManagedPrefixListVersion {
    return new EC2RestoreManagedPrefixListVersion(this, 'RestoreManagedPrefixListVersion', this.__resources, input);
  }

  public revokeClientVpnIngress(input: shapes.Ec2RevokeClientVpnIngressRequest): EC2RevokeClientVpnIngress {
    return new EC2RevokeClientVpnIngress(this, 'RevokeClientVpnIngress', this.__resources, input);
  }

  public revokeSecurityGroupEgress(input: shapes.Ec2RevokeSecurityGroupEgressRequest): EC2RevokeSecurityGroupEgress {
    return new EC2RevokeSecurityGroupEgress(this, 'RevokeSecurityGroupEgress', this.__resources, input);
  }

  public revokeSecurityGroupIngress(input: shapes.Ec2RevokeSecurityGroupIngressRequest): EC2RevokeSecurityGroupIngress {
    return new EC2RevokeSecurityGroupIngress(this, 'RevokeSecurityGroupIngress', this.__resources, input);
  }

  public runInstances(input: shapes.Ec2RunInstancesRequest): EC2RunInstances {
    return new EC2RunInstances(this, 'RunInstances', this.__resources, input);
  }

  public runScheduledInstances(input: shapes.Ec2RunScheduledInstancesRequest): EC2RunScheduledInstances {
    return new EC2RunScheduledInstances(this, 'RunScheduledInstances', this.__resources, input);
  }

  public searchLocalGatewayRoutes(input: shapes.Ec2SearchLocalGatewayRoutesRequest): EC2SearchLocalGatewayRoutes {
    return new EC2SearchLocalGatewayRoutes(this, 'SearchLocalGatewayRoutes', this.__resources, input);
  }

  public searchTransitGatewayMulticastGroups(input: shapes.Ec2SearchTransitGatewayMulticastGroupsRequest): EC2SearchTransitGatewayMulticastGroups {
    return new EC2SearchTransitGatewayMulticastGroups(this, 'SearchTransitGatewayMulticastGroups', this.__resources, input);
  }

  public searchTransitGatewayRoutes(input: shapes.Ec2SearchTransitGatewayRoutesRequest): EC2SearchTransitGatewayRoutes {
    return new EC2SearchTransitGatewayRoutes(this, 'SearchTransitGatewayRoutes', this.__resources, input);
  }

  public sendDiagnosticInterrupt(input: shapes.Ec2SendDiagnosticInterruptRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'sendDiagnosticInterrupt',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SendDiagnosticInterrupt'),
        parameters: {
          InstanceId: input.instanceId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'SendDiagnosticInterrupt', props);
  }

  public startInstances(input: shapes.Ec2StartInstancesRequest): EC2StartInstances {
    return new EC2StartInstances(this, 'StartInstances', this.__resources, input);
  }

  public startVpcEndpointServicePrivateDnsVerification(input: shapes.Ec2StartVpcEndpointServicePrivateDnsVerificationRequest): EC2StartVpcEndpointServicePrivateDnsVerification {
    return new EC2StartVpcEndpointServicePrivateDnsVerification(this, 'StartVpcEndpointServicePrivateDnsVerification', this.__resources, input);
  }

  public stopInstances(input: shapes.Ec2StopInstancesRequest): EC2StopInstances {
    return new EC2StopInstances(this, 'StopInstances', this.__resources, input);
  }

  public terminateClientVpnConnections(input: shapes.Ec2TerminateClientVpnConnectionsRequest): EC2TerminateClientVpnConnections {
    return new EC2TerminateClientVpnConnections(this, 'TerminateClientVpnConnections', this.__resources, input);
  }

  public terminateInstances(input: shapes.Ec2TerminateInstancesRequest): EC2TerminateInstances {
    return new EC2TerminateInstances(this, 'TerminateInstances', this.__resources, input);
  }

  public unassignIpv6Addresses(input: shapes.Ec2UnassignIpv6AddressesRequest): EC2UnassignIpv6Addresses {
    return new EC2UnassignIpv6Addresses(this, 'UnassignIpv6Addresses', this.__resources, input);
  }

  public unassignPrivateIpAddresses(input: shapes.Ec2UnassignPrivateIpAddressesRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unassignPrivateIpAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnassignPrivateIpAddresses'),
        parameters: {
          NetworkInterfaceId: input.networkInterfaceId,
          PrivateIpAddresses: input.privateIpAddresses,
        },
      },
    };
    new cr.AwsCustomResource(this, 'UnassignPrivateIpAddresses', props);
  }

  public unmonitorInstances(input: shapes.Ec2UnmonitorInstancesRequest): EC2UnmonitorInstances {
    return new EC2UnmonitorInstances(this, 'UnmonitorInstances', this.__resources, input);
  }

  public updateSecurityGroupRuleDescriptionsEgress(input: shapes.Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest): EC2UpdateSecurityGroupRuleDescriptionsEgress {
    return new EC2UpdateSecurityGroupRuleDescriptionsEgress(this, 'UpdateSecurityGroupRuleDescriptionsEgress', this.__resources, input);
  }

  public updateSecurityGroupRuleDescriptionsIngress(input: shapes.Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest): EC2UpdateSecurityGroupRuleDescriptionsIngress {
    return new EC2UpdateSecurityGroupRuleDescriptionsIngress(this, 'UpdateSecurityGroupRuleDescriptionsIngress', this.__resources, input);
  }

  public withdrawByoipCidr(input: shapes.Ec2WithdrawByoipCidrRequest): EC2WithdrawByoipCidr {
    return new EC2WithdrawByoipCidr(this, 'WithdrawByoipCidr', this.__resources, input);
  }

}

export class EC2AcceptReservedInstancesExchangeQuote extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptReservedInstancesExchangeQuoteRequest) {
    super(scope, id);
  }

  public get exchangeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptReservedInstancesExchangeQuote.ExchangeId'),
        outputPath: 'ExchangeId',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptReservedInstancesExchangeQuote.ExchangeId', props);
    return resource.getResponseField('ExchangeId') as unknown as string;
  }

}

export class EC2AcceptTransitGatewayPeeringAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayPeeringAttachment(): EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {
    return new EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment(this, 'TransitGatewayPeeringAttachment', this.__resources, this.input);
  }

}

export class EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPeeringAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get requesterTgwInfo(): EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {
    return new EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo(this, 'RequesterTgwInfo', this.__resources, this.input);
  }

  public get accepterTgwInfo(): EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {
    return new EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo(this, 'AccepterTgwInfo', this.__resources, this.input);
  }

  public get status(): EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {
    return new EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus(this, 'Status', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State'),
        outputPath: 'TransitGatewayPeeringAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime'),
        outputPath: 'TransitGatewayPeeringAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags'),
        outputPath: 'TransitGatewayPeeringAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.Region') as unknown as string;
  }

}

export class EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.Region') as unknown as string;
  }

}

export class EC2AcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Code',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Message',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Message') as unknown as string;
  }

}

export class EC2AcceptTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayVpcAttachment(): EC2AcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2AcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this, 'TransitGatewayVpcAttachment', this.__resources, this.input);
  }

}

export class EC2AcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2AcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2AcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this, 'Options', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2AcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2AcceptVpcEndpointConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptVpcEndpointConnectionsRequest) {
    super(scope, id);
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcEndpointConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcEndpointConnections.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointIds: this.input.vpcEndpointIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcEndpointConnections.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2AcceptVpcPeeringConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get vpcPeeringConnection(): EC2AcceptVpcPeeringConnectionVpcPeeringConnection {
    return new EC2AcceptVpcPeeringConnectionVpcPeeringConnection(this, 'VpcPeeringConnection', this.__resources, this.input);
  }

}

export class EC2AcceptVpcPeeringConnectionVpcPeeringConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get accepterVpcInfo(): EC2AcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo {
    return new EC2AcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo(this, 'AccepterVpcInfo', this.__resources, this.input);
  }

  public get expirationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.ExpirationTime'),
        outputPath: 'VpcPeeringConnection.ExpirationTime',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.ExpirationTime', props);
    return resource.getResponseField('VpcPeeringConnection.ExpirationTime') as unknown as string;
  }

  public get requesterVpcInfo(): EC2AcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo {
    return new EC2AcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo(this, 'RequesterVpcInfo', this.__resources, this.input);
  }

  public get status(): EC2AcceptVpcPeeringConnectionVpcPeeringConnectionStatus {
    return new EC2AcceptVpcPeeringConnectionVpcPeeringConnectionStatus(this, 'Status', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.Tags'),
        outputPath: 'VpcPeeringConnection.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.Tags', props);
    return resource.getResponseField('VpcPeeringConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vpcPeeringConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.VpcPeeringConnectionId'),
        outputPath: 'VpcPeeringConnection.VpcPeeringConnectionId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.VpcPeeringConnectionId', props);
    return resource.getResponseField('VpcPeeringConnection.VpcPeeringConnectionId') as unknown as string;
  }

}

export class EC2AcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlock'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.CidrBlock',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlock', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockSet(): shapes.Ec2Ipv6CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet') as unknown as shapes.Ec2Ipv6CidrBlock[];
  }

  public get cidrBlockSet(): shapes.Ec2CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet') as unknown as shapes.Ec2CidrBlock[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.OwnerId'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.OwnerId', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.OwnerId') as unknown as string;
  }

  public get peeringOptions(): EC2AcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions {
    return new EC2AcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions(this, 'PeeringOptions', this.__resources, this.input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.VpcId'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.VpcId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.VpcId', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.VpcId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Region'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.Region',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Region', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.Region') as unknown as string;
  }

}

export class EC2AcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2AcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlock'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.CidrBlock',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlock', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockSet(): shapes.Ec2Ipv6CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet') as unknown as shapes.Ec2Ipv6CidrBlock[];
  }

  public get cidrBlockSet(): shapes.Ec2CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet') as unknown as shapes.Ec2CidrBlock[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.OwnerId'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.OwnerId', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.OwnerId') as unknown as string;
  }

  public get peeringOptions(): EC2AcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions {
    return new EC2AcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions(this, 'PeeringOptions', this.__resources, this.input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.VpcId'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.VpcId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.VpcId', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.VpcId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Region'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.Region',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Region', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.Region') as unknown as string;
  }

}

export class EC2AcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2AcceptVpcPeeringConnectionVpcPeeringConnectionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.Status.Code'),
        outputPath: 'VpcPeeringConnection.Status.Code',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.Status.Code', props);
    return resource.getResponseField('VpcPeeringConnection.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.Status.Message'),
        outputPath: 'VpcPeeringConnection.Status.Message',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptVpcPeeringConnection.VpcPeeringConnection.Status.Message', props);
    return resource.getResponseField('VpcPeeringConnection.Status.Message') as unknown as string;
  }

}

export class EC2AdvertiseByoipCidr extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AdvertiseByoipCidrRequest) {
    super(scope, id);
  }

  public get byoipCidr(): EC2AdvertiseByoipCidrByoipCidr {
    return new EC2AdvertiseByoipCidrByoipCidr(this, 'ByoipCidr', this.__resources, this.input);
  }

}

export class EC2AdvertiseByoipCidrByoipCidr extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AdvertiseByoipCidrRequest) {
    super(scope, id);
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'advertiseByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AdvertiseByoipCidr.ByoipCidr.Cidr'),
        outputPath: 'ByoipCidr.Cidr',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AdvertiseByoipCidr.ByoipCidr.Cidr', props);
    return resource.getResponseField('ByoipCidr.Cidr') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'advertiseByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AdvertiseByoipCidr.ByoipCidr.Description'),
        outputPath: 'ByoipCidr.Description',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AdvertiseByoipCidr.ByoipCidr.Description', props);
    return resource.getResponseField('ByoipCidr.Description') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'advertiseByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AdvertiseByoipCidr.ByoipCidr.StatusMessage'),
        outputPath: 'ByoipCidr.StatusMessage',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AdvertiseByoipCidr.ByoipCidr.StatusMessage', props);
    return resource.getResponseField('ByoipCidr.StatusMessage') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'advertiseByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AdvertiseByoipCidr.ByoipCidr.State'),
        outputPath: 'ByoipCidr.State',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AdvertiseByoipCidr.ByoipCidr.State', props);
    return resource.getResponseField('ByoipCidr.State') as unknown as string;
  }

}

export class EC2AllocateAddress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AllocateAddressRequest) {
    super(scope, id);
  }

  public get publicIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.PublicIp'),
        outputPath: 'PublicIp',
        parameters: {
          Domain: this.input.domain,
          Address: this.input.address,
          PublicIpv4Pool: this.input.publicIpv4Pool,
          NetworkBorderGroup: this.input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.input.customerOwnedIpv4Pool,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateAddress.PublicIp', props);
    return resource.getResponseField('PublicIp') as unknown as string;
  }

  public get allocationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.AllocationId'),
        outputPath: 'AllocationId',
        parameters: {
          Domain: this.input.domain,
          Address: this.input.address,
          PublicIpv4Pool: this.input.publicIpv4Pool,
          NetworkBorderGroup: this.input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.input.customerOwnedIpv4Pool,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateAddress.AllocationId', props);
    return resource.getResponseField('AllocationId') as unknown as string;
  }

  public get publicIpv4Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.PublicIpv4Pool'),
        outputPath: 'PublicIpv4Pool',
        parameters: {
          Domain: this.input.domain,
          Address: this.input.address,
          PublicIpv4Pool: this.input.publicIpv4Pool,
          NetworkBorderGroup: this.input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.input.customerOwnedIpv4Pool,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateAddress.PublicIpv4Pool', props);
    return resource.getResponseField('PublicIpv4Pool') as unknown as string;
  }

  public get networkBorderGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.NetworkBorderGroup'),
        outputPath: 'NetworkBorderGroup',
        parameters: {
          Domain: this.input.domain,
          Address: this.input.address,
          PublicIpv4Pool: this.input.publicIpv4Pool,
          NetworkBorderGroup: this.input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.input.customerOwnedIpv4Pool,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateAddress.NetworkBorderGroup', props);
    return resource.getResponseField('NetworkBorderGroup') as unknown as string;
  }

  public get domain(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.Domain'),
        outputPath: 'Domain',
        parameters: {
          Domain: this.input.domain,
          Address: this.input.address,
          PublicIpv4Pool: this.input.publicIpv4Pool,
          NetworkBorderGroup: this.input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.input.customerOwnedIpv4Pool,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateAddress.Domain', props);
    return resource.getResponseField('Domain') as unknown as string;
  }

  public get customerOwnedIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.CustomerOwnedIp'),
        outputPath: 'CustomerOwnedIp',
        parameters: {
          Domain: this.input.domain,
          Address: this.input.address,
          PublicIpv4Pool: this.input.publicIpv4Pool,
          NetworkBorderGroup: this.input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.input.customerOwnedIpv4Pool,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateAddress.CustomerOwnedIp', props);
    return resource.getResponseField('CustomerOwnedIp') as unknown as string;
  }

  public get customerOwnedIpv4Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.CustomerOwnedIpv4Pool'),
        outputPath: 'CustomerOwnedIpv4Pool',
        parameters: {
          Domain: this.input.domain,
          Address: this.input.address,
          PublicIpv4Pool: this.input.publicIpv4Pool,
          NetworkBorderGroup: this.input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.input.customerOwnedIpv4Pool,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateAddress.CustomerOwnedIpv4Pool', props);
    return resource.getResponseField('CustomerOwnedIpv4Pool') as unknown as string;
  }

  public get carrierIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.CarrierIp'),
        outputPath: 'CarrierIp',
        parameters: {
          Domain: this.input.domain,
          Address: this.input.address,
          PublicIpv4Pool: this.input.publicIpv4Pool,
          NetworkBorderGroup: this.input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.input.customerOwnedIpv4Pool,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateAddress.CarrierIp', props);
    return resource.getResponseField('CarrierIp') as unknown as string;
  }

}

export class EC2AllocateHosts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AllocateHostsRequest) {
    super(scope, id);
  }

  public get hostIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateHosts.HostIds'),
        outputPath: 'HostIds',
        parameters: {
          AutoPlacement: this.input.autoPlacement,
          AvailabilityZone: this.input.availabilityZone,
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstanceFamily: this.input.instanceFamily,
          Quantity: this.input.quantity,
          TagSpecifications: this.input.tagSpecifications,
          HostRecovery: this.input.hostRecovery,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AllocateHosts.HostIds', props);
    return resource.getResponseField('HostIds') as unknown as string[];
  }

}

export class EC2ApplySecurityGroupsToClientVpnTargetNetwork extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest) {
    super(scope, id);
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'applySecurityGroupsToClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ApplySecurityGroupsToClientVpnTargetNetwork.SecurityGroupIds'),
        outputPath: 'SecurityGroupIds',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          VpcId: this.input.vpcId,
          SecurityGroupIds: this.input.securityGroupIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ApplySecurityGroupsToClientVpnTargetNetwork.SecurityGroupIds', props);
    return resource.getResponseField('SecurityGroupIds') as unknown as string[];
  }

}

export class EC2AssignIpv6Addresses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssignIpv6AddressesRequest) {
    super(scope, id);
  }

  public get assignedIpv6Addresses(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignIpv6Addresses.AssignedIpv6Addresses'),
        outputPath: 'AssignedIpv6Addresses',
        parameters: {
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssignIpv6Addresses.AssignedIpv6Addresses', props);
    return resource.getResponseField('AssignedIpv6Addresses') as unknown as string[];
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignIpv6Addresses.NetworkInterfaceId'),
        outputPath: 'NetworkInterfaceId',
        parameters: {
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssignIpv6Addresses.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterfaceId') as unknown as string;
  }

}

export class EC2AssignPrivateIpAddresses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssignPrivateIpAddressesRequest) {
    super(scope, id);
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignPrivateIpAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignPrivateIpAddresses.NetworkInterfaceId'),
        outputPath: 'NetworkInterfaceId',
        parameters: {
          AllowReassignment: this.input.allowReassignment,
          NetworkInterfaceId: this.input.networkInterfaceId,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssignPrivateIpAddresses.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterfaceId') as unknown as string;
  }

  public get assignedPrivateIpAddresses(): shapes.Ec2AssignedPrivateIpAddress[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignPrivateIpAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignPrivateIpAddresses.AssignedPrivateIpAddresses'),
        outputPath: 'AssignedPrivateIpAddresses',
        parameters: {
          AllowReassignment: this.input.allowReassignment,
          NetworkInterfaceId: this.input.networkInterfaceId,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssignPrivateIpAddresses.AssignedPrivateIpAddresses', props);
    return resource.getResponseField('AssignedPrivateIpAddresses') as unknown as shapes.Ec2AssignedPrivateIpAddress[];
  }

}

export class EC2AssociateAddress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateAddressRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateAddress.AssociationId'),
        outputPath: 'AssociationId',
        parameters: {
          AllocationId: this.input.allocationId,
          InstanceId: this.input.instanceId,
          PublicIp: this.input.publicIp,
          AllowReassociation: this.input.allowReassociation,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
          PrivateIpAddress: this.input.privateIpAddress,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateAddress.AssociationId', props);
    return resource.getResponseField('AssociationId') as unknown as string;
  }

}

export class EC2AssociateClientVpnTargetNetwork extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateClientVpnTargetNetworkRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateClientVpnTargetNetwork.AssociationId'),
        outputPath: 'AssociationId',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          SubnetId: this.input.subnetId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateClientVpnTargetNetwork.AssociationId', props);
    return resource.getResponseField('AssociationId') as unknown as string;
  }

  public get status(): EC2AssociateClientVpnTargetNetworkStatus {
    return new EC2AssociateClientVpnTargetNetworkStatus(this, 'Status', this.__resources, this.input);
  }

}

export class EC2AssociateClientVpnTargetNetworkStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateClientVpnTargetNetworkRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateClientVpnTargetNetwork.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          SubnetId: this.input.subnetId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateClientVpnTargetNetwork.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateClientVpnTargetNetwork.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          SubnetId: this.input.subnetId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateClientVpnTargetNetwork.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2AssociateEnclaveCertificateIamRole extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateEnclaveCertificateIamRoleRequest) {
    super(scope, id);
  }

  public get certificateS3BucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateEnclaveCertificateIamRole',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateEnclaveCertificateIamRole.CertificateS3BucketName'),
        outputPath: 'CertificateS3BucketName',
        parameters: {
          CertificateArn: this.input.certificateArn,
          RoleArn: this.input.roleArn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateEnclaveCertificateIamRole.CertificateS3BucketName', props);
    return resource.getResponseField('CertificateS3BucketName') as unknown as string;
  }

  public get certificateS3ObjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateEnclaveCertificateIamRole',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateEnclaveCertificateIamRole.CertificateS3ObjectKey'),
        outputPath: 'CertificateS3ObjectKey',
        parameters: {
          CertificateArn: this.input.certificateArn,
          RoleArn: this.input.roleArn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateEnclaveCertificateIamRole.CertificateS3ObjectKey', props);
    return resource.getResponseField('CertificateS3ObjectKey') as unknown as string;
  }

  public get encryptionKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateEnclaveCertificateIamRole',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateEnclaveCertificateIamRole.EncryptionKmsKeyId'),
        outputPath: 'EncryptionKmsKeyId',
        parameters: {
          CertificateArn: this.input.certificateArn,
          RoleArn: this.input.roleArn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateEnclaveCertificateIamRole.EncryptionKmsKeyId', props);
    return resource.getResponseField('EncryptionKmsKeyId') as unknown as string;
  }

}

export class EC2AssociateIamInstanceProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateIamInstanceProfileRequest) {
    super(scope, id);
  }

  public get iamInstanceProfileAssociation(): EC2AssociateIamInstanceProfileIamInstanceProfileAssociation {
    return new EC2AssociateIamInstanceProfileIamInstanceProfileAssociation(this, 'IamInstanceProfileAssociation', this.__resources, this.input);
  }

}

export class EC2AssociateIamInstanceProfileIamInstanceProfileAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateIamInstanceProfileRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.AssociationId'),
        outputPath: 'IamInstanceProfileAssociation.AssociationId',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.AssociationId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.AssociationId') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.InstanceId'),
        outputPath: 'IamInstanceProfileAssociation.InstanceId',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.InstanceId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.InstanceId') as unknown as string;
  }

  public get iamInstanceProfile(): EC2AssociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile {
    return new EC2AssociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile(this, 'IamInstanceProfile', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.State'),
        outputPath: 'IamInstanceProfileAssociation.State',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.State', props);
    return resource.getResponseField('IamInstanceProfileAssociation.State') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.Timestamp'),
        outputPath: 'IamInstanceProfileAssociation.Timestamp',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.Timestamp', props);
    return resource.getResponseField('IamInstanceProfileAssociation.Timestamp') as unknown as string;
  }

}

export class EC2AssociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateIamInstanceProfileRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Arn'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Arn',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Arn', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Id'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Id',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Id', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Id') as unknown as string;
  }

}

export class EC2AssociateRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateRouteTableRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateRouteTable.AssociationId'),
        outputPath: 'AssociationId',
        parameters: {
          DryRun: this.input.dryRun,
          RouteTableId: this.input.routeTableId,
          SubnetId: this.input.subnetId,
          GatewayId: this.input.gatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateRouteTable.AssociationId', props);
    return resource.getResponseField('AssociationId') as unknown as string;
  }

  public get associationState(): EC2AssociateRouteTableAssociationState {
    return new EC2AssociateRouteTableAssociationState(this, 'AssociationState', this.__resources, this.input);
  }

}

export class EC2AssociateRouteTableAssociationState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateRouteTableRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateRouteTable.AssociationState.State'),
        outputPath: 'AssociationState.State',
        parameters: {
          DryRun: this.input.dryRun,
          RouteTableId: this.input.routeTableId,
          SubnetId: this.input.subnetId,
          GatewayId: this.input.gatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateRouteTable.AssociationState.State', props);
    return resource.getResponseField('AssociationState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateRouteTable.AssociationState.StatusMessage'),
        outputPath: 'AssociationState.StatusMessage',
        parameters: {
          DryRun: this.input.dryRun,
          RouteTableId: this.input.routeTableId,
          SubnetId: this.input.subnetId,
          GatewayId: this.input.gatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateRouteTable.AssociationState.StatusMessage', props);
    return resource.getResponseField('AssociationState.StatusMessage') as unknown as string;
  }

}

export class EC2AssociateSubnetCidrBlock extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateSubnetCidrBlockRequest) {
    super(scope, id);
  }

  public get ipv6CidrBlockAssociation(): EC2AssociateSubnetCidrBlockIpv6CidrBlockAssociation {
    return new EC2AssociateSubnetCidrBlockIpv6CidrBlockAssociation(this, 'Ipv6CidrBlockAssociation', this.__resources, this.input);
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.SubnetId'),
        outputPath: 'SubnetId',
        parameters: {
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          SubnetId: this.input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateSubnetCidrBlock.SubnetId', props);
    return resource.getResponseField('SubnetId') as unknown as string;
  }

}

export class EC2AssociateSubnetCidrBlockIpv6CidrBlockAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateSubnetCidrBlockRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.AssociationId'),
        outputPath: 'Ipv6CidrBlockAssociation.AssociationId',
        parameters: {
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          SubnetId: this.input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get ipv6CidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlock',
        parameters: {
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          SubnetId: this.input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockState(): EC2AssociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {
    return new EC2AssociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState(this, 'Ipv6CidrBlockState', this.__resources, this.input);
  }

}

export class EC2AssociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateSubnetCidrBlockRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State',
        parameters: {
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          SubnetId: this.input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage',
        parameters: {
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          SubnetId: this.input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2AssociateTransitGatewayMulticastDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateTransitGatewayMulticastDomainRequest) {
    super(scope, id);
  }

  public get associations(): EC2AssociateTransitGatewayMulticastDomainAssociations {
    return new EC2AssociateTransitGatewayMulticastDomainAssociations(this, 'Associations', this.__resources, this.input);
  }

}

export class EC2AssociateTransitGatewayMulticastDomainAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateTransitGatewayMulticastDomainRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.TransitGatewayMulticastDomainId'),
        outputPath: 'Associations.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayMulticastDomain.Associations.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('Associations.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.TransitGatewayAttachmentId'),
        outputPath: 'Associations.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayMulticastDomain.Associations.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Associations.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.ResourceId'),
        outputPath: 'Associations.ResourceId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayMulticastDomain.Associations.ResourceId', props);
    return resource.getResponseField('Associations.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.ResourceType'),
        outputPath: 'Associations.ResourceType',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayMulticastDomain.Associations.ResourceType', props);
    return resource.getResponseField('Associations.ResourceType') as unknown as string;
  }

  public get subnets(): shapes.Ec2SubnetAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.Subnets'),
        outputPath: 'Associations.Subnets',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayMulticastDomain.Associations.Subnets', props);
    return resource.getResponseField('Associations.Subnets') as unknown as shapes.Ec2SubnetAssociation[];
  }

}

export class EC2AssociateTransitGatewayRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateTransitGatewayRouteTableRequest) {
    super(scope, id);
  }

  public get association(): EC2AssociateTransitGatewayRouteTableAssociation {
    return new EC2AssociateTransitGatewayRouteTableAssociation(this, 'Association', this.__resources, this.input);
  }

}

export class EC2AssociateTransitGatewayRouteTableAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateTransitGatewayRouteTableRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.TransitGatewayRouteTableId'),
        outputPath: 'Association.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayRouteTable.Association.TransitGatewayRouteTableId', props);
    return resource.getResponseField('Association.TransitGatewayRouteTableId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.TransitGatewayAttachmentId'),
        outputPath: 'Association.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayRouteTable.Association.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Association.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.ResourceId'),
        outputPath: 'Association.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayRouteTable.Association.ResourceId', props);
    return resource.getResponseField('Association.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.ResourceType'),
        outputPath: 'Association.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayRouteTable.Association.ResourceType', props);
    return resource.getResponseField('Association.ResourceType') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.State'),
        outputPath: 'Association.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateTransitGatewayRouteTable.Association.State', props);
    return resource.getResponseField('Association.State') as unknown as string;
  }

}

export class EC2AssociateVpcCidrBlock extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get ipv6CidrBlockAssociation(): EC2AssociateVpcCidrBlockIpv6CidrBlockAssociation {
    return new EC2AssociateVpcCidrBlockIpv6CidrBlockAssociation(this, 'Ipv6CidrBlockAssociation', this.__resources, this.input);
  }

  public get cidrBlockAssociation(): EC2AssociateVpcCidrBlockCidrBlockAssociation {
    return new EC2AssociateVpcCidrBlockCidrBlockAssociation(this, 'CidrBlockAssociation', this.__resources, this.input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.VpcId'),
        outputPath: 'VpcId',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.VpcId', props);
    return resource.getResponseField('VpcId') as unknown as string;
  }

}

export class EC2AssociateVpcCidrBlockIpv6CidrBlockAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.AssociationId'),
        outputPath: 'Ipv6CidrBlockAssociation.AssociationId',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get ipv6CidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlock',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockState(): EC2AssociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {
    return new EC2AssociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState(this, 'Ipv6CidrBlockState', this.__resources, this.input);
  }

  public get networkBorderGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.NetworkBorderGroup'),
        outputPath: 'Ipv6CidrBlockAssociation.NetworkBorderGroup',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.NetworkBorderGroup', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.NetworkBorderGroup') as unknown as string;
  }

  public get ipv6Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6Pool'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6Pool',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6Pool', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6Pool') as unknown as string;
  }

}

export class EC2AssociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2AssociateVpcCidrBlockCidrBlockAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.CidrBlockAssociation.AssociationId'),
        outputPath: 'CidrBlockAssociation.AssociationId',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlock'),
        outputPath: 'CidrBlockAssociation.CidrBlock',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlock', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlock') as unknown as string;
  }

  public get cidrBlockState(): EC2AssociateVpcCidrBlockCidrBlockAssociationCidrBlockState {
    return new EC2AssociateVpcCidrBlockCidrBlockAssociationCidrBlockState(this, 'CidrBlockState', this.__resources, this.input);
  }

}

export class EC2AssociateVpcCidrBlockCidrBlockAssociationCidrBlockState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AssociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.State'),
        outputPath: 'CidrBlockAssociation.CidrBlockState.State',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.State', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.StatusMessage'),
        outputPath: 'CidrBlockAssociation.CidrBlockState.StatusMessage',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.input.cidrBlock,
          VpcId: this.input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.StatusMessage', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2AttachClassicLinkVpc extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AttachClassicLinkVpcRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachClassicLinkVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachClassicLinkVpc.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          InstanceId: this.input.instanceId,
          VpcId: this.input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachClassicLinkVpc.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2AttachNetworkInterface extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AttachNetworkInterfaceRequest) {
    super(scope, id);
  }

  public get attachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachNetworkInterface.AttachmentId'),
        outputPath: 'AttachmentId',
        parameters: {
          DeviceIndex: this.input.deviceIndex,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkCardIndex: this.input.networkCardIndex,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachNetworkInterface.AttachmentId', props);
    return resource.getResponseField('AttachmentId') as unknown as string;
  }

  public get networkCardIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachNetworkInterface.NetworkCardIndex'),
        outputPath: 'NetworkCardIndex',
        parameters: {
          DeviceIndex: this.input.deviceIndex,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkCardIndex: this.input.networkCardIndex,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachNetworkInterface.NetworkCardIndex', props);
    return resource.getResponseField('NetworkCardIndex') as unknown as number;
  }

}

export class EC2AttachVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AttachVolumeRequest) {
    super(scope, id);
  }

  public get attachTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.AttachTime'),
        outputPath: 'AttachTime',
        parameters: {
          Device: this.input.device,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachVolume.AttachTime', props);
    return resource.getResponseField('AttachTime') as unknown as string;
  }

  public get device(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.Device'),
        outputPath: 'Device',
        parameters: {
          Device: this.input.device,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachVolume.Device', props);
    return resource.getResponseField('Device') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          Device: this.input.device,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachVolume.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.State'),
        outputPath: 'State',
        parameters: {
          Device: this.input.device,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachVolume.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          Device: this.input.device,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachVolume.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

  public get deleteOnTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.DeleteOnTermination'),
        outputPath: 'DeleteOnTermination',
        parameters: {
          Device: this.input.device,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachVolume.DeleteOnTermination', props);
    return resource.getResponseField('DeleteOnTermination') as unknown as boolean;
  }

}

export class EC2AttachVpnGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AttachVpnGatewayRequest) {
    super(scope, id);
  }

  public get vpcAttachment(): EC2AttachVpnGatewayVpcAttachment {
    return new EC2AttachVpnGatewayVpcAttachment(this, 'VpcAttachment', this.__resources, this.input);
  }

}

export class EC2AttachVpnGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AttachVpnGatewayRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVpnGateway.VpcAttachment.State'),
        outputPath: 'VpcAttachment.State',
        parameters: {
          VpcId: this.input.vpcId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachVpnGateway.VpcAttachment.State', props);
    return resource.getResponseField('VpcAttachment.State') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVpnGateway.VpcAttachment.VpcId'),
        outputPath: 'VpcAttachment.VpcId',
        parameters: {
          VpcId: this.input.vpcId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AttachVpnGateway.VpcAttachment.VpcId', props);
    return resource.getResponseField('VpcAttachment.VpcId') as unknown as string;
  }

}

export class EC2AuthorizeClientVpnIngress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AuthorizeClientVpnIngressRequest) {
    super(scope, id);
  }

  public get status(): EC2AuthorizeClientVpnIngressStatus {
    return new EC2AuthorizeClientVpnIngressStatus(this, 'Status', this.__resources, this.input);
  }

}

export class EC2AuthorizeClientVpnIngressStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2AuthorizeClientVpnIngressRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClientVpnIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeClientVpnIngress.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          TargetNetworkCidr: this.input.targetNetworkCidr,
          AccessGroupId: this.input.accessGroupId,
          AuthorizeAllGroups: this.input.authorizeAllGroups,
          Description: this.input.description,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeClientVpnIngress.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClientVpnIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeClientVpnIngress.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          TargetNetworkCidr: this.input.targetNetworkCidr,
          AccessGroupId: this.input.accessGroupId,
          AuthorizeAllGroups: this.input.authorizeAllGroups,
          Description: this.input.description,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeClientVpnIngress.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2BundleInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2BundleInstanceRequest) {
    super(scope, id);
  }

  public get bundleTask(): EC2BundleInstanceBundleTask {
    return new EC2BundleInstanceBundleTask(this, 'BundleTask', this.__resources, this.input);
  }

}

export class EC2BundleInstanceBundleTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2BundleInstanceRequest) {
    super(scope, id);
  }

  public get bundleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.BundleId'),
        outputPath: 'BundleTask.BundleId',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.BundleId', props);
    return resource.getResponseField('BundleTask.BundleId') as unknown as string;
  }

  public get bundleTaskError(): EC2BundleInstanceBundleTaskBundleTaskError {
    return new EC2BundleInstanceBundleTaskBundleTaskError(this, 'BundleTaskError', this.__resources, this.input);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.InstanceId'),
        outputPath: 'BundleTask.InstanceId',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.InstanceId', props);
    return resource.getResponseField('BundleTask.InstanceId') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Progress'),
        outputPath: 'BundleTask.Progress',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.Progress', props);
    return resource.getResponseField('BundleTask.Progress') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.StartTime'),
        outputPath: 'BundleTask.StartTime',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.StartTime', props);
    return resource.getResponseField('BundleTask.StartTime') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.State'),
        outputPath: 'BundleTask.State',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.State', props);
    return resource.getResponseField('BundleTask.State') as unknown as string;
  }

  public get storage(): EC2BundleInstanceBundleTaskStorage {
    return new EC2BundleInstanceBundleTaskStorage(this, 'Storage', this.__resources, this.input);
  }

  public get updateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.UpdateTime'),
        outputPath: 'BundleTask.UpdateTime',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.UpdateTime', props);
    return resource.getResponseField('BundleTask.UpdateTime') as unknown as string;
  }

}

export class EC2BundleInstanceBundleTaskBundleTaskError extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2BundleInstanceRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.BundleTaskError.Code'),
        outputPath: 'BundleTask.BundleTaskError.Code',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.BundleTaskError.Code', props);
    return resource.getResponseField('BundleTask.BundleTaskError.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.BundleTaskError.Message'),
        outputPath: 'BundleTask.BundleTaskError.Message',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.BundleTaskError.Message', props);
    return resource.getResponseField('BundleTask.BundleTaskError.Message') as unknown as string;
  }

}

export class EC2BundleInstanceBundleTaskStorage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2BundleInstanceRequest) {
    super(scope, id);
  }

  public get s3(): EC2BundleInstanceBundleTaskStorageS3 {
    return new EC2BundleInstanceBundleTaskStorageS3(this, 'S3', this.__resources, this.input);
  }

}

export class EC2BundleInstanceBundleTaskStorageS3 extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2BundleInstanceRequest) {
    super(scope, id);
  }

  public get awsAccessKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.AWSAccessKeyId'),
        outputPath: 'BundleTask.Storage.S3.AWSAccessKeyId',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.Storage.S3.AWSAccessKeyId', props);
    return resource.getResponseField('BundleTask.Storage.S3.AWSAccessKeyId') as unknown as string;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.Bucket'),
        outputPath: 'BundleTask.Storage.S3.Bucket',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.Storage.S3.Bucket', props);
    return resource.getResponseField('BundleTask.Storage.S3.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.Prefix'),
        outputPath: 'BundleTask.Storage.S3.Prefix',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.Storage.S3.Prefix', props);
    return resource.getResponseField('BundleTask.Storage.S3.Prefix') as unknown as string;
  }

  public get uploadPolicy(): any {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.UploadPolicy'),
        outputPath: 'BundleTask.Storage.S3.UploadPolicy',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.Storage.S3.UploadPolicy', props);
    return resource.getResponseField('BundleTask.Storage.S3.UploadPolicy') as unknown as any;
  }

  public get uploadPolicySignature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.UploadPolicySignature'),
        outputPath: 'BundleTask.Storage.S3.UploadPolicySignature',
        parameters: {
          InstanceId: this.input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.input.storage.s3?.awsAccessKeyId,
              Bucket: this.input.storage.s3?.bucket,
              Prefix: this.input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BundleInstance.BundleTask.Storage.S3.UploadPolicySignature', props);
    return resource.getResponseField('BundleTask.Storage.S3.UploadPolicySignature') as unknown as string;
  }

}

export class EC2CancelBundleTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelBundleTaskRequest) {
    super(scope, id);
  }

  public get bundleTask(): EC2CancelBundleTaskBundleTask {
    return new EC2CancelBundleTaskBundleTask(this, 'BundleTask', this.__resources, this.input);
  }

}

export class EC2CancelBundleTaskBundleTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelBundleTaskRequest) {
    super(scope, id);
  }

  public get bundleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.BundleId'),
        outputPath: 'BundleTask.BundleId',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.BundleId', props);
    return resource.getResponseField('BundleTask.BundleId') as unknown as string;
  }

  public get bundleTaskError(): EC2CancelBundleTaskBundleTaskBundleTaskError {
    return new EC2CancelBundleTaskBundleTaskBundleTaskError(this, 'BundleTaskError', this.__resources, this.input);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.InstanceId'),
        outputPath: 'BundleTask.InstanceId',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.InstanceId', props);
    return resource.getResponseField('BundleTask.InstanceId') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Progress'),
        outputPath: 'BundleTask.Progress',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.Progress', props);
    return resource.getResponseField('BundleTask.Progress') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.StartTime'),
        outputPath: 'BundleTask.StartTime',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.StartTime', props);
    return resource.getResponseField('BundleTask.StartTime') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.State'),
        outputPath: 'BundleTask.State',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.State', props);
    return resource.getResponseField('BundleTask.State') as unknown as string;
  }

  public get storage(): EC2CancelBundleTaskBundleTaskStorage {
    return new EC2CancelBundleTaskBundleTaskStorage(this, 'Storage', this.__resources, this.input);
  }

  public get updateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.UpdateTime'),
        outputPath: 'BundleTask.UpdateTime',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.UpdateTime', props);
    return resource.getResponseField('BundleTask.UpdateTime') as unknown as string;
  }

}

export class EC2CancelBundleTaskBundleTaskBundleTaskError extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelBundleTaskRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.BundleTaskError.Code'),
        outputPath: 'BundleTask.BundleTaskError.Code',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.BundleTaskError.Code', props);
    return resource.getResponseField('BundleTask.BundleTaskError.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.BundleTaskError.Message'),
        outputPath: 'BundleTask.BundleTaskError.Message',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.BundleTaskError.Message', props);
    return resource.getResponseField('BundleTask.BundleTaskError.Message') as unknown as string;
  }

}

export class EC2CancelBundleTaskBundleTaskStorage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelBundleTaskRequest) {
    super(scope, id);
  }

  public get s3(): EC2CancelBundleTaskBundleTaskStorageS3 {
    return new EC2CancelBundleTaskBundleTaskStorageS3(this, 'S3', this.__resources, this.input);
  }

}

export class EC2CancelBundleTaskBundleTaskStorageS3 extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelBundleTaskRequest) {
    super(scope, id);
  }

  public get awsAccessKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.AWSAccessKeyId'),
        outputPath: 'BundleTask.Storage.S3.AWSAccessKeyId',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.Storage.S3.AWSAccessKeyId', props);
    return resource.getResponseField('BundleTask.Storage.S3.AWSAccessKeyId') as unknown as string;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.Bucket'),
        outputPath: 'BundleTask.Storage.S3.Bucket',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.Storage.S3.Bucket', props);
    return resource.getResponseField('BundleTask.Storage.S3.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.Prefix'),
        outputPath: 'BundleTask.Storage.S3.Prefix',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.Storage.S3.Prefix', props);
    return resource.getResponseField('BundleTask.Storage.S3.Prefix') as unknown as string;
  }

  public get uploadPolicy(): any {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.UploadPolicy'),
        outputPath: 'BundleTask.Storage.S3.UploadPolicy',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.Storage.S3.UploadPolicy', props);
    return resource.getResponseField('BundleTask.Storage.S3.UploadPolicy') as unknown as any;
  }

  public get uploadPolicySignature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.UploadPolicySignature'),
        outputPath: 'BundleTask.Storage.S3.UploadPolicySignature',
        parameters: {
          BundleId: this.input.bundleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelBundleTask.BundleTask.Storage.S3.UploadPolicySignature', props);
    return resource.getResponseField('BundleTask.Storage.S3.UploadPolicySignature') as unknown as string;
  }

}

export class EC2CancelCapacityReservation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelCapacityReservationRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelCapacityReservation.Return'),
        outputPath: 'Return',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelCapacityReservation.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2CancelImportTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelImportTaskRequest) {
    super(scope, id);
  }

  public get importTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelImportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelImportTask.ImportTaskId'),
        outputPath: 'ImportTaskId',
        parameters: {
          CancelReason: this.input.cancelReason,
          DryRun: this.input.dryRun,
          ImportTaskId: this.input.importTaskId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelImportTask.ImportTaskId', props);
    return resource.getResponseField('ImportTaskId') as unknown as string;
  }

  public get previousState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelImportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelImportTask.PreviousState'),
        outputPath: 'PreviousState',
        parameters: {
          CancelReason: this.input.cancelReason,
          DryRun: this.input.dryRun,
          ImportTaskId: this.input.importTaskId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelImportTask.PreviousState', props);
    return resource.getResponseField('PreviousState') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelImportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelImportTask.State'),
        outputPath: 'State',
        parameters: {
          CancelReason: this.input.cancelReason,
          DryRun: this.input.dryRun,
          ImportTaskId: this.input.importTaskId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelImportTask.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

}

export class EC2CancelReservedInstancesListing extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelReservedInstancesListingRequest) {
    super(scope, id);
  }

  public get reservedInstancesListings(): shapes.Ec2ReservedInstancesListing[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelReservedInstancesListing',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelReservedInstancesListing.ReservedInstancesListings'),
        outputPath: 'ReservedInstancesListings',
        parameters: {
          ReservedInstancesListingId: this.input.reservedInstancesListingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelReservedInstancesListing.ReservedInstancesListings', props);
    return resource.getResponseField('ReservedInstancesListings') as unknown as shapes.Ec2ReservedInstancesListing[];
  }

}

export class EC2CancelSpotFleetRequests extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelSpotFleetRequestsRequest) {
    super(scope, id);
  }

  public get successfulFleetRequests(): shapes.Ec2CancelSpotFleetRequestsSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelSpotFleetRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelSpotFleetRequests.SuccessfulFleetRequests'),
        outputPath: 'SuccessfulFleetRequests',
        parameters: {
          DryRun: this.input.dryRun,
          SpotFleetRequestIds: this.input.spotFleetRequestIds,
          TerminateInstances: this.input.terminateInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelSpotFleetRequests.SuccessfulFleetRequests', props);
    return resource.getResponseField('SuccessfulFleetRequests') as unknown as shapes.Ec2CancelSpotFleetRequestsSuccessItem[];
  }

  public get unsuccessfulFleetRequests(): shapes.Ec2CancelSpotFleetRequestsErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelSpotFleetRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelSpotFleetRequests.UnsuccessfulFleetRequests'),
        outputPath: 'UnsuccessfulFleetRequests',
        parameters: {
          DryRun: this.input.dryRun,
          SpotFleetRequestIds: this.input.spotFleetRequestIds,
          TerminateInstances: this.input.terminateInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelSpotFleetRequests.UnsuccessfulFleetRequests', props);
    return resource.getResponseField('UnsuccessfulFleetRequests') as unknown as shapes.Ec2CancelSpotFleetRequestsErrorItem[];
  }

}

export class EC2CancelSpotInstanceRequests extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CancelSpotInstanceRequestsRequest) {
    super(scope, id);
  }

  public get cancelledSpotInstanceRequests(): shapes.Ec2CancelledSpotInstanceRequest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelSpotInstanceRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelSpotInstanceRequests.CancelledSpotInstanceRequests'),
        outputPath: 'CancelledSpotInstanceRequests',
        parameters: {
          DryRun: this.input.dryRun,
          SpotInstanceRequestIds: this.input.spotInstanceRequestIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelSpotInstanceRequests.CancelledSpotInstanceRequests', props);
    return resource.getResponseField('CancelledSpotInstanceRequests') as unknown as shapes.Ec2CancelledSpotInstanceRequest[];
  }

}

export class EC2ConfirmProductInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ConfirmProductInstanceRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'confirmProductInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ConfirmProductInstance.OwnerId'),
        outputPath: 'OwnerId',
        parameters: {
          InstanceId: this.input.instanceId,
          ProductCode: this.input.productCode,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfirmProductInstance.OwnerId', props);
    return resource.getResponseField('OwnerId') as unknown as string;
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'confirmProductInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ConfirmProductInstance.Return'),
        outputPath: 'Return',
        parameters: {
          InstanceId: this.input.instanceId,
          ProductCode: this.input.productCode,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ConfirmProductInstance.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2CopyFpgaImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CopyFpgaImageRequest) {
    super(scope, id);
  }

  public get fpgaImageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyFpgaImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CopyFpgaImage.FpgaImageId'),
        outputPath: 'FpgaImageId',
        parameters: {
          DryRun: this.input.dryRun,
          SourceFpgaImageId: this.input.sourceFpgaImageId,
          Description: this.input.description,
          Name: this.input.name,
          SourceRegion: this.input.sourceRegion,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyFpgaImage.FpgaImageId', props);
    return resource.getResponseField('FpgaImageId') as unknown as string;
  }

}

export class EC2CopyImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CopyImageRequest) {
    super(scope, id);
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CopyImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          Name: this.input.name,
          SourceImageId: this.input.sourceImageId,
          SourceRegion: this.input.sourceRegion,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

}

export class EC2CopySnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CopySnapshotRequest) {
    super(scope, id);
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copySnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CopySnapshot.SnapshotId'),
        outputPath: 'SnapshotId',
        parameters: {
          Description: this.input.description,
          DestinationRegion: this.input.destinationRegion,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          PresignedUrl: this.input.presignedUrl,
          SourceRegion: this.input.sourceRegion,
          SourceSnapshotId: this.input.sourceSnapshotId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopySnapshot.SnapshotId', props);
    return resource.getResponseField('SnapshotId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copySnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CopySnapshot.Tags'),
        outputPath: 'Tags',
        parameters: {
          Description: this.input.description,
          DestinationRegion: this.input.destinationRegion,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          PresignedUrl: this.input.presignedUrl,
          SourceRegion: this.input.sourceRegion,
          SourceSnapshotId: this.input.sourceSnapshotId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopySnapshot.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateCapacityReservation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateCapacityReservationRequest) {
    super(scope, id);
  }

  public get capacityReservation(): EC2CreateCapacityReservationCapacityReservation {
    return new EC2CreateCapacityReservationCapacityReservation(this, 'CapacityReservation', this.__resources, this.input);
  }

}

export class EC2CreateCapacityReservationCapacityReservation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateCapacityReservationRequest) {
    super(scope, id);
  }

  public get capacityReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.CapacityReservationId'),
        outputPath: 'CapacityReservation.CapacityReservationId',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.CapacityReservationId', props);
    return resource.getResponseField('CapacityReservation.CapacityReservationId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.OwnerId'),
        outputPath: 'CapacityReservation.OwnerId',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.OwnerId', props);
    return resource.getResponseField('CapacityReservation.OwnerId') as unknown as string;
  }

  public get capacityReservationArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.CapacityReservationArn'),
        outputPath: 'CapacityReservation.CapacityReservationArn',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.CapacityReservationArn', props);
    return resource.getResponseField('CapacityReservation.CapacityReservationArn') as unknown as string;
  }

  public get availabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.AvailabilityZoneId'),
        outputPath: 'CapacityReservation.AvailabilityZoneId',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.AvailabilityZoneId', props);
    return resource.getResponseField('CapacityReservation.AvailabilityZoneId') as unknown as string;
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.InstanceType'),
        outputPath: 'CapacityReservation.InstanceType',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.InstanceType', props);
    return resource.getResponseField('CapacityReservation.InstanceType') as unknown as string;
  }

  public get instancePlatform(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.InstancePlatform'),
        outputPath: 'CapacityReservation.InstancePlatform',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.InstancePlatform', props);
    return resource.getResponseField('CapacityReservation.InstancePlatform') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.AvailabilityZone'),
        outputPath: 'CapacityReservation.AvailabilityZone',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.AvailabilityZone', props);
    return resource.getResponseField('CapacityReservation.AvailabilityZone') as unknown as string;
  }

  public get tenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.Tenancy'),
        outputPath: 'CapacityReservation.Tenancy',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.Tenancy', props);
    return resource.getResponseField('CapacityReservation.Tenancy') as unknown as string;
  }

  public get totalInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.TotalInstanceCount'),
        outputPath: 'CapacityReservation.TotalInstanceCount',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.TotalInstanceCount', props);
    return resource.getResponseField('CapacityReservation.TotalInstanceCount') as unknown as number;
  }

  public get availableInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.AvailableInstanceCount'),
        outputPath: 'CapacityReservation.AvailableInstanceCount',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.AvailableInstanceCount', props);
    return resource.getResponseField('CapacityReservation.AvailableInstanceCount') as unknown as number;
  }

  public get ebsOptimized(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.EbsOptimized'),
        outputPath: 'CapacityReservation.EbsOptimized',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.EbsOptimized', props);
    return resource.getResponseField('CapacityReservation.EbsOptimized') as unknown as boolean;
  }

  public get ephemeralStorage(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.EphemeralStorage'),
        outputPath: 'CapacityReservation.EphemeralStorage',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.EphemeralStorage', props);
    return resource.getResponseField('CapacityReservation.EphemeralStorage') as unknown as boolean;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.State'),
        outputPath: 'CapacityReservation.State',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.State', props);
    return resource.getResponseField('CapacityReservation.State') as unknown as string;
  }

  public get endDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.EndDate'),
        outputPath: 'CapacityReservation.EndDate',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.EndDate', props);
    return resource.getResponseField('CapacityReservation.EndDate') as unknown as string;
  }

  public get endDateType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.EndDateType'),
        outputPath: 'CapacityReservation.EndDateType',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.EndDateType', props);
    return resource.getResponseField('CapacityReservation.EndDateType') as unknown as string;
  }

  public get instanceMatchCriteria(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.InstanceMatchCriteria'),
        outputPath: 'CapacityReservation.InstanceMatchCriteria',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.InstanceMatchCriteria', props);
    return resource.getResponseField('CapacityReservation.InstanceMatchCriteria') as unknown as string;
  }

  public get createDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.CreateDate'),
        outputPath: 'CapacityReservation.CreateDate',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.CreateDate', props);
    return resource.getResponseField('CapacityReservation.CreateDate') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.Tags'),
        outputPath: 'CapacityReservation.Tags',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceType: this.input.instanceType,
          InstancePlatform: this.input.instancePlatform,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          Tenancy: this.input.tenancy,
          InstanceCount: this.input.instanceCount,
          EbsOptimized: this.input.ebsOptimized,
          EphemeralStorage: this.input.ephemeralStorage,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          InstanceMatchCriteria: this.input.instanceMatchCriteria,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCapacityReservation.CapacityReservation.Tags', props);
    return resource.getResponseField('CapacityReservation.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateCarrierGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateCarrierGatewayRequest) {
    super(scope, id);
  }

  public get carrierGateway(): EC2CreateCarrierGatewayCarrierGateway {
    return new EC2CreateCarrierGatewayCarrierGateway(this, 'CarrierGateway', this.__resources, this.input);
  }

}

export class EC2CreateCarrierGatewayCarrierGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateCarrierGatewayRequest) {
    super(scope, id);
  }

  public get carrierGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.CarrierGatewayId'),
        outputPath: 'CarrierGateway.CarrierGatewayId',
        parameters: {
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCarrierGateway.CarrierGateway.CarrierGatewayId', props);
    return resource.getResponseField('CarrierGateway.CarrierGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.VpcId'),
        outputPath: 'CarrierGateway.VpcId',
        parameters: {
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCarrierGateway.CarrierGateway.VpcId', props);
    return resource.getResponseField('CarrierGateway.VpcId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.State'),
        outputPath: 'CarrierGateway.State',
        parameters: {
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCarrierGateway.CarrierGateway.State', props);
    return resource.getResponseField('CarrierGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.OwnerId'),
        outputPath: 'CarrierGateway.OwnerId',
        parameters: {
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCarrierGateway.CarrierGateway.OwnerId', props);
    return resource.getResponseField('CarrierGateway.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.Tags'),
        outputPath: 'CarrierGateway.Tags',
        parameters: {
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCarrierGateway.CarrierGateway.Tags', props);
    return resource.getResponseField('CarrierGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateClientVpnEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateClientVpnEndpointRequest) {
    super(scope, id);
  }

  public get clientVpnEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnEndpoint.ClientVpnEndpointId'),
        outputPath: 'ClientVpnEndpointId',
        parameters: {
          ClientCidrBlock: this.input.clientCidrBlock,
          ServerCertificateArn: this.input.serverCertificateArn,
          AuthenticationOptions: this.input.authenticationOptions,
          ConnectionLogOptions: {
            Enabled: this.input.connectionLogOptions.enabled,
            CloudwatchLogGroup: this.input.connectionLogOptions.cloudwatchLogGroup,
            CloudwatchLogStream: this.input.connectionLogOptions.cloudwatchLogStream,
          },
          DnsServers: this.input.dnsServers,
          TransportProtocol: this.input.transportProtocol,
          VpnPort: this.input.vpnPort,
          Description: this.input.description,
          SplitTunnel: this.input.splitTunnel,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
          SecurityGroupIds: this.input.securityGroupIds,
          VpcId: this.input.vpcId,
          SelfServicePortal: this.input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClientVpnEndpoint.ClientVpnEndpointId', props);
    return resource.getResponseField('ClientVpnEndpointId') as unknown as string;
  }

  public get status(): EC2CreateClientVpnEndpointStatus {
    return new EC2CreateClientVpnEndpointStatus(this, 'Status', this.__resources, this.input);
  }

  public get dnsName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnEndpoint.DnsName'),
        outputPath: 'DnsName',
        parameters: {
          ClientCidrBlock: this.input.clientCidrBlock,
          ServerCertificateArn: this.input.serverCertificateArn,
          AuthenticationOptions: this.input.authenticationOptions,
          ConnectionLogOptions: {
            Enabled: this.input.connectionLogOptions.enabled,
            CloudwatchLogGroup: this.input.connectionLogOptions.cloudwatchLogGroup,
            CloudwatchLogStream: this.input.connectionLogOptions.cloudwatchLogStream,
          },
          DnsServers: this.input.dnsServers,
          TransportProtocol: this.input.transportProtocol,
          VpnPort: this.input.vpnPort,
          Description: this.input.description,
          SplitTunnel: this.input.splitTunnel,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
          SecurityGroupIds: this.input.securityGroupIds,
          VpcId: this.input.vpcId,
          SelfServicePortal: this.input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClientVpnEndpoint.DnsName', props);
    return resource.getResponseField('DnsName') as unknown as string;
  }

}

export class EC2CreateClientVpnEndpointStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateClientVpnEndpointRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnEndpoint.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientCidrBlock: this.input.clientCidrBlock,
          ServerCertificateArn: this.input.serverCertificateArn,
          AuthenticationOptions: this.input.authenticationOptions,
          ConnectionLogOptions: {
            Enabled: this.input.connectionLogOptions.enabled,
            CloudwatchLogGroup: this.input.connectionLogOptions.cloudwatchLogGroup,
            CloudwatchLogStream: this.input.connectionLogOptions.cloudwatchLogStream,
          },
          DnsServers: this.input.dnsServers,
          TransportProtocol: this.input.transportProtocol,
          VpnPort: this.input.vpnPort,
          Description: this.input.description,
          SplitTunnel: this.input.splitTunnel,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
          SecurityGroupIds: this.input.securityGroupIds,
          VpcId: this.input.vpcId,
          SelfServicePortal: this.input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClientVpnEndpoint.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnEndpoint.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientCidrBlock: this.input.clientCidrBlock,
          ServerCertificateArn: this.input.serverCertificateArn,
          AuthenticationOptions: this.input.authenticationOptions,
          ConnectionLogOptions: {
            Enabled: this.input.connectionLogOptions.enabled,
            CloudwatchLogGroup: this.input.connectionLogOptions.cloudwatchLogGroup,
            CloudwatchLogStream: this.input.connectionLogOptions.cloudwatchLogStream,
          },
          DnsServers: this.input.dnsServers,
          TransportProtocol: this.input.transportProtocol,
          VpnPort: this.input.vpnPort,
          Description: this.input.description,
          SplitTunnel: this.input.splitTunnel,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
          SecurityGroupIds: this.input.securityGroupIds,
          VpcId: this.input.vpcId,
          SelfServicePortal: this.input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClientVpnEndpoint.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2CreateClientVpnRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateClientVpnRouteRequest) {
    super(scope, id);
  }

  public get status(): EC2CreateClientVpnRouteStatus {
    return new EC2CreateClientVpnRouteStatus(this, 'Status', this.__resources, this.input);
  }

}

export class EC2CreateClientVpnRouteStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateClientVpnRouteRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnRoute.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TargetVpcSubnetId: this.input.targetVpcSubnetId,
          Description: this.input.description,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClientVpnRoute.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnRoute.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TargetVpcSubnetId: this.input.targetVpcSubnetId,
          Description: this.input.description,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateClientVpnRoute.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2CreateCustomerGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateCustomerGatewayRequest) {
    super(scope, id);
  }

  public get customerGateway(): EC2CreateCustomerGatewayCustomerGateway {
    return new EC2CreateCustomerGatewayCustomerGateway(this, 'CustomerGateway', this.__resources, this.input);
  }

}

export class EC2CreateCustomerGatewayCustomerGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateCustomerGatewayRequest) {
    super(scope, id);
  }

  public get bgpAsn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.BgpAsn'),
        outputPath: 'CustomerGateway.BgpAsn',
        parameters: {
          BgpAsn: this.input.bgpAsn,
          PublicIp: this.input.publicIp,
          CertificateArn: this.input.certificateArn,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          DeviceName: this.input.deviceName,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomerGateway.CustomerGateway.BgpAsn', props);
    return resource.getResponseField('CustomerGateway.BgpAsn') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.CustomerGatewayId'),
        outputPath: 'CustomerGateway.CustomerGatewayId',
        parameters: {
          BgpAsn: this.input.bgpAsn,
          PublicIp: this.input.publicIp,
          CertificateArn: this.input.certificateArn,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          DeviceName: this.input.deviceName,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomerGateway.CustomerGateway.CustomerGatewayId', props);
    return resource.getResponseField('CustomerGateway.CustomerGatewayId') as unknown as string;
  }

  public get ipAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.IpAddress'),
        outputPath: 'CustomerGateway.IpAddress',
        parameters: {
          BgpAsn: this.input.bgpAsn,
          PublicIp: this.input.publicIp,
          CertificateArn: this.input.certificateArn,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          DeviceName: this.input.deviceName,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomerGateway.CustomerGateway.IpAddress', props);
    return resource.getResponseField('CustomerGateway.IpAddress') as unknown as string;
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.CertificateArn'),
        outputPath: 'CustomerGateway.CertificateArn',
        parameters: {
          BgpAsn: this.input.bgpAsn,
          PublicIp: this.input.publicIp,
          CertificateArn: this.input.certificateArn,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          DeviceName: this.input.deviceName,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomerGateway.CustomerGateway.CertificateArn', props);
    return resource.getResponseField('CustomerGateway.CertificateArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.State'),
        outputPath: 'CustomerGateway.State',
        parameters: {
          BgpAsn: this.input.bgpAsn,
          PublicIp: this.input.publicIp,
          CertificateArn: this.input.certificateArn,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          DeviceName: this.input.deviceName,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomerGateway.CustomerGateway.State', props);
    return resource.getResponseField('CustomerGateway.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.Type'),
        outputPath: 'CustomerGateway.Type',
        parameters: {
          BgpAsn: this.input.bgpAsn,
          PublicIp: this.input.publicIp,
          CertificateArn: this.input.certificateArn,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          DeviceName: this.input.deviceName,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomerGateway.CustomerGateway.Type', props);
    return resource.getResponseField('CustomerGateway.Type') as unknown as string;
  }

  public get deviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.DeviceName'),
        outputPath: 'CustomerGateway.DeviceName',
        parameters: {
          BgpAsn: this.input.bgpAsn,
          PublicIp: this.input.publicIp,
          CertificateArn: this.input.certificateArn,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          DeviceName: this.input.deviceName,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomerGateway.CustomerGateway.DeviceName', props);
    return resource.getResponseField('CustomerGateway.DeviceName') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.Tags'),
        outputPath: 'CustomerGateway.Tags',
        parameters: {
          BgpAsn: this.input.bgpAsn,
          PublicIp: this.input.publicIp,
          CertificateArn: this.input.certificateArn,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          DeviceName: this.input.deviceName,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomerGateway.CustomerGateway.Tags', props);
    return resource.getResponseField('CustomerGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateDefaultSubnet extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateDefaultSubnetRequest) {
    super(scope, id);
  }

  public get subnet(): EC2CreateDefaultSubnetSubnet {
    return new EC2CreateDefaultSubnetSubnet(this, 'Subnet', this.__resources, this.input);
  }

}

export class EC2CreateDefaultSubnetSubnet extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateDefaultSubnetRequest) {
    super(scope, id);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.AvailabilityZone'),
        outputPath: 'Subnet.AvailabilityZone',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.AvailabilityZone', props);
    return resource.getResponseField('Subnet.AvailabilityZone') as unknown as string;
  }

  public get availabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.AvailabilityZoneId'),
        outputPath: 'Subnet.AvailabilityZoneId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.AvailabilityZoneId', props);
    return resource.getResponseField('Subnet.AvailabilityZoneId') as unknown as string;
  }

  public get availableIpAddressCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.AvailableIpAddressCount'),
        outputPath: 'Subnet.AvailableIpAddressCount',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.AvailableIpAddressCount', props);
    return resource.getResponseField('Subnet.AvailableIpAddressCount') as unknown as number;
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.CidrBlock'),
        outputPath: 'Subnet.CidrBlock',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.CidrBlock', props);
    return resource.getResponseField('Subnet.CidrBlock') as unknown as string;
  }

  public get defaultForAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.DefaultForAz'),
        outputPath: 'Subnet.DefaultForAz',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.DefaultForAz', props);
    return resource.getResponseField('Subnet.DefaultForAz') as unknown as boolean;
  }

  public get mapPublicIpOnLaunch(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.MapPublicIpOnLaunch'),
        outputPath: 'Subnet.MapPublicIpOnLaunch',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.MapPublicIpOnLaunch', props);
    return resource.getResponseField('Subnet.MapPublicIpOnLaunch') as unknown as boolean;
  }

  public get mapCustomerOwnedIpOnLaunch(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.MapCustomerOwnedIpOnLaunch'),
        outputPath: 'Subnet.MapCustomerOwnedIpOnLaunch',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.MapCustomerOwnedIpOnLaunch', props);
    return resource.getResponseField('Subnet.MapCustomerOwnedIpOnLaunch') as unknown as boolean;
  }

  public get customerOwnedIpv4Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.CustomerOwnedIpv4Pool'),
        outputPath: 'Subnet.CustomerOwnedIpv4Pool',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.CustomerOwnedIpv4Pool', props);
    return resource.getResponseField('Subnet.CustomerOwnedIpv4Pool') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.State'),
        outputPath: 'Subnet.State',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.State', props);
    return resource.getResponseField('Subnet.State') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.SubnetId'),
        outputPath: 'Subnet.SubnetId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.SubnetId', props);
    return resource.getResponseField('Subnet.SubnetId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.VpcId'),
        outputPath: 'Subnet.VpcId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.VpcId', props);
    return resource.getResponseField('Subnet.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.OwnerId'),
        outputPath: 'Subnet.OwnerId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.OwnerId', props);
    return resource.getResponseField('Subnet.OwnerId') as unknown as string;
  }

  public get assignIpv6AddressOnCreation(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.AssignIpv6AddressOnCreation'),
        outputPath: 'Subnet.AssignIpv6AddressOnCreation',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.AssignIpv6AddressOnCreation', props);
    return resource.getResponseField('Subnet.AssignIpv6AddressOnCreation') as unknown as boolean;
  }

  public get ipv6CidrBlockAssociationSet(): shapes.Ec2SubnetIpv6CidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.Ipv6CidrBlockAssociationSet'),
        outputPath: 'Subnet.Ipv6CidrBlockAssociationSet',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.Ipv6CidrBlockAssociationSet', props);
    return resource.getResponseField('Subnet.Ipv6CidrBlockAssociationSet') as unknown as shapes.Ec2SubnetIpv6CidrBlockAssociation[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.Tags'),
        outputPath: 'Subnet.Tags',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.Tags', props);
    return resource.getResponseField('Subnet.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get subnetArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.SubnetArn'),
        outputPath: 'Subnet.SubnetArn',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.SubnetArn', props);
    return resource.getResponseField('Subnet.SubnetArn') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.OutpostArn'),
        outputPath: 'Subnet.OutpostArn',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultSubnet.Subnet.OutpostArn', props);
    return resource.getResponseField('Subnet.OutpostArn') as unknown as string;
  }

}

export class EC2CreateDefaultVpc extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateDefaultVpcRequest) {
    super(scope, id);
  }

  public get vpc(): EC2CreateDefaultVpcVpc {
    return new EC2CreateDefaultVpcVpc(this, 'Vpc', this.__resources, this.input);
  }

}

export class EC2CreateDefaultVpcVpc extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateDefaultVpcRequest) {
    super(scope, id);
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.CidrBlock'),
        outputPath: 'Vpc.CidrBlock',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.CidrBlock', props);
    return resource.getResponseField('Vpc.CidrBlock') as unknown as string;
  }

  public get dhcpOptionsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.DhcpOptionsId'),
        outputPath: 'Vpc.DhcpOptionsId',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.DhcpOptionsId', props);
    return resource.getResponseField('Vpc.DhcpOptionsId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.State'),
        outputPath: 'Vpc.State',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.State', props);
    return resource.getResponseField('Vpc.State') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.VpcId'),
        outputPath: 'Vpc.VpcId',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.VpcId', props);
    return resource.getResponseField('Vpc.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.OwnerId'),
        outputPath: 'Vpc.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.OwnerId', props);
    return resource.getResponseField('Vpc.OwnerId') as unknown as string;
  }

  public get instanceTenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.InstanceTenancy'),
        outputPath: 'Vpc.InstanceTenancy',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.InstanceTenancy', props);
    return resource.getResponseField('Vpc.InstanceTenancy') as unknown as string;
  }

  public get ipv6CidrBlockAssociationSet(): shapes.Ec2VpcIpv6CidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.Ipv6CidrBlockAssociationSet'),
        outputPath: 'Vpc.Ipv6CidrBlockAssociationSet',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.Ipv6CidrBlockAssociationSet', props);
    return resource.getResponseField('Vpc.Ipv6CidrBlockAssociationSet') as unknown as shapes.Ec2VpcIpv6CidrBlockAssociation[];
  }

  public get cidrBlockAssociationSet(): shapes.Ec2VpcCidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.CidrBlockAssociationSet'),
        outputPath: 'Vpc.CidrBlockAssociationSet',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.CidrBlockAssociationSet', props);
    return resource.getResponseField('Vpc.CidrBlockAssociationSet') as unknown as shapes.Ec2VpcCidrBlockAssociation[];
  }

  public get isDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.IsDefault'),
        outputPath: 'Vpc.IsDefault',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.IsDefault', props);
    return resource.getResponseField('Vpc.IsDefault') as unknown as boolean;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.Tags'),
        outputPath: 'Vpc.Tags',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDefaultVpc.Vpc.Tags', props);
    return resource.getResponseField('Vpc.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateDhcpOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateDhcpOptionsRequest) {
    super(scope, id);
  }

  public get dhcpOptions(): EC2CreateDhcpOptionsDhcpOptions {
    return new EC2CreateDhcpOptionsDhcpOptions(this, 'DhcpOptions', this.__resources, this.input);
  }

}

export class EC2CreateDhcpOptionsDhcpOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateDhcpOptionsRequest) {
    super(scope, id);
  }

  public get dhcpConfigurations(): shapes.Ec2DhcpConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDhcpOptions.DhcpOptions.DhcpConfigurations'),
        outputPath: 'DhcpOptions.DhcpConfigurations',
        parameters: {
          DhcpConfigurations: this.input.dhcpConfigurations,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDhcpOptions.DhcpOptions.DhcpConfigurations', props);
    return resource.getResponseField('DhcpOptions.DhcpConfigurations') as unknown as shapes.Ec2DhcpConfiguration[];
  }

  public get dhcpOptionsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDhcpOptions.DhcpOptions.DhcpOptionsId'),
        outputPath: 'DhcpOptions.DhcpOptionsId',
        parameters: {
          DhcpConfigurations: this.input.dhcpConfigurations,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDhcpOptions.DhcpOptions.DhcpOptionsId', props);
    return resource.getResponseField('DhcpOptions.DhcpOptionsId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDhcpOptions.DhcpOptions.OwnerId'),
        outputPath: 'DhcpOptions.OwnerId',
        parameters: {
          DhcpConfigurations: this.input.dhcpConfigurations,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDhcpOptions.DhcpOptions.OwnerId', props);
    return resource.getResponseField('DhcpOptions.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDhcpOptions.DhcpOptions.Tags'),
        outputPath: 'DhcpOptions.Tags',
        parameters: {
          DhcpConfigurations: this.input.dhcpConfigurations,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDhcpOptions.DhcpOptions.Tags', props);
    return resource.getResponseField('DhcpOptions.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateEgressOnlyInternetGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateEgressOnlyInternetGatewayRequest) {
    super(scope, id);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateEgressOnlyInternetGateway.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEgressOnlyInternetGateway.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

  public get egressOnlyInternetGateway(): EC2CreateEgressOnlyInternetGatewayEgressOnlyInternetGateway {
    return new EC2CreateEgressOnlyInternetGatewayEgressOnlyInternetGateway(this, 'EgressOnlyInternetGateway', this.__resources, this.input);
  }

}

export class EC2CreateEgressOnlyInternetGatewayEgressOnlyInternetGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateEgressOnlyInternetGatewayRequest) {
    super(scope, id);
  }

  public get attachments(): shapes.Ec2InternetGatewayAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.Attachments'),
        outputPath: 'EgressOnlyInternetGateway.Attachments',
        parameters: {
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.Attachments', props);
    return resource.getResponseField('EgressOnlyInternetGateway.Attachments') as unknown as shapes.Ec2InternetGatewayAttachment[];
  }

  public get egressOnlyInternetGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.EgressOnlyInternetGatewayId'),
        outputPath: 'EgressOnlyInternetGateway.EgressOnlyInternetGatewayId',
        parameters: {
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.EgressOnlyInternetGatewayId', props);
    return resource.getResponseField('EgressOnlyInternetGateway.EgressOnlyInternetGatewayId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.Tags'),
        outputPath: 'EgressOnlyInternetGateway.Tags',
        parameters: {
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.Tags', props);
    return resource.getResponseField('EgressOnlyInternetGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateFleet extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateFleetRequest) {
    super(scope, id);
  }

  public get fleetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFleet.FleetId'),
        outputPath: 'FleetId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          SpotOptions: {
            AllocationStrategy: this.input.spotOptions?.allocationStrategy,
            MaintenanceStrategies: {
              CapacityRebalance: {
                ReplacementStrategy: this.input.spotOptions?.maintenanceStrategies?.capacityRebalance?.replacementStrategy,
              },
            },
            InstanceInterruptionBehavior: this.input.spotOptions?.instanceInterruptionBehavior,
            InstancePoolsToUseCount: this.input.spotOptions?.instancePoolsToUseCount,
            SingleInstanceType: this.input.spotOptions?.singleInstanceType,
            SingleAvailabilityZone: this.input.spotOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.input.spotOptions?.minTargetCapacity,
            MaxTotalPrice: this.input.spotOptions?.maxTotalPrice,
          },
          OnDemandOptions: {
            AllocationStrategy: this.input.onDemandOptions?.allocationStrategy,
            CapacityReservationOptions: {
              UsageStrategy: this.input.onDemandOptions?.capacityReservationOptions?.usageStrategy,
            },
            SingleInstanceType: this.input.onDemandOptions?.singleInstanceType,
            SingleAvailabilityZone: this.input.onDemandOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.input.onDemandOptions?.minTargetCapacity,
            MaxTotalPrice: this.input.onDemandOptions?.maxTotalPrice,
          },
          ExcessCapacityTerminationPolicy: this.input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.input.launchTemplateConfigs,
          TargetCapacitySpecification: {
            TotalTargetCapacity: this.input.targetCapacitySpecification.totalTargetCapacity,
            OnDemandTargetCapacity: this.input.targetCapacitySpecification.onDemandTargetCapacity,
            SpotTargetCapacity: this.input.targetCapacitySpecification.spotTargetCapacity,
            DefaultTargetCapacityType: this.input.targetCapacitySpecification.defaultTargetCapacityType,
          },
          TerminateInstancesWithExpiration: this.input.terminateInstancesWithExpiration,
          Type: this.input.type,
          ValidFrom: this.input.validFrom,
          ValidUntil: this.input.validUntil,
          ReplaceUnhealthyInstances: this.input.replaceUnhealthyInstances,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFleet.FleetId', props);
    return resource.getResponseField('FleetId') as unknown as string;
  }

  public get errors(): shapes.Ec2CreateFleetError[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFleet.Errors'),
        outputPath: 'Errors',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          SpotOptions: {
            AllocationStrategy: this.input.spotOptions?.allocationStrategy,
            MaintenanceStrategies: {
              CapacityRebalance: {
                ReplacementStrategy: this.input.spotOptions?.maintenanceStrategies?.capacityRebalance?.replacementStrategy,
              },
            },
            InstanceInterruptionBehavior: this.input.spotOptions?.instanceInterruptionBehavior,
            InstancePoolsToUseCount: this.input.spotOptions?.instancePoolsToUseCount,
            SingleInstanceType: this.input.spotOptions?.singleInstanceType,
            SingleAvailabilityZone: this.input.spotOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.input.spotOptions?.minTargetCapacity,
            MaxTotalPrice: this.input.spotOptions?.maxTotalPrice,
          },
          OnDemandOptions: {
            AllocationStrategy: this.input.onDemandOptions?.allocationStrategy,
            CapacityReservationOptions: {
              UsageStrategy: this.input.onDemandOptions?.capacityReservationOptions?.usageStrategy,
            },
            SingleInstanceType: this.input.onDemandOptions?.singleInstanceType,
            SingleAvailabilityZone: this.input.onDemandOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.input.onDemandOptions?.minTargetCapacity,
            MaxTotalPrice: this.input.onDemandOptions?.maxTotalPrice,
          },
          ExcessCapacityTerminationPolicy: this.input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.input.launchTemplateConfigs,
          TargetCapacitySpecification: {
            TotalTargetCapacity: this.input.targetCapacitySpecification.totalTargetCapacity,
            OnDemandTargetCapacity: this.input.targetCapacitySpecification.onDemandTargetCapacity,
            SpotTargetCapacity: this.input.targetCapacitySpecification.spotTargetCapacity,
            DefaultTargetCapacityType: this.input.targetCapacitySpecification.defaultTargetCapacityType,
          },
          TerminateInstancesWithExpiration: this.input.terminateInstancesWithExpiration,
          Type: this.input.type,
          ValidFrom: this.input.validFrom,
          ValidUntil: this.input.validUntil,
          ReplaceUnhealthyInstances: this.input.replaceUnhealthyInstances,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFleet.Errors', props);
    return resource.getResponseField('Errors') as unknown as shapes.Ec2CreateFleetError[];
  }

  public get instances(): shapes.Ec2CreateFleetInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFleet.Instances'),
        outputPath: 'Instances',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          SpotOptions: {
            AllocationStrategy: this.input.spotOptions?.allocationStrategy,
            MaintenanceStrategies: {
              CapacityRebalance: {
                ReplacementStrategy: this.input.spotOptions?.maintenanceStrategies?.capacityRebalance?.replacementStrategy,
              },
            },
            InstanceInterruptionBehavior: this.input.spotOptions?.instanceInterruptionBehavior,
            InstancePoolsToUseCount: this.input.spotOptions?.instancePoolsToUseCount,
            SingleInstanceType: this.input.spotOptions?.singleInstanceType,
            SingleAvailabilityZone: this.input.spotOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.input.spotOptions?.minTargetCapacity,
            MaxTotalPrice: this.input.spotOptions?.maxTotalPrice,
          },
          OnDemandOptions: {
            AllocationStrategy: this.input.onDemandOptions?.allocationStrategy,
            CapacityReservationOptions: {
              UsageStrategy: this.input.onDemandOptions?.capacityReservationOptions?.usageStrategy,
            },
            SingleInstanceType: this.input.onDemandOptions?.singleInstanceType,
            SingleAvailabilityZone: this.input.onDemandOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.input.onDemandOptions?.minTargetCapacity,
            MaxTotalPrice: this.input.onDemandOptions?.maxTotalPrice,
          },
          ExcessCapacityTerminationPolicy: this.input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.input.launchTemplateConfigs,
          TargetCapacitySpecification: {
            TotalTargetCapacity: this.input.targetCapacitySpecification.totalTargetCapacity,
            OnDemandTargetCapacity: this.input.targetCapacitySpecification.onDemandTargetCapacity,
            SpotTargetCapacity: this.input.targetCapacitySpecification.spotTargetCapacity,
            DefaultTargetCapacityType: this.input.targetCapacitySpecification.defaultTargetCapacityType,
          },
          TerminateInstancesWithExpiration: this.input.terminateInstancesWithExpiration,
          Type: this.input.type,
          ValidFrom: this.input.validFrom,
          ValidUntil: this.input.validUntil,
          ReplaceUnhealthyInstances: this.input.replaceUnhealthyInstances,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFleet.Instances', props);
    return resource.getResponseField('Instances') as unknown as shapes.Ec2CreateFleetInstance[];
  }

}

export class EC2CreateFlowLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateFlowLogsRequest) {
    super(scope, id);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFlowLogs.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          DeliverLogsPermissionArn: this.input.deliverLogsPermissionArn,
          LogGroupName: this.input.logGroupName,
          ResourceIds: this.input.resourceIds,
          ResourceType: this.input.resourceType,
          TrafficType: this.input.trafficType,
          LogDestinationType: this.input.logDestinationType,
          LogDestination: this.input.logDestination,
          LogFormat: this.input.logFormat,
          TagSpecifications: this.input.tagSpecifications,
          MaxAggregationInterval: this.input.maxAggregationInterval,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFlowLogs.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

  public get flowLogIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFlowLogs.FlowLogIds'),
        outputPath: 'FlowLogIds',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          DeliverLogsPermissionArn: this.input.deliverLogsPermissionArn,
          LogGroupName: this.input.logGroupName,
          ResourceIds: this.input.resourceIds,
          ResourceType: this.input.resourceType,
          TrafficType: this.input.trafficType,
          LogDestinationType: this.input.logDestinationType,
          LogDestination: this.input.logDestination,
          LogFormat: this.input.logFormat,
          TagSpecifications: this.input.tagSpecifications,
          MaxAggregationInterval: this.input.maxAggregationInterval,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFlowLogs.FlowLogIds', props);
    return resource.getResponseField('FlowLogIds') as unknown as string[];
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFlowLogs.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          DeliverLogsPermissionArn: this.input.deliverLogsPermissionArn,
          LogGroupName: this.input.logGroupName,
          ResourceIds: this.input.resourceIds,
          ResourceType: this.input.resourceType,
          TrafficType: this.input.trafficType,
          LogDestinationType: this.input.logDestinationType,
          LogDestination: this.input.logDestination,
          LogFormat: this.input.logFormat,
          TagSpecifications: this.input.tagSpecifications,
          MaxAggregationInterval: this.input.maxAggregationInterval,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFlowLogs.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2CreateFpgaImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateFpgaImageRequest) {
    super(scope, id);
  }

  public get fpgaImageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFpgaImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFpgaImage.FpgaImageId'),
        outputPath: 'FpgaImageId',
        parameters: {
          DryRun: this.input.dryRun,
          InputStorageLocation: {
            Bucket: this.input.inputStorageLocation.bucket,
            Key: this.input.inputStorageLocation.key,
          },
          LogsStorageLocation: {
            Bucket: this.input.logsStorageLocation?.bucket,
            Key: this.input.logsStorageLocation?.key,
          },
          Description: this.input.description,
          Name: this.input.name,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFpgaImage.FpgaImageId', props);
    return resource.getResponseField('FpgaImageId') as unknown as string;
  }

  public get fpgaImageGlobalId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFpgaImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFpgaImage.FpgaImageGlobalId'),
        outputPath: 'FpgaImageGlobalId',
        parameters: {
          DryRun: this.input.dryRun,
          InputStorageLocation: {
            Bucket: this.input.inputStorageLocation.bucket,
            Key: this.input.inputStorageLocation.key,
          },
          LogsStorageLocation: {
            Bucket: this.input.logsStorageLocation?.bucket,
            Key: this.input.logsStorageLocation?.key,
          },
          Description: this.input.description,
          Name: this.input.name,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFpgaImage.FpgaImageGlobalId', props);
    return resource.getResponseField('FpgaImageGlobalId') as unknown as string;
  }

}

export class EC2CreateImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateImageRequest) {
    super(scope, id);
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          BlockDeviceMappings: this.input.blockDeviceMappings,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          Name: this.input.name,
          NoReboot: this.input.noReboot,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

}

export class EC2CreateInstanceExportTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateInstanceExportTaskRequest) {
    super(scope, id);
  }

  public get exportTask(): EC2CreateInstanceExportTaskExportTask {
    return new EC2CreateInstanceExportTaskExportTask(this, 'ExportTask', this.__resources, this.input);
  }

}

export class EC2CreateInstanceExportTaskExportTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateInstanceExportTaskRequest) {
    super(scope, id);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.Description'),
        outputPath: 'ExportTask.Description',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.Description', props);
    return resource.getResponseField('ExportTask.Description') as unknown as string;
  }

  public get exportTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportTaskId'),
        outputPath: 'ExportTask.ExportTaskId',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.ExportTaskId', props);
    return resource.getResponseField('ExportTask.ExportTaskId') as unknown as string;
  }

  public get exportToS3Task(): EC2CreateInstanceExportTaskExportTaskExportToS3Task {
    return new EC2CreateInstanceExportTaskExportTaskExportToS3Task(this, 'ExportToS3Task', this.__resources, this.input);
  }

  public get instanceExportDetails(): EC2CreateInstanceExportTaskExportTaskInstanceExportDetails {
    return new EC2CreateInstanceExportTaskExportTaskInstanceExportDetails(this, 'InstanceExportDetails', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.State'),
        outputPath: 'ExportTask.State',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.State', props);
    return resource.getResponseField('ExportTask.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.StatusMessage'),
        outputPath: 'ExportTask.StatusMessage',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.StatusMessage', props);
    return resource.getResponseField('ExportTask.StatusMessage') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.Tags'),
        outputPath: 'ExportTask.Tags',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.Tags', props);
    return resource.getResponseField('ExportTask.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateInstanceExportTaskExportTaskExportToS3Task extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateInstanceExportTaskRequest) {
    super(scope, id);
  }

  public get containerFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportToS3Task.ContainerFormat'),
        outputPath: 'ExportTask.ExportToS3Task.ContainerFormat',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.ExportToS3Task.ContainerFormat', props);
    return resource.getResponseField('ExportTask.ExportToS3Task.ContainerFormat') as unknown as string;
  }

  public get diskImageFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportToS3Task.DiskImageFormat'),
        outputPath: 'ExportTask.ExportToS3Task.DiskImageFormat',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.ExportToS3Task.DiskImageFormat', props);
    return resource.getResponseField('ExportTask.ExportToS3Task.DiskImageFormat') as unknown as string;
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportToS3Task.S3Bucket'),
        outputPath: 'ExportTask.ExportToS3Task.S3Bucket',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.ExportToS3Task.S3Bucket', props);
    return resource.getResponseField('ExportTask.ExportToS3Task.S3Bucket') as unknown as string;
  }

  public get s3Key(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportToS3Task.S3Key'),
        outputPath: 'ExportTask.ExportToS3Task.S3Key',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.ExportToS3Task.S3Key', props);
    return resource.getResponseField('ExportTask.ExportToS3Task.S3Key') as unknown as string;
  }

}

export class EC2CreateInstanceExportTaskExportTaskInstanceExportDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateInstanceExportTaskRequest) {
    super(scope, id);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.InstanceExportDetails.InstanceId'),
        outputPath: 'ExportTask.InstanceExportDetails.InstanceId',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.InstanceExportDetails.InstanceId', props);
    return resource.getResponseField('ExportTask.InstanceExportDetails.InstanceId') as unknown as string;
  }

  public get targetEnvironment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.InstanceExportDetails.TargetEnvironment'),
        outputPath: 'ExportTask.InstanceExportDetails.TargetEnvironment',
        parameters: {
          Description: this.input.description,
          ExportToS3Task: {
            ContainerFormat: this.input.exportToS3Task.containerFormat,
            DiskImageFormat: this.input.exportToS3Task.diskImageFormat,
            S3Bucket: this.input.exportToS3Task.s3Bucket,
            S3Prefix: this.input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.input.instanceId,
          TargetEnvironment: this.input.targetEnvironment,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInstanceExportTask.ExportTask.InstanceExportDetails.TargetEnvironment', props);
    return resource.getResponseField('ExportTask.InstanceExportDetails.TargetEnvironment') as unknown as string;
  }

}

export class EC2CreateInternetGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateInternetGatewayRequest) {
    super(scope, id);
  }

  public get internetGateway(): EC2CreateInternetGatewayInternetGateway {
    return new EC2CreateInternetGatewayInternetGateway(this, 'InternetGateway', this.__resources, this.input);
  }

}

export class EC2CreateInternetGatewayInternetGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateInternetGatewayRequest) {
    super(scope, id);
  }

  public get attachments(): shapes.Ec2InternetGatewayAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInternetGateway.InternetGateway.Attachments'),
        outputPath: 'InternetGateway.Attachments',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInternetGateway.InternetGateway.Attachments', props);
    return resource.getResponseField('InternetGateway.Attachments') as unknown as shapes.Ec2InternetGatewayAttachment[];
  }

  public get internetGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInternetGateway.InternetGateway.InternetGatewayId'),
        outputPath: 'InternetGateway.InternetGatewayId',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInternetGateway.InternetGateway.InternetGatewayId', props);
    return resource.getResponseField('InternetGateway.InternetGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInternetGateway.InternetGateway.OwnerId'),
        outputPath: 'InternetGateway.OwnerId',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInternetGateway.InternetGateway.OwnerId', props);
    return resource.getResponseField('InternetGateway.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInternetGateway.InternetGateway.Tags'),
        outputPath: 'InternetGateway.Tags',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInternetGateway.InternetGateway.Tags', props);
    return resource.getResponseField('InternetGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateKeyPair extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateKeyPairRequest) {
    super(scope, id);
  }

  public get keyFingerprint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.KeyFingerprint'),
        outputPath: 'KeyFingerprint',
        parameters: {
          KeyName: this.input.keyName,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyPair.KeyFingerprint', props);
    return resource.getResponseField('KeyFingerprint') as unknown as string;
  }

  public get keyMaterial(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.KeyMaterial'),
        outputPath: 'KeyMaterial',
        parameters: {
          KeyName: this.input.keyName,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyPair.KeyMaterial', props);
    return resource.getResponseField('KeyMaterial') as unknown as string;
  }

  public get keyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.KeyName'),
        outputPath: 'KeyName',
        parameters: {
          KeyName: this.input.keyName,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyPair.KeyName', props);
    return resource.getResponseField('KeyName') as unknown as string;
  }

  public get keyPairId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.KeyPairId'),
        outputPath: 'KeyPairId',
        parameters: {
          KeyName: this.input.keyName,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyPair.KeyPairId', props);
    return resource.getResponseField('KeyPairId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.Tags'),
        outputPath: 'Tags',
        parameters: {
          KeyName: this.input.keyName,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyPair.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateLaunchTemplate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateRequest) {
    super(scope, id);
  }

  public get launchTemplate(): EC2CreateLaunchTemplateLaunchTemplate {
    return new EC2CreateLaunchTemplateLaunchTemplate(this, 'LaunchTemplate', this.__resources, this.input);
  }

  public get warning(): EC2CreateLaunchTemplateWarning {
    return new EC2CreateLaunchTemplateWarning(this, 'Warning', this.__resources, this.input);
  }

}

export class EC2CreateLaunchTemplateLaunchTemplate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateRequest) {
    super(scope, id);
  }

  public get launchTemplateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.LaunchTemplateId'),
        outputPath: 'LaunchTemplate.LaunchTemplateId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateName: this.input.launchTemplateName,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplate.LaunchTemplate.LaunchTemplateId', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateId') as unknown as string;
  }

  public get launchTemplateName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.LaunchTemplateName'),
        outputPath: 'LaunchTemplate.LaunchTemplateName',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateName: this.input.launchTemplateName,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplate.LaunchTemplate.LaunchTemplateName', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateName') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.CreateTime'),
        outputPath: 'LaunchTemplate.CreateTime',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateName: this.input.launchTemplateName,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplate.LaunchTemplate.CreateTime', props);
    return resource.getResponseField('LaunchTemplate.CreateTime') as unknown as string;
  }

  public get createdBy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.CreatedBy'),
        outputPath: 'LaunchTemplate.CreatedBy',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateName: this.input.launchTemplateName,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplate.LaunchTemplate.CreatedBy', props);
    return resource.getResponseField('LaunchTemplate.CreatedBy') as unknown as string;
  }

  public get defaultVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.DefaultVersionNumber'),
        outputPath: 'LaunchTemplate.DefaultVersionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateName: this.input.launchTemplateName,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplate.LaunchTemplate.DefaultVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.DefaultVersionNumber') as unknown as number;
  }

  public get latestVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.LatestVersionNumber'),
        outputPath: 'LaunchTemplate.LatestVersionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateName: this.input.launchTemplateName,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplate.LaunchTemplate.LatestVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.LatestVersionNumber') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.Tags'),
        outputPath: 'LaunchTemplate.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateName: this.input.launchTemplateName,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplate.LaunchTemplate.Tags', props);
    return resource.getResponseField('LaunchTemplate.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateLaunchTemplateWarning extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateRequest) {
    super(scope, id);
  }

  public get errors(): shapes.Ec2ValidationError[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.Warning.Errors'),
        outputPath: 'Warning.Errors',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateName: this.input.launchTemplateName,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplate.Warning.Errors', props);
    return resource.getResponseField('Warning.Errors') as unknown as shapes.Ec2ValidationError[];
  }

}

export class EC2CreateLaunchTemplateVersion extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get launchTemplateVersion(): EC2CreateLaunchTemplateVersionLaunchTemplateVersion {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersion(this, 'LaunchTemplateVersion', this.__resources, this.input);
  }

  public get warning(): EC2CreateLaunchTemplateVersionWarning {
    return new EC2CreateLaunchTemplateVersionWarning(this, 'Warning', this.__resources, this.input);
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersion extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get launchTemplateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateId') as unknown as string;
  }

  public get launchTemplateName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateName'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateName',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateName', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateName') as unknown as string;
  }

  public get versionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.VersionNumber'),
        outputPath: 'LaunchTemplateVersion.VersionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.VersionNumber', props);
    return resource.getResponseField('LaunchTemplateVersion.VersionNumber') as unknown as number;
  }

  public get versionDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.VersionDescription'),
        outputPath: 'LaunchTemplateVersion.VersionDescription',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.VersionDescription', props);
    return resource.getResponseField('LaunchTemplateVersion.VersionDescription') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.CreateTime'),
        outputPath: 'LaunchTemplateVersion.CreateTime',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.CreateTime', props);
    return resource.getResponseField('LaunchTemplateVersion.CreateTime') as unknown as string;
  }

  public get createdBy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.CreatedBy'),
        outputPath: 'LaunchTemplateVersion.CreatedBy',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.CreatedBy', props);
    return resource.getResponseField('LaunchTemplateVersion.CreatedBy') as unknown as string;
  }

  public get defaultVersion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.DefaultVersion'),
        outputPath: 'LaunchTemplateVersion.DefaultVersion',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.DefaultVersion', props);
    return resource.getResponseField('LaunchTemplateVersion.DefaultVersion') as unknown as boolean;
  }

  public get launchTemplateData(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateData {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateData(this, 'LaunchTemplateData', this.__resources, this.input);
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateData extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get kernelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.KernelId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.KernelId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.KernelId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.KernelId') as unknown as string;
  }

  public get ebsOptimized(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.EbsOptimized',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.EbsOptimized') as unknown as boolean;
  }

  public get iamInstanceProfile(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataIamInstanceProfile {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataIamInstanceProfile(this, 'IamInstanceProfile', this.__resources, this.input);
  }

  public get blockDeviceMappings(): shapes.Ec2LaunchTemplateBlockDeviceMapping[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings') as unknown as shapes.Ec2LaunchTemplateBlockDeviceMapping[];
  }

  public get networkInterfaces(): shapes.Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces') as unknown as shapes.Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[];
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ImageId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.ImageId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ImageId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.ImageId') as unknown as string;
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceType'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceType',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceType', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceType') as unknown as string;
  }

  public get keyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.KeyName'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.KeyName',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.KeyName', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.KeyName') as unknown as string;
  }

  public get monitoring(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMonitoring {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMonitoring(this, 'Monitoring', this.__resources, this.input);
  }

  public get placement(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataPlacement {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataPlacement(this, 'Placement', this.__resources, this.input);
  }

  public get ramDiskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.RamDiskId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.RamDiskId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.RamDiskId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.RamDiskId') as unknown as string;
  }

  public get disableApiTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination') as unknown as boolean;
  }

  public get instanceInitiatedShutdownBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior') as unknown as string;
  }

  public get userData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.UserData'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.UserData',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.UserData', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.UserData') as unknown as string;
  }

  public get tagSpecifications(): shapes.Ec2LaunchTemplateTagSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.TagSpecifications'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.TagSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.TagSpecifications', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.TagSpecifications') as unknown as shapes.Ec2LaunchTemplateTagSpecification[];
  }

  public get elasticGpuSpecifications(): shapes.Ec2ElasticGpuSpecificationResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications') as unknown as shapes.Ec2ElasticGpuSpecificationResponse[];
  }

  public get elasticInferenceAccelerators(): shapes.Ec2LaunchTemplateElasticInferenceAcceleratorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators') as unknown as shapes.Ec2LaunchTemplateElasticInferenceAcceleratorResponse[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds') as unknown as string[];
  }

  public get securityGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.SecurityGroups',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.SecurityGroups') as unknown as string[];
  }

  public get instanceMarketOptions(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptions {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptions(this, 'InstanceMarketOptions', this.__resources, this.input);
  }

  public get creditSpecification(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCreditSpecification {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCreditSpecification(this, 'CreditSpecification', this.__resources, this.input);
  }

  public get cpuOptions(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCpuOptions {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCpuOptions(this, 'CpuOptions', this.__resources, this.input);
  }

  public get capacityReservationSpecification(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecification {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecification(this, 'CapacityReservationSpecification', this.__resources, this.input);
  }

  public get licenseSpecifications(): shapes.Ec2LaunchTemplateLicenseConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications') as unknown as shapes.Ec2LaunchTemplateLicenseConfiguration[];
  }

  public get hibernationOptions(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataHibernationOptions {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataHibernationOptions(this, 'HibernationOptions', this.__resources, this.input);
  }

  public get metadataOptions(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMetadataOptions {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMetadataOptions(this, 'MetadataOptions', this.__resources, this.input);
  }

  public get enclaveOptions(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataEnclaveOptions {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataEnclaveOptions(this, 'EnclaveOptions', this.__resources, this.input);
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataIamInstanceProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name') as unknown as string;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMonitoring extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled') as unknown as boolean;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataPlacement extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone') as unknown as string;
  }

  public get affinity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName') as unknown as string;
  }

  public get hostId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.HostId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.HostId') as unknown as string;
  }

  public get tenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy') as unknown as string;
  }

  public get spreadDomain(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain') as unknown as string;
  }

  public get hostResourceGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn') as unknown as string;
  }

  public get partitionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber') as unknown as number;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get marketType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType') as unknown as string;
  }

  public get spotOptions(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptions {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptions(this, 'SpotOptions', this.__resources, this.input);
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get maxPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice') as unknown as string;
  }

  public get spotInstanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType') as unknown as string;
  }

  public get blockDurationMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes') as unknown as number;
  }

  public get validUntil(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil') as unknown as string;
  }

  public get instanceInterruptionBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior') as unknown as string;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCreditSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get cpuCredits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits') as unknown as string;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCpuOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get coreCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount') as unknown as number;
  }

  public get threadsPerCore(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore') as unknown as number;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get capacityReservationPreference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference') as unknown as string;
  }

  public get capacityReservationTarget(): EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget {
    return new EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget(this, 'CapacityReservationTarget', this.__resources, this.input);
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get capacityReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId') as unknown as string;
  }

  public get capacityReservationResourceGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn') as unknown as string;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataHibernationOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get configured(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured') as unknown as boolean;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMetadataOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State') as unknown as string;
  }

  public get httpTokens(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens') as unknown as string;
  }

  public get httpPutResponseHopLimit(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit') as unknown as number;
  }

  public get httpEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint') as unknown as string;
  }

}

export class EC2CreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataEnclaveOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled') as unknown as boolean;
  }

}

export class EC2CreateLaunchTemplateVersionWarning extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
    super(scope, id);
  }

  public get errors(): shapes.Ec2ValidationError[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.Warning.Errors'),
        outputPath: 'Warning.Errors',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          SourceVersion: this.input.sourceVersion,
          VersionDescription: this.input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.input.launchTemplateData.kernelId,
            EbsOptimized: this.input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.input.launchTemplateData.networkInterfaces,
            ImageId: this.input.launchTemplateData.imageId,
            InstanceType: this.input.launchTemplateData.instanceType,
            KeyName: this.input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.input.launchTemplateData.placement?.affinity,
              GroupName: this.input.launchTemplateData.placement?.groupName,
              HostId: this.input.launchTemplateData.placement?.hostId,
              Tenancy: this.input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.input.launchTemplateData.userData,
            TagSpecifications: this.input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLaunchTemplateVersion.Warning.Errors', props);
    return resource.getResponseField('Warning.Errors') as unknown as shapes.Ec2ValidationError[];
  }

}

export class EC2CreateLocalGatewayRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLocalGatewayRouteRequest) {
    super(scope, id);
  }

  public get route(): EC2CreateLocalGatewayRouteRoute {
    return new EC2CreateLocalGatewayRouteRoute(this, 'Route', this.__resources, this.input);
  }

}

export class EC2CreateLocalGatewayRouteRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLocalGatewayRouteRequest) {
    super(scope, id);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          LocalGatewayVirtualInterfaceGroupId: this.input.localGatewayVirtualInterfaceGroupId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get localGatewayVirtualInterfaceGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.LocalGatewayVirtualInterfaceGroupId'),
        outputPath: 'Route.LocalGatewayVirtualInterfaceGroupId',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          LocalGatewayVirtualInterfaceGroupId: this.input.localGatewayVirtualInterfaceGroupId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRoute.Route.LocalGatewayVirtualInterfaceGroupId', props);
    return resource.getResponseField('Route.LocalGatewayVirtualInterfaceGroupId') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          LocalGatewayVirtualInterfaceGroupId: this.input.localGatewayVirtualInterfaceGroupId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          LocalGatewayVirtualInterfaceGroupId: this.input.localGatewayVirtualInterfaceGroupId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.LocalGatewayRouteTableId'),
        outputPath: 'Route.LocalGatewayRouteTableId',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          LocalGatewayVirtualInterfaceGroupId: this.input.localGatewayVirtualInterfaceGroupId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRoute.Route.LocalGatewayRouteTableId', props);
    return resource.getResponseField('Route.LocalGatewayRouteTableId') as unknown as string;
  }

  public get localGatewayRouteTableArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.LocalGatewayRouteTableArn'),
        outputPath: 'Route.LocalGatewayRouteTableArn',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          LocalGatewayVirtualInterfaceGroupId: this.input.localGatewayVirtualInterfaceGroupId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRoute.Route.LocalGatewayRouteTableArn', props);
    return resource.getResponseField('Route.LocalGatewayRouteTableArn') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.OwnerId'),
        outputPath: 'Route.OwnerId',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          LocalGatewayVirtualInterfaceGroupId: this.input.localGatewayVirtualInterfaceGroupId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRoute.Route.OwnerId', props);
    return resource.getResponseField('Route.OwnerId') as unknown as string;
  }

}

export class EC2CreateLocalGatewayRouteTableVpcAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLocalGatewayRouteTableVpcAssociationRequest) {
    super(scope, id);
  }

  public get localGatewayRouteTableVpcAssociation(): EC2CreateLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation {
    return new EC2CreateLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation(this, 'LocalGatewayRouteTableVpcAssociation', this.__resources, this.input);
  }

}

export class EC2CreateLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateLocalGatewayRouteTableVpcAssociationRequest) {
    super(scope, id);
  }

  public get localGatewayRouteTableVpcAssociationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId') as unknown as string;
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId') as unknown as string;
  }

  public get localGatewayRouteTableArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn') as unknown as string;
  }

  public get localGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayId',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.VpcId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.VpcId',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.VpcId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.OwnerId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.OwnerId',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.OwnerId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.OwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.State'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.State',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.State', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.State') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.Tags'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.Tags',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.Tags', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateManagedPrefixList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateManagedPrefixListRequest) {
    super(scope, id);
  }

  public get prefixList(): EC2CreateManagedPrefixListPrefixList {
    return new EC2CreateManagedPrefixListPrefixList(this, 'PrefixList', this.__resources, this.input);
  }

}

export class EC2CreateManagedPrefixListPrefixList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateManagedPrefixListRequest) {
    super(scope, id);
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.PrefixListId'),
        outputPath: 'PrefixList.PrefixListId',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.PrefixListId', props);
    return resource.getResponseField('PrefixList.PrefixListId') as unknown as string;
  }

  public get addressFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.AddressFamily'),
        outputPath: 'PrefixList.AddressFamily',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.AddressFamily', props);
    return resource.getResponseField('PrefixList.AddressFamily') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.State'),
        outputPath: 'PrefixList.State',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.State', props);
    return resource.getResponseField('PrefixList.State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.StateMessage'),
        outputPath: 'PrefixList.StateMessage',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.StateMessage', props);
    return resource.getResponseField('PrefixList.StateMessage') as unknown as string;
  }

  public get prefixListArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.PrefixListArn'),
        outputPath: 'PrefixList.PrefixListArn',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.PrefixListArn', props);
    return resource.getResponseField('PrefixList.PrefixListArn') as unknown as string;
  }

  public get prefixListName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.PrefixListName'),
        outputPath: 'PrefixList.PrefixListName',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.PrefixListName', props);
    return resource.getResponseField('PrefixList.PrefixListName') as unknown as string;
  }

  public get maxEntries(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.MaxEntries'),
        outputPath: 'PrefixList.MaxEntries',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.MaxEntries', props);
    return resource.getResponseField('PrefixList.MaxEntries') as unknown as number;
  }

  public get version(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.Version'),
        outputPath: 'PrefixList.Version',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.Version', props);
    return resource.getResponseField('PrefixList.Version') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.Tags'),
        outputPath: 'PrefixList.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.Tags', props);
    return resource.getResponseField('PrefixList.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.OwnerId'),
        outputPath: 'PrefixList.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListName: this.input.prefixListName,
          Entries: this.input.entries,
          MaxEntries: this.input.maxEntries,
          TagSpecifications: this.input.tagSpecifications,
          AddressFamily: this.input.addressFamily,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateManagedPrefixList.PrefixList.OwnerId', props);
    return resource.getResponseField('PrefixList.OwnerId') as unknown as string;
  }

}

export class EC2CreateNatGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNatGatewayRequest) {
    super(scope, id);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

  public get natGateway(): EC2CreateNatGatewayNatGateway {
    return new EC2CreateNatGatewayNatGateway(this, 'NatGateway', this.__resources, this.input);
  }

}

export class EC2CreateNatGatewayNatGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNatGatewayRequest) {
    super(scope, id);
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.CreateTime'),
        outputPath: 'NatGateway.CreateTime',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.CreateTime', props);
    return resource.getResponseField('NatGateway.CreateTime') as unknown as string;
  }

  public get deleteTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.DeleteTime'),
        outputPath: 'NatGateway.DeleteTime',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.DeleteTime', props);
    return resource.getResponseField('NatGateway.DeleteTime') as unknown as string;
  }

  public get failureCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.FailureCode'),
        outputPath: 'NatGateway.FailureCode',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.FailureCode', props);
    return resource.getResponseField('NatGateway.FailureCode') as unknown as string;
  }

  public get failureMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.FailureMessage'),
        outputPath: 'NatGateway.FailureMessage',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.FailureMessage', props);
    return resource.getResponseField('NatGateway.FailureMessage') as unknown as string;
  }

  public get natGatewayAddresses(): shapes.Ec2NatGatewayAddress[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.NatGatewayAddresses'),
        outputPath: 'NatGateway.NatGatewayAddresses',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.NatGatewayAddresses', props);
    return resource.getResponseField('NatGateway.NatGatewayAddresses') as unknown as shapes.Ec2NatGatewayAddress[];
  }

  public get natGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.NatGatewayId'),
        outputPath: 'NatGateway.NatGatewayId',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.NatGatewayId', props);
    return resource.getResponseField('NatGateway.NatGatewayId') as unknown as string;
  }

  public get provisionedBandwidth(): EC2CreateNatGatewayNatGatewayProvisionedBandwidth {
    return new EC2CreateNatGatewayNatGatewayProvisionedBandwidth(this, 'ProvisionedBandwidth', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.State'),
        outputPath: 'NatGateway.State',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.State', props);
    return resource.getResponseField('NatGateway.State') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.SubnetId'),
        outputPath: 'NatGateway.SubnetId',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.SubnetId', props);
    return resource.getResponseField('NatGateway.SubnetId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.VpcId'),
        outputPath: 'NatGateway.VpcId',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.VpcId', props);
    return resource.getResponseField('NatGateway.VpcId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.Tags'),
        outputPath: 'NatGateway.Tags',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.Tags', props);
    return resource.getResponseField('NatGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateNatGatewayNatGatewayProvisionedBandwidth extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNatGatewayRequest) {
    super(scope, id);
  }

  public get provisionTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.ProvisionTime'),
        outputPath: 'NatGateway.ProvisionedBandwidth.ProvisionTime',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.ProvisionTime', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.ProvisionTime') as unknown as string;
  }

  public get provisioned(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.Provisioned'),
        outputPath: 'NatGateway.ProvisionedBandwidth.Provisioned',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.Provisioned', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.Provisioned') as unknown as string;
  }

  public get requestTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.RequestTime'),
        outputPath: 'NatGateway.ProvisionedBandwidth.RequestTime',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.RequestTime', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.RequestTime') as unknown as string;
  }

  public get requested(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.Requested'),
        outputPath: 'NatGateway.ProvisionedBandwidth.Requested',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.Requested', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.Requested') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.Status'),
        outputPath: 'NatGateway.ProvisionedBandwidth.Status',
        parameters: {
          AllocationId: this.input.allocationId,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.Status', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.Status') as unknown as string;
  }

}

export class EC2CreateNetworkAcl extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkAclRequest) {
    super(scope, id);
  }

  public get networkAcl(): EC2CreateNetworkAclNetworkAcl {
    return new EC2CreateNetworkAclNetworkAcl(this, 'NetworkAcl', this.__resources, this.input);
  }

}

export class EC2CreateNetworkAclNetworkAcl extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkAclRequest) {
    super(scope, id);
  }

  public get associations(): shapes.Ec2NetworkAclAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.Associations'),
        outputPath: 'NetworkAcl.Associations',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkAcl.NetworkAcl.Associations', props);
    return resource.getResponseField('NetworkAcl.Associations') as unknown as shapes.Ec2NetworkAclAssociation[];
  }

  public get entries(): shapes.Ec2NetworkAclEntry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.Entries'),
        outputPath: 'NetworkAcl.Entries',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkAcl.NetworkAcl.Entries', props);
    return resource.getResponseField('NetworkAcl.Entries') as unknown as shapes.Ec2NetworkAclEntry[];
  }

  public get isDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.IsDefault'),
        outputPath: 'NetworkAcl.IsDefault',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkAcl.NetworkAcl.IsDefault', props);
    return resource.getResponseField('NetworkAcl.IsDefault') as unknown as boolean;
  }

  public get networkAclId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.NetworkAclId'),
        outputPath: 'NetworkAcl.NetworkAclId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkAcl.NetworkAcl.NetworkAclId', props);
    return resource.getResponseField('NetworkAcl.NetworkAclId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.Tags'),
        outputPath: 'NetworkAcl.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkAcl.NetworkAcl.Tags', props);
    return resource.getResponseField('NetworkAcl.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.VpcId'),
        outputPath: 'NetworkAcl.VpcId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkAcl.NetworkAcl.VpcId', props);
    return resource.getResponseField('NetworkAcl.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.OwnerId'),
        outputPath: 'NetworkAcl.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkAcl.NetworkAcl.OwnerId', props);
    return resource.getResponseField('NetworkAcl.OwnerId') as unknown as string;
  }

}

export class EC2CreateNetworkInterface extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkInterfaceRequest) {
    super(scope, id);
  }

  public get networkInterface(): EC2CreateNetworkInterfaceNetworkInterface {
    return new EC2CreateNetworkInterfaceNetworkInterface(this, 'NetworkInterface', this.__resources, this.input);
  }

}

export class EC2CreateNetworkInterfaceNetworkInterface extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkInterfaceRequest) {
    super(scope, id);
  }

  public get association(): EC2CreateNetworkInterfaceNetworkInterfaceAssociation {
    return new EC2CreateNetworkInterfaceNetworkInterfaceAssociation(this, 'Association', this.__resources, this.input);
  }

  public get attachment(): EC2CreateNetworkInterfaceNetworkInterfaceAttachment {
    return new EC2CreateNetworkInterfaceNetworkInterfaceAttachment(this, 'Attachment', this.__resources, this.input);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.AvailabilityZone'),
        outputPath: 'NetworkInterface.AvailabilityZone',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.AvailabilityZone', props);
    return resource.getResponseField('NetworkInterface.AvailabilityZone') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Description'),
        outputPath: 'NetworkInterface.Description',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Description', props);
    return resource.getResponseField('NetworkInterface.Description') as unknown as string;
  }

  public get groups(): shapes.Ec2GroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Groups'),
        outputPath: 'NetworkInterface.Groups',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Groups', props);
    return resource.getResponseField('NetworkInterface.Groups') as unknown as shapes.Ec2GroupIdentifier[];
  }

  public get interfaceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.InterfaceType'),
        outputPath: 'NetworkInterface.InterfaceType',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.InterfaceType', props);
    return resource.getResponseField('NetworkInterface.InterfaceType') as unknown as string;
  }

  public get ipv6Addresses(): shapes.Ec2NetworkInterfaceIpv6Address[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Ipv6Addresses'),
        outputPath: 'NetworkInterface.Ipv6Addresses',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Ipv6Addresses', props);
    return resource.getResponseField('NetworkInterface.Ipv6Addresses') as unknown as shapes.Ec2NetworkInterfaceIpv6Address[];
  }

  public get macAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.MacAddress'),
        outputPath: 'NetworkInterface.MacAddress',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.MacAddress', props);
    return resource.getResponseField('NetworkInterface.MacAddress') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.NetworkInterfaceId'),
        outputPath: 'NetworkInterface.NetworkInterfaceId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterface.NetworkInterfaceId') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.OutpostArn'),
        outputPath: 'NetworkInterface.OutpostArn',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.OutpostArn', props);
    return resource.getResponseField('NetworkInterface.OutpostArn') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.OwnerId'),
        outputPath: 'NetworkInterface.OwnerId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.OwnerId', props);
    return resource.getResponseField('NetworkInterface.OwnerId') as unknown as string;
  }

  public get privateDnsName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.PrivateDnsName'),
        outputPath: 'NetworkInterface.PrivateDnsName',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.PrivateDnsName', props);
    return resource.getResponseField('NetworkInterface.PrivateDnsName') as unknown as string;
  }

  public get privateIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.PrivateIpAddress'),
        outputPath: 'NetworkInterface.PrivateIpAddress',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.PrivateIpAddress', props);
    return resource.getResponseField('NetworkInterface.PrivateIpAddress') as unknown as string;
  }

  public get privateIpAddresses(): shapes.Ec2NetworkInterfacePrivateIpAddress[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.PrivateIpAddresses'),
        outputPath: 'NetworkInterface.PrivateIpAddresses',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.PrivateIpAddresses', props);
    return resource.getResponseField('NetworkInterface.PrivateIpAddresses') as unknown as shapes.Ec2NetworkInterfacePrivateIpAddress[];
  }

  public get requesterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.RequesterId'),
        outputPath: 'NetworkInterface.RequesterId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.RequesterId', props);
    return resource.getResponseField('NetworkInterface.RequesterId') as unknown as string;
  }

  public get requesterManaged(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.RequesterManaged'),
        outputPath: 'NetworkInterface.RequesterManaged',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.RequesterManaged', props);
    return resource.getResponseField('NetworkInterface.RequesterManaged') as unknown as boolean;
  }

  public get sourceDestCheck(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.SourceDestCheck'),
        outputPath: 'NetworkInterface.SourceDestCheck',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.SourceDestCheck', props);
    return resource.getResponseField('NetworkInterface.SourceDestCheck') as unknown as boolean;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Status'),
        outputPath: 'NetworkInterface.Status',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Status', props);
    return resource.getResponseField('NetworkInterface.Status') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.SubnetId'),
        outputPath: 'NetworkInterface.SubnetId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.SubnetId', props);
    return resource.getResponseField('NetworkInterface.SubnetId') as unknown as string;
  }

  public get tagSet(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.TagSet'),
        outputPath: 'NetworkInterface.TagSet',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.TagSet', props);
    return resource.getResponseField('NetworkInterface.TagSet') as unknown as shapes.Ec2Tag[];
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.VpcId'),
        outputPath: 'NetworkInterface.VpcId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.VpcId', props);
    return resource.getResponseField('NetworkInterface.VpcId') as unknown as string;
  }

}

export class EC2CreateNetworkInterfaceNetworkInterfaceAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkInterfaceRequest) {
    super(scope, id);
  }

  public get allocationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.AllocationId'),
        outputPath: 'NetworkInterface.Association.AllocationId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Association.AllocationId', props);
    return resource.getResponseField('NetworkInterface.Association.AllocationId') as unknown as string;
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.AssociationId'),
        outputPath: 'NetworkInterface.Association.AssociationId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Association.AssociationId', props);
    return resource.getResponseField('NetworkInterface.Association.AssociationId') as unknown as string;
  }

  public get ipOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.IpOwnerId'),
        outputPath: 'NetworkInterface.Association.IpOwnerId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Association.IpOwnerId', props);
    return resource.getResponseField('NetworkInterface.Association.IpOwnerId') as unknown as string;
  }

  public get publicDnsName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.PublicDnsName'),
        outputPath: 'NetworkInterface.Association.PublicDnsName',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Association.PublicDnsName', props);
    return resource.getResponseField('NetworkInterface.Association.PublicDnsName') as unknown as string;
  }

  public get publicIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.PublicIp'),
        outputPath: 'NetworkInterface.Association.PublicIp',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Association.PublicIp', props);
    return resource.getResponseField('NetworkInterface.Association.PublicIp') as unknown as string;
  }

  public get customerOwnedIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.CustomerOwnedIp'),
        outputPath: 'NetworkInterface.Association.CustomerOwnedIp',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Association.CustomerOwnedIp', props);
    return resource.getResponseField('NetworkInterface.Association.CustomerOwnedIp') as unknown as string;
  }

  public get carrierIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.CarrierIp'),
        outputPath: 'NetworkInterface.Association.CarrierIp',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Association.CarrierIp', props);
    return resource.getResponseField('NetworkInterface.Association.CarrierIp') as unknown as string;
  }

}

export class EC2CreateNetworkInterfaceNetworkInterfaceAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkInterfaceRequest) {
    super(scope, id);
  }

  public get attachTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.AttachTime'),
        outputPath: 'NetworkInterface.Attachment.AttachTime',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Attachment.AttachTime', props);
    return resource.getResponseField('NetworkInterface.Attachment.AttachTime') as unknown as string;
  }

  public get attachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.AttachmentId'),
        outputPath: 'NetworkInterface.Attachment.AttachmentId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Attachment.AttachmentId', props);
    return resource.getResponseField('NetworkInterface.Attachment.AttachmentId') as unknown as string;
  }

  public get deleteOnTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.DeleteOnTermination'),
        outputPath: 'NetworkInterface.Attachment.DeleteOnTermination',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Attachment.DeleteOnTermination', props);
    return resource.getResponseField('NetworkInterface.Attachment.DeleteOnTermination') as unknown as boolean;
  }

  public get deviceIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.DeviceIndex'),
        outputPath: 'NetworkInterface.Attachment.DeviceIndex',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Attachment.DeviceIndex', props);
    return resource.getResponseField('NetworkInterface.Attachment.DeviceIndex') as unknown as number;
  }

  public get networkCardIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.NetworkCardIndex'),
        outputPath: 'NetworkInterface.Attachment.NetworkCardIndex',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Attachment.NetworkCardIndex', props);
    return resource.getResponseField('NetworkInterface.Attachment.NetworkCardIndex') as unknown as number;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.InstanceId'),
        outputPath: 'NetworkInterface.Attachment.InstanceId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Attachment.InstanceId', props);
    return resource.getResponseField('NetworkInterface.Attachment.InstanceId') as unknown as string;
  }

  public get instanceOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.InstanceOwnerId'),
        outputPath: 'NetworkInterface.Attachment.InstanceOwnerId',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Attachment.InstanceOwnerId', props);
    return resource.getResponseField('NetworkInterface.Attachment.InstanceOwnerId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.Status'),
        outputPath: 'NetworkInterface.Attachment.Status',
        parameters: {
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Groups: this.input.groups,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          PrivateIpAddress: this.input.privateIpAddress,
          PrivateIpAddresses: this.input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.input.secondaryPrivateIpAddressCount,
          InterfaceType: this.input.interfaceType,
          SubnetId: this.input.subnetId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterface.NetworkInterface.Attachment.Status', props);
    return resource.getResponseField('NetworkInterface.Attachment.Status') as unknown as string;
  }

}

export class EC2CreateNetworkInterfacePermission extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkInterfacePermissionRequest) {
    super(scope, id);
  }

  public get interfacePermission(): EC2CreateNetworkInterfacePermissionInterfacePermission {
    return new EC2CreateNetworkInterfacePermissionInterfacePermission(this, 'InterfacePermission', this.__resources, this.input);
  }

}

export class EC2CreateNetworkInterfacePermissionInterfacePermission extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkInterfacePermissionRequest) {
    super(scope, id);
  }

  public get networkInterfacePermissionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.NetworkInterfacePermissionId'),
        outputPath: 'InterfacePermission.NetworkInterfacePermissionId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          AwsAccountId: this.input.awsAccountId,
          AwsService: this.input.awsService,
          Permission: this.input.permission,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterfacePermission.InterfacePermission.NetworkInterfacePermissionId', props);
    return resource.getResponseField('InterfacePermission.NetworkInterfacePermissionId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.NetworkInterfaceId'),
        outputPath: 'InterfacePermission.NetworkInterfaceId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          AwsAccountId: this.input.awsAccountId,
          AwsService: this.input.awsService,
          Permission: this.input.permission,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterfacePermission.InterfacePermission.NetworkInterfaceId', props);
    return resource.getResponseField('InterfacePermission.NetworkInterfaceId') as unknown as string;
  }

  public get awsAccountId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.AwsAccountId'),
        outputPath: 'InterfacePermission.AwsAccountId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          AwsAccountId: this.input.awsAccountId,
          AwsService: this.input.awsService,
          Permission: this.input.permission,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterfacePermission.InterfacePermission.AwsAccountId', props);
    return resource.getResponseField('InterfacePermission.AwsAccountId') as unknown as string;
  }

  public get awsService(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.AwsService'),
        outputPath: 'InterfacePermission.AwsService',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          AwsAccountId: this.input.awsAccountId,
          AwsService: this.input.awsService,
          Permission: this.input.permission,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterfacePermission.InterfacePermission.AwsService', props);
    return resource.getResponseField('InterfacePermission.AwsService') as unknown as string;
  }

  public get permission(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.Permission'),
        outputPath: 'InterfacePermission.Permission',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          AwsAccountId: this.input.awsAccountId,
          AwsService: this.input.awsService,
          Permission: this.input.permission,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterfacePermission.InterfacePermission.Permission', props);
    return resource.getResponseField('InterfacePermission.Permission') as unknown as string;
  }

  public get permissionState(): EC2CreateNetworkInterfacePermissionInterfacePermissionPermissionState {
    return new EC2CreateNetworkInterfacePermissionInterfacePermissionPermissionState(this, 'PermissionState', this.__resources, this.input);
  }

}

export class EC2CreateNetworkInterfacePermissionInterfacePermissionPermissionState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateNetworkInterfacePermissionRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.PermissionState.State'),
        outputPath: 'InterfacePermission.PermissionState.State',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          AwsAccountId: this.input.awsAccountId,
          AwsService: this.input.awsService,
          Permission: this.input.permission,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterfacePermission.InterfacePermission.PermissionState.State', props);
    return resource.getResponseField('InterfacePermission.PermissionState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.PermissionState.StatusMessage'),
        outputPath: 'InterfacePermission.PermissionState.StatusMessage',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          AwsAccountId: this.input.awsAccountId,
          AwsService: this.input.awsService,
          Permission: this.input.permission,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateNetworkInterfacePermission.InterfacePermission.PermissionState.StatusMessage', props);
    return resource.getResponseField('InterfacePermission.PermissionState.StatusMessage') as unknown as string;
  }

}

export class EC2CreatePlacementGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreatePlacementGroupRequest) {
    super(scope, id);
  }

  public get placementGroup(): EC2CreatePlacementGroupPlacementGroup {
    return new EC2CreatePlacementGroupPlacementGroup(this, 'PlacementGroup', this.__resources, this.input);
  }

}

export class EC2CreatePlacementGroupPlacementGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreatePlacementGroupRequest) {
    super(scope, id);
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.GroupName'),
        outputPath: 'PlacementGroup.GroupName',
        parameters: {
          DryRun: this.input.dryRun,
          GroupName: this.input.groupName,
          Strategy: this.input.strategy,
          PartitionCount: this.input.partitionCount,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePlacementGroup.PlacementGroup.GroupName', props);
    return resource.getResponseField('PlacementGroup.GroupName') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.State'),
        outputPath: 'PlacementGroup.State',
        parameters: {
          DryRun: this.input.dryRun,
          GroupName: this.input.groupName,
          Strategy: this.input.strategy,
          PartitionCount: this.input.partitionCount,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePlacementGroup.PlacementGroup.State', props);
    return resource.getResponseField('PlacementGroup.State') as unknown as string;
  }

  public get strategy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.Strategy'),
        outputPath: 'PlacementGroup.Strategy',
        parameters: {
          DryRun: this.input.dryRun,
          GroupName: this.input.groupName,
          Strategy: this.input.strategy,
          PartitionCount: this.input.partitionCount,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePlacementGroup.PlacementGroup.Strategy', props);
    return resource.getResponseField('PlacementGroup.Strategy') as unknown as string;
  }

  public get partitionCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.PartitionCount'),
        outputPath: 'PlacementGroup.PartitionCount',
        parameters: {
          DryRun: this.input.dryRun,
          GroupName: this.input.groupName,
          Strategy: this.input.strategy,
          PartitionCount: this.input.partitionCount,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePlacementGroup.PlacementGroup.PartitionCount', props);
    return resource.getResponseField('PlacementGroup.PartitionCount') as unknown as number;
  }

  public get groupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.GroupId'),
        outputPath: 'PlacementGroup.GroupId',
        parameters: {
          DryRun: this.input.dryRun,
          GroupName: this.input.groupName,
          Strategy: this.input.strategy,
          PartitionCount: this.input.partitionCount,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePlacementGroup.PlacementGroup.GroupId', props);
    return resource.getResponseField('PlacementGroup.GroupId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.Tags'),
        outputPath: 'PlacementGroup.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          GroupName: this.input.groupName,
          Strategy: this.input.strategy,
          PartitionCount: this.input.partitionCount,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePlacementGroup.PlacementGroup.Tags', props);
    return resource.getResponseField('PlacementGroup.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateReservedInstancesListing extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateReservedInstancesListingRequest) {
    super(scope, id);
  }

  public get reservedInstancesListings(): shapes.Ec2ReservedInstancesListing[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReservedInstancesListing',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateReservedInstancesListing.ReservedInstancesListings'),
        outputPath: 'ReservedInstancesListings',
        parameters: {
          ClientToken: this.input.clientToken,
          InstanceCount: this.input.instanceCount,
          PriceSchedules: this.input.priceSchedules,
          ReservedInstancesId: this.input.reservedInstancesId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateReservedInstancesListing.ReservedInstancesListings', props);
    return resource.getResponseField('ReservedInstancesListings') as unknown as shapes.Ec2ReservedInstancesListing[];
  }

}

export class EC2CreateRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateRouteRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRoute.Return'),
        outputPath: 'Return',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          DestinationIpv6CidrBlock: this.input.destinationIpv6CidrBlock,
          DestinationPrefixListId: this.input.destinationPrefixListId,
          DryRun: this.input.dryRun,
          VpcEndpointId: this.input.vpcEndpointId,
          EgressOnlyInternetGatewayId: this.input.egressOnlyInternetGatewayId,
          GatewayId: this.input.gatewayId,
          InstanceId: this.input.instanceId,
          NatGatewayId: this.input.natGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          LocalGatewayId: this.input.localGatewayId,
          CarrierGatewayId: this.input.carrierGatewayId,
          NetworkInterfaceId: this.input.networkInterfaceId,
          RouteTableId: this.input.routeTableId,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRoute.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2CreateRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateRouteTableRequest) {
    super(scope, id);
  }

  public get routeTable(): EC2CreateRouteTableRouteTable {
    return new EC2CreateRouteTableRouteTable(this, 'RouteTable', this.__resources, this.input);
  }

}

export class EC2CreateRouteTableRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateRouteTableRequest) {
    super(scope, id);
  }

  public get associations(): shapes.Ec2RouteTableAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.Associations'),
        outputPath: 'RouteTable.Associations',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRouteTable.RouteTable.Associations', props);
    return resource.getResponseField('RouteTable.Associations') as unknown as shapes.Ec2RouteTableAssociation[];
  }

  public get propagatingVgws(): shapes.Ec2PropagatingVgw[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.PropagatingVgws'),
        outputPath: 'RouteTable.PropagatingVgws',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRouteTable.RouteTable.PropagatingVgws', props);
    return resource.getResponseField('RouteTable.PropagatingVgws') as unknown as shapes.Ec2PropagatingVgw[];
  }

  public get routeTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.RouteTableId'),
        outputPath: 'RouteTable.RouteTableId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRouteTable.RouteTable.RouteTableId', props);
    return resource.getResponseField('RouteTable.RouteTableId') as unknown as string;
  }

  public get routes(): shapes.Ec2Route[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.Routes'),
        outputPath: 'RouteTable.Routes',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRouteTable.RouteTable.Routes', props);
    return resource.getResponseField('RouteTable.Routes') as unknown as shapes.Ec2Route[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.Tags'),
        outputPath: 'RouteTable.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRouteTable.RouteTable.Tags', props);
    return resource.getResponseField('RouteTable.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.VpcId'),
        outputPath: 'RouteTable.VpcId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRouteTable.RouteTable.VpcId', props);
    return resource.getResponseField('RouteTable.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.OwnerId'),
        outputPath: 'RouteTable.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRouteTable.RouteTable.OwnerId', props);
    return resource.getResponseField('RouteTable.OwnerId') as unknown as string;
  }

}

export class EC2CreateSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateSecurityGroupRequest) {
    super(scope, id);
  }

  public get groupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSecurityGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSecurityGroup.GroupId'),
        outputPath: 'GroupId',
        parameters: {
          Description: this.input.description,
          GroupName: this.input.groupName,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSecurityGroup.GroupId', props);
    return resource.getResponseField('GroupId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSecurityGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSecurityGroup.Tags'),
        outputPath: 'Tags',
        parameters: {
          Description: this.input.description,
          GroupName: this.input.groupName,
          VpcId: this.input.vpcId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSecurityGroup.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateSnapshotRequest) {
    super(scope, id);
  }

  public get dataEncryptionKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.DataEncryptionKeyId'),
        outputPath: 'DataEncryptionKeyId',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.DataEncryptionKeyId', props);
    return resource.getResponseField('DataEncryptionKeyId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.Description'),
        outputPath: 'Description',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.Encrypted'),
        outputPath: 'Encrypted',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.Encrypted', props);
    return resource.getResponseField('Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.OwnerId'),
        outputPath: 'OwnerId',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.OwnerId', props);
    return resource.getResponseField('OwnerId') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.Progress'),
        outputPath: 'Progress',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.Progress', props);
    return resource.getResponseField('Progress') as unknown as string;
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.SnapshotId'),
        outputPath: 'SnapshotId',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.SnapshotId', props);
    return resource.getResponseField('SnapshotId') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.State'),
        outputPath: 'State',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.StateMessage'),
        outputPath: 'StateMessage',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.StateMessage', props);
    return resource.getResponseField('StateMessage') as unknown as string;
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.VolumeSize'),
        outputPath: 'VolumeSize',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.VolumeSize', props);
    return resource.getResponseField('VolumeSize') as unknown as number;
  }

  public get ownerAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.OwnerAlias'),
        outputPath: 'OwnerAlias',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.OwnerAlias', props);
    return resource.getResponseField('OwnerAlias') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.Tags'),
        outputPath: 'Tags',
        parameters: {
          Description: this.input.description,
          VolumeId: this.input.volumeId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshot.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateSnapshots extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateSnapshotsRequest) {
    super(scope, id);
  }

  public get snapshots(): shapes.Ec2SnapshotInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshots',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshots.Snapshots'),
        outputPath: 'Snapshots',
        parameters: {
          Description: this.input.description,
          InstanceSpecification: {
            InstanceId: this.input.instanceSpecification.instanceId,
            ExcludeBootVolume: this.input.instanceSpecification.excludeBootVolume,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          CopyTagsFromSource: this.input.copyTagsFromSource,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSnapshots.Snapshots', props);
    return resource.getResponseField('Snapshots') as unknown as shapes.Ec2SnapshotInfo[];
  }

}

export class EC2CreateSpotDatafeedSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateSpotDatafeedSubscriptionRequest) {
    super(scope, id);
  }

  public get spotDatafeedSubscription(): EC2CreateSpotDatafeedSubscriptionSpotDatafeedSubscription {
    return new EC2CreateSpotDatafeedSubscriptionSpotDatafeedSubscription(this, 'SpotDatafeedSubscription', this.__resources, this.input);
  }

}

export class EC2CreateSpotDatafeedSubscriptionSpotDatafeedSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateSpotDatafeedSubscriptionRequest) {
    super(scope, id);
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Bucket'),
        outputPath: 'SpotDatafeedSubscription.Bucket',
        parameters: {
          Bucket: this.input.bucket,
          DryRun: this.input.dryRun,
          Prefix: this.input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Bucket', props);
    return resource.getResponseField('SpotDatafeedSubscription.Bucket') as unknown as string;
  }

  public get fault(): EC2CreateSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault {
    return new EC2CreateSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault(this, 'Fault', this.__resources, this.input);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.OwnerId'),
        outputPath: 'SpotDatafeedSubscription.OwnerId',
        parameters: {
          Bucket: this.input.bucket,
          DryRun: this.input.dryRun,
          Prefix: this.input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.OwnerId', props);
    return resource.getResponseField('SpotDatafeedSubscription.OwnerId') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Prefix'),
        outputPath: 'SpotDatafeedSubscription.Prefix',
        parameters: {
          Bucket: this.input.bucket,
          DryRun: this.input.dryRun,
          Prefix: this.input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Prefix', props);
    return resource.getResponseField('SpotDatafeedSubscription.Prefix') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.State'),
        outputPath: 'SpotDatafeedSubscription.State',
        parameters: {
          Bucket: this.input.bucket,
          DryRun: this.input.dryRun,
          Prefix: this.input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.State', props);
    return resource.getResponseField('SpotDatafeedSubscription.State') as unknown as string;
  }

}

export class EC2CreateSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateSpotDatafeedSubscriptionRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Code'),
        outputPath: 'SpotDatafeedSubscription.Fault.Code',
        parameters: {
          Bucket: this.input.bucket,
          DryRun: this.input.dryRun,
          Prefix: this.input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Code', props);
    return resource.getResponseField('SpotDatafeedSubscription.Fault.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Message'),
        outputPath: 'SpotDatafeedSubscription.Fault.Message',
        parameters: {
          Bucket: this.input.bucket,
          DryRun: this.input.dryRun,
          Prefix: this.input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Message', props);
    return resource.getResponseField('SpotDatafeedSubscription.Fault.Message') as unknown as string;
  }

}

export class EC2CreateSubnet extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateSubnetRequest) {
    super(scope, id);
  }

  public get subnet(): EC2CreateSubnetSubnet {
    return new EC2CreateSubnetSubnet(this, 'Subnet', this.__resources, this.input);
  }

}

export class EC2CreateSubnetSubnet extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateSubnetRequest) {
    super(scope, id);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.AvailabilityZone'),
        outputPath: 'Subnet.AvailabilityZone',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.AvailabilityZone', props);
    return resource.getResponseField('Subnet.AvailabilityZone') as unknown as string;
  }

  public get availabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.AvailabilityZoneId'),
        outputPath: 'Subnet.AvailabilityZoneId',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.AvailabilityZoneId', props);
    return resource.getResponseField('Subnet.AvailabilityZoneId') as unknown as string;
  }

  public get availableIpAddressCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.AvailableIpAddressCount'),
        outputPath: 'Subnet.AvailableIpAddressCount',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.AvailableIpAddressCount', props);
    return resource.getResponseField('Subnet.AvailableIpAddressCount') as unknown as number;
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.CidrBlock'),
        outputPath: 'Subnet.CidrBlock',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.CidrBlock', props);
    return resource.getResponseField('Subnet.CidrBlock') as unknown as string;
  }

  public get defaultForAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.DefaultForAz'),
        outputPath: 'Subnet.DefaultForAz',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.DefaultForAz', props);
    return resource.getResponseField('Subnet.DefaultForAz') as unknown as boolean;
  }

  public get mapPublicIpOnLaunch(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.MapPublicIpOnLaunch'),
        outputPath: 'Subnet.MapPublicIpOnLaunch',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.MapPublicIpOnLaunch', props);
    return resource.getResponseField('Subnet.MapPublicIpOnLaunch') as unknown as boolean;
  }

  public get mapCustomerOwnedIpOnLaunch(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.MapCustomerOwnedIpOnLaunch'),
        outputPath: 'Subnet.MapCustomerOwnedIpOnLaunch',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.MapCustomerOwnedIpOnLaunch', props);
    return resource.getResponseField('Subnet.MapCustomerOwnedIpOnLaunch') as unknown as boolean;
  }

  public get customerOwnedIpv4Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.CustomerOwnedIpv4Pool'),
        outputPath: 'Subnet.CustomerOwnedIpv4Pool',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.CustomerOwnedIpv4Pool', props);
    return resource.getResponseField('Subnet.CustomerOwnedIpv4Pool') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.State'),
        outputPath: 'Subnet.State',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.State', props);
    return resource.getResponseField('Subnet.State') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.SubnetId'),
        outputPath: 'Subnet.SubnetId',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.SubnetId', props);
    return resource.getResponseField('Subnet.SubnetId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.VpcId'),
        outputPath: 'Subnet.VpcId',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.VpcId', props);
    return resource.getResponseField('Subnet.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.OwnerId'),
        outputPath: 'Subnet.OwnerId',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.OwnerId', props);
    return resource.getResponseField('Subnet.OwnerId') as unknown as string;
  }

  public get assignIpv6AddressOnCreation(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.AssignIpv6AddressOnCreation'),
        outputPath: 'Subnet.AssignIpv6AddressOnCreation',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.AssignIpv6AddressOnCreation', props);
    return resource.getResponseField('Subnet.AssignIpv6AddressOnCreation') as unknown as boolean;
  }

  public get ipv6CidrBlockAssociationSet(): shapes.Ec2SubnetIpv6CidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.Ipv6CidrBlockAssociationSet'),
        outputPath: 'Subnet.Ipv6CidrBlockAssociationSet',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.Ipv6CidrBlockAssociationSet', props);
    return resource.getResponseField('Subnet.Ipv6CidrBlockAssociationSet') as unknown as shapes.Ec2SubnetIpv6CidrBlockAssociation[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.Tags'),
        outputPath: 'Subnet.Tags',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.Tags', props);
    return resource.getResponseField('Subnet.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get subnetArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.SubnetArn'),
        outputPath: 'Subnet.SubnetArn',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.SubnetArn', props);
    return resource.getResponseField('Subnet.SubnetArn') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.OutpostArn'),
        outputPath: 'Subnet.OutpostArn',
        parameters: {
          TagSpecifications: this.input.tagSpecifications,
          AvailabilityZone: this.input.availabilityZone,
          AvailabilityZoneId: this.input.availabilityZoneId,
          CidrBlock: this.input.cidrBlock,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          OutpostArn: this.input.outpostArn,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateSubnet.Subnet.OutpostArn', props);
    return resource.getResponseField('Subnet.OutpostArn') as unknown as string;
  }

}

export class EC2CreateTrafficMirrorFilter extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorFilterRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilter(): EC2CreateTrafficMirrorFilterTrafficMirrorFilter {
    return new EC2CreateTrafficMirrorFilterTrafficMirrorFilter(this, 'TrafficMirrorFilter', this.__resources, this.input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilter.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2CreateTrafficMirrorFilterTrafficMirrorFilter extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorFilterRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilter.TrafficMirrorFilterId',
        parameters: {
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilter.TrafficMirrorFilterId') as unknown as string;
  }

  public get ingressFilterRules(): shapes.Ec2TrafficMirrorFilterRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.IngressFilterRules'),
        outputPath: 'TrafficMirrorFilter.IngressFilterRules',
        parameters: {
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.IngressFilterRules', props);
    return resource.getResponseField('TrafficMirrorFilter.IngressFilterRules') as unknown as shapes.Ec2TrafficMirrorFilterRule[];
  }

  public get egressFilterRules(): shapes.Ec2TrafficMirrorFilterRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.EgressFilterRules'),
        outputPath: 'TrafficMirrorFilter.EgressFilterRules',
        parameters: {
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.EgressFilterRules', props);
    return resource.getResponseField('TrafficMirrorFilter.EgressFilterRules') as unknown as shapes.Ec2TrafficMirrorFilterRule[];
  }

  public get networkServices(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.NetworkServices'),
        outputPath: 'TrafficMirrorFilter.NetworkServices',
        parameters: {
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.NetworkServices', props);
    return resource.getResponseField('TrafficMirrorFilter.NetworkServices') as unknown as string[];
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.Description'),
        outputPath: 'TrafficMirrorFilter.Description',
        parameters: {
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.Description', props);
    return resource.getResponseField('TrafficMirrorFilter.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.Tags'),
        outputPath: 'TrafficMirrorFilter.Tags',
        parameters: {
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.Tags', props);
    return resource.getResponseField('TrafficMirrorFilter.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateTrafficMirrorFilterRule extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilterRule(): EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRule {
    return new EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRule(this, 'TrafficMirrorFilterRule', this.__resources, this.input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRule extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilterRuleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId'),
        outputPath: 'TrafficMirrorFilterRule.TrafficMirrorFilterRuleId',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficMirrorFilterRuleId') as unknown as string;
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilterRule.TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficMirrorFilterId') as unknown as string;
  }

  public get trafficDirection(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficDirection'),
        outputPath: 'TrafficMirrorFilterRule.TrafficDirection',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficDirection', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficDirection') as unknown as string;
  }

  public get ruleNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleNumber'),
        outputPath: 'TrafficMirrorFilterRule.RuleNumber',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleNumber', props);
    return resource.getResponseField('TrafficMirrorFilterRule.RuleNumber') as unknown as number;
  }

  public get ruleAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleAction'),
        outputPath: 'TrafficMirrorFilterRule.RuleAction',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleAction', props);
    return resource.getResponseField('TrafficMirrorFilterRule.RuleAction') as unknown as string;
  }

  public get protocol(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.Protocol'),
        outputPath: 'TrafficMirrorFilterRule.Protocol',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.Protocol', props);
    return resource.getResponseField('TrafficMirrorFilterRule.Protocol') as unknown as number;
  }

  public get destinationPortRange(): EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange {
    return new EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange(this, 'DestinationPortRange', this.__resources, this.input);
  }

  public get sourcePortRange(): EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange {
    return new EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange(this, 'SourcePortRange', this.__resources, this.input);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationCidrBlock'),
        outputPath: 'TrafficMirrorFilterRule.DestinationCidrBlock',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationCidrBlock', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationCidrBlock') as unknown as string;
  }

  public get sourceCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourceCidrBlock'),
        outputPath: 'TrafficMirrorFilterRule.SourceCidrBlock',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourceCidrBlock', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourceCidrBlock') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.Description'),
        outputPath: 'TrafficMirrorFilterRule.Description',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.Description', props);
    return resource.getResponseField('TrafficMirrorFilterRule.Description') as unknown as string;
  }

}

export class EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get fromPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.FromPort'),
        outputPath: 'TrafficMirrorFilterRule.DestinationPortRange.FromPort',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.FromPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationPortRange.FromPort') as unknown as number;
  }

  public get toPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.ToPort'),
        outputPath: 'TrafficMirrorFilterRule.DestinationPortRange.ToPort',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.ToPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationPortRange.ToPort') as unknown as number;
  }

}

export class EC2CreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get fromPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.FromPort'),
        outputPath: 'TrafficMirrorFilterRule.SourcePortRange.FromPort',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.FromPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourcePortRange.FromPort') as unknown as number;
  }

  public get toPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.ToPort'),
        outputPath: 'TrafficMirrorFilterRule.SourcePortRange.ToPort',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.ToPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourcePortRange.ToPort') as unknown as number;
  }

}

export class EC2CreateTrafficMirrorSession extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorSessionRequest) {
    super(scope, id);
  }

  public get trafficMirrorSession(): EC2CreateTrafficMirrorSessionTrafficMirrorSession {
    return new EC2CreateTrafficMirrorSessionTrafficMirrorSession(this, 'TrafficMirrorSession', this.__resources, this.input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2CreateTrafficMirrorSessionTrafficMirrorSession extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorSessionRequest) {
    super(scope, id);
  }

  public get trafficMirrorSessionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorSessionId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorSessionId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorSessionId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorSessionId') as unknown as string;
  }

  public get trafficMirrorTargetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorTargetId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorTargetId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorTargetId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorTargetId') as unknown as string;
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorFilterId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorFilterId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.NetworkInterfaceId'),
        outputPath: 'TrafficMirrorSession.NetworkInterfaceId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.NetworkInterfaceId', props);
    return resource.getResponseField('TrafficMirrorSession.NetworkInterfaceId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.OwnerId'),
        outputPath: 'TrafficMirrorSession.OwnerId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.OwnerId', props);
    return resource.getResponseField('TrafficMirrorSession.OwnerId') as unknown as string;
  }

  public get packetLength(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.PacketLength'),
        outputPath: 'TrafficMirrorSession.PacketLength',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.PacketLength', props);
    return resource.getResponseField('TrafficMirrorSession.PacketLength') as unknown as number;
  }

  public get sessionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.SessionNumber'),
        outputPath: 'TrafficMirrorSession.SessionNumber',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.SessionNumber', props);
    return resource.getResponseField('TrafficMirrorSession.SessionNumber') as unknown as number;
  }

  public get virtualNetworkId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.VirtualNetworkId'),
        outputPath: 'TrafficMirrorSession.VirtualNetworkId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.VirtualNetworkId', props);
    return resource.getResponseField('TrafficMirrorSession.VirtualNetworkId') as unknown as number;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.Description'),
        outputPath: 'TrafficMirrorSession.Description',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.Description', props);
    return resource.getResponseField('TrafficMirrorSession.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.Tags'),
        outputPath: 'TrafficMirrorSession.Tags',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorSession.TrafficMirrorSession.Tags', props);
    return resource.getResponseField('TrafficMirrorSession.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateTrafficMirrorTarget extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorTargetRequest) {
    super(scope, id);
  }

  public get trafficMirrorTarget(): EC2CreateTrafficMirrorTargetTrafficMirrorTarget {
    return new EC2CreateTrafficMirrorTargetTrafficMirrorTarget(this, 'TrafficMirrorTarget', this.__resources, this.input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkLoadBalancerArn: this.input.networkLoadBalancerArn,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorTarget.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2CreateTrafficMirrorTargetTrafficMirrorTarget extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTrafficMirrorTargetRequest) {
    super(scope, id);
  }

  public get trafficMirrorTargetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.TrafficMirrorTargetId'),
        outputPath: 'TrafficMirrorTarget.TrafficMirrorTargetId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkLoadBalancerArn: this.input.networkLoadBalancerArn,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.TrafficMirrorTargetId', props);
    return resource.getResponseField('TrafficMirrorTarget.TrafficMirrorTargetId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.NetworkInterfaceId'),
        outputPath: 'TrafficMirrorTarget.NetworkInterfaceId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkLoadBalancerArn: this.input.networkLoadBalancerArn,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.NetworkInterfaceId', props);
    return resource.getResponseField('TrafficMirrorTarget.NetworkInterfaceId') as unknown as string;
  }

  public get networkLoadBalancerArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.NetworkLoadBalancerArn'),
        outputPath: 'TrafficMirrorTarget.NetworkLoadBalancerArn',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkLoadBalancerArn: this.input.networkLoadBalancerArn,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.NetworkLoadBalancerArn', props);
    return resource.getResponseField('TrafficMirrorTarget.NetworkLoadBalancerArn') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.Type'),
        outputPath: 'TrafficMirrorTarget.Type',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkLoadBalancerArn: this.input.networkLoadBalancerArn,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.Type', props);
    return resource.getResponseField('TrafficMirrorTarget.Type') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.Description'),
        outputPath: 'TrafficMirrorTarget.Description',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkLoadBalancerArn: this.input.networkLoadBalancerArn,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.Description', props);
    return resource.getResponseField('TrafficMirrorTarget.Description') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.OwnerId'),
        outputPath: 'TrafficMirrorTarget.OwnerId',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkLoadBalancerArn: this.input.networkLoadBalancerArn,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.OwnerId', props);
    return resource.getResponseField('TrafficMirrorTarget.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.Tags'),
        outputPath: 'TrafficMirrorTarget.Tags',
        parameters: {
          NetworkInterfaceId: this.input.networkInterfaceId,
          NetworkLoadBalancerArn: this.input.networkLoadBalancerArn,
          Description: this.input.description,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.Tags', props);
    return resource.getResponseField('TrafficMirrorTarget.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateTransitGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayRequest) {
    super(scope, id);
  }

  public get transitGateway(): EC2CreateTransitGatewayTransitGateway {
    return new EC2CreateTransitGatewayTransitGateway(this, 'TransitGateway', this.__resources, this.input);
  }

}

export class EC2CreateTransitGatewayTransitGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.TransitGatewayId'),
        outputPath: 'TransitGateway.TransitGatewayId',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.TransitGatewayId', props);
    return resource.getResponseField('TransitGateway.TransitGatewayId') as unknown as string;
  }

  public get transitGatewayArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.TransitGatewayArn'),
        outputPath: 'TransitGateway.TransitGatewayArn',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.TransitGatewayArn', props);
    return resource.getResponseField('TransitGateway.TransitGatewayArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.State'),
        outputPath: 'TransitGateway.State',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.State', props);
    return resource.getResponseField('TransitGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.OwnerId'),
        outputPath: 'TransitGateway.OwnerId',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.OwnerId', props);
    return resource.getResponseField('TransitGateway.OwnerId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Description'),
        outputPath: 'TransitGateway.Description',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Description', props);
    return resource.getResponseField('TransitGateway.Description') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.CreationTime'),
        outputPath: 'TransitGateway.CreationTime',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.CreationTime', props);
    return resource.getResponseField('TransitGateway.CreationTime') as unknown as string;
  }

  public get options(): EC2CreateTransitGatewayTransitGatewayOptions {
    return new EC2CreateTransitGatewayTransitGatewayOptions(this, 'Options', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Tags'),
        outputPath: 'TransitGateway.Tags',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Tags', props);
    return resource.getResponseField('TransitGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateTransitGatewayTransitGatewayOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayRequest) {
    super(scope, id);
  }

  public get amazonSideAsn(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.AmazonSideAsn'),
        outputPath: 'TransitGateway.Options.AmazonSideAsn',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.AmazonSideAsn', props);
    return resource.getResponseField('TransitGateway.Options.AmazonSideAsn') as unknown as number;
  }

  public get autoAcceptSharedAttachments(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments'),
        outputPath: 'TransitGateway.Options.AutoAcceptSharedAttachments',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments', props);
    return resource.getResponseField('TransitGateway.Options.AutoAcceptSharedAttachments') as unknown as string;
  }

  public get defaultRouteTableAssociation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTableAssociation',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTableAssociation') as unknown as string;
  }

  public get associationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.AssociationDefaultRouteTableId',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.AssociationDefaultRouteTableId') as unknown as string;
  }

  public get defaultRouteTablePropagation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTablePropagation',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTablePropagation') as unknown as string;
  }

  public get propagationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.PropagationDefaultRouteTableId',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.PropagationDefaultRouteTableId') as unknown as string;
  }

  public get vpnEcmpSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.VpnEcmpSupport'),
        outputPath: 'TransitGateway.Options.VpnEcmpSupport',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.VpnEcmpSupport', props);
    return resource.getResponseField('TransitGateway.Options.VpnEcmpSupport') as unknown as string;
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.DnsSupport'),
        outputPath: 'TransitGateway.Options.DnsSupport',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.DnsSupport', props);
    return resource.getResponseField('TransitGateway.Options.DnsSupport') as unknown as string;
  }

  public get multicastSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.MulticastSupport'),
        outputPath: 'TransitGateway.Options.MulticastSupport',
        parameters: {
          Description: this.input.description,
          Options: {
            AmazonSideAsn: this.input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            MulticastSupport: this.input.options?.multicastSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGateway.TransitGateway.Options.MulticastSupport', props);
    return resource.getResponseField('TransitGateway.Options.MulticastSupport') as unknown as string;
  }

}

export class EC2CreateTransitGatewayMulticastDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayMulticastDomainRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomain(): EC2CreateTransitGatewayMulticastDomainTransitGatewayMulticastDomain {
    return new EC2CreateTransitGatewayMulticastDomainTransitGatewayMulticastDomain(this, 'TransitGatewayMulticastDomain', this.__resources, this.input);
  }

}

export class EC2CreateTransitGatewayMulticastDomainTransitGatewayMulticastDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayMulticastDomainRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayId'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.State'),
        outputPath: 'TransitGatewayMulticastDomain.State',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.State', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.CreationTime'),
        outputPath: 'TransitGatewayMulticastDomain.CreationTime',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.CreationTime', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Tags'),
        outputPath: 'TransitGatewayMulticastDomain.Tags',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Tags', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateTransitGatewayPeeringAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayPeeringAttachment(): EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {
    return new EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment(this, 'TransitGatewayPeeringAttachment', this.__resources, this.input);
  }

}

export class EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPeeringAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get requesterTgwInfo(): EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {
    return new EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo(this, 'RequesterTgwInfo', this.__resources, this.input);
  }

  public get accepterTgwInfo(): EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {
    return new EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo(this, 'AccepterTgwInfo', this.__resources, this.input);
  }

  public get status(): EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {
    return new EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus(this, 'Status', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State'),
        outputPath: 'TransitGatewayPeeringAttachment.State',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime'),
        outputPath: 'TransitGatewayPeeringAttachment.CreationTime',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags'),
        outputPath: 'TransitGatewayPeeringAttachment.Tags',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.Region',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.Region') as unknown as string;
  }

}

export class EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.Region',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.Region') as unknown as string;
  }

}

export class EC2CreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Code',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Message',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          PeerTransitGatewayId: this.input.peerTransitGatewayId,
          PeerAccountId: this.input.peerAccountId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Message') as unknown as string;
  }

}

export class EC2CreateTransitGatewayPrefixListReference extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayPrefixListReference(): EC2CreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {
    return new EC2CreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference(this, 'TransitGatewayPrefixListReference', this.__resources, this.input);
  }

}

export class EC2CreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayRouteTableId') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListId') as unknown as string;
  }

  public get prefixListOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListOwnerId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State'),
        outputPath: 'TransitGatewayPrefixListReference.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.State') as unknown as string;
  }

  public get blackhole(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole'),
        outputPath: 'TransitGatewayPrefixListReference.Blackhole',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.Blackhole') as unknown as boolean;
  }

  public get transitGatewayAttachment(): EC2CreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {
    return new EC2CreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment(this, 'TransitGatewayAttachment', this.__resources, this.input);
  }

}

export class EC2CreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId') as unknown as string;
  }

}

export class EC2CreateTransitGatewayRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayRouteRequest) {
    super(scope, id);
  }

  public get route(): EC2CreateTransitGatewayRouteRoute {
    return new EC2CreateTransitGatewayRouteRoute(this, 'Route', this.__resources, this.input);
  }

}

export class EC2CreateTransitGatewayRouteRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayRouteRequest) {
    super(scope, id);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.PrefixListId'),
        outputPath: 'Route.PrefixListId',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRoute.Route.PrefixListId', props);
    return resource.getResponseField('Route.PrefixListId') as unknown as string;
  }

  public get transitGatewayAttachments(): shapes.Ec2TransitGatewayRouteAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.TransitGatewayAttachments'),
        outputPath: 'Route.TransitGatewayAttachments',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRoute.Route.TransitGatewayAttachments', props);
    return resource.getResponseField('Route.TransitGatewayAttachments') as unknown as shapes.Ec2TransitGatewayRouteAttachment[];
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

}

export class EC2CreateTransitGatewayRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayRouteTableRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTable(): EC2CreateTransitGatewayRouteTableTransitGatewayRouteTable {
    return new EC2CreateTransitGatewayRouteTableTransitGatewayRouteTable(this, 'TransitGatewayRouteTable', this.__resources, this.input);
  }

}

export class EC2CreateTransitGatewayRouteTableTransitGatewayRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayRouteTableRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayRouteTable.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayRouteTable.TransitGatewayRouteTableId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayId'),
        outputPath: 'TransitGatewayRouteTable.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayRouteTable.TransitGatewayId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.State'),
        outputPath: 'TransitGatewayRouteTable.State',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.State', props);
    return resource.getResponseField('TransitGatewayRouteTable.State') as unknown as string;
  }

  public get defaultAssociationRouteTable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultAssociationRouteTable'),
        outputPath: 'TransitGatewayRouteTable.DefaultAssociationRouteTable',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultAssociationRouteTable', props);
    return resource.getResponseField('TransitGatewayRouteTable.DefaultAssociationRouteTable') as unknown as boolean;
  }

  public get defaultPropagationRouteTable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultPropagationRouteTable'),
        outputPath: 'TransitGatewayRouteTable.DefaultPropagationRouteTable',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultPropagationRouteTable', props);
    return resource.getResponseField('TransitGatewayRouteTable.DefaultPropagationRouteTable') as unknown as boolean;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.CreationTime'),
        outputPath: 'TransitGatewayRouteTable.CreationTime',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.CreationTime', props);
    return resource.getResponseField('TransitGatewayRouteTable.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.Tags'),
        outputPath: 'TransitGatewayRouteTable.Tags',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.Tags', props);
    return resource.getResponseField('TransitGatewayRouteTable.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayVpcAttachment(): EC2CreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2CreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this, 'TransitGatewayVpcAttachment', this.__resources, this.input);
  }

}

export class EC2CreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2CreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2CreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this, 'Options', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          VpcId: this.input.vpcId,
          SubnetIds: this.input.subnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          TagSpecifications: this.input.tagSpecifications,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2CreateVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVolumeRequest) {
    super(scope, id);
  }

  public get attachments(): shapes.Ec2VolumeAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Attachments'),
        outputPath: 'Attachments',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.Attachments', props);
    return resource.getResponseField('Attachments') as unknown as shapes.Ec2VolumeAttachment[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.AvailabilityZone'),
        outputPath: 'AvailabilityZone',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.AvailabilityZone', props);
    return resource.getResponseField('AvailabilityZone') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.CreateTime'),
        outputPath: 'CreateTime',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.CreateTime', props);
    return resource.getResponseField('CreateTime') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Encrypted'),
        outputPath: 'Encrypted',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.Encrypted', props);
    return resource.getResponseField('Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.OutpostArn'),
        outputPath: 'OutpostArn',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.OutpostArn', props);
    return resource.getResponseField('OutpostArn') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Size'),
        outputPath: 'Size',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.Size', props);
    return resource.getResponseField('Size') as unknown as number;
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.SnapshotId'),
        outputPath: 'SnapshotId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.SnapshotId', props);
    return resource.getResponseField('SnapshotId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.State'),
        outputPath: 'State',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Iops'),
        outputPath: 'Iops',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.Iops', props);
    return resource.getResponseField('Iops') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Tags'),
        outputPath: 'Tags',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.VolumeType'),
        outputPath: 'VolumeType',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.VolumeType', props);
    return resource.getResponseField('VolumeType') as unknown as string;
  }

  public get fastRestored(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.FastRestored'),
        outputPath: 'FastRestored',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.FastRestored', props);
    return resource.getResponseField('FastRestored') as unknown as boolean;
  }

  public get multiAttachEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.MultiAttachEnabled'),
        outputPath: 'MultiAttachEnabled',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Encrypted: this.input.encrypted,
          Iops: this.input.iops,
          KmsKeyId: this.input.kmsKeyId,
          OutpostArn: this.input.outpostArn,
          Size: this.input.size,
          SnapshotId: this.input.snapshotId,
          VolumeType: this.input.volumeType,
          DryRun: this.input.dryRun,
          TagSpecifications: this.input.tagSpecifications,
          MultiAttachEnabled: this.input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVolume.MultiAttachEnabled', props);
    return resource.getResponseField('MultiAttachEnabled') as unknown as boolean;
  }

}

export class EC2CreateVpc extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcRequest) {
    super(scope, id);
  }

  public get vpc(): EC2CreateVpcVpc {
    return new EC2CreateVpcVpc(this, 'Vpc', this.__resources, this.input);
  }

}

export class EC2CreateVpcVpc extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcRequest) {
    super(scope, id);
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.CidrBlock'),
        outputPath: 'Vpc.CidrBlock',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.CidrBlock', props);
    return resource.getResponseField('Vpc.CidrBlock') as unknown as string;
  }

  public get dhcpOptionsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.DhcpOptionsId'),
        outputPath: 'Vpc.DhcpOptionsId',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.DhcpOptionsId', props);
    return resource.getResponseField('Vpc.DhcpOptionsId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.State'),
        outputPath: 'Vpc.State',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.State', props);
    return resource.getResponseField('Vpc.State') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.VpcId'),
        outputPath: 'Vpc.VpcId',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.VpcId', props);
    return resource.getResponseField('Vpc.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.OwnerId'),
        outputPath: 'Vpc.OwnerId',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.OwnerId', props);
    return resource.getResponseField('Vpc.OwnerId') as unknown as string;
  }

  public get instanceTenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.InstanceTenancy'),
        outputPath: 'Vpc.InstanceTenancy',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.InstanceTenancy', props);
    return resource.getResponseField('Vpc.InstanceTenancy') as unknown as string;
  }

  public get ipv6CidrBlockAssociationSet(): shapes.Ec2VpcIpv6CidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.Ipv6CidrBlockAssociationSet'),
        outputPath: 'Vpc.Ipv6CidrBlockAssociationSet',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.Ipv6CidrBlockAssociationSet', props);
    return resource.getResponseField('Vpc.Ipv6CidrBlockAssociationSet') as unknown as shapes.Ec2VpcIpv6CidrBlockAssociation[];
  }

  public get cidrBlockAssociationSet(): shapes.Ec2VpcCidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.CidrBlockAssociationSet'),
        outputPath: 'Vpc.CidrBlockAssociationSet',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.CidrBlockAssociationSet', props);
    return resource.getResponseField('Vpc.CidrBlockAssociationSet') as unknown as shapes.Ec2VpcCidrBlockAssociation[];
  }

  public get isDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.IsDefault'),
        outputPath: 'Vpc.IsDefault',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.IsDefault', props);
    return resource.getResponseField('Vpc.IsDefault') as unknown as boolean;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.Tags'),
        outputPath: 'Vpc.Tags',
        parameters: {
          CidrBlock: this.input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.input.ipv6Pool,
          Ipv6CidrBlock: this.input.ipv6CidrBlock,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpc.Vpc.Tags', props);
    return resource.getResponseField('Vpc.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateVpcEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcEndpointRequest) {
    super(scope, id);
  }

  public get vpcEndpoint(): EC2CreateVpcEndpointVpcEndpoint {
    return new EC2CreateVpcEndpointVpcEndpoint(this, 'VpcEndpoint', this.__resources, this.input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2CreateVpcEndpointVpcEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcEndpointRequest) {
    super(scope, id);
  }

  public get vpcEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.VpcEndpointId'),
        outputPath: 'VpcEndpoint.VpcEndpointId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.VpcEndpointId', props);
    return resource.getResponseField('VpcEndpoint.VpcEndpointId') as unknown as string;
  }

  public get vpcEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.VpcEndpointType'),
        outputPath: 'VpcEndpoint.VpcEndpointType',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.VpcEndpointType', props);
    return resource.getResponseField('VpcEndpoint.VpcEndpointType') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.VpcId'),
        outputPath: 'VpcEndpoint.VpcId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.VpcId', props);
    return resource.getResponseField('VpcEndpoint.VpcId') as unknown as string;
  }

  public get serviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.ServiceName'),
        outputPath: 'VpcEndpoint.ServiceName',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.ServiceName', props);
    return resource.getResponseField('VpcEndpoint.ServiceName') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.State'),
        outputPath: 'VpcEndpoint.State',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.State', props);
    return resource.getResponseField('VpcEndpoint.State') as unknown as string;
  }

  public get policyDocument(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.PolicyDocument'),
        outputPath: 'VpcEndpoint.PolicyDocument',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.PolicyDocument', props);
    return resource.getResponseField('VpcEndpoint.PolicyDocument') as unknown as string;
  }

  public get routeTableIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.RouteTableIds'),
        outputPath: 'VpcEndpoint.RouteTableIds',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.RouteTableIds', props);
    return resource.getResponseField('VpcEndpoint.RouteTableIds') as unknown as string[];
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.SubnetIds'),
        outputPath: 'VpcEndpoint.SubnetIds',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.SubnetIds', props);
    return resource.getResponseField('VpcEndpoint.SubnetIds') as unknown as string[];
  }

  public get groups(): shapes.Ec2SecurityGroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.Groups'),
        outputPath: 'VpcEndpoint.Groups',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.Groups', props);
    return resource.getResponseField('VpcEndpoint.Groups') as unknown as shapes.Ec2SecurityGroupIdentifier[];
  }

  public get privateDnsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.PrivateDnsEnabled'),
        outputPath: 'VpcEndpoint.PrivateDnsEnabled',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.PrivateDnsEnabled', props);
    return resource.getResponseField('VpcEndpoint.PrivateDnsEnabled') as unknown as boolean;
  }

  public get requesterManaged(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.RequesterManaged'),
        outputPath: 'VpcEndpoint.RequesterManaged',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.RequesterManaged', props);
    return resource.getResponseField('VpcEndpoint.RequesterManaged') as unknown as boolean;
  }

  public get networkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.NetworkInterfaceIds'),
        outputPath: 'VpcEndpoint.NetworkInterfaceIds',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.NetworkInterfaceIds', props);
    return resource.getResponseField('VpcEndpoint.NetworkInterfaceIds') as unknown as string[];
  }

  public get dnsEntries(): shapes.Ec2DnsEntry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.DnsEntries'),
        outputPath: 'VpcEndpoint.DnsEntries',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.DnsEntries', props);
    return resource.getResponseField('VpcEndpoint.DnsEntries') as unknown as shapes.Ec2DnsEntry[];
  }

  public get creationTimestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.CreationTimestamp'),
        outputPath: 'VpcEndpoint.CreationTimestamp',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.CreationTimestamp', props);
    return resource.getResponseField('VpcEndpoint.CreationTimestamp') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.Tags'),
        outputPath: 'VpcEndpoint.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.Tags', props);
    return resource.getResponseField('VpcEndpoint.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.OwnerId'),
        outputPath: 'VpcEndpoint.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.OwnerId', props);
    return resource.getResponseField('VpcEndpoint.OwnerId') as unknown as string;
  }

  public get lastError(): EC2CreateVpcEndpointVpcEndpointLastError {
    return new EC2CreateVpcEndpointVpcEndpointLastError(this, 'LastError', this.__resources, this.input);
  }

}

export class EC2CreateVpcEndpointVpcEndpointLastError extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcEndpointRequest) {
    super(scope, id);
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.LastError.Message'),
        outputPath: 'VpcEndpoint.LastError.Message',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.LastError.Message', props);
    return resource.getResponseField('VpcEndpoint.LastError.Message') as unknown as string;
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.LastError.Code'),
        outputPath: 'VpcEndpoint.LastError.Code',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointType: this.input.vpcEndpointType,
          VpcId: this.input.vpcId,
          ServiceName: this.input.serviceName,
          PolicyDocument: this.input.policyDocument,
          RouteTableIds: this.input.routeTableIds,
          SubnetIds: this.input.subnetIds,
          SecurityGroupIds: this.input.securityGroupIds,
          ClientToken: this.input.clientToken,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpoint.VpcEndpoint.LastError.Code', props);
    return resource.getResponseField('VpcEndpoint.LastError.Code') as unknown as string;
  }

}

export class EC2CreateVpcEndpointConnectionNotification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcEndpointConnectionNotificationRequest) {
    super(scope, id);
  }

  public get connectionNotification(): EC2CreateVpcEndpointConnectionNotificationConnectionNotification {
    return new EC2CreateVpcEndpointConnectionNotificationConnectionNotification(this, 'ConnectionNotification', this.__resources, this.input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointId: this.input.vpcEndpointId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointConnectionNotification.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2CreateVpcEndpointConnectionNotificationConnectionNotification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcEndpointConnectionNotificationRequest) {
    super(scope, id);
  }

  public get connectionNotificationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationId'),
        outputPath: 'ConnectionNotification.ConnectionNotificationId',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointId: this.input.vpcEndpointId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationId', props);
    return resource.getResponseField('ConnectionNotification.ConnectionNotificationId') as unknown as string;
  }

  public get serviceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ServiceId'),
        outputPath: 'ConnectionNotification.ServiceId',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointId: this.input.vpcEndpointId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ServiceId', props);
    return resource.getResponseField('ConnectionNotification.ServiceId') as unknown as string;
  }

  public get vpcEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.VpcEndpointId'),
        outputPath: 'ConnectionNotification.VpcEndpointId',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointId: this.input.vpcEndpointId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.VpcEndpointId', props);
    return resource.getResponseField('ConnectionNotification.VpcEndpointId') as unknown as string;
  }

  public get connectionNotificationType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationType'),
        outputPath: 'ConnectionNotification.ConnectionNotificationType',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointId: this.input.vpcEndpointId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationType', props);
    return resource.getResponseField('ConnectionNotification.ConnectionNotificationType') as unknown as string;
  }

  public get connectionNotificationArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationArn'),
        outputPath: 'ConnectionNotification.ConnectionNotificationArn',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointId: this.input.vpcEndpointId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationArn', props);
    return resource.getResponseField('ConnectionNotification.ConnectionNotificationArn') as unknown as string;
  }

  public get connectionEvents(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionEvents'),
        outputPath: 'ConnectionNotification.ConnectionEvents',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointId: this.input.vpcEndpointId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionEvents', props);
    return resource.getResponseField('ConnectionNotification.ConnectionEvents') as unknown as string[];
  }

  public get connectionNotificationState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationState'),
        outputPath: 'ConnectionNotification.ConnectionNotificationState',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointId: this.input.vpcEndpointId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
          ClientToken: this.input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationState', props);
    return resource.getResponseField('ConnectionNotification.ConnectionNotificationState') as unknown as string;
  }

}

export class EC2CreateVpcEndpointServiceConfiguration extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcEndpointServiceConfigurationRequest) {
    super(scope, id);
  }

  public get serviceConfiguration(): EC2CreateVpcEndpointServiceConfigurationServiceConfiguration {
    return new EC2CreateVpcEndpointServiceConfigurationServiceConfiguration(this, 'ServiceConfiguration', this.__resources, this.input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2CreateVpcEndpointServiceConfigurationServiceConfiguration extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcEndpointServiceConfigurationRequest) {
    super(scope, id);
  }

  public get serviceType(): shapes.Ec2ServiceTypeDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceType'),
        outputPath: 'ServiceConfiguration.ServiceType',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceType', props);
    return resource.getResponseField('ServiceConfiguration.ServiceType') as unknown as shapes.Ec2ServiceTypeDetail[];
  }

  public get serviceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceId'),
        outputPath: 'ServiceConfiguration.ServiceId',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceId', props);
    return resource.getResponseField('ServiceConfiguration.ServiceId') as unknown as string;
  }

  public get serviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceName'),
        outputPath: 'ServiceConfiguration.ServiceName',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceName', props);
    return resource.getResponseField('ServiceConfiguration.ServiceName') as unknown as string;
  }

  public get serviceState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceState'),
        outputPath: 'ServiceConfiguration.ServiceState',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceState', props);
    return resource.getResponseField('ServiceConfiguration.ServiceState') as unknown as string;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.AvailabilityZones'),
        outputPath: 'ServiceConfiguration.AvailabilityZones',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.AvailabilityZones', props);
    return resource.getResponseField('ServiceConfiguration.AvailabilityZones') as unknown as string[];
  }

  public get acceptanceRequired(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.AcceptanceRequired'),
        outputPath: 'ServiceConfiguration.AcceptanceRequired',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.AcceptanceRequired', props);
    return resource.getResponseField('ServiceConfiguration.AcceptanceRequired') as unknown as boolean;
  }

  public get managesVpcEndpoints(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ManagesVpcEndpoints'),
        outputPath: 'ServiceConfiguration.ManagesVpcEndpoints',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ManagesVpcEndpoints', props);
    return resource.getResponseField('ServiceConfiguration.ManagesVpcEndpoints') as unknown as boolean;
  }

  public get networkLoadBalancerArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.NetworkLoadBalancerArns'),
        outputPath: 'ServiceConfiguration.NetworkLoadBalancerArns',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.NetworkLoadBalancerArns', props);
    return resource.getResponseField('ServiceConfiguration.NetworkLoadBalancerArns') as unknown as string[];
  }

  public get gatewayLoadBalancerArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.GatewayLoadBalancerArns'),
        outputPath: 'ServiceConfiguration.GatewayLoadBalancerArns',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.GatewayLoadBalancerArns', props);
    return resource.getResponseField('ServiceConfiguration.GatewayLoadBalancerArns') as unknown as string[];
  }

  public get baseEndpointDnsNames(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.BaseEndpointDnsNames'),
        outputPath: 'ServiceConfiguration.BaseEndpointDnsNames',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.BaseEndpointDnsNames', props);
    return resource.getResponseField('ServiceConfiguration.BaseEndpointDnsNames') as unknown as string[];
  }

  public get privateDnsName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsName'),
        outputPath: 'ServiceConfiguration.PrivateDnsName',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsName', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsName') as unknown as string;
  }

  public get privateDnsNameConfiguration(): EC2CreateVpcEndpointServiceConfigurationServiceConfigurationPrivateDnsNameConfiguration {
    return new EC2CreateVpcEndpointServiceConfigurationServiceConfigurationPrivateDnsNameConfiguration(this, 'PrivateDnsNameConfiguration', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.Tags'),
        outputPath: 'ServiceConfiguration.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.Tags', props);
    return resource.getResponseField('ServiceConfiguration.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2CreateVpcEndpointServiceConfigurationServiceConfigurationPrivateDnsNameConfiguration extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcEndpointServiceConfigurationRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.State'),
        outputPath: 'ServiceConfiguration.PrivateDnsNameConfiguration.State',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.State', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsNameConfiguration.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Type'),
        outputPath: 'ServiceConfiguration.PrivateDnsNameConfiguration.Type',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Type', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsNameConfiguration.Type') as unknown as string;
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Value'),
        outputPath: 'ServiceConfiguration.PrivateDnsNameConfiguration.Value',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Value', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsNameConfiguration.Value') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Name'),
        outputPath: 'ServiceConfiguration.PrivateDnsNameConfiguration.Name',
        parameters: {
          DryRun: this.input.dryRun,
          AcceptanceRequired: this.input.acceptanceRequired,
          PrivateDnsName: this.input.privateDnsName,
          NetworkLoadBalancerArns: this.input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.input.gatewayLoadBalancerArns,
          ClientToken: this.input.clientToken,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Name', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsNameConfiguration.Name') as unknown as string;
  }

}

export class EC2CreateVpcPeeringConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get vpcPeeringConnection(): EC2CreateVpcPeeringConnectionVpcPeeringConnection {
    return new EC2CreateVpcPeeringConnectionVpcPeeringConnection(this, 'VpcPeeringConnection', this.__resources, this.input);
  }

}

export class EC2CreateVpcPeeringConnectionVpcPeeringConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get accepterVpcInfo(): EC2CreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo {
    return new EC2CreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo(this, 'AccepterVpcInfo', this.__resources, this.input);
  }

  public get expirationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.ExpirationTime'),
        outputPath: 'VpcPeeringConnection.ExpirationTime',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.ExpirationTime', props);
    return resource.getResponseField('VpcPeeringConnection.ExpirationTime') as unknown as string;
  }

  public get requesterVpcInfo(): EC2CreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo {
    return new EC2CreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo(this, 'RequesterVpcInfo', this.__resources, this.input);
  }

  public get status(): EC2CreateVpcPeeringConnectionVpcPeeringConnectionStatus {
    return new EC2CreateVpcPeeringConnectionVpcPeeringConnectionStatus(this, 'Status', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.Tags'),
        outputPath: 'VpcPeeringConnection.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.Tags', props);
    return resource.getResponseField('VpcPeeringConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vpcPeeringConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.VpcPeeringConnectionId'),
        outputPath: 'VpcPeeringConnection.VpcPeeringConnectionId',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.VpcPeeringConnectionId', props);
    return resource.getResponseField('VpcPeeringConnection.VpcPeeringConnectionId') as unknown as string;
  }

}

export class EC2CreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlock'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.CidrBlock',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlock', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockSet(): shapes.Ec2Ipv6CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet') as unknown as shapes.Ec2Ipv6CidrBlock[];
  }

  public get cidrBlockSet(): shapes.Ec2CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet') as unknown as shapes.Ec2CidrBlock[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.OwnerId'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.OwnerId', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.OwnerId') as unknown as string;
  }

  public get peeringOptions(): EC2CreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions {
    return new EC2CreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions(this, 'PeeringOptions', this.__resources, this.input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.VpcId'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.VpcId',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.VpcId', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.VpcId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Region'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.Region',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Region', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.Region') as unknown as string;
  }

}

export class EC2CreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2CreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlock'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.CidrBlock',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlock', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockSet(): shapes.Ec2Ipv6CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet') as unknown as shapes.Ec2Ipv6CidrBlock[];
  }

  public get cidrBlockSet(): shapes.Ec2CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet') as unknown as shapes.Ec2CidrBlock[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.OwnerId'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.OwnerId', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.OwnerId') as unknown as string;
  }

  public get peeringOptions(): EC2CreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions {
    return new EC2CreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions(this, 'PeeringOptions', this.__resources, this.input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.VpcId'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.VpcId',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.VpcId', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.VpcId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Region'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.Region',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Region', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.Region') as unknown as string;
  }

}

export class EC2CreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2CreateVpcPeeringConnectionVpcPeeringConnectionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.Status.Code'),
        outputPath: 'VpcPeeringConnection.Status.Code',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.Status.Code', props);
    return resource.getResponseField('VpcPeeringConnection.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.Status.Message'),
        outputPath: 'VpcPeeringConnection.Status.Message',
        parameters: {
          DryRun: this.input.dryRun,
          PeerOwnerId: this.input.peerOwnerId,
          PeerVpcId: this.input.peerVpcId,
          VpcId: this.input.vpcId,
          PeerRegion: this.input.peerRegion,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpcPeeringConnection.VpcPeeringConnection.Status.Message', props);
    return resource.getResponseField('VpcPeeringConnection.Status.Message') as unknown as string;
  }

}

export class EC2CreateVpnConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpnConnectionRequest) {
    super(scope, id);
  }

  public get vpnConnection(): EC2CreateVpnConnectionVpnConnection {
    return new EC2CreateVpnConnectionVpnConnection(this, 'VpnConnection', this.__resources, this.input);
  }

}

export class EC2CreateVpnConnectionVpnConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpnConnectionRequest) {
    super(scope, id);
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2CreateVpnConnectionVpnConnectionOptions {
    return new EC2CreateVpnConnectionVpnConnectionOptions(this, 'Options', this.__resources, this.input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2CreateVpnConnectionVpnConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpnConnectionRequest) {
    super(scope, id);
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          CustomerGatewayId: this.input.customerGatewayId,
          Type: this.input.type,
          VpnGatewayId: this.input.vpnGatewayId,
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
          Options: {
            EnableAcceleration: this.input.options?.enableAcceleration,
            StaticRoutesOnly: this.input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnConnection.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2CreateVpnGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpnGatewayRequest) {
    super(scope, id);
  }

  public get vpnGateway(): EC2CreateVpnGatewayVpnGateway {
    return new EC2CreateVpnGatewayVpnGateway(this, 'VpnGateway', this.__resources, this.input);
  }

}

export class EC2CreateVpnGatewayVpnGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2CreateVpnGatewayRequest) {
    super(scope, id);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.AvailabilityZone'),
        outputPath: 'VpnGateway.AvailabilityZone',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          AmazonSideAsn: this.input.amazonSideAsn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnGateway.VpnGateway.AvailabilityZone', props);
    return resource.getResponseField('VpnGateway.AvailabilityZone') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.State'),
        outputPath: 'VpnGateway.State',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          AmazonSideAsn: this.input.amazonSideAsn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnGateway.VpnGateway.State', props);
    return resource.getResponseField('VpnGateway.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.Type'),
        outputPath: 'VpnGateway.Type',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          AmazonSideAsn: this.input.amazonSideAsn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnGateway.VpnGateway.Type', props);
    return resource.getResponseField('VpnGateway.Type') as unknown as string;
  }

  public get vpcAttachments(): shapes.Ec2VpcAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.VpcAttachments'),
        outputPath: 'VpnGateway.VpcAttachments',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          AmazonSideAsn: this.input.amazonSideAsn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnGateway.VpnGateway.VpcAttachments', props);
    return resource.getResponseField('VpnGateway.VpcAttachments') as unknown as shapes.Ec2VpcAttachment[];
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.VpnGatewayId'),
        outputPath: 'VpnGateway.VpnGatewayId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          AmazonSideAsn: this.input.amazonSideAsn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnGateway.VpnGateway.VpnGatewayId', props);
    return resource.getResponseField('VpnGateway.VpnGatewayId') as unknown as string;
  }

  public get amazonSideAsn(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.AmazonSideAsn'),
        outputPath: 'VpnGateway.AmazonSideAsn',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          AmazonSideAsn: this.input.amazonSideAsn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnGateway.VpnGateway.AmazonSideAsn', props);
    return resource.getResponseField('VpnGateway.AmazonSideAsn') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.Tags'),
        outputPath: 'VpnGateway.Tags',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Type: this.input.type,
          TagSpecifications: this.input.tagSpecifications,
          AmazonSideAsn: this.input.amazonSideAsn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateVpnGateway.VpnGateway.Tags', props);
    return resource.getResponseField('VpnGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteCarrierGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteCarrierGatewayRequest) {
    super(scope, id);
  }

  public get carrierGateway(): EC2DeleteCarrierGatewayCarrierGateway {
    return new EC2DeleteCarrierGatewayCarrierGateway(this, 'CarrierGateway', this.__resources, this.input);
  }

}

export class EC2DeleteCarrierGatewayCarrierGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteCarrierGatewayRequest) {
    super(scope, id);
  }

  public get carrierGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.CarrierGatewayId'),
        outputPath: 'CarrierGateway.CarrierGatewayId',
        parameters: {
          CarrierGatewayId: this.input.carrierGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCarrierGateway.CarrierGateway.CarrierGatewayId', props);
    return resource.getResponseField('CarrierGateway.CarrierGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.VpcId'),
        outputPath: 'CarrierGateway.VpcId',
        parameters: {
          CarrierGatewayId: this.input.carrierGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCarrierGateway.CarrierGateway.VpcId', props);
    return resource.getResponseField('CarrierGateway.VpcId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.State'),
        outputPath: 'CarrierGateway.State',
        parameters: {
          CarrierGatewayId: this.input.carrierGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCarrierGateway.CarrierGateway.State', props);
    return resource.getResponseField('CarrierGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.OwnerId'),
        outputPath: 'CarrierGateway.OwnerId',
        parameters: {
          CarrierGatewayId: this.input.carrierGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCarrierGateway.CarrierGateway.OwnerId', props);
    return resource.getResponseField('CarrierGateway.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.Tags'),
        outputPath: 'CarrierGateway.Tags',
        parameters: {
          CarrierGatewayId: this.input.carrierGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCarrierGateway.CarrierGateway.Tags', props);
    return resource.getResponseField('CarrierGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteClientVpnEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteClientVpnEndpointRequest) {
    super(scope, id);
  }

  public get status(): EC2DeleteClientVpnEndpointStatus {
    return new EC2DeleteClientVpnEndpointStatus(this, 'Status', this.__resources, this.input);
  }

}

export class EC2DeleteClientVpnEndpointStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteClientVpnEndpointRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteClientVpnEndpoint.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClientVpnEndpoint.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteClientVpnEndpoint.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClientVpnEndpoint.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2DeleteClientVpnRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteClientVpnRouteRequest) {
    super(scope, id);
  }

  public get status(): EC2DeleteClientVpnRouteStatus {
    return new EC2DeleteClientVpnRouteStatus(this, 'Status', this.__resources, this.input);
  }

}

export class EC2DeleteClientVpnRouteStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteClientVpnRouteRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClientVpnRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteClientVpnRoute.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          TargetVpcSubnetId: this.input.targetVpcSubnetId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClientVpnRoute.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClientVpnRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteClientVpnRoute.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          TargetVpcSubnetId: this.input.targetVpcSubnetId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteClientVpnRoute.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2DeleteEgressOnlyInternetGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteEgressOnlyInternetGatewayRequest) {
    super(scope, id);
  }

  public get returnCode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteEgressOnlyInternetGateway.ReturnCode'),
        outputPath: 'ReturnCode',
        parameters: {
          DryRun: this.input.dryRun,
          EgressOnlyInternetGatewayId: this.input.egressOnlyInternetGatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEgressOnlyInternetGateway.ReturnCode', props);
    return resource.getResponseField('ReturnCode') as unknown as boolean;
  }

}

export class EC2DeleteFleets extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteFleetsRequest) {
    super(scope, id);
  }

  public get successfulFleetDeletions(): shapes.Ec2DeleteFleetSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFleets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteFleets.SuccessfulFleetDeletions'),
        outputPath: 'SuccessfulFleetDeletions',
        parameters: {
          DryRun: this.input.dryRun,
          FleetIds: this.input.fleetIds,
          TerminateInstances: this.input.terminateInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteFleets.SuccessfulFleetDeletions', props);
    return resource.getResponseField('SuccessfulFleetDeletions') as unknown as shapes.Ec2DeleteFleetSuccessItem[];
  }

  public get unsuccessfulFleetDeletions(): shapes.Ec2DeleteFleetErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFleets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteFleets.UnsuccessfulFleetDeletions'),
        outputPath: 'UnsuccessfulFleetDeletions',
        parameters: {
          DryRun: this.input.dryRun,
          FleetIds: this.input.fleetIds,
          TerminateInstances: this.input.terminateInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteFleets.UnsuccessfulFleetDeletions', props);
    return resource.getResponseField('UnsuccessfulFleetDeletions') as unknown as shapes.Ec2DeleteFleetErrorItem[];
  }

}

export class EC2DeleteFlowLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteFlowLogsRequest) {
    super(scope, id);
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteFlowLogs.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.input.dryRun,
          FlowLogIds: this.input.flowLogIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteFlowLogs.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2DeleteFpgaImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteFpgaImageRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFpgaImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteFpgaImage.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteFpgaImage.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2DeleteLaunchTemplate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteLaunchTemplateRequest) {
    super(scope, id);
  }

  public get launchTemplate(): EC2DeleteLaunchTemplateLaunchTemplate {
    return new EC2DeleteLaunchTemplateLaunchTemplate(this, 'LaunchTemplate', this.__resources, this.input);
  }

}

export class EC2DeleteLaunchTemplateLaunchTemplate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteLaunchTemplateRequest) {
    super(scope, id);
  }

  public get launchTemplateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.LaunchTemplateId'),
        outputPath: 'LaunchTemplate.LaunchTemplateId',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplate.LaunchTemplate.LaunchTemplateId', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateId') as unknown as string;
  }

  public get launchTemplateName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.LaunchTemplateName'),
        outputPath: 'LaunchTemplate.LaunchTemplateName',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplate.LaunchTemplate.LaunchTemplateName', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateName') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.CreateTime'),
        outputPath: 'LaunchTemplate.CreateTime',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplate.LaunchTemplate.CreateTime', props);
    return resource.getResponseField('LaunchTemplate.CreateTime') as unknown as string;
  }

  public get createdBy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.CreatedBy'),
        outputPath: 'LaunchTemplate.CreatedBy',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplate.LaunchTemplate.CreatedBy', props);
    return resource.getResponseField('LaunchTemplate.CreatedBy') as unknown as string;
  }

  public get defaultVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.DefaultVersionNumber'),
        outputPath: 'LaunchTemplate.DefaultVersionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplate.LaunchTemplate.DefaultVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.DefaultVersionNumber') as unknown as number;
  }

  public get latestVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.LatestVersionNumber'),
        outputPath: 'LaunchTemplate.LatestVersionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplate.LaunchTemplate.LatestVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.LatestVersionNumber') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.Tags'),
        outputPath: 'LaunchTemplate.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplate.LaunchTemplate.Tags', props);
    return resource.getResponseField('LaunchTemplate.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteLaunchTemplateVersions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteLaunchTemplateVersionsRequest) {
    super(scope, id);
  }

  public get successfullyDeletedLaunchTemplateVersions(): shapes.Ec2DeleteLaunchTemplateVersionsResponseSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplateVersions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplateVersions.SuccessfullyDeletedLaunchTemplateVersions'),
        outputPath: 'SuccessfullyDeletedLaunchTemplateVersions',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          Versions: this.input.versions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplateVersions.SuccessfullyDeletedLaunchTemplateVersions', props);
    return resource.getResponseField('SuccessfullyDeletedLaunchTemplateVersions') as unknown as shapes.Ec2DeleteLaunchTemplateVersionsResponseSuccessItem[];
  }

  public get unsuccessfullyDeletedLaunchTemplateVersions(): shapes.Ec2DeleteLaunchTemplateVersionsResponseErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplateVersions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplateVersions.UnsuccessfullyDeletedLaunchTemplateVersions'),
        outputPath: 'UnsuccessfullyDeletedLaunchTemplateVersions',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          Versions: this.input.versions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLaunchTemplateVersions.UnsuccessfullyDeletedLaunchTemplateVersions', props);
    return resource.getResponseField('UnsuccessfullyDeletedLaunchTemplateVersions') as unknown as shapes.Ec2DeleteLaunchTemplateVersionsResponseErrorItem[];
  }

}

export class EC2DeleteLocalGatewayRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteLocalGatewayRouteRequest) {
    super(scope, id);
  }

  public get route(): EC2DeleteLocalGatewayRouteRoute {
    return new EC2DeleteLocalGatewayRouteRoute(this, 'Route', this.__resources, this.input);
  }

}

export class EC2DeleteLocalGatewayRouteRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteLocalGatewayRouteRequest) {
    super(scope, id);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get localGatewayVirtualInterfaceGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.LocalGatewayVirtualInterfaceGroupId'),
        outputPath: 'Route.LocalGatewayVirtualInterfaceGroupId',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRoute.Route.LocalGatewayVirtualInterfaceGroupId', props);
    return resource.getResponseField('Route.LocalGatewayVirtualInterfaceGroupId') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.LocalGatewayRouteTableId'),
        outputPath: 'Route.LocalGatewayRouteTableId',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRoute.Route.LocalGatewayRouteTableId', props);
    return resource.getResponseField('Route.LocalGatewayRouteTableId') as unknown as string;
  }

  public get localGatewayRouteTableArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.LocalGatewayRouteTableArn'),
        outputPath: 'Route.LocalGatewayRouteTableArn',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRoute.Route.LocalGatewayRouteTableArn', props);
    return resource.getResponseField('Route.LocalGatewayRouteTableArn') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.OwnerId'),
        outputPath: 'Route.OwnerId',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRoute.Route.OwnerId', props);
    return resource.getResponseField('Route.OwnerId') as unknown as string;
  }

}

export class EC2DeleteLocalGatewayRouteTableVpcAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest) {
    super(scope, id);
  }

  public get localGatewayRouteTableVpcAssociation(): EC2DeleteLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation {
    return new EC2DeleteLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation(this, 'LocalGatewayRouteTableVpcAssociation', this.__resources, this.input);
  }

}

export class EC2DeleteLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest) {
    super(scope, id);
  }

  public get localGatewayRouteTableVpcAssociationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId') as unknown as string;
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId') as unknown as string;
  }

  public get localGatewayRouteTableArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn') as unknown as string;
  }

  public get localGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.VpcId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.VpcId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.VpcId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.OwnerId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.OwnerId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.OwnerId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.OwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.State'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.State',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.State', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.State') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.Tags'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.Tags',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.Tags', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteManagedPrefixList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteManagedPrefixListRequest) {
    super(scope, id);
  }

  public get prefixList(): EC2DeleteManagedPrefixListPrefixList {
    return new EC2DeleteManagedPrefixListPrefixList(this, 'PrefixList', this.__resources, this.input);
  }

}

export class EC2DeleteManagedPrefixListPrefixList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteManagedPrefixListRequest) {
    super(scope, id);
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.PrefixListId'),
        outputPath: 'PrefixList.PrefixListId',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.PrefixListId', props);
    return resource.getResponseField('PrefixList.PrefixListId') as unknown as string;
  }

  public get addressFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.AddressFamily'),
        outputPath: 'PrefixList.AddressFamily',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.AddressFamily', props);
    return resource.getResponseField('PrefixList.AddressFamily') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.State'),
        outputPath: 'PrefixList.State',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.State', props);
    return resource.getResponseField('PrefixList.State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.StateMessage'),
        outputPath: 'PrefixList.StateMessage',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.StateMessage', props);
    return resource.getResponseField('PrefixList.StateMessage') as unknown as string;
  }

  public get prefixListArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.PrefixListArn'),
        outputPath: 'PrefixList.PrefixListArn',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.PrefixListArn', props);
    return resource.getResponseField('PrefixList.PrefixListArn') as unknown as string;
  }

  public get prefixListName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.PrefixListName'),
        outputPath: 'PrefixList.PrefixListName',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.PrefixListName', props);
    return resource.getResponseField('PrefixList.PrefixListName') as unknown as string;
  }

  public get maxEntries(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.MaxEntries'),
        outputPath: 'PrefixList.MaxEntries',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.MaxEntries', props);
    return resource.getResponseField('PrefixList.MaxEntries') as unknown as number;
  }

  public get version(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.Version'),
        outputPath: 'PrefixList.Version',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.Version', props);
    return resource.getResponseField('PrefixList.Version') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.Tags'),
        outputPath: 'PrefixList.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.Tags', props);
    return resource.getResponseField('PrefixList.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.OwnerId'),
        outputPath: 'PrefixList.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteManagedPrefixList.PrefixList.OwnerId', props);
    return resource.getResponseField('PrefixList.OwnerId') as unknown as string;
  }

}

export class EC2DeleteNatGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteNatGatewayRequest) {
    super(scope, id);
  }

  public get natGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNatGateway.NatGatewayId'),
        outputPath: 'NatGatewayId',
        parameters: {
          DryRun: this.input.dryRun,
          NatGatewayId: this.input.natGatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteNatGateway.NatGatewayId', props);
    return resource.getResponseField('NatGatewayId') as unknown as string;
  }

}

export class EC2DeleteNetworkInterfacePermission extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteNetworkInterfacePermissionRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkInterfacePermission.Return'),
        outputPath: 'Return',
        parameters: {
          NetworkInterfacePermissionId: this.input.networkInterfacePermissionId,
          Force: this.input.force,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteNetworkInterfacePermission.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2DeleteQueuedReservedInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteQueuedReservedInstancesRequest) {
    super(scope, id);
  }

  public get successfulQueuedPurchaseDeletions(): shapes.Ec2SuccessfulQueuedPurchaseDeletion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteQueuedReservedInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteQueuedReservedInstances.SuccessfulQueuedPurchaseDeletions'),
        outputPath: 'SuccessfulQueuedPurchaseDeletions',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstancesIds: this.input.reservedInstancesIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteQueuedReservedInstances.SuccessfulQueuedPurchaseDeletions', props);
    return resource.getResponseField('SuccessfulQueuedPurchaseDeletions') as unknown as shapes.Ec2SuccessfulQueuedPurchaseDeletion[];
  }

  public get failedQueuedPurchaseDeletions(): shapes.Ec2FailedQueuedPurchaseDeletion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteQueuedReservedInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteQueuedReservedInstances.FailedQueuedPurchaseDeletions'),
        outputPath: 'FailedQueuedPurchaseDeletions',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstancesIds: this.input.reservedInstancesIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteQueuedReservedInstances.FailedQueuedPurchaseDeletions', props);
    return resource.getResponseField('FailedQueuedPurchaseDeletions') as unknown as shapes.Ec2FailedQueuedPurchaseDeletion[];
  }

}

export class EC2DeleteTrafficMirrorFilter extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTrafficMirrorFilterRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTrafficMirrorFilter.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTrafficMirrorFilter.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilterId') as unknown as string;
  }

}

export class EC2DeleteTrafficMirrorFilterRule extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilterRuleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTrafficMirrorFilterRule.TrafficMirrorFilterRuleId'),
        outputPath: 'TrafficMirrorFilterRuleId',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTrafficMirrorFilterRule.TrafficMirrorFilterRuleId', props);
    return resource.getResponseField('TrafficMirrorFilterRuleId') as unknown as string;
  }

}

export class EC2DeleteTrafficMirrorSession extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTrafficMirrorSessionRequest) {
    super(scope, id);
  }

  public get trafficMirrorSessionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTrafficMirrorSession.TrafficMirrorSessionId'),
        outputPath: 'TrafficMirrorSessionId',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTrafficMirrorSession.TrafficMirrorSessionId', props);
    return resource.getResponseField('TrafficMirrorSessionId') as unknown as string;
  }

}

export class EC2DeleteTrafficMirrorTarget extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTrafficMirrorTargetRequest) {
    super(scope, id);
  }

  public get trafficMirrorTargetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTrafficMirrorTarget.TrafficMirrorTargetId'),
        outputPath: 'TrafficMirrorTargetId',
        parameters: {
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTrafficMirrorTarget.TrafficMirrorTargetId', props);
    return resource.getResponseField('TrafficMirrorTargetId') as unknown as string;
  }

}

export class EC2DeleteTransitGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayRequest) {
    super(scope, id);
  }

  public get transitGateway(): EC2DeleteTransitGatewayTransitGateway {
    return new EC2DeleteTransitGatewayTransitGateway(this, 'TransitGateway', this.__resources, this.input);
  }

}

export class EC2DeleteTransitGatewayTransitGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.TransitGatewayId'),
        outputPath: 'TransitGateway.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.TransitGatewayId', props);
    return resource.getResponseField('TransitGateway.TransitGatewayId') as unknown as string;
  }

  public get transitGatewayArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.TransitGatewayArn'),
        outputPath: 'TransitGateway.TransitGatewayArn',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.TransitGatewayArn', props);
    return resource.getResponseField('TransitGateway.TransitGatewayArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.State'),
        outputPath: 'TransitGateway.State',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.State', props);
    return resource.getResponseField('TransitGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.OwnerId'),
        outputPath: 'TransitGateway.OwnerId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.OwnerId', props);
    return resource.getResponseField('TransitGateway.OwnerId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Description'),
        outputPath: 'TransitGateway.Description',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Description', props);
    return resource.getResponseField('TransitGateway.Description') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.CreationTime'),
        outputPath: 'TransitGateway.CreationTime',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.CreationTime', props);
    return resource.getResponseField('TransitGateway.CreationTime') as unknown as string;
  }

  public get options(): EC2DeleteTransitGatewayTransitGatewayOptions {
    return new EC2DeleteTransitGatewayTransitGatewayOptions(this, 'Options', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Tags'),
        outputPath: 'TransitGateway.Tags',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Tags', props);
    return resource.getResponseField('TransitGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteTransitGatewayTransitGatewayOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayRequest) {
    super(scope, id);
  }

  public get amazonSideAsn(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.AmazonSideAsn'),
        outputPath: 'TransitGateway.Options.AmazonSideAsn',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.AmazonSideAsn', props);
    return resource.getResponseField('TransitGateway.Options.AmazonSideAsn') as unknown as number;
  }

  public get autoAcceptSharedAttachments(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments'),
        outputPath: 'TransitGateway.Options.AutoAcceptSharedAttachments',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments', props);
    return resource.getResponseField('TransitGateway.Options.AutoAcceptSharedAttachments') as unknown as string;
  }

  public get defaultRouteTableAssociation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTableAssociation',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTableAssociation') as unknown as string;
  }

  public get associationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.AssociationDefaultRouteTableId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.AssociationDefaultRouteTableId') as unknown as string;
  }

  public get defaultRouteTablePropagation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTablePropagation',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTablePropagation') as unknown as string;
  }

  public get propagationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.PropagationDefaultRouteTableId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.PropagationDefaultRouteTableId') as unknown as string;
  }

  public get vpnEcmpSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.VpnEcmpSupport'),
        outputPath: 'TransitGateway.Options.VpnEcmpSupport',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.VpnEcmpSupport', props);
    return resource.getResponseField('TransitGateway.Options.VpnEcmpSupport') as unknown as string;
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.DnsSupport'),
        outputPath: 'TransitGateway.Options.DnsSupport',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.DnsSupport', props);
    return resource.getResponseField('TransitGateway.Options.DnsSupport') as unknown as string;
  }

  public get multicastSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.MulticastSupport'),
        outputPath: 'TransitGateway.Options.MulticastSupport',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGateway.TransitGateway.Options.MulticastSupport', props);
    return resource.getResponseField('TransitGateway.Options.MulticastSupport') as unknown as string;
  }

}

export class EC2DeleteTransitGatewayMulticastDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayMulticastDomainRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomain(): EC2DeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomain {
    return new EC2DeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomain(this, 'TransitGatewayMulticastDomain', this.__resources, this.input);
  }

}

export class EC2DeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayMulticastDomainRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayId'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.State'),
        outputPath: 'TransitGatewayMulticastDomain.State',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.State', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.CreationTime'),
        outputPath: 'TransitGatewayMulticastDomain.CreationTime',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.CreationTime', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Tags'),
        outputPath: 'TransitGatewayMulticastDomain.Tags',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Tags', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteTransitGatewayPeeringAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayPeeringAttachment(): EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {
    return new EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment(this, 'TransitGatewayPeeringAttachment', this.__resources, this.input);
  }

}

export class EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPeeringAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get requesterTgwInfo(): EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {
    return new EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo(this, 'RequesterTgwInfo', this.__resources, this.input);
  }

  public get accepterTgwInfo(): EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {
    return new EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo(this, 'AccepterTgwInfo', this.__resources, this.input);
  }

  public get status(): EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {
    return new EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus(this, 'Status', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State'),
        outputPath: 'TransitGatewayPeeringAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime'),
        outputPath: 'TransitGatewayPeeringAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags'),
        outputPath: 'TransitGatewayPeeringAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.Region') as unknown as string;
  }

}

export class EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.Region') as unknown as string;
  }

}

export class EC2DeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Code',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Message',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Message') as unknown as string;
  }

}

export class EC2DeleteTransitGatewayPrefixListReference extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayPrefixListReference(): EC2DeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {
    return new EC2DeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference(this, 'TransitGatewayPrefixListReference', this.__resources, this.input);
  }

}

export class EC2DeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayRouteTableId') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListId') as unknown as string;
  }

  public get prefixListOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListOwnerId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State'),
        outputPath: 'TransitGatewayPrefixListReference.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.State') as unknown as string;
  }

  public get blackhole(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole'),
        outputPath: 'TransitGatewayPrefixListReference.Blackhole',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.Blackhole') as unknown as boolean;
  }

  public get transitGatewayAttachment(): EC2DeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {
    return new EC2DeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment(this, 'TransitGatewayAttachment', this.__resources, this.input);
  }

}

export class EC2DeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId') as unknown as string;
  }

}

export class EC2DeleteTransitGatewayRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayRouteRequest) {
    super(scope, id);
  }

  public get route(): EC2DeleteTransitGatewayRouteRoute {
    return new EC2DeleteTransitGatewayRouteRoute(this, 'Route', this.__resources, this.input);
  }

}

export class EC2DeleteTransitGatewayRouteRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayRouteRequest) {
    super(scope, id);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.PrefixListId'),
        outputPath: 'Route.PrefixListId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRoute.Route.PrefixListId', props);
    return resource.getResponseField('Route.PrefixListId') as unknown as string;
  }

  public get transitGatewayAttachments(): shapes.Ec2TransitGatewayRouteAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.TransitGatewayAttachments'),
        outputPath: 'Route.TransitGatewayAttachments',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRoute.Route.TransitGatewayAttachments', props);
    return resource.getResponseField('Route.TransitGatewayAttachments') as unknown as shapes.Ec2TransitGatewayRouteAttachment[];
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

}

export class EC2DeleteTransitGatewayRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayRouteTableRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTable(): EC2DeleteTransitGatewayRouteTableTransitGatewayRouteTable {
    return new EC2DeleteTransitGatewayRouteTableTransitGatewayRouteTable(this, 'TransitGatewayRouteTable', this.__resources, this.input);
  }

}

export class EC2DeleteTransitGatewayRouteTableTransitGatewayRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayRouteTableRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayRouteTable.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayRouteTable.TransitGatewayRouteTableId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayId'),
        outputPath: 'TransitGatewayRouteTable.TransitGatewayId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayRouteTable.TransitGatewayId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.State'),
        outputPath: 'TransitGatewayRouteTable.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.State', props);
    return resource.getResponseField('TransitGatewayRouteTable.State') as unknown as string;
  }

  public get defaultAssociationRouteTable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultAssociationRouteTable'),
        outputPath: 'TransitGatewayRouteTable.DefaultAssociationRouteTable',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultAssociationRouteTable', props);
    return resource.getResponseField('TransitGatewayRouteTable.DefaultAssociationRouteTable') as unknown as boolean;
  }

  public get defaultPropagationRouteTable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultPropagationRouteTable'),
        outputPath: 'TransitGatewayRouteTable.DefaultPropagationRouteTable',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultPropagationRouteTable', props);
    return resource.getResponseField('TransitGatewayRouteTable.DefaultPropagationRouteTable') as unknown as boolean;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.CreationTime'),
        outputPath: 'TransitGatewayRouteTable.CreationTime',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.CreationTime', props);
    return resource.getResponseField('TransitGatewayRouteTable.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.Tags'),
        outputPath: 'TransitGatewayRouteTable.Tags',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.Tags', props);
    return resource.getResponseField('TransitGatewayRouteTable.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayVpcAttachment(): EC2DeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2DeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this, 'TransitGatewayVpcAttachment', this.__resources, this.input);
  }

}

export class EC2DeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2DeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2DeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this, 'Options', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2DeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2DeleteVpcEndpointConnectionNotifications extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteVpcEndpointConnectionNotificationsRequest) {
    super(scope, id);
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpcEndpointConnectionNotifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpcEndpointConnectionNotifications.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.input.dryRun,
          ConnectionNotificationIds: this.input.connectionNotificationIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteVpcEndpointConnectionNotifications.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2DeleteVpcEndpointServiceConfigurations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteVpcEndpointServiceConfigurationsRequest) {
    super(scope, id);
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpcEndpointServiceConfigurations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpcEndpointServiceConfigurations.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceIds: this.input.serviceIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteVpcEndpointServiceConfigurations.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2DeleteVpcEndpoints extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteVpcEndpointsRequest) {
    super(scope, id);
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpcEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpcEndpoints.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointIds: this.input.vpcEndpointIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteVpcEndpoints.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2DeleteVpcPeeringConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeleteVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpcPeeringConnection.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteVpcPeeringConnection.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2DeprovisionByoipCidr extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeprovisionByoipCidrRequest) {
    super(scope, id);
  }

  public get byoipCidr(): EC2DeprovisionByoipCidrByoipCidr {
    return new EC2DeprovisionByoipCidrByoipCidr(this, 'ByoipCidr', this.__resources, this.input);
  }

}

export class EC2DeprovisionByoipCidrByoipCidr extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeprovisionByoipCidrRequest) {
    super(scope, id);
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deprovisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeprovisionByoipCidr.ByoipCidr.Cidr'),
        outputPath: 'ByoipCidr.Cidr',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeprovisionByoipCidr.ByoipCidr.Cidr', props);
    return resource.getResponseField('ByoipCidr.Cidr') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deprovisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeprovisionByoipCidr.ByoipCidr.Description'),
        outputPath: 'ByoipCidr.Description',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeprovisionByoipCidr.ByoipCidr.Description', props);
    return resource.getResponseField('ByoipCidr.Description') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deprovisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeprovisionByoipCidr.ByoipCidr.StatusMessage'),
        outputPath: 'ByoipCidr.StatusMessage',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeprovisionByoipCidr.ByoipCidr.StatusMessage', props);
    return resource.getResponseField('ByoipCidr.StatusMessage') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deprovisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeprovisionByoipCidr.ByoipCidr.State'),
        outputPath: 'ByoipCidr.State',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeprovisionByoipCidr.ByoipCidr.State', props);
    return resource.getResponseField('ByoipCidr.State') as unknown as string;
  }

}

export class EC2DeregisterInstanceEventNotificationAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeregisterInstanceEventNotificationAttributesRequest) {
    super(scope, id);
  }

  public get instanceTagAttribute(): EC2DeregisterInstanceEventNotificationAttributesInstanceTagAttribute {
    return new EC2DeregisterInstanceEventNotificationAttributesInstanceTagAttribute(this, 'InstanceTagAttribute', this.__resources, this.input);
  }

}

export class EC2DeregisterInstanceEventNotificationAttributesInstanceTagAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeregisterInstanceEventNotificationAttributesRequest) {
    super(scope, id);
  }

  public get instanceTagKeys(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys'),
        outputPath: 'InstanceTagAttribute.InstanceTagKeys',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceTagAttribute: {
            IncludeAllTagsOfInstance: this.input.instanceTagAttribute?.includeAllTagsOfInstance,
            InstanceTagKeys: this.input.instanceTagAttribute?.instanceTagKeys,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeregisterInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys', props);
    return resource.getResponseField('InstanceTagAttribute.InstanceTagKeys') as unknown as string[];
  }

  public get includeAllTagsOfInstance(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance'),
        outputPath: 'InstanceTagAttribute.IncludeAllTagsOfInstance',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceTagAttribute: {
            IncludeAllTagsOfInstance: this.input.instanceTagAttribute?.includeAllTagsOfInstance,
            InstanceTagKeys: this.input.instanceTagAttribute?.instanceTagKeys,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeregisterInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance', props);
    return resource.getResponseField('InstanceTagAttribute.IncludeAllTagsOfInstance') as unknown as boolean;
  }

}

export class EC2DeregisterTransitGatewayMulticastGroupMembers extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeregisterTransitGatewayMulticastGroupMembersRequest) {
    super(scope, id);
  }

  public get deregisteredMulticastGroupMembers(): EC2DeregisterTransitGatewayMulticastGroupMembersDeregisteredMulticastGroupMembers {
    return new EC2DeregisterTransitGatewayMulticastGroupMembersDeregisteredMulticastGroupMembers(this, 'DeregisteredMulticastGroupMembers', this.__resources, this.input);
  }

}

export class EC2DeregisterTransitGatewayMulticastGroupMembersDeregisteredMulticastGroupMembers extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeregisterTransitGatewayMulticastGroupMembersRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.TransitGatewayMulticastDomainId'),
        outputPath: 'DeregisteredMulticastGroupMembers.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('DeregisteredMulticastGroupMembers.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get deregisteredNetworkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.DeregisteredNetworkInterfaceIds'),
        outputPath: 'DeregisteredMulticastGroupMembers.DeregisteredNetworkInterfaceIds',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.DeregisteredNetworkInterfaceIds', props);
    return resource.getResponseField('DeregisteredMulticastGroupMembers.DeregisteredNetworkInterfaceIds') as unknown as string[];
  }

  public get groupIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.GroupIpAddress'),
        outputPath: 'DeregisteredMulticastGroupMembers.GroupIpAddress',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.GroupIpAddress', props);
    return resource.getResponseField('DeregisteredMulticastGroupMembers.GroupIpAddress') as unknown as string;
  }

}

export class EC2DeregisterTransitGatewayMulticastGroupSources extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest) {
    super(scope, id);
  }

  public get deregisteredMulticastGroupSources(): EC2DeregisterTransitGatewayMulticastGroupSourcesDeregisteredMulticastGroupSources {
    return new EC2DeregisterTransitGatewayMulticastGroupSourcesDeregisteredMulticastGroupSources(this, 'DeregisteredMulticastGroupSources', this.__resources, this.input);
  }

}

export class EC2DeregisterTransitGatewayMulticastGroupSourcesDeregisteredMulticastGroupSources extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.TransitGatewayMulticastDomainId'),
        outputPath: 'DeregisteredMulticastGroupSources.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('DeregisteredMulticastGroupSources.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get deregisteredNetworkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.DeregisteredNetworkInterfaceIds'),
        outputPath: 'DeregisteredMulticastGroupSources.DeregisteredNetworkInterfaceIds',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.DeregisteredNetworkInterfaceIds', props);
    return resource.getResponseField('DeregisteredMulticastGroupSources.DeregisteredNetworkInterfaceIds') as unknown as string[];
  }

  public get groupIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.GroupIpAddress'),
        outputPath: 'DeregisteredMulticastGroupSources.GroupIpAddress',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.GroupIpAddress', props);
    return resource.getResponseField('DeregisteredMulticastGroupSources.GroupIpAddress') as unknown as string;
  }

}

export class EC2DescribeAccountAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeAccountAttributesRequest) {
    super(scope, id);
  }

  public get accountAttributes(): shapes.Ec2AccountAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAccountAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAccountAttributes.AccountAttributes'),
        outputPath: 'AccountAttributes',
        parameters: {
          AttributeNames: this.input.attributeNames,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeAccountAttributes.AccountAttributes', props);
    return resource.getResponseField('AccountAttributes') as unknown as shapes.Ec2AccountAttribute[];
  }

}

export class EC2DescribeAddresses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeAddressesRequest) {
    super(scope, id);
  }

  public get addresses(): shapes.Ec2Address[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAddresses.Addresses'),
        outputPath: 'Addresses',
        parameters: {
          Filters: this.input.filters,
          PublicIps: this.input.publicIps,
          AllocationIds: this.input.allocationIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeAddresses.Addresses', props);
    return resource.getResponseField('Addresses') as unknown as shapes.Ec2Address[];
  }

}

export class EC2DescribeAggregateIdFormat extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeAggregateIdFormatRequest) {
    super(scope, id);
  }

  public get useLongIdsAggregated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAggregateIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAggregateIdFormat.UseLongIdsAggregated'),
        outputPath: 'UseLongIdsAggregated',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeAggregateIdFormat.UseLongIdsAggregated', props);
    return resource.getResponseField('UseLongIdsAggregated') as unknown as boolean;
  }

  public get statuses(): shapes.Ec2IdFormat[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAggregateIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAggregateIdFormat.Statuses'),
        outputPath: 'Statuses',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeAggregateIdFormat.Statuses', props);
    return resource.getResponseField('Statuses') as unknown as shapes.Ec2IdFormat[];
  }

}

export class EC2DescribeAvailabilityZones extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeAvailabilityZonesRequest) {
    super(scope, id);
  }

  public get availabilityZones(): shapes.Ec2AvailabilityZone[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAvailabilityZones',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAvailabilityZones.AvailabilityZones'),
        outputPath: 'AvailabilityZones',
        parameters: {
          Filters: this.input.filters,
          ZoneNames: this.input.zoneNames,
          ZoneIds: this.input.zoneIds,
          AllAvailabilityZones: this.input.allAvailabilityZones,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeAvailabilityZones.AvailabilityZones', props);
    return resource.getResponseField('AvailabilityZones') as unknown as shapes.Ec2AvailabilityZone[];
  }

}

export class EC2DescribeBundleTasks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeBundleTasksRequest) {
    super(scope, id);
  }

  public get bundleTasks(): shapes.Ec2BundleTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeBundleTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeBundleTasks.BundleTasks'),
        outputPath: 'BundleTasks',
        parameters: {
          BundleIds: this.input.bundleIds,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeBundleTasks.BundleTasks', props);
    return resource.getResponseField('BundleTasks') as unknown as shapes.Ec2BundleTask[];
  }

}

export class EC2DescribeByoipCidrs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeByoipCidrsRequest) {
    super(scope, id);
  }

  public get byoipCidrs(): shapes.Ec2ByoipCidr[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeByoipCidrs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeByoipCidrs.ByoipCidrs'),
        outputPath: 'ByoipCidrs',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeByoipCidrs.ByoipCidrs', props);
    return resource.getResponseField('ByoipCidrs') as unknown as shapes.Ec2ByoipCidr[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeByoipCidrs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeByoipCidrs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeByoipCidrs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeCapacityReservations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeCapacityReservationsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCapacityReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCapacityReservations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          CapacityReservationIds: this.input.capacityReservationIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCapacityReservations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get capacityReservations(): shapes.Ec2CapacityReservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCapacityReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCapacityReservations.CapacityReservations'),
        outputPath: 'CapacityReservations',
        parameters: {
          CapacityReservationIds: this.input.capacityReservationIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCapacityReservations.CapacityReservations', props);
    return resource.getResponseField('CapacityReservations') as unknown as shapes.Ec2CapacityReservation[];
  }

}

export class EC2DescribeCarrierGateways extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeCarrierGatewaysRequest) {
    super(scope, id);
  }

  public get carrierGateways(): shapes.Ec2CarrierGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCarrierGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCarrierGateways.CarrierGateways'),
        outputPath: 'CarrierGateways',
        parameters: {
          CarrierGatewayIds: this.input.carrierGatewayIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCarrierGateways.CarrierGateways', props);
    return resource.getResponseField('CarrierGateways') as unknown as shapes.Ec2CarrierGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCarrierGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCarrierGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          CarrierGatewayIds: this.input.carrierGatewayIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCarrierGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeClassicLinkInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeClassicLinkInstancesRequest) {
    super(scope, id);
  }

  public get instances(): shapes.Ec2ClassicLinkInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClassicLinkInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClassicLinkInstances.Instances'),
        outputPath: 'Instances',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          InstanceIds: this.input.instanceIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClassicLinkInstances.Instances', props);
    return resource.getResponseField('Instances') as unknown as shapes.Ec2ClassicLinkInstance[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClassicLinkInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClassicLinkInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          InstanceIds: this.input.instanceIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClassicLinkInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeClientVpnAuthorizationRules extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeClientVpnAuthorizationRulesRequest) {
    super(scope, id);
  }

  public get authorizationRules(): shapes.Ec2AuthorizationRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnAuthorizationRules',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnAuthorizationRules.AuthorizationRules'),
        outputPath: 'AuthorizationRules',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnAuthorizationRules.AuthorizationRules', props);
    return resource.getResponseField('AuthorizationRules') as unknown as shapes.Ec2AuthorizationRule[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnAuthorizationRules',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnAuthorizationRules.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnAuthorizationRules.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeClientVpnConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeClientVpnConnectionsRequest) {
    super(scope, id);
  }

  public get connections(): shapes.Ec2ClientVpnConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnConnections.Connections'),
        outputPath: 'Connections',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnConnections.Connections', props);
    return resource.getResponseField('Connections') as unknown as shapes.Ec2ClientVpnConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeClientVpnEndpoints extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeClientVpnEndpointsRequest) {
    super(scope, id);
  }

  public get clientVpnEndpoints(): shapes.Ec2ClientVpnEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnEndpoints.ClientVpnEndpoints'),
        outputPath: 'ClientVpnEndpoints',
        parameters: {
          ClientVpnEndpointIds: this.input.clientVpnEndpointIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnEndpoints.ClientVpnEndpoints', props);
    return resource.getResponseField('ClientVpnEndpoints') as unknown as shapes.Ec2ClientVpnEndpoint[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnEndpoints.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointIds: this.input.clientVpnEndpointIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnEndpoints.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeClientVpnRoutes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeClientVpnRoutesRequest) {
    super(scope, id);
  }

  public get routes(): shapes.Ec2ClientVpnRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnRoutes.Routes'),
        outputPath: 'Routes',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnRoutes.Routes', props);
    return resource.getResponseField('Routes') as unknown as shapes.Ec2ClientVpnRoute[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnRoutes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnRoutes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeClientVpnTargetNetworks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeClientVpnTargetNetworksRequest) {
    super(scope, id);
  }

  public get clientVpnTargetNetworks(): shapes.Ec2TargetNetwork[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnTargetNetworks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnTargetNetworks.ClientVpnTargetNetworks'),
        outputPath: 'ClientVpnTargetNetworks',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          AssociationIds: this.input.associationIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnTargetNetworks.ClientVpnTargetNetworks', props);
    return resource.getResponseField('ClientVpnTargetNetworks') as unknown as shapes.Ec2TargetNetwork[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnTargetNetworks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnTargetNetworks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          AssociationIds: this.input.associationIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeClientVpnTargetNetworks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeCoipPools extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeCoipPoolsRequest) {
    super(scope, id);
  }

  public get coipPools(): shapes.Ec2CoipPool[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCoipPools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCoipPools.CoipPools'),
        outputPath: 'CoipPools',
        parameters: {
          PoolIds: this.input.poolIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCoipPools.CoipPools', props);
    return resource.getResponseField('CoipPools') as unknown as shapes.Ec2CoipPool[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCoipPools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCoipPools.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PoolIds: this.input.poolIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCoipPools.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeConversionTasks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeConversionTasksRequest) {
    super(scope, id);
  }

  public get conversionTasks(): shapes.Ec2ConversionTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeConversionTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeConversionTasks.ConversionTasks'),
        outputPath: 'ConversionTasks',
        parameters: {
          ConversionTaskIds: this.input.conversionTaskIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeConversionTasks.ConversionTasks', props);
    return resource.getResponseField('ConversionTasks') as unknown as shapes.Ec2ConversionTask[];
  }

}

export class EC2DescribeCustomerGateways extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeCustomerGatewaysRequest) {
    super(scope, id);
  }

  public get customerGateways(): shapes.Ec2CustomerGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCustomerGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCustomerGateways.CustomerGateways'),
        outputPath: 'CustomerGateways',
        parameters: {
          CustomerGatewayIds: this.input.customerGatewayIds,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCustomerGateways.CustomerGateways', props);
    return resource.getResponseField('CustomerGateways') as unknown as shapes.Ec2CustomerGateway[];
  }

}

export class EC2DescribeDhcpOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeDhcpOptionsRequest) {
    super(scope, id);
  }

  public get dhcpOptions(): shapes.Ec2DhcpOptions[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeDhcpOptions.DhcpOptions'),
        outputPath: 'DhcpOptions',
        parameters: {
          DhcpOptionsIds: this.input.dhcpOptionsIds,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDhcpOptions.DhcpOptions', props);
    return resource.getResponseField('DhcpOptions') as unknown as shapes.Ec2DhcpOptions[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeDhcpOptions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DhcpOptionsIds: this.input.dhcpOptionsIds,
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDhcpOptions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeEgressOnlyInternetGateways extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeEgressOnlyInternetGatewaysRequest) {
    super(scope, id);
  }

  public get egressOnlyInternetGateways(): shapes.Ec2EgressOnlyInternetGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEgressOnlyInternetGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeEgressOnlyInternetGateways.EgressOnlyInternetGateways'),
        outputPath: 'EgressOnlyInternetGateways',
        parameters: {
          DryRun: this.input.dryRun,
          EgressOnlyInternetGatewayIds: this.input.egressOnlyInternetGatewayIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEgressOnlyInternetGateways.EgressOnlyInternetGateways', props);
    return resource.getResponseField('EgressOnlyInternetGateways') as unknown as shapes.Ec2EgressOnlyInternetGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEgressOnlyInternetGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeEgressOnlyInternetGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          EgressOnlyInternetGatewayIds: this.input.egressOnlyInternetGatewayIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEgressOnlyInternetGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeElasticGpus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeElasticGpusRequest) {
    super(scope, id);
  }

  public get elasticGpuSet(): shapes.Ec2ElasticGpus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticGpus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeElasticGpus.ElasticGpuSet'),
        outputPath: 'ElasticGpuSet',
        parameters: {
          ElasticGpuIds: this.input.elasticGpuIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticGpus.ElasticGpuSet', props);
    return resource.getResponseField('ElasticGpuSet') as unknown as shapes.Ec2ElasticGpus[];
  }

  public get maxResults(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticGpus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeElasticGpus.MaxResults'),
        outputPath: 'MaxResults',
        parameters: {
          ElasticGpuIds: this.input.elasticGpuIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticGpus.MaxResults', props);
    return resource.getResponseField('MaxResults') as unknown as number;
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticGpus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeElasticGpus.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ElasticGpuIds: this.input.elasticGpuIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticGpus.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeExportImageTasks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeExportImageTasksRequest) {
    super(scope, id);
  }

  public get exportImageTasks(): shapes.Ec2ExportImageTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeExportImageTasks.ExportImageTasks'),
        outputPath: 'ExportImageTasks',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          ExportImageTaskIds: this.input.exportImageTaskIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeExportImageTasks.ExportImageTasks', props);
    return resource.getResponseField('ExportImageTasks') as unknown as shapes.Ec2ExportImageTask[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeExportImageTasks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          ExportImageTaskIds: this.input.exportImageTaskIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeExportImageTasks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeExportTasks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeExportTasksRequest) {
    super(scope, id);
  }

  public get exportTasks(): shapes.Ec2ExportTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeExportTasks.ExportTasks'),
        outputPath: 'ExportTasks',
        parameters: {
          ExportTaskIds: this.input.exportTaskIds,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeExportTasks.ExportTasks', props);
    return resource.getResponseField('ExportTasks') as unknown as shapes.Ec2ExportTask[];
  }

}

export class EC2DescribeFastSnapshotRestores extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeFastSnapshotRestoresRequest) {
    super(scope, id);
  }

  public get fastSnapshotRestores(): shapes.Ec2DescribeFastSnapshotRestoreSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFastSnapshotRestores.FastSnapshotRestores'),
        outputPath: 'FastSnapshotRestores',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFastSnapshotRestores.FastSnapshotRestores', props);
    return resource.getResponseField('FastSnapshotRestores') as unknown as shapes.Ec2DescribeFastSnapshotRestoreSuccessItem[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFastSnapshotRestores.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFastSnapshotRestores.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeFleetHistory extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeFleetHistoryRequest) {
    super(scope, id);
  }

  public get historyRecords(): shapes.Ec2HistoryRecordEntry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.HistoryRecords'),
        outputPath: 'HistoryRecords',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetId: this.input.fleetId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleetHistory.HistoryRecords', props);
    return resource.getResponseField('HistoryRecords') as unknown as shapes.Ec2HistoryRecordEntry[];
  }

  public get lastEvaluatedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.LastEvaluatedTime'),
        outputPath: 'LastEvaluatedTime',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetId: this.input.fleetId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleetHistory.LastEvaluatedTime', props);
    return resource.getResponseField('LastEvaluatedTime') as unknown as string;
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetId: this.input.fleetId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleetHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get fleetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.FleetId'),
        outputPath: 'FleetId',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetId: this.input.fleetId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleetHistory.FleetId', props);
    return resource.getResponseField('FleetId') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetId: this.input.fleetId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleetHistory.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

}

export class EC2DescribeFleetInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeFleetInstancesRequest) {
    super(scope, id);
  }

  public get activeInstances(): shapes.Ec2ActiveInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetInstances.ActiveInstances'),
        outputPath: 'ActiveInstances',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetId: this.input.fleetId,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleetInstances.ActiveInstances', props);
    return resource.getResponseField('ActiveInstances') as unknown as shapes.Ec2ActiveInstance[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetId: this.input.fleetId,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleetInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get fleetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetInstances.FleetId'),
        outputPath: 'FleetId',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetId: this.input.fleetId,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleetInstances.FleetId', props);
    return resource.getResponseField('FleetId') as unknown as string;
  }

}

export class EC2DescribeFleets extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeFleetsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleets.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetIds: this.input.fleetIds,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleets.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get fleets(): shapes.Ec2FleetData[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleets.Fleets'),
        outputPath: 'Fleets',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          FleetIds: this.input.fleetIds,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFleets.Fleets', props);
    return resource.getResponseField('Fleets') as unknown as shapes.Ec2FleetData[];
  }

}

export class EC2DescribeFlowLogs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeFlowLogsRequest) {
    super(scope, id);
  }

  public get flowLogs(): shapes.Ec2FlowLog[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFlowLogs.FlowLogs'),
        outputPath: 'FlowLogs',
        parameters: {
          DryRun: this.input.dryRun,
          Filter: this.input.filter,
          FlowLogIds: this.input.flowLogIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFlowLogs.FlowLogs', props);
    return resource.getResponseField('FlowLogs') as unknown as shapes.Ec2FlowLog[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFlowLogs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filter: this.input.filter,
          FlowLogIds: this.input.flowLogIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFlowLogs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeFpgaImageAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeFpgaImageAttributeRequest) {
    super(scope, id);
  }

  public get fpgaImageAttribute(): EC2DescribeFpgaImageAttributeFpgaImageAttribute {
    return new EC2DescribeFpgaImageAttributeFpgaImageAttribute(this, 'FpgaImageAttribute', this.__resources, this.input);
  }

}

export class EC2DescribeFpgaImageAttributeFpgaImageAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeFpgaImageAttributeRequest) {
    super(scope, id);
  }

  public get fpgaImageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.FpgaImageId'),
        outputPath: 'FpgaImageAttribute.FpgaImageId',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFpgaImageAttribute.FpgaImageAttribute.FpgaImageId', props);
    return resource.getResponseField('FpgaImageAttribute.FpgaImageId') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.Name'),
        outputPath: 'FpgaImageAttribute.Name',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFpgaImageAttribute.FpgaImageAttribute.Name', props);
    return resource.getResponseField('FpgaImageAttribute.Name') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.Description'),
        outputPath: 'FpgaImageAttribute.Description',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFpgaImageAttribute.FpgaImageAttribute.Description', props);
    return resource.getResponseField('FpgaImageAttribute.Description') as unknown as string;
  }

  public get loadPermissions(): shapes.Ec2LoadPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.LoadPermissions'),
        outputPath: 'FpgaImageAttribute.LoadPermissions',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFpgaImageAttribute.FpgaImageAttribute.LoadPermissions', props);
    return resource.getResponseField('FpgaImageAttribute.LoadPermissions') as unknown as shapes.Ec2LoadPermission[];
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.ProductCodes'),
        outputPath: 'FpgaImageAttribute.ProductCodes',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFpgaImageAttribute.FpgaImageAttribute.ProductCodes', props);
    return resource.getResponseField('FpgaImageAttribute.ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

}

export class EC2DescribeFpgaImages extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeFpgaImagesRequest) {
    super(scope, id);
  }

  public get fpgaImages(): shapes.Ec2FpgaImage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImages',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImages.FpgaImages'),
        outputPath: 'FpgaImages',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageIds: this.input.fpgaImageIds,
          Owners: this.input.owners,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFpgaImages.FpgaImages', props);
    return resource.getResponseField('FpgaImages') as unknown as shapes.Ec2FpgaImage[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImages',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImages.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageIds: this.input.fpgaImageIds,
          Owners: this.input.owners,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeFpgaImages.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeHostReservationOfferings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeHostReservationOfferingsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHostReservationOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHostReservationOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filter: this.input.filter,
          MaxDuration: this.input.maxDuration,
          MaxResults: this.input.maxResults,
          MinDuration: this.input.minDuration,
          NextToken: this.input.nextToken,
          OfferingId: this.input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHostReservationOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get offeringSet(): shapes.Ec2HostOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHostReservationOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHostReservationOfferings.OfferingSet'),
        outputPath: 'OfferingSet',
        parameters: {
          Filter: this.input.filter,
          MaxDuration: this.input.maxDuration,
          MaxResults: this.input.maxResults,
          MinDuration: this.input.minDuration,
          NextToken: this.input.nextToken,
          OfferingId: this.input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHostReservationOfferings.OfferingSet', props);
    return resource.getResponseField('OfferingSet') as unknown as shapes.Ec2HostOffering[];
  }

}

export class EC2DescribeHostReservations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeHostReservationsRequest) {
    super(scope, id);
  }

  public get hostReservationSet(): shapes.Ec2HostReservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHostReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHostReservations.HostReservationSet'),
        outputPath: 'HostReservationSet',
        parameters: {
          Filter: this.input.filter,
          HostReservationIdSet: this.input.hostReservationIdSet,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHostReservations.HostReservationSet', props);
    return resource.getResponseField('HostReservationSet') as unknown as shapes.Ec2HostReservation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHostReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHostReservations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filter: this.input.filter,
          HostReservationIdSet: this.input.hostReservationIdSet,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHostReservations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeHosts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeHostsRequest) {
    super(scope, id);
  }

  public get hosts(): shapes.Ec2Host[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHosts.Hosts'),
        outputPath: 'Hosts',
        parameters: {
          Filter: this.input.filter,
          HostIds: this.input.hostIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHosts.Hosts', props);
    return resource.getResponseField('Hosts') as unknown as shapes.Ec2Host[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHosts.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filter: this.input.filter,
          HostIds: this.input.hostIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeHosts.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeIamInstanceProfileAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeIamInstanceProfileAssociationsRequest) {
    super(scope, id);
  }

  public get iamInstanceProfileAssociations(): shapes.Ec2IamInstanceProfileAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIamInstanceProfileAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIamInstanceProfileAssociations.IamInstanceProfileAssociations'),
        outputPath: 'IamInstanceProfileAssociations',
        parameters: {
          AssociationIds: this.input.associationIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeIamInstanceProfileAssociations.IamInstanceProfileAssociations', props);
    return resource.getResponseField('IamInstanceProfileAssociations') as unknown as shapes.Ec2IamInstanceProfileAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIamInstanceProfileAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIamInstanceProfileAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          AssociationIds: this.input.associationIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeIamInstanceProfileAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeIdFormat extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeIdFormatRequest) {
    super(scope, id);
  }

  public get statuses(): shapes.Ec2IdFormat[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIdFormat.Statuses'),
        outputPath: 'Statuses',
        parameters: {
          Resource: this.input.resource,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeIdFormat.Statuses', props);
    return resource.getResponseField('Statuses') as unknown as shapes.Ec2IdFormat[];
  }

}

export class EC2DescribeIdentityIdFormat extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeIdentityIdFormatRequest) {
    super(scope, id);
  }

  public get statuses(): shapes.Ec2IdFormat[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIdentityIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIdentityIdFormat.Statuses'),
        outputPath: 'Statuses',
        parameters: {
          PrincipalArn: this.input.principalArn,
          Resource: this.input.resource,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeIdentityIdFormat.Statuses', props);
    return resource.getResponseField('Statuses') as unknown as shapes.Ec2IdFormat[];
  }

}

export class EC2DescribeImageAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeImageAttributeRequest) {
    super(scope, id);
  }

  public get blockDeviceMappings(): shapes.Ec2BlockDeviceMapping[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.BlockDeviceMappings'),
        outputPath: 'BlockDeviceMappings',
        parameters: {
          Attribute: this.input.attribute,
          ImageId: this.input.imageId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImageAttribute.BlockDeviceMappings', props);
    return resource.getResponseField('BlockDeviceMappings') as unknown as shapes.Ec2BlockDeviceMapping[];
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          Attribute: this.input.attribute,
          ImageId: this.input.imageId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImageAttribute.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

  public get launchPermissions(): shapes.Ec2LaunchPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.LaunchPermissions'),
        outputPath: 'LaunchPermissions',
        parameters: {
          Attribute: this.input.attribute,
          ImageId: this.input.imageId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImageAttribute.LaunchPermissions', props);
    return resource.getResponseField('LaunchPermissions') as unknown as shapes.Ec2LaunchPermission[];
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.ProductCodes'),
        outputPath: 'ProductCodes',
        parameters: {
          Attribute: this.input.attribute,
          ImageId: this.input.imageId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImageAttribute.ProductCodes', props);
    return resource.getResponseField('ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

  public get description(): EC2DescribeImageAttributeDescription {
    return new EC2DescribeImageAttributeDescription(this, 'Description', this.__resources, this.input);
  }

  public get kernelId(): EC2DescribeImageAttributeKernelId {
    return new EC2DescribeImageAttributeKernelId(this, 'KernelId', this.__resources, this.input);
  }

  public get ramdiskId(): EC2DescribeImageAttributeRamdiskId {
    return new EC2DescribeImageAttributeRamdiskId(this, 'RamdiskId', this.__resources, this.input);
  }

  public get sriovNetSupport(): EC2DescribeImageAttributeSriovNetSupport {
    return new EC2DescribeImageAttributeSriovNetSupport(this, 'SriovNetSupport', this.__resources, this.input);
  }

}

export class EC2DescribeImageAttributeDescription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeImageAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.Description.Value'),
        outputPath: 'Description.Value',
        parameters: {
          Attribute: this.input.attribute,
          ImageId: this.input.imageId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImageAttribute.Description.Value', props);
    return resource.getResponseField('Description.Value') as unknown as string;
  }

}

export class EC2DescribeImageAttributeKernelId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeImageAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.KernelId.Value'),
        outputPath: 'KernelId.Value',
        parameters: {
          Attribute: this.input.attribute,
          ImageId: this.input.imageId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImageAttribute.KernelId.Value', props);
    return resource.getResponseField('KernelId.Value') as unknown as string;
  }

}

export class EC2DescribeImageAttributeRamdiskId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeImageAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.RamdiskId.Value'),
        outputPath: 'RamdiskId.Value',
        parameters: {
          Attribute: this.input.attribute,
          ImageId: this.input.imageId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImageAttribute.RamdiskId.Value', props);
    return resource.getResponseField('RamdiskId.Value') as unknown as string;
  }

}

export class EC2DescribeImageAttributeSriovNetSupport extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeImageAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.SriovNetSupport.Value'),
        outputPath: 'SriovNetSupport.Value',
        parameters: {
          Attribute: this.input.attribute,
          ImageId: this.input.imageId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImageAttribute.SriovNetSupport.Value', props);
    return resource.getResponseField('SriovNetSupport.Value') as unknown as string;
  }

}

export class EC2DescribeImages extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeImagesRequest) {
    super(scope, id);
  }

  public get images(): shapes.Ec2Image[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImages',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImages.Images'),
        outputPath: 'Images',
        parameters: {
          ExecutableUsers: this.input.executableUsers,
          Filters: this.input.filters,
          ImageIds: this.input.imageIds,
          Owners: this.input.owners,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImages.Images', props);
    return resource.getResponseField('Images') as unknown as shapes.Ec2Image[];
  }

}

export class EC2DescribeImportImageTasks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeImportImageTasksRequest) {
    super(scope, id);
  }

  public get importImageTasks(): shapes.Ec2ImportImageTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImportImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImportImageTasks.ImportImageTasks'),
        outputPath: 'ImportImageTasks',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          ImportTaskIds: this.input.importTaskIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImportImageTasks.ImportImageTasks', props);
    return resource.getResponseField('ImportImageTasks') as unknown as shapes.Ec2ImportImageTask[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImportImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImportImageTasks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          ImportTaskIds: this.input.importTaskIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImportImageTasks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeImportSnapshotTasks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeImportSnapshotTasksRequest) {
    super(scope, id);
  }

  public get importSnapshotTasks(): shapes.Ec2ImportSnapshotTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImportSnapshotTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImportSnapshotTasks.ImportSnapshotTasks'),
        outputPath: 'ImportSnapshotTasks',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          ImportTaskIds: this.input.importTaskIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImportSnapshotTasks.ImportSnapshotTasks', props);
    return resource.getResponseField('ImportSnapshotTasks') as unknown as shapes.Ec2ImportSnapshotTask[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImportSnapshotTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImportSnapshotTasks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          ImportTaskIds: this.input.importTaskIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeImportSnapshotTasks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeInstanceAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get groups(): shapes.Ec2GroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.Groups'),
        outputPath: 'Groups',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.Groups', props);
    return resource.getResponseField('Groups') as unknown as shapes.Ec2GroupIdentifier[];
  }

  public get blockDeviceMappings(): shapes.Ec2InstanceBlockDeviceMapping[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.BlockDeviceMappings'),
        outputPath: 'BlockDeviceMappings',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.BlockDeviceMappings', props);
    return resource.getResponseField('BlockDeviceMappings') as unknown as shapes.Ec2InstanceBlockDeviceMapping[];
  }

  public get disableApiTermination(): EC2DescribeInstanceAttributeDisableApiTermination {
    return new EC2DescribeInstanceAttributeDisableApiTermination(this, 'DisableApiTermination', this.__resources, this.input);
  }

  public get enaSupport(): EC2DescribeInstanceAttributeEnaSupport {
    return new EC2DescribeInstanceAttributeEnaSupport(this, 'EnaSupport', this.__resources, this.input);
  }

  public get enclaveOptions(): EC2DescribeInstanceAttributeEnclaveOptions {
    return new EC2DescribeInstanceAttributeEnclaveOptions(this, 'EnclaveOptions', this.__resources, this.input);
  }

  public get ebsOptimized(): EC2DescribeInstanceAttributeEbsOptimized {
    return new EC2DescribeInstanceAttributeEbsOptimized(this, 'EbsOptimized', this.__resources, this.input);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get instanceInitiatedShutdownBehavior(): EC2DescribeInstanceAttributeInstanceInitiatedShutdownBehavior {
    return new EC2DescribeInstanceAttributeInstanceInitiatedShutdownBehavior(this, 'InstanceInitiatedShutdownBehavior', this.__resources, this.input);
  }

  public get instanceType(): EC2DescribeInstanceAttributeInstanceType {
    return new EC2DescribeInstanceAttributeInstanceType(this, 'InstanceType', this.__resources, this.input);
  }

  public get kernelId(): EC2DescribeInstanceAttributeKernelId {
    return new EC2DescribeInstanceAttributeKernelId(this, 'KernelId', this.__resources, this.input);
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.ProductCodes'),
        outputPath: 'ProductCodes',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.ProductCodes', props);
    return resource.getResponseField('ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

  public get ramdiskId(): EC2DescribeInstanceAttributeRamdiskId {
    return new EC2DescribeInstanceAttributeRamdiskId(this, 'RamdiskId', this.__resources, this.input);
  }

  public get rootDeviceName(): EC2DescribeInstanceAttributeRootDeviceName {
    return new EC2DescribeInstanceAttributeRootDeviceName(this, 'RootDeviceName', this.__resources, this.input);
  }

  public get sourceDestCheck(): EC2DescribeInstanceAttributeSourceDestCheck {
    return new EC2DescribeInstanceAttributeSourceDestCheck(this, 'SourceDestCheck', this.__resources, this.input);
  }

  public get sriovNetSupport(): EC2DescribeInstanceAttributeSriovNetSupport {
    return new EC2DescribeInstanceAttributeSriovNetSupport(this, 'SriovNetSupport', this.__resources, this.input);
  }

  public get userData(): EC2DescribeInstanceAttributeUserData {
    return new EC2DescribeInstanceAttributeUserData(this, 'UserData', this.__resources, this.input);
  }

}

export class EC2DescribeInstanceAttributeDisableApiTermination extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.DisableApiTermination.Value'),
        outputPath: 'DisableApiTermination.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.DisableApiTermination.Value', props);
    return resource.getResponseField('DisableApiTermination.Value') as unknown as boolean;
  }

}

export class EC2DescribeInstanceAttributeEnaSupport extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.EnaSupport.Value'),
        outputPath: 'EnaSupport.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.EnaSupport.Value', props);
    return resource.getResponseField('EnaSupport.Value') as unknown as boolean;
  }

}

export class EC2DescribeInstanceAttributeEnclaveOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.EnclaveOptions.Enabled'),
        outputPath: 'EnclaveOptions.Enabled',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.EnclaveOptions.Enabled', props);
    return resource.getResponseField('EnclaveOptions.Enabled') as unknown as boolean;
  }

}

export class EC2DescribeInstanceAttributeEbsOptimized extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.EbsOptimized.Value'),
        outputPath: 'EbsOptimized.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.EbsOptimized.Value', props);
    return resource.getResponseField('EbsOptimized.Value') as unknown as boolean;
  }

}

export class EC2DescribeInstanceAttributeInstanceInitiatedShutdownBehavior extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.InstanceInitiatedShutdownBehavior.Value'),
        outputPath: 'InstanceInitiatedShutdownBehavior.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.InstanceInitiatedShutdownBehavior.Value', props);
    return resource.getResponseField('InstanceInitiatedShutdownBehavior.Value') as unknown as string;
  }

}

export class EC2DescribeInstanceAttributeInstanceType extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.InstanceType.Value'),
        outputPath: 'InstanceType.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.InstanceType.Value', props);
    return resource.getResponseField('InstanceType.Value') as unknown as string;
  }

}

export class EC2DescribeInstanceAttributeKernelId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.KernelId.Value'),
        outputPath: 'KernelId.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.KernelId.Value', props);
    return resource.getResponseField('KernelId.Value') as unknown as string;
  }

}

export class EC2DescribeInstanceAttributeRamdiskId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.RamdiskId.Value'),
        outputPath: 'RamdiskId.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.RamdiskId.Value', props);
    return resource.getResponseField('RamdiskId.Value') as unknown as string;
  }

}

export class EC2DescribeInstanceAttributeRootDeviceName extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.RootDeviceName.Value'),
        outputPath: 'RootDeviceName.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.RootDeviceName.Value', props);
    return resource.getResponseField('RootDeviceName.Value') as unknown as string;
  }

}

export class EC2DescribeInstanceAttributeSourceDestCheck extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.SourceDestCheck.Value'),
        outputPath: 'SourceDestCheck.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.SourceDestCheck.Value', props);
    return resource.getResponseField('SourceDestCheck.Value') as unknown as boolean;
  }

}

export class EC2DescribeInstanceAttributeSriovNetSupport extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.SriovNetSupport.Value'),
        outputPath: 'SriovNetSupport.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.SriovNetSupport.Value', props);
    return resource.getResponseField('SriovNetSupport.Value') as unknown as string;
  }

}

export class EC2DescribeInstanceAttributeUserData extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.UserData.Value'),
        outputPath: 'UserData.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceAttribute.UserData.Value', props);
    return resource.getResponseField('UserData.Value') as unknown as string;
  }

}

export class EC2DescribeInstanceCreditSpecifications extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceCreditSpecificationsRequest) {
    super(scope, id);
  }

  public get instanceCreditSpecifications(): shapes.Ec2InstanceCreditSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceCreditSpecifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceCreditSpecifications.InstanceCreditSpecifications'),
        outputPath: 'InstanceCreditSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          InstanceIds: this.input.instanceIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceCreditSpecifications.InstanceCreditSpecifications', props);
    return resource.getResponseField('InstanceCreditSpecifications') as unknown as shapes.Ec2InstanceCreditSpecification[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceCreditSpecifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceCreditSpecifications.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          InstanceIds: this.input.instanceIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceCreditSpecifications.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeInstanceEventNotificationAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceEventNotificationAttributesRequest) {
    super(scope, id);
  }

  public get instanceTagAttribute(): EC2DescribeInstanceEventNotificationAttributesInstanceTagAttribute {
    return new EC2DescribeInstanceEventNotificationAttributesInstanceTagAttribute(this, 'InstanceTagAttribute', this.__resources, this.input);
  }

}

export class EC2DescribeInstanceEventNotificationAttributesInstanceTagAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceEventNotificationAttributesRequest) {
    super(scope, id);
  }

  public get instanceTagKeys(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys'),
        outputPath: 'InstanceTagAttribute.InstanceTagKeys',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys', props);
    return resource.getResponseField('InstanceTagAttribute.InstanceTagKeys') as unknown as string[];
  }

  public get includeAllTagsOfInstance(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance'),
        outputPath: 'InstanceTagAttribute.IncludeAllTagsOfInstance',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance', props);
    return resource.getResponseField('InstanceTagAttribute.IncludeAllTagsOfInstance') as unknown as boolean;
  }

}

export class EC2DescribeInstanceStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceStatusRequest) {
    super(scope, id);
  }

  public get instanceStatuses(): shapes.Ec2InstanceStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceStatus.InstanceStatuses'),
        outputPath: 'InstanceStatuses',
        parameters: {
          Filters: this.input.filters,
          InstanceIds: this.input.instanceIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
          IncludeAllInstances: this.input.includeAllInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceStatus.InstanceStatuses', props);
    return resource.getResponseField('InstanceStatuses') as unknown as shapes.Ec2InstanceStatus[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceStatus.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          InstanceIds: this.input.instanceIds,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
          IncludeAllInstances: this.input.includeAllInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceStatus.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeInstanceTypeOfferings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceTypeOfferingsRequest) {
    super(scope, id);
  }

  public get instanceTypeOfferings(): shapes.Ec2InstanceTypeOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceTypeOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceTypeOfferings.InstanceTypeOfferings'),
        outputPath: 'InstanceTypeOfferings',
        parameters: {
          DryRun: this.input.dryRun,
          LocationType: this.input.locationType,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceTypeOfferings.InstanceTypeOfferings', props);
    return resource.getResponseField('InstanceTypeOfferings') as unknown as shapes.Ec2InstanceTypeOffering[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceTypeOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceTypeOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          LocationType: this.input.locationType,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceTypeOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeInstanceTypes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstanceTypesRequest) {
    super(scope, id);
  }

  public get instanceTypes(): shapes.Ec2InstanceTypeInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceTypes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceTypes.InstanceTypes'),
        outputPath: 'InstanceTypes',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceTypes: this.input.instanceTypes,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceTypes.InstanceTypes', props);
    return resource.getResponseField('InstanceTypes') as unknown as shapes.Ec2InstanceTypeInfo[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceTypes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceTypes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceTypes: this.input.instanceTypes,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstanceTypes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInstancesRequest) {
    super(scope, id);
  }

  public get reservations(): shapes.Ec2Reservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstances.Reservations'),
        outputPath: 'Reservations',
        parameters: {
          Filters: this.input.filters,
          InstanceIds: this.input.instanceIds,
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstances.Reservations', props);
    return resource.getResponseField('Reservations') as unknown as shapes.Ec2Reservation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          InstanceIds: this.input.instanceIds,
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeInternetGateways extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeInternetGatewaysRequest) {
    super(scope, id);
  }

  public get internetGateways(): shapes.Ec2InternetGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInternetGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInternetGateways.InternetGateways'),
        outputPath: 'InternetGateways',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          InternetGatewayIds: this.input.internetGatewayIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInternetGateways.InternetGateways', props);
    return resource.getResponseField('InternetGateways') as unknown as shapes.Ec2InternetGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInternetGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInternetGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          InternetGatewayIds: this.input.internetGatewayIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInternetGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeIpv6Pools extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeIpv6PoolsRequest) {
    super(scope, id);
  }

  public get ipv6Pools(): shapes.Ec2Ipv6Pool[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIpv6Pools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIpv6Pools.Ipv6Pools'),
        outputPath: 'Ipv6Pools',
        parameters: {
          PoolIds: this.input.poolIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeIpv6Pools.Ipv6Pools', props);
    return resource.getResponseField('Ipv6Pools') as unknown as shapes.Ec2Ipv6Pool[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIpv6Pools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIpv6Pools.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PoolIds: this.input.poolIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeIpv6Pools.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeKeyPairs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeKeyPairsRequest) {
    super(scope, id);
  }

  public get keyPairs(): shapes.Ec2KeyPairInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeKeyPairs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeKeyPairs.KeyPairs'),
        outputPath: 'KeyPairs',
        parameters: {
          Filters: this.input.filters,
          KeyNames: this.input.keyNames,
          KeyPairIds: this.input.keyPairIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeKeyPairs.KeyPairs', props);
    return resource.getResponseField('KeyPairs') as unknown as shapes.Ec2KeyPairInfo[];
  }

}

export class EC2DescribeLaunchTemplateVersions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeLaunchTemplateVersionsRequest) {
    super(scope, id);
  }

  public get launchTemplateVersions(): shapes.Ec2LaunchTemplateVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLaunchTemplateVersions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLaunchTemplateVersions.LaunchTemplateVersions'),
        outputPath: 'LaunchTemplateVersions',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          Versions: this.input.versions,
          MinVersion: this.input.minVersion,
          MaxVersion: this.input.maxVersion,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLaunchTemplateVersions.LaunchTemplateVersions', props);
    return resource.getResponseField('LaunchTemplateVersions') as unknown as shapes.Ec2LaunchTemplateVersion[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLaunchTemplateVersions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLaunchTemplateVersions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          Versions: this.input.versions,
          MinVersion: this.input.minVersion,
          MaxVersion: this.input.maxVersion,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLaunchTemplateVersions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeLaunchTemplates extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeLaunchTemplatesRequest) {
    super(scope, id);
  }

  public get launchTemplates(): shapes.Ec2LaunchTemplate[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLaunchTemplates',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLaunchTemplates.LaunchTemplates'),
        outputPath: 'LaunchTemplates',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateIds: this.input.launchTemplateIds,
          LaunchTemplateNames: this.input.launchTemplateNames,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLaunchTemplates.LaunchTemplates', props);
    return resource.getResponseField('LaunchTemplates') as unknown as shapes.Ec2LaunchTemplate[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLaunchTemplates',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLaunchTemplates.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          LaunchTemplateIds: this.input.launchTemplateIds,
          LaunchTemplateNames: this.input.launchTemplateNames,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLaunchTemplates.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest) {
    super(scope, id);
  }

  public get localGatewayRouteTableVirtualInterfaceGroupAssociations(): shapes.Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.LocalGatewayRouteTableVirtualInterfaceGroupAssociations'),
        outputPath: 'LocalGatewayRouteTableVirtualInterfaceGroupAssociations',
        parameters: {
          LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: this.input.localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.LocalGatewayRouteTableVirtualInterfaceGroupAssociations', props);
    return resource.getResponseField('LocalGatewayRouteTableVirtualInterfaceGroupAssociations') as unknown as shapes.Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: this.input.localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeLocalGatewayRouteTableVpcAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest) {
    super(scope, id);
  }

  public get localGatewayRouteTableVpcAssociations(): shapes.Ec2LocalGatewayRouteTableVpcAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTableVpcAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTableVpcAssociations.LocalGatewayRouteTableVpcAssociations'),
        outputPath: 'LocalGatewayRouteTableVpcAssociations',
        parameters: {
          LocalGatewayRouteTableVpcAssociationIds: this.input.localGatewayRouteTableVpcAssociationIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayRouteTableVpcAssociations.LocalGatewayRouteTableVpcAssociations', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociations') as unknown as shapes.Ec2LocalGatewayRouteTableVpcAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTableVpcAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTableVpcAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayRouteTableVpcAssociationIds: this.input.localGatewayRouteTableVpcAssociationIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayRouteTableVpcAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeLocalGatewayRouteTables extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeLocalGatewayRouteTablesRequest) {
    super(scope, id);
  }

  public get localGatewayRouteTables(): shapes.Ec2LocalGatewayRouteTable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTables.LocalGatewayRouteTables'),
        outputPath: 'LocalGatewayRouteTables',
        parameters: {
          LocalGatewayRouteTableIds: this.input.localGatewayRouteTableIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayRouteTables.LocalGatewayRouteTables', props);
    return resource.getResponseField('LocalGatewayRouteTables') as unknown as shapes.Ec2LocalGatewayRouteTable[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTables.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayRouteTableIds: this.input.localGatewayRouteTableIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayRouteTables.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeLocalGatewayVirtualInterfaceGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest) {
    super(scope, id);
  }

  public get localGatewayVirtualInterfaceGroups(): shapes.Ec2LocalGatewayVirtualInterfaceGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayVirtualInterfaceGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayVirtualInterfaceGroups.LocalGatewayVirtualInterfaceGroups'),
        outputPath: 'LocalGatewayVirtualInterfaceGroups',
        parameters: {
          LocalGatewayVirtualInterfaceGroupIds: this.input.localGatewayVirtualInterfaceGroupIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayVirtualInterfaceGroups.LocalGatewayVirtualInterfaceGroups', props);
    return resource.getResponseField('LocalGatewayVirtualInterfaceGroups') as unknown as shapes.Ec2LocalGatewayVirtualInterfaceGroup[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayVirtualInterfaceGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayVirtualInterfaceGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayVirtualInterfaceGroupIds: this.input.localGatewayVirtualInterfaceGroupIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayVirtualInterfaceGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeLocalGatewayVirtualInterfaces extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeLocalGatewayVirtualInterfacesRequest) {
    super(scope, id);
  }

  public get localGatewayVirtualInterfaces(): shapes.Ec2LocalGatewayVirtualInterface[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayVirtualInterfaces',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayVirtualInterfaces.LocalGatewayVirtualInterfaces'),
        outputPath: 'LocalGatewayVirtualInterfaces',
        parameters: {
          LocalGatewayVirtualInterfaceIds: this.input.localGatewayVirtualInterfaceIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayVirtualInterfaces.LocalGatewayVirtualInterfaces', props);
    return resource.getResponseField('LocalGatewayVirtualInterfaces') as unknown as shapes.Ec2LocalGatewayVirtualInterface[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayVirtualInterfaces',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayVirtualInterfaces.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayVirtualInterfaceIds: this.input.localGatewayVirtualInterfaceIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGatewayVirtualInterfaces.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeLocalGateways extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeLocalGatewaysRequest) {
    super(scope, id);
  }

  public get localGateways(): shapes.Ec2LocalGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGateways.LocalGateways'),
        outputPath: 'LocalGateways',
        parameters: {
          LocalGatewayIds: this.input.localGatewayIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGateways.LocalGateways', props);
    return resource.getResponseField('LocalGateways') as unknown as shapes.Ec2LocalGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayIds: this.input.localGatewayIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeLocalGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeManagedPrefixLists extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeManagedPrefixListsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeManagedPrefixLists',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeManagedPrefixLists.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          PrefixListIds: this.input.prefixListIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeManagedPrefixLists.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get prefixLists(): shapes.Ec2ManagedPrefixList[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeManagedPrefixLists',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeManagedPrefixLists.PrefixLists'),
        outputPath: 'PrefixLists',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          PrefixListIds: this.input.prefixListIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeManagedPrefixLists.PrefixLists', props);
    return resource.getResponseField('PrefixLists') as unknown as shapes.Ec2ManagedPrefixList[];
  }

}

export class EC2DescribeMovingAddresses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeMovingAddressesRequest) {
    super(scope, id);
  }

  public get movingAddressStatuses(): shapes.Ec2MovingAddressStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMovingAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeMovingAddresses.MovingAddressStatuses'),
        outputPath: 'MovingAddressStatuses',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          PublicIps: this.input.publicIps,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeMovingAddresses.MovingAddressStatuses', props);
    return resource.getResponseField('MovingAddressStatuses') as unknown as shapes.Ec2MovingAddressStatus[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMovingAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeMovingAddresses.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          PublicIps: this.input.publicIps,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeMovingAddresses.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeNatGateways extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeNatGatewaysRequest) {
    super(scope, id);
  }

  public get natGateways(): shapes.Ec2NatGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNatGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNatGateways.NatGateways'),
        outputPath: 'NatGateways',
        parameters: {
          DryRun: this.input.dryRun,
          Filter: this.input.filter,
          MaxResults: this.input.maxResults,
          NatGatewayIds: this.input.natGatewayIds,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNatGateways.NatGateways', props);
    return resource.getResponseField('NatGateways') as unknown as shapes.Ec2NatGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNatGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNatGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filter: this.input.filter,
          MaxResults: this.input.maxResults,
          NatGatewayIds: this.input.natGatewayIds,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNatGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeNetworkAcls extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeNetworkAclsRequest) {
    super(scope, id);
  }

  public get networkAcls(): shapes.Ec2NetworkAcl[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkAcls',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkAcls.NetworkAcls'),
        outputPath: 'NetworkAcls',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          NetworkAclIds: this.input.networkAclIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkAcls.NetworkAcls', props);
    return resource.getResponseField('NetworkAcls') as unknown as shapes.Ec2NetworkAcl[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkAcls',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkAcls.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          NetworkAclIds: this.input.networkAclIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkAcls.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeNetworkInterfaceAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest) {
    super(scope, id);
  }

  public get attachment(): EC2DescribeNetworkInterfaceAttributeAttachment {
    return new EC2DescribeNetworkInterfaceAttributeAttachment(this, 'Attachment', this.__resources, this.input);
  }

  public get description(): EC2DescribeNetworkInterfaceAttributeDescription {
    return new EC2DescribeNetworkInterfaceAttributeDescription(this, 'Description', this.__resources, this.input);
  }

  public get groups(): shapes.Ec2GroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Groups'),
        outputPath: 'Groups',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Groups', props);
    return resource.getResponseField('Groups') as unknown as shapes.Ec2GroupIdentifier[];
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.NetworkInterfaceId'),
        outputPath: 'NetworkInterfaceId',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterfaceId') as unknown as string;
  }

  public get sourceDestCheck(): EC2DescribeNetworkInterfaceAttributeSourceDestCheck {
    return new EC2DescribeNetworkInterfaceAttributeSourceDestCheck(this, 'SourceDestCheck', this.__resources, this.input);
  }

}

export class EC2DescribeNetworkInterfaceAttributeAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest) {
    super(scope, id);
  }

  public get attachTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.AttachTime'),
        outputPath: 'Attachment.AttachTime',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Attachment.AttachTime', props);
    return resource.getResponseField('Attachment.AttachTime') as unknown as string;
  }

  public get attachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.AttachmentId'),
        outputPath: 'Attachment.AttachmentId',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Attachment.AttachmentId', props);
    return resource.getResponseField('Attachment.AttachmentId') as unknown as string;
  }

  public get deleteOnTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.DeleteOnTermination'),
        outputPath: 'Attachment.DeleteOnTermination',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Attachment.DeleteOnTermination', props);
    return resource.getResponseField('Attachment.DeleteOnTermination') as unknown as boolean;
  }

  public get deviceIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.DeviceIndex'),
        outputPath: 'Attachment.DeviceIndex',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Attachment.DeviceIndex', props);
    return resource.getResponseField('Attachment.DeviceIndex') as unknown as number;
  }

  public get networkCardIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.NetworkCardIndex'),
        outputPath: 'Attachment.NetworkCardIndex',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Attachment.NetworkCardIndex', props);
    return resource.getResponseField('Attachment.NetworkCardIndex') as unknown as number;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.InstanceId'),
        outputPath: 'Attachment.InstanceId',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Attachment.InstanceId', props);
    return resource.getResponseField('Attachment.InstanceId') as unknown as string;
  }

  public get instanceOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.InstanceOwnerId'),
        outputPath: 'Attachment.InstanceOwnerId',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Attachment.InstanceOwnerId', props);
    return resource.getResponseField('Attachment.InstanceOwnerId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.Status'),
        outputPath: 'Attachment.Status',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Attachment.Status', props);
    return resource.getResponseField('Attachment.Status') as unknown as string;
  }

}

export class EC2DescribeNetworkInterfaceAttributeDescription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest) {
    super(scope, id);
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Description.Value'),
        outputPath: 'Description.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.Description.Value', props);
    return resource.getResponseField('Description.Value') as unknown as string;
  }

}

export class EC2DescribeNetworkInterfaceAttributeSourceDestCheck extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest) {
    super(scope, id);
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.SourceDestCheck.Value'),
        outputPath: 'SourceDestCheck.Value',
        parameters: {
          Attribute: this.input.attribute,
          DryRun: this.input.dryRun,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaceAttribute.SourceDestCheck.Value', props);
    return resource.getResponseField('SourceDestCheck.Value') as unknown as boolean;
  }

}

export class EC2DescribeNetworkInterfacePermissions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeNetworkInterfacePermissionsRequest) {
    super(scope, id);
  }

  public get networkInterfacePermissions(): shapes.Ec2NetworkInterfacePermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfacePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfacePermissions.NetworkInterfacePermissions'),
        outputPath: 'NetworkInterfacePermissions',
        parameters: {
          NetworkInterfacePermissionIds: this.input.networkInterfacePermissionIds,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfacePermissions.NetworkInterfacePermissions', props);
    return resource.getResponseField('NetworkInterfacePermissions') as unknown as shapes.Ec2NetworkInterfacePermission[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfacePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfacePermissions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          NetworkInterfacePermissionIds: this.input.networkInterfacePermissionIds,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfacePermissions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeNetworkInterfaces extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeNetworkInterfacesRequest) {
    super(scope, id);
  }

  public get networkInterfaces(): shapes.Ec2NetworkInterface[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaces',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaces.NetworkInterfaces'),
        outputPath: 'NetworkInterfaces',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaces.NetworkInterfaces', props);
    return resource.getResponseField('NetworkInterfaces') as unknown as shapes.Ec2NetworkInterface[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaces',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaces.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeNetworkInterfaces.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribePlacementGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribePlacementGroupsRequest) {
    super(scope, id);
  }

  public get placementGroups(): shapes.Ec2PlacementGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePlacementGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePlacementGroups.PlacementGroups'),
        outputPath: 'PlacementGroups',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          GroupNames: this.input.groupNames,
          GroupIds: this.input.groupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePlacementGroups.PlacementGroups', props);
    return resource.getResponseField('PlacementGroups') as unknown as shapes.Ec2PlacementGroup[];
  }

}

export class EC2DescribePrefixLists extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribePrefixListsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePrefixLists',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePrefixLists.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          PrefixListIds: this.input.prefixListIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePrefixLists.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get prefixLists(): shapes.Ec2PrefixList[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePrefixLists',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePrefixLists.PrefixLists'),
        outputPath: 'PrefixLists',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          PrefixListIds: this.input.prefixListIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePrefixLists.PrefixLists', props);
    return resource.getResponseField('PrefixLists') as unknown as shapes.Ec2PrefixList[];
  }

}

export class EC2DescribePrincipalIdFormat extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribePrincipalIdFormatRequest) {
    super(scope, id);
  }

  public get principals(): shapes.Ec2PrincipalIdFormat[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePrincipalIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePrincipalIdFormat.Principals'),
        outputPath: 'Principals',
        parameters: {
          DryRun: this.input.dryRun,
          Resources: this.input.resources,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePrincipalIdFormat.Principals', props);
    return resource.getResponseField('Principals') as unknown as shapes.Ec2PrincipalIdFormat[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePrincipalIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePrincipalIdFormat.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Resources: this.input.resources,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePrincipalIdFormat.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribePublicIpv4Pools extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribePublicIpv4PoolsRequest) {
    super(scope, id);
  }

  public get publicIpv4Pools(): shapes.Ec2PublicIpv4Pool[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePublicIpv4Pools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePublicIpv4Pools.PublicIpv4Pools'),
        outputPath: 'PublicIpv4Pools',
        parameters: {
          PoolIds: this.input.poolIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePublicIpv4Pools.PublicIpv4Pools', props);
    return resource.getResponseField('PublicIpv4Pools') as unknown as shapes.Ec2PublicIpv4Pool[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePublicIpv4Pools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePublicIpv4Pools.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PoolIds: this.input.poolIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePublicIpv4Pools.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeRegions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeRegionsRequest) {
    super(scope, id);
  }

  public get regions(): shapes.Ec2Region[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeRegions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeRegions.Regions'),
        outputPath: 'Regions',
        parameters: {
          Filters: this.input.filters,
          RegionNames: this.input.regionNames,
          DryRun: this.input.dryRun,
          AllRegions: this.input.allRegions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeRegions.Regions', props);
    return resource.getResponseField('Regions') as unknown as shapes.Ec2Region[];
  }

}

export class EC2DescribeReservedInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeReservedInstancesRequest) {
    super(scope, id);
  }

  public get reservedInstances(): shapes.Ec2ReservedInstances[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstances.ReservedInstances'),
        outputPath: 'ReservedInstances',
        parameters: {
          Filters: this.input.filters,
          OfferingClass: this.input.offeringClass,
          ReservedInstancesIds: this.input.reservedInstancesIds,
          DryRun: this.input.dryRun,
          OfferingType: this.input.offeringType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedInstances.ReservedInstances', props);
    return resource.getResponseField('ReservedInstances') as unknown as shapes.Ec2ReservedInstances[];
  }

}

export class EC2DescribeReservedInstancesListings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeReservedInstancesListingsRequest) {
    super(scope, id);
  }

  public get reservedInstancesListings(): shapes.Ec2ReservedInstancesListing[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesListings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesListings.ReservedInstancesListings'),
        outputPath: 'ReservedInstancesListings',
        parameters: {
          Filters: this.input.filters,
          ReservedInstancesId: this.input.reservedInstancesId,
          ReservedInstancesListingId: this.input.reservedInstancesListingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedInstancesListings.ReservedInstancesListings', props);
    return resource.getResponseField('ReservedInstancesListings') as unknown as shapes.Ec2ReservedInstancesListing[];
  }

}

export class EC2DescribeReservedInstancesModifications extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeReservedInstancesModificationsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesModifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesModifications.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          ReservedInstancesModificationIds: this.input.reservedInstancesModificationIds,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedInstancesModifications.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get reservedInstancesModifications(): shapes.Ec2ReservedInstancesModification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesModifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesModifications.ReservedInstancesModifications'),
        outputPath: 'ReservedInstancesModifications',
        parameters: {
          Filters: this.input.filters,
          ReservedInstancesModificationIds: this.input.reservedInstancesModificationIds,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedInstancesModifications.ReservedInstancesModifications', props);
    return resource.getResponseField('ReservedInstancesModifications') as unknown as shapes.Ec2ReservedInstancesModification[];
  }

}

export class EC2DescribeReservedInstancesOfferings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeReservedInstancesOfferingsRequest) {
    super(scope, id);
  }

  public get reservedInstancesOfferings(): shapes.Ec2ReservedInstancesOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesOfferings.ReservedInstancesOfferings'),
        outputPath: 'ReservedInstancesOfferings',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Filters: this.input.filters,
          IncludeMarketplace: this.input.includeMarketplace,
          InstanceType: this.input.instanceType,
          MaxDuration: this.input.maxDuration,
          MaxInstanceCount: this.input.maxInstanceCount,
          MinDuration: this.input.minDuration,
          OfferingClass: this.input.offeringClass,
          ProductDescription: this.input.productDescription,
          ReservedInstancesOfferingIds: this.input.reservedInstancesOfferingIds,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          OfferingType: this.input.offeringType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedInstancesOfferings.ReservedInstancesOfferings', props);
    return resource.getResponseField('ReservedInstancesOfferings') as unknown as shapes.Ec2ReservedInstancesOffering[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Filters: this.input.filters,
          IncludeMarketplace: this.input.includeMarketplace,
          InstanceType: this.input.instanceType,
          MaxDuration: this.input.maxDuration,
          MaxInstanceCount: this.input.maxInstanceCount,
          MinDuration: this.input.minDuration,
          OfferingClass: this.input.offeringClass,
          ProductDescription: this.input.productDescription,
          ReservedInstancesOfferingIds: this.input.reservedInstancesOfferingIds,
          DryRun: this.input.dryRun,
          InstanceTenancy: this.input.instanceTenancy,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          OfferingType: this.input.offeringType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedInstancesOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeRouteTables extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeRouteTablesRequest) {
    super(scope, id);
  }

  public get routeTables(): shapes.Ec2RouteTable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeRouteTables.RouteTables'),
        outputPath: 'RouteTables',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          RouteTableIds: this.input.routeTableIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeRouteTables.RouteTables', props);
    return resource.getResponseField('RouteTables') as unknown as shapes.Ec2RouteTable[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeRouteTables.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          RouteTableIds: this.input.routeTableIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeRouteTables.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeScheduledInstanceAvailability extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeScheduledInstanceAvailabilityRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledInstanceAvailability',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeScheduledInstanceAvailability.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          FirstSlotStartTimeRange: {
            EarliestTime: this.input.firstSlotStartTimeRange.earliestTime,
            LatestTime: this.input.firstSlotStartTimeRange.latestTime,
          },
          MaxResults: this.input.maxResults,
          MaxSlotDurationInHours: this.input.maxSlotDurationInHours,
          MinSlotDurationInHours: this.input.minSlotDurationInHours,
          NextToken: this.input.nextToken,
          Recurrence: {
            Frequency: this.input.recurrence.frequency,
            Interval: this.input.recurrence.interval,
            OccurrenceDays: this.input.recurrence.occurrenceDays,
            OccurrenceRelativeToEnd: this.input.recurrence.occurrenceRelativeToEnd,
            OccurrenceUnit: this.input.recurrence.occurrenceUnit,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeScheduledInstanceAvailability.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get scheduledInstanceAvailabilitySet(): shapes.Ec2ScheduledInstanceAvailability[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledInstanceAvailability',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeScheduledInstanceAvailability.ScheduledInstanceAvailabilitySet'),
        outputPath: 'ScheduledInstanceAvailabilitySet',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          FirstSlotStartTimeRange: {
            EarliestTime: this.input.firstSlotStartTimeRange.earliestTime,
            LatestTime: this.input.firstSlotStartTimeRange.latestTime,
          },
          MaxResults: this.input.maxResults,
          MaxSlotDurationInHours: this.input.maxSlotDurationInHours,
          MinSlotDurationInHours: this.input.minSlotDurationInHours,
          NextToken: this.input.nextToken,
          Recurrence: {
            Frequency: this.input.recurrence.frequency,
            Interval: this.input.recurrence.interval,
            OccurrenceDays: this.input.recurrence.occurrenceDays,
            OccurrenceRelativeToEnd: this.input.recurrence.occurrenceRelativeToEnd,
            OccurrenceUnit: this.input.recurrence.occurrenceUnit,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeScheduledInstanceAvailability.ScheduledInstanceAvailabilitySet', props);
    return resource.getResponseField('ScheduledInstanceAvailabilitySet') as unknown as shapes.Ec2ScheduledInstanceAvailability[];
  }

}

export class EC2DescribeScheduledInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeScheduledInstancesRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeScheduledInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          ScheduledInstanceIds: this.input.scheduledInstanceIds,
          SlotStartTimeRange: {
            EarliestTime: this.input.slotStartTimeRange?.earliestTime,
            LatestTime: this.input.slotStartTimeRange?.latestTime,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeScheduledInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get scheduledInstanceSet(): shapes.Ec2ScheduledInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeScheduledInstances.ScheduledInstanceSet'),
        outputPath: 'ScheduledInstanceSet',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          ScheduledInstanceIds: this.input.scheduledInstanceIds,
          SlotStartTimeRange: {
            EarliestTime: this.input.slotStartTimeRange?.earliestTime,
            LatestTime: this.input.slotStartTimeRange?.latestTime,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeScheduledInstances.ScheduledInstanceSet', props);
    return resource.getResponseField('ScheduledInstanceSet') as unknown as shapes.Ec2ScheduledInstance[];
  }

}

export class EC2DescribeSecurityGroupReferences extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSecurityGroupReferencesRequest) {
    super(scope, id);
  }

  public get securityGroupReferenceSet(): shapes.Ec2SecurityGroupReference[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSecurityGroupReferences',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSecurityGroupReferences.SecurityGroupReferenceSet'),
        outputPath: 'SecurityGroupReferenceSet',
        parameters: {
          DryRun: this.input.dryRun,
          GroupId: this.input.groupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSecurityGroupReferences.SecurityGroupReferenceSet', props);
    return resource.getResponseField('SecurityGroupReferenceSet') as unknown as shapes.Ec2SecurityGroupReference[];
  }

}

export class EC2DescribeSecurityGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSecurityGroupsRequest) {
    super(scope, id);
  }

  public get securityGroups(): shapes.Ec2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSecurityGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSecurityGroups.SecurityGroups'),
        outputPath: 'SecurityGroups',
        parameters: {
          Filters: this.input.filters,
          GroupIds: this.input.groupIds,
          GroupNames: this.input.groupNames,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSecurityGroups.SecurityGroups', props);
    return resource.getResponseField('SecurityGroups') as unknown as shapes.Ec2SecurityGroup[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSecurityGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSecurityGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          GroupIds: this.input.groupIds,
          GroupNames: this.input.groupNames,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSecurityGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeSnapshotAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSnapshotAttributeRequest) {
    super(scope, id);
  }

  public get createVolumePermissions(): shapes.Ec2CreateVolumePermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshotAttribute.CreateVolumePermissions'),
        outputPath: 'CreateVolumePermissions',
        parameters: {
          Attribute: this.input.attribute,
          SnapshotId: this.input.snapshotId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshotAttribute.CreateVolumePermissions', props);
    return resource.getResponseField('CreateVolumePermissions') as unknown as shapes.Ec2CreateVolumePermission[];
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshotAttribute.ProductCodes'),
        outputPath: 'ProductCodes',
        parameters: {
          Attribute: this.input.attribute,
          SnapshotId: this.input.snapshotId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshotAttribute.ProductCodes', props);
    return resource.getResponseField('ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshotAttribute.SnapshotId'),
        outputPath: 'SnapshotId',
        parameters: {
          Attribute: this.input.attribute,
          SnapshotId: this.input.snapshotId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshotAttribute.SnapshotId', props);
    return resource.getResponseField('SnapshotId') as unknown as string;
  }

}

export class EC2DescribeSnapshots extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSnapshotsRequest) {
    super(scope, id);
  }

  public get snapshots(): shapes.Ec2Snapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshots',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshots.Snapshots'),
        outputPath: 'Snapshots',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          OwnerIds: this.input.ownerIds,
          RestorableByUserIds: this.input.restorableByUserIds,
          SnapshotIds: this.input.snapshotIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshots.Snapshots', props);
    return resource.getResponseField('Snapshots') as unknown as shapes.Ec2Snapshot[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshots',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshots.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          OwnerIds: this.input.ownerIds,
          RestorableByUserIds: this.input.restorableByUserIds,
          SnapshotIds: this.input.snapshotIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSnapshots.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeSpotDatafeedSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSpotDatafeedSubscriptionRequest) {
    super(scope, id);
  }

  public get spotDatafeedSubscription(): EC2DescribeSpotDatafeedSubscriptionSpotDatafeedSubscription {
    return new EC2DescribeSpotDatafeedSubscriptionSpotDatafeedSubscription(this, 'SpotDatafeedSubscription', this.__resources, this.input);
  }

}

export class EC2DescribeSpotDatafeedSubscriptionSpotDatafeedSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSpotDatafeedSubscriptionRequest) {
    super(scope, id);
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Bucket'),
        outputPath: 'SpotDatafeedSubscription.Bucket',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Bucket', props);
    return resource.getResponseField('SpotDatafeedSubscription.Bucket') as unknown as string;
  }

  public get fault(): EC2DescribeSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault {
    return new EC2DescribeSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault(this, 'Fault', this.__resources, this.input);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.OwnerId'),
        outputPath: 'SpotDatafeedSubscription.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.OwnerId', props);
    return resource.getResponseField('SpotDatafeedSubscription.OwnerId') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Prefix'),
        outputPath: 'SpotDatafeedSubscription.Prefix',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Prefix', props);
    return resource.getResponseField('SpotDatafeedSubscription.Prefix') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.State'),
        outputPath: 'SpotDatafeedSubscription.State',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.State', props);
    return resource.getResponseField('SpotDatafeedSubscription.State') as unknown as string;
  }

}

export class EC2DescribeSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSpotDatafeedSubscriptionRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Code'),
        outputPath: 'SpotDatafeedSubscription.Fault.Code',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Code', props);
    return resource.getResponseField('SpotDatafeedSubscription.Fault.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Message'),
        outputPath: 'SpotDatafeedSubscription.Fault.Message',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Message', props);
    return resource.getResponseField('SpotDatafeedSubscription.Fault.Message') as unknown as string;
  }

}

export class EC2DescribeSpotFleetInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSpotFleetInstancesRequest) {
    super(scope, id);
  }

  public get activeInstances(): shapes.Ec2ActiveInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetInstances.ActiveInstances'),
        outputPath: 'ActiveInstances',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestId: this.input.spotFleetRequestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetInstances.ActiveInstances', props);
    return resource.getResponseField('ActiveInstances') as unknown as shapes.Ec2ActiveInstance[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestId: this.input.spotFleetRequestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get spotFleetRequestId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetInstances.SpotFleetRequestId'),
        outputPath: 'SpotFleetRequestId',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestId: this.input.spotFleetRequestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetInstances.SpotFleetRequestId', props);
    return resource.getResponseField('SpotFleetRequestId') as unknown as string;
  }

}

export class EC2DescribeSpotFleetRequestHistory extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSpotFleetRequestHistoryRequest) {
    super(scope, id);
  }

  public get historyRecords(): shapes.Ec2HistoryRecord[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.HistoryRecords'),
        outputPath: 'HistoryRecords',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestId: this.input.spotFleetRequestId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetRequestHistory.HistoryRecords', props);
    return resource.getResponseField('HistoryRecords') as unknown as shapes.Ec2HistoryRecord[];
  }

  public get lastEvaluatedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.LastEvaluatedTime'),
        outputPath: 'LastEvaluatedTime',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestId: this.input.spotFleetRequestId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetRequestHistory.LastEvaluatedTime', props);
    return resource.getResponseField('LastEvaluatedTime') as unknown as string;
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestId: this.input.spotFleetRequestId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetRequestHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get spotFleetRequestId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.SpotFleetRequestId'),
        outputPath: 'SpotFleetRequestId',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestId: this.input.spotFleetRequestId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetRequestHistory.SpotFleetRequestId', props);
    return resource.getResponseField('SpotFleetRequestId') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          DryRun: this.input.dryRun,
          EventType: this.input.eventType,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestId: this.input.spotFleetRequestId,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetRequestHistory.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

}

export class EC2DescribeSpotFleetRequests extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSpotFleetRequestsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequests.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestIds: this.input.spotFleetRequestIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetRequests.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get spotFleetRequestConfigs(): shapes.Ec2SpotFleetRequestConfig[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequests.SpotFleetRequestConfigs'),
        outputPath: 'SpotFleetRequestConfigs',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          SpotFleetRequestIds: this.input.spotFleetRequestIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotFleetRequests.SpotFleetRequestConfigs', props);
    return resource.getResponseField('SpotFleetRequestConfigs') as unknown as shapes.Ec2SpotFleetRequestConfig[];
  }

}

export class EC2DescribeSpotInstanceRequests extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSpotInstanceRequestsRequest) {
    super(scope, id);
  }

  public get spotInstanceRequests(): shapes.Ec2SpotInstanceRequest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotInstanceRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotInstanceRequests.SpotInstanceRequests'),
        outputPath: 'SpotInstanceRequests',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          SpotInstanceRequestIds: this.input.spotInstanceRequestIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotInstanceRequests.SpotInstanceRequests', props);
    return resource.getResponseField('SpotInstanceRequests') as unknown as shapes.Ec2SpotInstanceRequest[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotInstanceRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotInstanceRequests.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          SpotInstanceRequestIds: this.input.spotInstanceRequestIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotInstanceRequests.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeSpotPriceHistory extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSpotPriceHistoryRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotPriceHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotPriceHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
          EndTime: this.input.endTime,
          InstanceTypes: this.input.instanceTypes,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          ProductDescriptions: this.input.productDescriptions,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotPriceHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get spotPriceHistory(): shapes.Ec2SpotPrice[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotPriceHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotPriceHistory.SpotPriceHistory'),
        outputPath: 'SpotPriceHistory',
        parameters: {
          Filters: this.input.filters,
          AvailabilityZone: this.input.availabilityZone,
          DryRun: this.input.dryRun,
          EndTime: this.input.endTime,
          InstanceTypes: this.input.instanceTypes,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          ProductDescriptions: this.input.productDescriptions,
          StartTime: this.input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSpotPriceHistory.SpotPriceHistory', props);
    return resource.getResponseField('SpotPriceHistory') as unknown as shapes.Ec2SpotPrice[];
  }

}

export class EC2DescribeStaleSecurityGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeStaleSecurityGroupsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStaleSecurityGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeStaleSecurityGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          VpcId: this.input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeStaleSecurityGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get staleSecurityGroupSet(): shapes.Ec2StaleSecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStaleSecurityGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeStaleSecurityGroups.StaleSecurityGroupSet'),
        outputPath: 'StaleSecurityGroupSet',
        parameters: {
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          VpcId: this.input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeStaleSecurityGroups.StaleSecurityGroupSet', props);
    return resource.getResponseField('StaleSecurityGroupSet') as unknown as shapes.Ec2StaleSecurityGroup[];
  }

}

export class EC2DescribeSubnets extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeSubnetsRequest) {
    super(scope, id);
  }

  public get subnets(): shapes.Ec2Subnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSubnets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSubnets.Subnets'),
        outputPath: 'Subnets',
        parameters: {
          Filters: this.input.filters,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSubnets.Subnets', props);
    return resource.getResponseField('Subnets') as unknown as shapes.Ec2Subnet[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSubnets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSubnets.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSubnets.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTags extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTagsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTags',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTags.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTags.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get tags(): shapes.Ec2TagDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTags',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTags.Tags'),
        outputPath: 'Tags',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTags.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2TagDescription[];
  }

}

export class EC2DescribeTrafficMirrorFilters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTrafficMirrorFiltersRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilters(): shapes.Ec2TrafficMirrorFilter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorFilters',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorFilters.TrafficMirrorFilters'),
        outputPath: 'TrafficMirrorFilters',
        parameters: {
          TrafficMirrorFilterIds: this.input.trafficMirrorFilterIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTrafficMirrorFilters.TrafficMirrorFilters', props);
    return resource.getResponseField('TrafficMirrorFilters') as unknown as shapes.Ec2TrafficMirrorFilter[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorFilters',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorFilters.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TrafficMirrorFilterIds: this.input.trafficMirrorFilterIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTrafficMirrorFilters.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTrafficMirrorSessions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTrafficMirrorSessionsRequest) {
    super(scope, id);
  }

  public get trafficMirrorSessions(): shapes.Ec2TrafficMirrorSession[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorSessions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorSessions.TrafficMirrorSessions'),
        outputPath: 'TrafficMirrorSessions',
        parameters: {
          TrafficMirrorSessionIds: this.input.trafficMirrorSessionIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTrafficMirrorSessions.TrafficMirrorSessions', props);
    return resource.getResponseField('TrafficMirrorSessions') as unknown as shapes.Ec2TrafficMirrorSession[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorSessions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorSessions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TrafficMirrorSessionIds: this.input.trafficMirrorSessionIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTrafficMirrorSessions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTrafficMirrorTargets extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTrafficMirrorTargetsRequest) {
    super(scope, id);
  }

  public get trafficMirrorTargets(): shapes.Ec2TrafficMirrorTarget[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorTargets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorTargets.TrafficMirrorTargets'),
        outputPath: 'TrafficMirrorTargets',
        parameters: {
          TrafficMirrorTargetIds: this.input.trafficMirrorTargetIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTrafficMirrorTargets.TrafficMirrorTargets', props);
    return resource.getResponseField('TrafficMirrorTargets') as unknown as shapes.Ec2TrafficMirrorTarget[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorTargets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorTargets.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TrafficMirrorTargetIds: this.input.trafficMirrorTargetIds,
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTrafficMirrorTargets.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTransitGatewayAttachments extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTransitGatewayAttachmentsRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachments(): shapes.Ec2TransitGatewayAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayAttachments.TransitGatewayAttachments'),
        outputPath: 'TransitGatewayAttachments',
        parameters: {
          TransitGatewayAttachmentIds: this.input.transitGatewayAttachmentIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayAttachments.TransitGatewayAttachments', props);
    return resource.getResponseField('TransitGatewayAttachments') as unknown as shapes.Ec2TransitGatewayAttachment[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayAttachments.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentIds: this.input.transitGatewayAttachmentIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayAttachments.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTransitGatewayMulticastDomains extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTransitGatewayMulticastDomainsRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomains(): shapes.Ec2TransitGatewayMulticastDomain[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayMulticastDomains',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayMulticastDomains.TransitGatewayMulticastDomains'),
        outputPath: 'TransitGatewayMulticastDomains',
        parameters: {
          TransitGatewayMulticastDomainIds: this.input.transitGatewayMulticastDomainIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayMulticastDomains.TransitGatewayMulticastDomains', props);
    return resource.getResponseField('TransitGatewayMulticastDomains') as unknown as shapes.Ec2TransitGatewayMulticastDomain[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayMulticastDomains',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayMulticastDomains.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayMulticastDomainIds: this.input.transitGatewayMulticastDomainIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayMulticastDomains.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTransitGatewayPeeringAttachments extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTransitGatewayPeeringAttachmentsRequest) {
    super(scope, id);
  }

  public get transitGatewayPeeringAttachments(): shapes.Ec2TransitGatewayPeeringAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayPeeringAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayPeeringAttachments.TransitGatewayPeeringAttachments'),
        outputPath: 'TransitGatewayPeeringAttachments',
        parameters: {
          TransitGatewayAttachmentIds: this.input.transitGatewayAttachmentIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayPeeringAttachments.TransitGatewayPeeringAttachments', props);
    return resource.getResponseField('TransitGatewayPeeringAttachments') as unknown as shapes.Ec2TransitGatewayPeeringAttachment[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayPeeringAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayPeeringAttachments.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentIds: this.input.transitGatewayAttachmentIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayPeeringAttachments.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTransitGatewayRouteTables extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTransitGatewayRouteTablesRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTables(): shapes.Ec2TransitGatewayRouteTable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayRouteTables.TransitGatewayRouteTables'),
        outputPath: 'TransitGatewayRouteTables',
        parameters: {
          TransitGatewayRouteTableIds: this.input.transitGatewayRouteTableIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayRouteTables.TransitGatewayRouteTables', props);
    return resource.getResponseField('TransitGatewayRouteTables') as unknown as shapes.Ec2TransitGatewayRouteTable[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayRouteTables.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayRouteTableIds: this.input.transitGatewayRouteTableIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayRouteTables.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTransitGatewayVpcAttachments extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTransitGatewayVpcAttachmentsRequest) {
    super(scope, id);
  }

  public get transitGatewayVpcAttachments(): shapes.Ec2TransitGatewayVpcAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayVpcAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayVpcAttachments.TransitGatewayVpcAttachments'),
        outputPath: 'TransitGatewayVpcAttachments',
        parameters: {
          TransitGatewayAttachmentIds: this.input.transitGatewayAttachmentIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayVpcAttachments.TransitGatewayVpcAttachments', props);
    return resource.getResponseField('TransitGatewayVpcAttachments') as unknown as shapes.Ec2TransitGatewayVpcAttachment[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayVpcAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayVpcAttachments.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentIds: this.input.transitGatewayAttachmentIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGatewayVpcAttachments.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeTransitGateways extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeTransitGatewaysRequest) {
    super(scope, id);
  }

  public get transitGateways(): shapes.Ec2TransitGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGateways.TransitGateways'),
        outputPath: 'TransitGateways',
        parameters: {
          TransitGatewayIds: this.input.transitGatewayIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGateways.TransitGateways', props);
    return resource.getResponseField('TransitGateways') as unknown as shapes.Ec2TransitGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayIds: this.input.transitGatewayIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeTransitGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVolumeAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVolumeAttributeRequest) {
    super(scope, id);
  }

  public get autoEnableIo(): EC2DescribeVolumeAttributeAutoEnableIo {
    return new EC2DescribeVolumeAttributeAutoEnableIo(this, 'AutoEnableIo', this.__resources, this.input);
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeAttribute.ProductCodes'),
        outputPath: 'ProductCodes',
        parameters: {
          Attribute: this.input.attribute,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumeAttribute.ProductCodes', props);
    return resource.getResponseField('ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeAttribute.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          Attribute: this.input.attribute,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumeAttribute.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

}

export class EC2DescribeVolumeAttributeAutoEnableIo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVolumeAttributeRequest) {
    super(scope, id);
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeAttribute.AutoEnableIO.Value'),
        outputPath: 'AutoEnableIO.Value',
        parameters: {
          Attribute: this.input.attribute,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumeAttribute.AutoEnableIO.Value', props);
    return resource.getResponseField('AutoEnableIO.Value') as unknown as boolean;
  }

}

export class EC2DescribeVolumeStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVolumeStatusRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeStatus.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          VolumeIds: this.input.volumeIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumeStatus.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get volumeStatuses(): shapes.Ec2VolumeStatusItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeStatus.VolumeStatuses'),
        outputPath: 'VolumeStatuses',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          VolumeIds: this.input.volumeIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumeStatus.VolumeStatuses', props);
    return resource.getResponseField('VolumeStatuses') as unknown as shapes.Ec2VolumeStatusItem[];
  }

}

export class EC2DescribeVolumes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVolumesRequest) {
    super(scope, id);
  }

  public get volumes(): shapes.Ec2Volume[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumes.Volumes'),
        outputPath: 'Volumes',
        parameters: {
          Filters: this.input.filters,
          VolumeIds: this.input.volumeIds,
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumes.Volumes', props);
    return resource.getResponseField('Volumes') as unknown as shapes.Ec2Volume[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          VolumeIds: this.input.volumeIds,
          DryRun: this.input.dryRun,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVolumesModifications extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVolumesModificationsRequest) {
    super(scope, id);
  }

  public get volumesModifications(): shapes.Ec2VolumeModification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumesModifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumesModifications.VolumesModifications'),
        outputPath: 'VolumesModifications',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeIds: this.input.volumeIds,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumesModifications.VolumesModifications', props);
    return resource.getResponseField('VolumesModifications') as unknown as shapes.Ec2VolumeModification[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumesModifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumesModifications.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeIds: this.input.volumeIds,
          Filters: this.input.filters,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVolumesModifications.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpcAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcAttributeRequest) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcAttribute.VpcId'),
        outputPath: 'VpcId',
        parameters: {
          Attribute: this.input.attribute,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcAttribute.VpcId', props);
    return resource.getResponseField('VpcId') as unknown as string;
  }

  public get enableDnsHostnames(): EC2DescribeVpcAttributeEnableDnsHostnames {
    return new EC2DescribeVpcAttributeEnableDnsHostnames(this, 'EnableDnsHostnames', this.__resources, this.input);
  }

  public get enableDnsSupport(): EC2DescribeVpcAttributeEnableDnsSupport {
    return new EC2DescribeVpcAttributeEnableDnsSupport(this, 'EnableDnsSupport', this.__resources, this.input);
  }

}

export class EC2DescribeVpcAttributeEnableDnsHostnames extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcAttributeRequest) {
    super(scope, id);
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcAttribute.EnableDnsHostnames.Value'),
        outputPath: 'EnableDnsHostnames.Value',
        parameters: {
          Attribute: this.input.attribute,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcAttribute.EnableDnsHostnames.Value', props);
    return resource.getResponseField('EnableDnsHostnames.Value') as unknown as boolean;
  }

}

export class EC2DescribeVpcAttributeEnableDnsSupport extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcAttributeRequest) {
    super(scope, id);
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcAttribute.EnableDnsSupport.Value'),
        outputPath: 'EnableDnsSupport.Value',
        parameters: {
          Attribute: this.input.attribute,
          VpcId: this.input.vpcId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcAttribute.EnableDnsSupport.Value', props);
    return resource.getResponseField('EnableDnsSupport.Value') as unknown as boolean;
  }

}

export class EC2DescribeVpcClassicLink extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcClassicLinkRequest) {
    super(scope, id);
  }

  public get vpcs(): shapes.Ec2VpcClassicLink[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcClassicLink',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcClassicLink.Vpcs'),
        outputPath: 'Vpcs',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          VpcIds: this.input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcClassicLink.Vpcs', props);
    return resource.getResponseField('Vpcs') as unknown as shapes.Ec2VpcClassicLink[];
  }

}

export class EC2DescribeVpcClassicLinkDnsSupport extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcClassicLinkDnsSupportRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcClassicLinkDnsSupport',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcClassicLinkDnsSupport.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          VpcIds: this.input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcClassicLinkDnsSupport.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get vpcs(): shapes.Ec2ClassicLinkDnsSupport[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcClassicLinkDnsSupport',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcClassicLinkDnsSupport.Vpcs'),
        outputPath: 'Vpcs',
        parameters: {
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          VpcIds: this.input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcClassicLinkDnsSupport.Vpcs', props);
    return resource.getResponseField('Vpcs') as unknown as shapes.Ec2ClassicLinkDnsSupport[];
  }

}

export class EC2DescribeVpcEndpointConnectionNotifications extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcEndpointConnectionNotificationsRequest) {
    super(scope, id);
  }

  public get connectionNotificationSet(): shapes.Ec2ConnectionNotification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointConnectionNotifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointConnectionNotifications.ConnectionNotificationSet'),
        outputPath: 'ConnectionNotificationSet',
        parameters: {
          DryRun: this.input.dryRun,
          ConnectionNotificationId: this.input.connectionNotificationId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointConnectionNotifications.ConnectionNotificationSet', props);
    return resource.getResponseField('ConnectionNotificationSet') as unknown as shapes.Ec2ConnectionNotification[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointConnectionNotifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointConnectionNotifications.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          ConnectionNotificationId: this.input.connectionNotificationId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointConnectionNotifications.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpcEndpointConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcEndpointConnectionsRequest) {
    super(scope, id);
  }

  public get vpcEndpointConnections(): shapes.Ec2VpcEndpointConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointConnections.VpcEndpointConnections'),
        outputPath: 'VpcEndpointConnections',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointConnections.VpcEndpointConnections', props);
    return resource.getResponseField('VpcEndpointConnections') as unknown as shapes.Ec2VpcEndpointConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpcEndpointServiceConfigurations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcEndpointServiceConfigurationsRequest) {
    super(scope, id);
  }

  public get serviceConfigurations(): shapes.Ec2ServiceConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServiceConfigurations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServiceConfigurations.ServiceConfigurations'),
        outputPath: 'ServiceConfigurations',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceIds: this.input.serviceIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointServiceConfigurations.ServiceConfigurations', props);
    return resource.getResponseField('ServiceConfigurations') as unknown as shapes.Ec2ServiceConfiguration[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServiceConfigurations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServiceConfigurations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceIds: this.input.serviceIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointServiceConfigurations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpcEndpointServicePermissions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcEndpointServicePermissionsRequest) {
    super(scope, id);
  }

  public get allowedPrincipals(): shapes.Ec2AllowedPrincipal[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServicePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServicePermissions.AllowedPrincipals'),
        outputPath: 'AllowedPrincipals',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointServicePermissions.AllowedPrincipals', props);
    return resource.getResponseField('AllowedPrincipals') as unknown as shapes.Ec2AllowedPrincipal[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServicePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServicePermissions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointServicePermissions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpcEndpointServices extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcEndpointServicesRequest) {
    super(scope, id);
  }

  public get serviceNames(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServices.ServiceNames'),
        outputPath: 'ServiceNames',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceNames: this.input.serviceNames,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointServices.ServiceNames', props);
    return resource.getResponseField('ServiceNames') as unknown as string[];
  }

  public get serviceDetails(): shapes.Ec2ServiceDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServices.ServiceDetails'),
        outputPath: 'ServiceDetails',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceNames: this.input.serviceNames,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointServices.ServiceDetails', props);
    return resource.getResponseField('ServiceDetails') as unknown as shapes.Ec2ServiceDetail[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServices.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceNames: this.input.serviceNames,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpointServices.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpcEndpoints extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcEndpointsRequest) {
    super(scope, id);
  }

  public get vpcEndpoints(): shapes.Ec2VpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpoints.VpcEndpoints'),
        outputPath: 'VpcEndpoints',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointIds: this.input.vpcEndpointIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpoints.VpcEndpoints', props);
    return resource.getResponseField('VpcEndpoints') as unknown as shapes.Ec2VpcEndpoint[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpoints.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointIds: this.input.vpcEndpointIds,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcEndpoints.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpcPeeringConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcPeeringConnectionsRequest) {
    super(scope, id);
  }

  public get vpcPeeringConnections(): shapes.Ec2VpcPeeringConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcPeeringConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcPeeringConnections.VpcPeeringConnections'),
        outputPath: 'VpcPeeringConnections',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          VpcPeeringConnectionIds: this.input.vpcPeeringConnectionIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcPeeringConnections.VpcPeeringConnections', props);
    return resource.getResponseField('VpcPeeringConnections') as unknown as shapes.Ec2VpcPeeringConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcPeeringConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcPeeringConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          DryRun: this.input.dryRun,
          VpcPeeringConnectionIds: this.input.vpcPeeringConnectionIds,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcPeeringConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpcs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpcsRequest) {
    super(scope, id);
  }

  public get vpcs(): shapes.Ec2Vpc[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcs.Vpcs'),
        outputPath: 'Vpcs',
        parameters: {
          Filters: this.input.filters,
          VpcIds: this.input.vpcIds,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcs.Vpcs', props);
    return resource.getResponseField('Vpcs') as unknown as shapes.Ec2Vpc[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          VpcIds: this.input.vpcIds,
          DryRun: this.input.dryRun,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpcs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2DescribeVpnConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpnConnectionsRequest) {
    super(scope, id);
  }

  public get vpnConnections(): shapes.Ec2VpnConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpnConnections.VpnConnections'),
        outputPath: 'VpnConnections',
        parameters: {
          Filters: this.input.filters,
          VpnConnectionIds: this.input.vpnConnectionIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpnConnections.VpnConnections', props);
    return resource.getResponseField('VpnConnections') as unknown as shapes.Ec2VpnConnection[];
  }

}

export class EC2DescribeVpnGateways extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DescribeVpnGatewaysRequest) {
    super(scope, id);
  }

  public get vpnGateways(): shapes.Ec2VpnGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpnGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpnGateways.VpnGateways'),
        outputPath: 'VpnGateways',
        parameters: {
          Filters: this.input.filters,
          VpnGatewayIds: this.input.vpnGatewayIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeVpnGateways.VpnGateways', props);
    return resource.getResponseField('VpnGateways') as unknown as shapes.Ec2VpnGateway[];
  }

}

export class EC2DetachClassicLinkVpc extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DetachClassicLinkVpcRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachClassicLinkVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachClassicLinkVpc.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          VpcId: this.input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DetachClassicLinkVpc.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2DetachVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DetachVolumeRequest) {
    super(scope, id);
  }

  public get attachTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.AttachTime'),
        outputPath: 'AttachTime',
        parameters: {
          Device: this.input.device,
          Force: this.input.force,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DetachVolume.AttachTime', props);
    return resource.getResponseField('AttachTime') as unknown as string;
  }

  public get device(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.Device'),
        outputPath: 'Device',
        parameters: {
          Device: this.input.device,
          Force: this.input.force,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DetachVolume.Device', props);
    return resource.getResponseField('Device') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          Device: this.input.device,
          Force: this.input.force,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DetachVolume.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.State'),
        outputPath: 'State',
        parameters: {
          Device: this.input.device,
          Force: this.input.force,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DetachVolume.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          Device: this.input.device,
          Force: this.input.force,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DetachVolume.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

  public get deleteOnTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.DeleteOnTermination'),
        outputPath: 'DeleteOnTermination',
        parameters: {
          Device: this.input.device,
          Force: this.input.force,
          InstanceId: this.input.instanceId,
          VolumeId: this.input.volumeId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DetachVolume.DeleteOnTermination', props);
    return resource.getResponseField('DeleteOnTermination') as unknown as boolean;
  }

}

export class EC2DisableEbsEncryptionByDefault extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisableEbsEncryptionByDefaultRequest) {
    super(scope, id);
  }

  public get ebsEncryptionByDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableEbsEncryptionByDefault',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableEbsEncryptionByDefault.EbsEncryptionByDefault'),
        outputPath: 'EbsEncryptionByDefault',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableEbsEncryptionByDefault.EbsEncryptionByDefault', props);
    return resource.getResponseField('EbsEncryptionByDefault') as unknown as boolean;
  }

}

export class EC2DisableFastSnapshotRestores extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisableFastSnapshotRestoresRequest) {
    super(scope, id);
  }

  public get successful(): shapes.Ec2DisableFastSnapshotRestoreSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableFastSnapshotRestores.Successful'),
        outputPath: 'Successful',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          SourceSnapshotIds: this.input.sourceSnapshotIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableFastSnapshotRestores.Successful', props);
    return resource.getResponseField('Successful') as unknown as shapes.Ec2DisableFastSnapshotRestoreSuccessItem[];
  }

  public get unsuccessful(): shapes.Ec2DisableFastSnapshotRestoreErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableFastSnapshotRestores.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          SourceSnapshotIds: this.input.sourceSnapshotIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableFastSnapshotRestores.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2DisableFastSnapshotRestoreErrorItem[];
  }

}

export class EC2DisableTransitGatewayRouteTablePropagation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisableTransitGatewayRouteTablePropagationRequest) {
    super(scope, id);
  }

  public get propagation(): EC2DisableTransitGatewayRouteTablePropagationPropagation {
    return new EC2DisableTransitGatewayRouteTablePropagationPropagation(this, 'Propagation', this.__resources, this.input);
  }

}

export class EC2DisableTransitGatewayRouteTablePropagationPropagation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisableTransitGatewayRouteTablePropagationRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayAttachmentId'),
        outputPath: 'Propagation.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Propagation.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.ResourceId'),
        outputPath: 'Propagation.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableTransitGatewayRouteTablePropagation.Propagation.ResourceId', props);
    return resource.getResponseField('Propagation.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.ResourceType'),
        outputPath: 'Propagation.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableTransitGatewayRouteTablePropagation.Propagation.ResourceType', props);
    return resource.getResponseField('Propagation.ResourceType') as unknown as string;
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayRouteTableId'),
        outputPath: 'Propagation.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayRouteTableId', props);
    return resource.getResponseField('Propagation.TransitGatewayRouteTableId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.State'),
        outputPath: 'Propagation.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableTransitGatewayRouteTablePropagation.Propagation.State', props);
    return resource.getResponseField('Propagation.State') as unknown as string;
  }

}

export class EC2DisableVpcClassicLink extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisableVpcClassicLinkRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableVpcClassicLink',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableVpcClassicLink.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableVpcClassicLink.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2DisableVpcClassicLinkDnsSupport extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisableVpcClassicLinkDnsSupportRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableVpcClassicLinkDnsSupport',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableVpcClassicLinkDnsSupport.Return'),
        outputPath: 'Return',
        parameters: {
          VpcId: this.input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisableVpcClassicLinkDnsSupport.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2DisassociateClientVpnTargetNetwork extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateClientVpnTargetNetworkRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateClientVpnTargetNetwork.AssociationId'),
        outputPath: 'AssociationId',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          AssociationId: this.input.associationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateClientVpnTargetNetwork.AssociationId', props);
    return resource.getResponseField('AssociationId') as unknown as string;
  }

  public get status(): EC2DisassociateClientVpnTargetNetworkStatus {
    return new EC2DisassociateClientVpnTargetNetworkStatus(this, 'Status', this.__resources, this.input);
  }

}

export class EC2DisassociateClientVpnTargetNetworkStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateClientVpnTargetNetworkRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateClientVpnTargetNetwork.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          AssociationId: this.input.associationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateClientVpnTargetNetwork.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateClientVpnTargetNetwork.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          AssociationId: this.input.associationId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateClientVpnTargetNetwork.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2DisassociateEnclaveCertificateIamRole extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateEnclaveCertificateIamRoleRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateEnclaveCertificateIamRole',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateEnclaveCertificateIamRole.Return'),
        outputPath: 'Return',
        parameters: {
          CertificateArn: this.input.certificateArn,
          RoleArn: this.input.roleArn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateEnclaveCertificateIamRole.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2DisassociateIamInstanceProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateIamInstanceProfileRequest) {
    super(scope, id);
  }

  public get iamInstanceProfileAssociation(): EC2DisassociateIamInstanceProfileIamInstanceProfileAssociation {
    return new EC2DisassociateIamInstanceProfileIamInstanceProfileAssociation(this, 'IamInstanceProfileAssociation', this.__resources, this.input);
  }

}

export class EC2DisassociateIamInstanceProfileIamInstanceProfileAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateIamInstanceProfileRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.AssociationId'),
        outputPath: 'IamInstanceProfileAssociation.AssociationId',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.AssociationId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.AssociationId') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.InstanceId'),
        outputPath: 'IamInstanceProfileAssociation.InstanceId',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.InstanceId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.InstanceId') as unknown as string;
  }

  public get iamInstanceProfile(): EC2DisassociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile {
    return new EC2DisassociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile(this, 'IamInstanceProfile', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.State'),
        outputPath: 'IamInstanceProfileAssociation.State',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.State', props);
    return resource.getResponseField('IamInstanceProfileAssociation.State') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.Timestamp'),
        outputPath: 'IamInstanceProfileAssociation.Timestamp',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.Timestamp', props);
    return resource.getResponseField('IamInstanceProfileAssociation.Timestamp') as unknown as string;
  }

}

export class EC2DisassociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateIamInstanceProfileRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Arn'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Arn',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Arn', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Id'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Id',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Id', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Id') as unknown as string;
  }

}

export class EC2DisassociateSubnetCidrBlock extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateSubnetCidrBlockRequest) {
    super(scope, id);
  }

  public get ipv6CidrBlockAssociation(): EC2DisassociateSubnetCidrBlockIpv6CidrBlockAssociation {
    return new EC2DisassociateSubnetCidrBlockIpv6CidrBlockAssociation(this, 'Ipv6CidrBlockAssociation', this.__resources, this.input);
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.SubnetId'),
        outputPath: 'SubnetId',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateSubnetCidrBlock.SubnetId', props);
    return resource.getResponseField('SubnetId') as unknown as string;
  }

}

export class EC2DisassociateSubnetCidrBlockIpv6CidrBlockAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateSubnetCidrBlockRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.AssociationId'),
        outputPath: 'Ipv6CidrBlockAssociation.AssociationId',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get ipv6CidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlock',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockState(): EC2DisassociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {
    return new EC2DisassociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState(this, 'Ipv6CidrBlockState', this.__resources, this.input);
  }

}

export class EC2DisassociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateSubnetCidrBlockRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2DisassociateTransitGatewayMulticastDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateTransitGatewayMulticastDomainRequest) {
    super(scope, id);
  }

  public get associations(): EC2DisassociateTransitGatewayMulticastDomainAssociations {
    return new EC2DisassociateTransitGatewayMulticastDomainAssociations(this, 'Associations', this.__resources, this.input);
  }

}

export class EC2DisassociateTransitGatewayMulticastDomainAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateTransitGatewayMulticastDomainRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.TransitGatewayMulticastDomainId'),
        outputPath: 'Associations.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayMulticastDomain.Associations.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('Associations.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.TransitGatewayAttachmentId'),
        outputPath: 'Associations.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayMulticastDomain.Associations.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Associations.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.ResourceId'),
        outputPath: 'Associations.ResourceId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayMulticastDomain.Associations.ResourceId', props);
    return resource.getResponseField('Associations.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.ResourceType'),
        outputPath: 'Associations.ResourceType',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayMulticastDomain.Associations.ResourceType', props);
    return resource.getResponseField('Associations.ResourceType') as unknown as string;
  }

  public get subnets(): shapes.Ec2SubnetAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.Subnets'),
        outputPath: 'Associations.Subnets',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          SubnetIds: this.input.subnetIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayMulticastDomain.Associations.Subnets', props);
    return resource.getResponseField('Associations.Subnets') as unknown as shapes.Ec2SubnetAssociation[];
  }

}

export class EC2DisassociateTransitGatewayRouteTable extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateTransitGatewayRouteTableRequest) {
    super(scope, id);
  }

  public get association(): EC2DisassociateTransitGatewayRouteTableAssociation {
    return new EC2DisassociateTransitGatewayRouteTableAssociation(this, 'Association', this.__resources, this.input);
  }

}

export class EC2DisassociateTransitGatewayRouteTableAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateTransitGatewayRouteTableRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.TransitGatewayRouteTableId'),
        outputPath: 'Association.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayRouteTable.Association.TransitGatewayRouteTableId', props);
    return resource.getResponseField('Association.TransitGatewayRouteTableId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.TransitGatewayAttachmentId'),
        outputPath: 'Association.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayRouteTable.Association.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Association.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.ResourceId'),
        outputPath: 'Association.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayRouteTable.Association.ResourceId', props);
    return resource.getResponseField('Association.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.ResourceType'),
        outputPath: 'Association.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayRouteTable.Association.ResourceType', props);
    return resource.getResponseField('Association.ResourceType') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.State'),
        outputPath: 'Association.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateTransitGatewayRouteTable.Association.State', props);
    return resource.getResponseField('Association.State') as unknown as string;
  }

}

export class EC2DisassociateVpcCidrBlock extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get ipv6CidrBlockAssociation(): EC2DisassociateVpcCidrBlockIpv6CidrBlockAssociation {
    return new EC2DisassociateVpcCidrBlockIpv6CidrBlockAssociation(this, 'Ipv6CidrBlockAssociation', this.__resources, this.input);
  }

  public get cidrBlockAssociation(): EC2DisassociateVpcCidrBlockCidrBlockAssociation {
    return new EC2DisassociateVpcCidrBlockCidrBlockAssociation(this, 'CidrBlockAssociation', this.__resources, this.input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.VpcId'),
        outputPath: 'VpcId',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.VpcId', props);
    return resource.getResponseField('VpcId') as unknown as string;
  }

}

export class EC2DisassociateVpcCidrBlockIpv6CidrBlockAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.AssociationId'),
        outputPath: 'Ipv6CidrBlockAssociation.AssociationId',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get ipv6CidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlock',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockState(): EC2DisassociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {
    return new EC2DisassociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState(this, 'Ipv6CidrBlockState', this.__resources, this.input);
  }

  public get networkBorderGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.NetworkBorderGroup'),
        outputPath: 'Ipv6CidrBlockAssociation.NetworkBorderGroup',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.NetworkBorderGroup', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.NetworkBorderGroup') as unknown as string;
  }

  public get ipv6Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6Pool'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6Pool',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6Pool', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6Pool') as unknown as string;
  }

}

export class EC2DisassociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2DisassociateVpcCidrBlockCidrBlockAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.CidrBlockAssociation.AssociationId'),
        outputPath: 'CidrBlockAssociation.AssociationId',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlock'),
        outputPath: 'CidrBlockAssociation.CidrBlock',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlock', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlock') as unknown as string;
  }

  public get cidrBlockState(): EC2DisassociateVpcCidrBlockCidrBlockAssociationCidrBlockState {
    return new EC2DisassociateVpcCidrBlockCidrBlockAssociationCidrBlockState(this, 'CidrBlockState', this.__resources, this.input);
  }

}

export class EC2DisassociateVpcCidrBlockCidrBlockAssociationCidrBlockState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.State'),
        outputPath: 'CidrBlockAssociation.CidrBlockState.State',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.State', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.StatusMessage'),
        outputPath: 'CidrBlockAssociation.CidrBlockState.StatusMessage',
        parameters: {
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.StatusMessage', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2EnableEbsEncryptionByDefault extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2EnableEbsEncryptionByDefaultRequest) {
    super(scope, id);
  }

  public get ebsEncryptionByDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableEbsEncryptionByDefault',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableEbsEncryptionByDefault.EbsEncryptionByDefault'),
        outputPath: 'EbsEncryptionByDefault',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableEbsEncryptionByDefault.EbsEncryptionByDefault', props);
    return resource.getResponseField('EbsEncryptionByDefault') as unknown as boolean;
  }

}

export class EC2EnableFastSnapshotRestores extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2EnableFastSnapshotRestoresRequest) {
    super(scope, id);
  }

  public get successful(): shapes.Ec2EnableFastSnapshotRestoreSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableFastSnapshotRestores.Successful'),
        outputPath: 'Successful',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          SourceSnapshotIds: this.input.sourceSnapshotIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableFastSnapshotRestores.Successful', props);
    return resource.getResponseField('Successful') as unknown as shapes.Ec2EnableFastSnapshotRestoreSuccessItem[];
  }

  public get unsuccessful(): shapes.Ec2EnableFastSnapshotRestoreErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableFastSnapshotRestores.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          SourceSnapshotIds: this.input.sourceSnapshotIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableFastSnapshotRestores.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2EnableFastSnapshotRestoreErrorItem[];
  }

}

export class EC2EnableTransitGatewayRouteTablePropagation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2EnableTransitGatewayRouteTablePropagationRequest) {
    super(scope, id);
  }

  public get propagation(): EC2EnableTransitGatewayRouteTablePropagationPropagation {
    return new EC2EnableTransitGatewayRouteTablePropagationPropagation(this, 'Propagation', this.__resources, this.input);
  }

}

export class EC2EnableTransitGatewayRouteTablePropagationPropagation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2EnableTransitGatewayRouteTablePropagationRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayAttachmentId'),
        outputPath: 'Propagation.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Propagation.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.ResourceId'),
        outputPath: 'Propagation.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableTransitGatewayRouteTablePropagation.Propagation.ResourceId', props);
    return resource.getResponseField('Propagation.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.ResourceType'),
        outputPath: 'Propagation.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableTransitGatewayRouteTablePropagation.Propagation.ResourceType', props);
    return resource.getResponseField('Propagation.ResourceType') as unknown as string;
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayRouteTableId'),
        outputPath: 'Propagation.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayRouteTableId', props);
    return resource.getResponseField('Propagation.TransitGatewayRouteTableId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.State'),
        outputPath: 'Propagation.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableTransitGatewayRouteTablePropagation.Propagation.State', props);
    return resource.getResponseField('Propagation.State') as unknown as string;
  }

}

export class EC2EnableVpcClassicLink extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2EnableVpcClassicLinkRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableVpcClassicLink',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableVpcClassicLink.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          VpcId: this.input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableVpcClassicLink.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2EnableVpcClassicLinkDnsSupport extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2EnableVpcClassicLinkDnsSupportRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableVpcClassicLinkDnsSupport',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableVpcClassicLinkDnsSupport.Return'),
        outputPath: 'Return',
        parameters: {
          VpcId: this.input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'EnableVpcClassicLinkDnsSupport.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ExportClientVpnClientCertificateRevocationList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ExportClientVpnClientCertificateRevocationListRequest) {
    super(scope, id);
  }

  public get certificateRevocationList(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportClientVpnClientCertificateRevocationList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportClientVpnClientCertificateRevocationList.CertificateRevocationList'),
        outputPath: 'CertificateRevocationList',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportClientVpnClientCertificateRevocationList.CertificateRevocationList', props);
    return resource.getResponseField('CertificateRevocationList') as unknown as string;
  }

  public get status(): EC2ExportClientVpnClientCertificateRevocationListStatus {
    return new EC2ExportClientVpnClientCertificateRevocationListStatus(this, 'Status', this.__resources, this.input);
  }

}

export class EC2ExportClientVpnClientCertificateRevocationListStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ExportClientVpnClientCertificateRevocationListRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportClientVpnClientCertificateRevocationList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportClientVpnClientCertificateRevocationList.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportClientVpnClientCertificateRevocationList.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportClientVpnClientCertificateRevocationList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportClientVpnClientCertificateRevocationList.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportClientVpnClientCertificateRevocationList.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ExportClientVpnClientConfiguration extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ExportClientVpnClientConfigurationRequest) {
    super(scope, id);
  }

  public get clientConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportClientVpnClientConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportClientVpnClientConfiguration.ClientConfiguration'),
        outputPath: 'ClientConfiguration',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportClientVpnClientConfiguration.ClientConfiguration', props);
    return resource.getResponseField('ClientConfiguration') as unknown as string;
  }

}

export class EC2ExportImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ExportImageRequest) {
    super(scope, id);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.Description'),
        outputPath: 'Description',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get diskImageFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.DiskImageFormat'),
        outputPath: 'DiskImageFormat',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.DiskImageFormat', props);
    return resource.getResponseField('DiskImageFormat') as unknown as string;
  }

  public get exportImageTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.ExportImageTaskId'),
        outputPath: 'ExportImageTaskId',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.ExportImageTaskId', props);
    return resource.getResponseField('ExportImageTaskId') as unknown as string;
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

  public get roleName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.RoleName'),
        outputPath: 'RoleName',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.RoleName', props);
    return resource.getResponseField('RoleName') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.Progress'),
        outputPath: 'Progress',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.Progress', props);
    return resource.getResponseField('Progress') as unknown as string;
  }

  public get s3ExportLocation(): EC2ExportImageS3ExportLocation {
    return new EC2ExportImageS3ExportLocation(this, 'S3ExportLocation', this.__resources, this.input);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.Status'),
        outputPath: 'Status',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.StatusMessage'),
        outputPath: 'StatusMessage',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.StatusMessage', props);
    return resource.getResponseField('StatusMessage') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.Tags'),
        outputPath: 'Tags',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ExportImageS3ExportLocation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ExportImageRequest) {
    super(scope, id);
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.S3ExportLocation.S3Bucket'),
        outputPath: 'S3ExportLocation.S3Bucket',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.S3ExportLocation.S3Bucket', props);
    return resource.getResponseField('S3ExportLocation.S3Bucket') as unknown as string;
  }

  public get s3Prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.S3ExportLocation.S3Prefix'),
        outputPath: 'S3ExportLocation.S3Prefix',
        parameters: {
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskImageFormat: this.input.diskImageFormat,
          DryRun: this.input.dryRun,
          ImageId: this.input.imageId,
          S3ExportLocation: {
            S3Bucket: this.input.s3ExportLocation.s3Bucket,
            S3Prefix: this.input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportImage.S3ExportLocation.S3Prefix', props);
    return resource.getResponseField('S3ExportLocation.S3Prefix') as unknown as string;
  }

}

export class EC2ExportTransitGatewayRoutes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ExportTransitGatewayRoutesRequest) {
    super(scope, id);
  }

  public get s3Location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportTransitGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportTransitGatewayRoutes.S3Location'),
        outputPath: 'S3Location',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          S3Bucket: this.input.s3Bucket,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ExportTransitGatewayRoutes.S3Location', props);
    return resource.getResponseField('S3Location') as unknown as string;
  }

}

export class EC2FetchAssociatedEnclaveCertificateIamRoles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetAssociatedEnclaveCertificateIamRolesRequest) {
    super(scope, id);
  }

  public get associatedRoles(): shapes.Ec2AssociatedRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getAssociatedEnclaveCertificateIamRoles',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetAssociatedEnclaveCertificateIamRoles.AssociatedRoles'),
        outputPath: 'AssociatedRoles',
        parameters: {
          CertificateArn: this.input.certificateArn,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetAssociatedEnclaveCertificateIamRoles.AssociatedRoles', props);
    return resource.getResponseField('AssociatedRoles') as unknown as shapes.Ec2AssociatedRole[];
  }

}

export class EC2FetchAssociatedIpv6PoolCidrs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetAssociatedIpv6PoolCidrsRequest) {
    super(scope, id);
  }

  public get ipv6CidrAssociations(): shapes.Ec2Ipv6CidrAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getAssociatedIpv6PoolCidrs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetAssociatedIpv6PoolCidrs.Ipv6CidrAssociations'),
        outputPath: 'Ipv6CidrAssociations',
        parameters: {
          PoolId: this.input.poolId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetAssociatedIpv6PoolCidrs.Ipv6CidrAssociations', props);
    return resource.getResponseField('Ipv6CidrAssociations') as unknown as shapes.Ec2Ipv6CidrAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getAssociatedIpv6PoolCidrs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetAssociatedIpv6PoolCidrs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PoolId: this.input.poolId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetAssociatedIpv6PoolCidrs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2FetchCapacityReservationUsage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetCapacityReservationUsageRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCapacityReservationUsage.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get capacityReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.CapacityReservationId'),
        outputPath: 'CapacityReservationId',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCapacityReservationUsage.CapacityReservationId', props);
    return resource.getResponseField('CapacityReservationId') as unknown as string;
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.InstanceType'),
        outputPath: 'InstanceType',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCapacityReservationUsage.InstanceType', props);
    return resource.getResponseField('InstanceType') as unknown as string;
  }

  public get totalInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.TotalInstanceCount'),
        outputPath: 'TotalInstanceCount',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCapacityReservationUsage.TotalInstanceCount', props);
    return resource.getResponseField('TotalInstanceCount') as unknown as number;
  }

  public get availableInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.AvailableInstanceCount'),
        outputPath: 'AvailableInstanceCount',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCapacityReservationUsage.AvailableInstanceCount', props);
    return resource.getResponseField('AvailableInstanceCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.State'),
        outputPath: 'State',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCapacityReservationUsage.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get instanceUsages(): shapes.Ec2InstanceUsage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.InstanceUsages'),
        outputPath: 'InstanceUsages',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCapacityReservationUsage.InstanceUsages', props);
    return resource.getResponseField('InstanceUsages') as unknown as shapes.Ec2InstanceUsage[];
  }

}

export class EC2FetchCoipPoolUsage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetCoipPoolUsageRequest) {
    super(scope, id);
  }

  public get coipPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCoipPoolUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCoipPoolUsage.CoipPoolId'),
        outputPath: 'CoipPoolId',
        parameters: {
          PoolId: this.input.poolId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCoipPoolUsage.CoipPoolId', props);
    return resource.getResponseField('CoipPoolId') as unknown as string;
  }

  public get coipAddressUsages(): shapes.Ec2CoipAddressUsage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCoipPoolUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCoipPoolUsage.CoipAddressUsages'),
        outputPath: 'CoipAddressUsages',
        parameters: {
          PoolId: this.input.poolId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCoipPoolUsage.CoipAddressUsages', props);
    return resource.getResponseField('CoipAddressUsages') as unknown as shapes.Ec2CoipAddressUsage[];
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCoipPoolUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCoipPoolUsage.LocalGatewayRouteTableId'),
        outputPath: 'LocalGatewayRouteTableId',
        parameters: {
          PoolId: this.input.poolId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCoipPoolUsage.LocalGatewayRouteTableId', props);
    return resource.getResponseField('LocalGatewayRouteTableId') as unknown as string;
  }

}

export class EC2FetchConsoleOutput extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetConsoleOutputRequest) {
    super(scope, id);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleOutput',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleOutput.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          InstanceId: this.input.instanceId,
          DryRun: this.input.dryRun,
          Latest: this.input.latest,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetConsoleOutput.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get output(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleOutput',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleOutput.Output'),
        outputPath: 'Output',
        parameters: {
          InstanceId: this.input.instanceId,
          DryRun: this.input.dryRun,
          Latest: this.input.latest,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetConsoleOutput.Output', props);
    return resource.getResponseField('Output') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleOutput',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleOutput.Timestamp'),
        outputPath: 'Timestamp',
        parameters: {
          InstanceId: this.input.instanceId,
          DryRun: this.input.dryRun,
          Latest: this.input.latest,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetConsoleOutput.Timestamp', props);
    return resource.getResponseField('Timestamp') as unknown as string;
  }

}

export class EC2FetchConsoleScreenshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetConsoleScreenshotRequest) {
    super(scope, id);
  }

  public get imageData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleScreenshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleScreenshot.ImageData'),
        outputPath: 'ImageData',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          WakeUp: this.input.wakeUp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetConsoleScreenshot.ImageData', props);
    return resource.getResponseField('ImageData') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleScreenshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleScreenshot.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          WakeUp: this.input.wakeUp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetConsoleScreenshot.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

}

export class EC2FetchDefaultCreditSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetDefaultCreditSpecificationRequest) {
    super(scope, id);
  }

  public get instanceFamilyCreditSpecification(): EC2FetchDefaultCreditSpecificationInstanceFamilyCreditSpecification {
    return new EC2FetchDefaultCreditSpecificationInstanceFamilyCreditSpecification(this, 'InstanceFamilyCreditSpecification', this.__resources, this.input);
  }

}

export class EC2FetchDefaultCreditSpecificationInstanceFamilyCreditSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetDefaultCreditSpecificationRequest) {
    super(scope, id);
  }

  public get instanceFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDefaultCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetDefaultCreditSpecification.InstanceFamilyCreditSpecification.InstanceFamily'),
        outputPath: 'InstanceFamilyCreditSpecification.InstanceFamily',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceFamily: this.input.instanceFamily,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDefaultCreditSpecification.InstanceFamilyCreditSpecification.InstanceFamily', props);
    return resource.getResponseField('InstanceFamilyCreditSpecification.InstanceFamily') as unknown as string;
  }

  public get cpuCredits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDefaultCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetDefaultCreditSpecification.InstanceFamilyCreditSpecification.CpuCredits'),
        outputPath: 'InstanceFamilyCreditSpecification.CpuCredits',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceFamily: this.input.instanceFamily,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDefaultCreditSpecification.InstanceFamilyCreditSpecification.CpuCredits', props);
    return resource.getResponseField('InstanceFamilyCreditSpecification.CpuCredits') as unknown as string;
  }

}

export class EC2FetchEbsDefaultKmsKeyId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetEbsDefaultKmsKeyIdRequest) {
    super(scope, id);
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getEbsDefaultKmsKeyId',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetEbsDefaultKmsKeyId.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetEbsDefaultKmsKeyId.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

}

export class EC2FetchEbsEncryptionByDefault extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetEbsEncryptionByDefaultRequest) {
    super(scope, id);
  }

  public get ebsEncryptionByDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getEbsEncryptionByDefault',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetEbsEncryptionByDefault.EbsEncryptionByDefault'),
        outputPath: 'EbsEncryptionByDefault',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetEbsEncryptionByDefault.EbsEncryptionByDefault', props);
    return resource.getResponseField('EbsEncryptionByDefault') as unknown as boolean;
  }

}

export class EC2FetchGroupsForCapacityReservation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetGroupsForCapacityReservationRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getGroupsForCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetGroupsForCapacityReservation.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetGroupsForCapacityReservation.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get capacityReservationGroups(): shapes.Ec2CapacityReservationGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getGroupsForCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetGroupsForCapacityReservation.CapacityReservationGroups'),
        outputPath: 'CapacityReservationGroups',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          NextToken: this.input.nextToken,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetGroupsForCapacityReservation.CapacityReservationGroups', props);
    return resource.getResponseField('CapacityReservationGroups') as unknown as shapes.Ec2CapacityReservationGroup[];
  }

}

export class EC2FetchHostReservationPurchasePreview extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetHostReservationPurchasePreviewRequest) {
    super(scope, id);
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getHostReservationPurchasePreview',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetHostReservationPurchasePreview.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          HostIdSet: this.input.hostIdSet,
          OfferingId: this.input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetHostReservationPurchasePreview.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get purchase(): shapes.Ec2Purchase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getHostReservationPurchasePreview',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetHostReservationPurchasePreview.Purchase'),
        outputPath: 'Purchase',
        parameters: {
          HostIdSet: this.input.hostIdSet,
          OfferingId: this.input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetHostReservationPurchasePreview.Purchase', props);
    return resource.getResponseField('Purchase') as unknown as shapes.Ec2Purchase[];
  }

  public get totalHourlyPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getHostReservationPurchasePreview',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetHostReservationPurchasePreview.TotalHourlyPrice'),
        outputPath: 'TotalHourlyPrice',
        parameters: {
          HostIdSet: this.input.hostIdSet,
          OfferingId: this.input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetHostReservationPurchasePreview.TotalHourlyPrice', props);
    return resource.getResponseField('TotalHourlyPrice') as unknown as string;
  }

  public get totalUpfrontPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getHostReservationPurchasePreview',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetHostReservationPurchasePreview.TotalUpfrontPrice'),
        outputPath: 'TotalUpfrontPrice',
        parameters: {
          HostIdSet: this.input.hostIdSet,
          OfferingId: this.input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetHostReservationPurchasePreview.TotalUpfrontPrice', props);
    return resource.getResponseField('TotalUpfrontPrice') as unknown as string;
  }

}

export class EC2FetchLaunchTemplateData extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get launchTemplateData(): EC2FetchLaunchTemplateDataLaunchTemplateData {
    return new EC2FetchLaunchTemplateDataLaunchTemplateData(this, 'LaunchTemplateData', this.__resources, this.input);
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateData extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get kernelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.KernelId'),
        outputPath: 'LaunchTemplateData.KernelId',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.KernelId', props);
    return resource.getResponseField('LaunchTemplateData.KernelId') as unknown as string;
  }

  public get ebsOptimized(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.EbsOptimized'),
        outputPath: 'LaunchTemplateData.EbsOptimized',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.EbsOptimized', props);
    return resource.getResponseField('LaunchTemplateData.EbsOptimized') as unknown as boolean;
  }

  public get iamInstanceProfile(): EC2FetchLaunchTemplateDataLaunchTemplateDataIamInstanceProfile {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataIamInstanceProfile(this, 'IamInstanceProfile', this.__resources, this.input);
  }

  public get blockDeviceMappings(): shapes.Ec2LaunchTemplateBlockDeviceMapping[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.BlockDeviceMappings'),
        outputPath: 'LaunchTemplateData.BlockDeviceMappings',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.BlockDeviceMappings', props);
    return resource.getResponseField('LaunchTemplateData.BlockDeviceMappings') as unknown as shapes.Ec2LaunchTemplateBlockDeviceMapping[];
  }

  public get networkInterfaces(): shapes.Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.NetworkInterfaces'),
        outputPath: 'LaunchTemplateData.NetworkInterfaces',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.NetworkInterfaces', props);
    return resource.getResponseField('LaunchTemplateData.NetworkInterfaces') as unknown as shapes.Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[];
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.ImageId'),
        outputPath: 'LaunchTemplateData.ImageId',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.ImageId', props);
    return resource.getResponseField('LaunchTemplateData.ImageId') as unknown as string;
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceType'),
        outputPath: 'LaunchTemplateData.InstanceType',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.InstanceType', props);
    return resource.getResponseField('LaunchTemplateData.InstanceType') as unknown as string;
  }

  public get keyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.KeyName'),
        outputPath: 'LaunchTemplateData.KeyName',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.KeyName', props);
    return resource.getResponseField('LaunchTemplateData.KeyName') as unknown as string;
  }

  public get monitoring(): EC2FetchLaunchTemplateDataLaunchTemplateDataMonitoring {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataMonitoring(this, 'Monitoring', this.__resources, this.input);
  }

  public get placement(): EC2FetchLaunchTemplateDataLaunchTemplateDataPlacement {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataPlacement(this, 'Placement', this.__resources, this.input);
  }

  public get ramDiskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.RamDiskId'),
        outputPath: 'LaunchTemplateData.RamDiskId',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.RamDiskId', props);
    return resource.getResponseField('LaunchTemplateData.RamDiskId') as unknown as string;
  }

  public get disableApiTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.DisableApiTermination'),
        outputPath: 'LaunchTemplateData.DisableApiTermination',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.DisableApiTermination', props);
    return resource.getResponseField('LaunchTemplateData.DisableApiTermination') as unknown as boolean;
  }

  public get instanceInitiatedShutdownBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceInitiatedShutdownBehavior'),
        outputPath: 'LaunchTemplateData.InstanceInitiatedShutdownBehavior',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.InstanceInitiatedShutdownBehavior', props);
    return resource.getResponseField('LaunchTemplateData.InstanceInitiatedShutdownBehavior') as unknown as string;
  }

  public get userData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.UserData'),
        outputPath: 'LaunchTemplateData.UserData',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.UserData', props);
    return resource.getResponseField('LaunchTemplateData.UserData') as unknown as string;
  }

  public get tagSpecifications(): shapes.Ec2LaunchTemplateTagSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.TagSpecifications'),
        outputPath: 'LaunchTemplateData.TagSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.TagSpecifications', props);
    return resource.getResponseField('LaunchTemplateData.TagSpecifications') as unknown as shapes.Ec2LaunchTemplateTagSpecification[];
  }

  public get elasticGpuSpecifications(): shapes.Ec2ElasticGpuSpecificationResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.ElasticGpuSpecifications'),
        outputPath: 'LaunchTemplateData.ElasticGpuSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.ElasticGpuSpecifications', props);
    return resource.getResponseField('LaunchTemplateData.ElasticGpuSpecifications') as unknown as shapes.Ec2ElasticGpuSpecificationResponse[];
  }

  public get elasticInferenceAccelerators(): shapes.Ec2LaunchTemplateElasticInferenceAcceleratorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.ElasticInferenceAccelerators'),
        outputPath: 'LaunchTemplateData.ElasticInferenceAccelerators',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.ElasticInferenceAccelerators', props);
    return resource.getResponseField('LaunchTemplateData.ElasticInferenceAccelerators') as unknown as shapes.Ec2LaunchTemplateElasticInferenceAcceleratorResponse[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.SecurityGroupIds'),
        outputPath: 'LaunchTemplateData.SecurityGroupIds',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.SecurityGroupIds', props);
    return resource.getResponseField('LaunchTemplateData.SecurityGroupIds') as unknown as string[];
  }

  public get securityGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.SecurityGroups'),
        outputPath: 'LaunchTemplateData.SecurityGroups',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.SecurityGroups', props);
    return resource.getResponseField('LaunchTemplateData.SecurityGroups') as unknown as string[];
  }

  public get instanceMarketOptions(): EC2FetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptions {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptions(this, 'InstanceMarketOptions', this.__resources, this.input);
  }

  public get creditSpecification(): EC2FetchLaunchTemplateDataLaunchTemplateDataCreditSpecification {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataCreditSpecification(this, 'CreditSpecification', this.__resources, this.input);
  }

  public get cpuOptions(): EC2FetchLaunchTemplateDataLaunchTemplateDataCpuOptions {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataCpuOptions(this, 'CpuOptions', this.__resources, this.input);
  }

  public get capacityReservationSpecification(): EC2FetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecification {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecification(this, 'CapacityReservationSpecification', this.__resources, this.input);
  }

  public get licenseSpecifications(): shapes.Ec2LaunchTemplateLicenseConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.LicenseSpecifications'),
        outputPath: 'LaunchTemplateData.LicenseSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.LicenseSpecifications', props);
    return resource.getResponseField('LaunchTemplateData.LicenseSpecifications') as unknown as shapes.Ec2LaunchTemplateLicenseConfiguration[];
  }

  public get hibernationOptions(): EC2FetchLaunchTemplateDataLaunchTemplateDataHibernationOptions {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataHibernationOptions(this, 'HibernationOptions', this.__resources, this.input);
  }

  public get metadataOptions(): EC2FetchLaunchTemplateDataLaunchTemplateDataMetadataOptions {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataMetadataOptions(this, 'MetadataOptions', this.__resources, this.input);
  }

  public get enclaveOptions(): EC2FetchLaunchTemplateDataLaunchTemplateDataEnclaveOptions {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataEnclaveOptions(this, 'EnclaveOptions', this.__resources, this.input);
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataIamInstanceProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.IamInstanceProfile.Arn'),
        outputPath: 'LaunchTemplateData.IamInstanceProfile.Arn',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.IamInstanceProfile.Arn', props);
    return resource.getResponseField('LaunchTemplateData.IamInstanceProfile.Arn') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.IamInstanceProfile.Name'),
        outputPath: 'LaunchTemplateData.IamInstanceProfile.Name',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.IamInstanceProfile.Name', props);
    return resource.getResponseField('LaunchTemplateData.IamInstanceProfile.Name') as unknown as string;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataMonitoring extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Monitoring.Enabled'),
        outputPath: 'LaunchTemplateData.Monitoring.Enabled',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Monitoring.Enabled', props);
    return resource.getResponseField('LaunchTemplateData.Monitoring.Enabled') as unknown as boolean;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataPlacement extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.AvailabilityZone'),
        outputPath: 'LaunchTemplateData.Placement.AvailabilityZone',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Placement.AvailabilityZone', props);
    return resource.getResponseField('LaunchTemplateData.Placement.AvailabilityZone') as unknown as string;
  }

  public get affinity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.Affinity'),
        outputPath: 'LaunchTemplateData.Placement.Affinity',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Placement.Affinity', props);
    return resource.getResponseField('LaunchTemplateData.Placement.Affinity') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.GroupName'),
        outputPath: 'LaunchTemplateData.Placement.GroupName',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Placement.GroupName', props);
    return resource.getResponseField('LaunchTemplateData.Placement.GroupName') as unknown as string;
  }

  public get hostId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.HostId'),
        outputPath: 'LaunchTemplateData.Placement.HostId',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Placement.HostId', props);
    return resource.getResponseField('LaunchTemplateData.Placement.HostId') as unknown as string;
  }

  public get tenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.Tenancy'),
        outputPath: 'LaunchTemplateData.Placement.Tenancy',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Placement.Tenancy', props);
    return resource.getResponseField('LaunchTemplateData.Placement.Tenancy') as unknown as string;
  }

  public get spreadDomain(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.SpreadDomain'),
        outputPath: 'LaunchTemplateData.Placement.SpreadDomain',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Placement.SpreadDomain', props);
    return resource.getResponseField('LaunchTemplateData.Placement.SpreadDomain') as unknown as string;
  }

  public get hostResourceGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.HostResourceGroupArn'),
        outputPath: 'LaunchTemplateData.Placement.HostResourceGroupArn',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Placement.HostResourceGroupArn', props);
    return resource.getResponseField('LaunchTemplateData.Placement.HostResourceGroupArn') as unknown as string;
  }

  public get partitionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.PartitionNumber'),
        outputPath: 'LaunchTemplateData.Placement.PartitionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.Placement.PartitionNumber', props);
    return resource.getResponseField('LaunchTemplateData.Placement.PartitionNumber') as unknown as number;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get marketType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.MarketType'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.MarketType',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.MarketType', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.MarketType') as unknown as string;
  }

  public get spotOptions(): EC2FetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptionsSpotOptions {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptionsSpotOptions(this, 'SpotOptions', this.__resources, this.input);
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptionsSpotOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get maxPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice') as unknown as string;
  }

  public get spotInstanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType') as unknown as string;
  }

  public get blockDurationMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes') as unknown as number;
  }

  public get validUntil(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil') as unknown as string;
  }

  public get instanceInterruptionBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior') as unknown as string;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataCreditSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get cpuCredits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CreditSpecification.CpuCredits'),
        outputPath: 'LaunchTemplateData.CreditSpecification.CpuCredits',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.CreditSpecification.CpuCredits', props);
    return resource.getResponseField('LaunchTemplateData.CreditSpecification.CpuCredits') as unknown as string;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataCpuOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get coreCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CpuOptions.CoreCount'),
        outputPath: 'LaunchTemplateData.CpuOptions.CoreCount',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.CpuOptions.CoreCount', props);
    return resource.getResponseField('LaunchTemplateData.CpuOptions.CoreCount') as unknown as number;
  }

  public get threadsPerCore(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CpuOptions.ThreadsPerCore'),
        outputPath: 'LaunchTemplateData.CpuOptions.ThreadsPerCore',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.CpuOptions.ThreadsPerCore', props);
    return resource.getResponseField('LaunchTemplateData.CpuOptions.ThreadsPerCore') as unknown as number;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get capacityReservationPreference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference'),
        outputPath: 'LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference', props);
    return resource.getResponseField('LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference') as unknown as string;
  }

  public get capacityReservationTarget(): EC2FetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget {
    return new EC2FetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget(this, 'CapacityReservationTarget', this.__resources, this.input);
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get capacityReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId'),
        outputPath: 'LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId', props);
    return resource.getResponseField('LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId') as unknown as string;
  }

  public get capacityReservationResourceGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn'),
        outputPath: 'LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn', props);
    return resource.getResponseField('LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn') as unknown as string;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataHibernationOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get configured(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.HibernationOptions.Configured'),
        outputPath: 'LaunchTemplateData.HibernationOptions.Configured',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.HibernationOptions.Configured', props);
    return resource.getResponseField('LaunchTemplateData.HibernationOptions.Configured') as unknown as boolean;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataMetadataOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.State'),
        outputPath: 'LaunchTemplateData.MetadataOptions.State',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.State', props);
    return resource.getResponseField('LaunchTemplateData.MetadataOptions.State') as unknown as string;
  }

  public get httpTokens(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpTokens'),
        outputPath: 'LaunchTemplateData.MetadataOptions.HttpTokens',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpTokens', props);
    return resource.getResponseField('LaunchTemplateData.MetadataOptions.HttpTokens') as unknown as string;
  }

  public get httpPutResponseHopLimit(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit'),
        outputPath: 'LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit', props);
    return resource.getResponseField('LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit') as unknown as number;
  }

  public get httpEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpEndpoint'),
        outputPath: 'LaunchTemplateData.MetadataOptions.HttpEndpoint',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpEndpoint', props);
    return resource.getResponseField('LaunchTemplateData.MetadataOptions.HttpEndpoint') as unknown as string;
  }

}

export class EC2FetchLaunchTemplateDataLaunchTemplateDataEnclaveOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetLaunchTemplateDataRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.EnclaveOptions.Enabled'),
        outputPath: 'LaunchTemplateData.EnclaveOptions.Enabled',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetLaunchTemplateData.LaunchTemplateData.EnclaveOptions.Enabled', props);
    return resource.getResponseField('LaunchTemplateData.EnclaveOptions.Enabled') as unknown as boolean;
  }

}

export class EC2FetchManagedPrefixListAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetManagedPrefixListAssociationsRequest) {
    super(scope, id);
  }

  public get prefixListAssociations(): shapes.Ec2PrefixListAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getManagedPrefixListAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetManagedPrefixListAssociations.PrefixListAssociations'),
        outputPath: 'PrefixListAssociations',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetManagedPrefixListAssociations.PrefixListAssociations', props);
    return resource.getResponseField('PrefixListAssociations') as unknown as shapes.Ec2PrefixListAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getManagedPrefixListAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetManagedPrefixListAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetManagedPrefixListAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2FetchManagedPrefixListEntries extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetManagedPrefixListEntriesRequest) {
    super(scope, id);
  }

  public get entries(): shapes.Ec2PrefixListEntry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getManagedPrefixListEntries',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetManagedPrefixListEntries.Entries'),
        outputPath: 'Entries',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          TargetVersion: this.input.targetVersion,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetManagedPrefixListEntries.Entries', props);
    return resource.getResponseField('Entries') as unknown as shapes.Ec2PrefixListEntry[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getManagedPrefixListEntries',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetManagedPrefixListEntries.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          TargetVersion: this.input.targetVersion,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetManagedPrefixListEntries.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2FetchPasswordData extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetPasswordDataRequest) {
    super(scope, id);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPasswordData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetPasswordData.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          InstanceId: this.input.instanceId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPasswordData.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get passwordData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPasswordData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetPasswordData.PasswordData'),
        outputPath: 'PasswordData',
        parameters: {
          InstanceId: this.input.instanceId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPasswordData.PasswordData', props);
    return resource.getResponseField('PasswordData') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPasswordData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetPasswordData.Timestamp'),
        outputPath: 'Timestamp',
        parameters: {
          InstanceId: this.input.instanceId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPasswordData.Timestamp', props);
    return resource.getResponseField('Timestamp') as unknown as string;
  }

}

export class EC2FetchReservedInstancesExchangeQuote extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetReservedInstancesExchangeQuoteRequest) {
    super(scope, id);
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get isValidExchange(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.IsValidExchange'),
        outputPath: 'IsValidExchange',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.IsValidExchange', props);
    return resource.getResponseField('IsValidExchange') as unknown as boolean;
  }

  public get outputReservedInstancesWillExpireAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.OutputReservedInstancesWillExpireAt'),
        outputPath: 'OutputReservedInstancesWillExpireAt',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.OutputReservedInstancesWillExpireAt', props);
    return resource.getResponseField('OutputReservedInstancesWillExpireAt') as unknown as string;
  }

  public get paymentDue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.PaymentDue'),
        outputPath: 'PaymentDue',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.PaymentDue', props);
    return resource.getResponseField('PaymentDue') as unknown as string;
  }

  public get reservedInstanceValueRollup(): EC2FetchReservedInstancesExchangeQuoteReservedInstanceValueRollup {
    return new EC2FetchReservedInstancesExchangeQuoteReservedInstanceValueRollup(this, 'ReservedInstanceValueRollup', this.__resources, this.input);
  }

  public get reservedInstanceValueSet(): shapes.Ec2ReservedInstanceReservationValue[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ReservedInstanceValueSet'),
        outputPath: 'ReservedInstanceValueSet',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.ReservedInstanceValueSet', props);
    return resource.getResponseField('ReservedInstanceValueSet') as unknown as shapes.Ec2ReservedInstanceReservationValue[];
  }

  public get targetConfigurationValueRollup(): EC2FetchReservedInstancesExchangeQuoteTargetConfigurationValueRollup {
    return new EC2FetchReservedInstancesExchangeQuoteTargetConfigurationValueRollup(this, 'TargetConfigurationValueRollup', this.__resources, this.input);
  }

  public get targetConfigurationValueSet(): shapes.Ec2TargetReservationValue[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.TargetConfigurationValueSet'),
        outputPath: 'TargetConfigurationValueSet',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.TargetConfigurationValueSet', props);
    return resource.getResponseField('TargetConfigurationValueSet') as unknown as shapes.Ec2TargetReservationValue[];
  }

  public get validationFailureReason(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ValidationFailureReason'),
        outputPath: 'ValidationFailureReason',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.ValidationFailureReason', props);
    return resource.getResponseField('ValidationFailureReason') as unknown as string;
  }

}

export class EC2FetchReservedInstancesExchangeQuoteReservedInstanceValueRollup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetReservedInstancesExchangeQuoteRequest) {
    super(scope, id);
  }

  public get hourlyPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.HourlyPrice'),
        outputPath: 'ReservedInstanceValueRollup.HourlyPrice',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.HourlyPrice', props);
    return resource.getResponseField('ReservedInstanceValueRollup.HourlyPrice') as unknown as string;
  }

  public get remainingTotalValue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.RemainingTotalValue'),
        outputPath: 'ReservedInstanceValueRollup.RemainingTotalValue',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.RemainingTotalValue', props);
    return resource.getResponseField('ReservedInstanceValueRollup.RemainingTotalValue') as unknown as string;
  }

  public get remainingUpfrontValue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.RemainingUpfrontValue'),
        outputPath: 'ReservedInstanceValueRollup.RemainingUpfrontValue',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.RemainingUpfrontValue', props);
    return resource.getResponseField('ReservedInstanceValueRollup.RemainingUpfrontValue') as unknown as string;
  }

}

export class EC2FetchReservedInstancesExchangeQuoteTargetConfigurationValueRollup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetReservedInstancesExchangeQuoteRequest) {
    super(scope, id);
  }

  public get hourlyPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.HourlyPrice'),
        outputPath: 'TargetConfigurationValueRollup.HourlyPrice',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.HourlyPrice', props);
    return resource.getResponseField('TargetConfigurationValueRollup.HourlyPrice') as unknown as string;
  }

  public get remainingTotalValue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.RemainingTotalValue'),
        outputPath: 'TargetConfigurationValueRollup.RemainingTotalValue',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.RemainingTotalValue', props);
    return resource.getResponseField('TargetConfigurationValueRollup.RemainingTotalValue') as unknown as string;
  }

  public get remainingUpfrontValue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.RemainingUpfrontValue'),
        outputPath: 'TargetConfigurationValueRollup.RemainingUpfrontValue',
        parameters: {
          DryRun: this.input.dryRun,
          ReservedInstanceIds: this.input.reservedInstanceIds,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.RemainingUpfrontValue', props);
    return resource.getResponseField('TargetConfigurationValueRollup.RemainingUpfrontValue') as unknown as string;
  }

}

export class EC2FetchTransitGatewayAttachmentPropagations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetTransitGatewayAttachmentPropagationsRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentPropagations(): shapes.Ec2TransitGatewayAttachmentPropagation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayAttachmentPropagations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayAttachmentPropagations.TransitGatewayAttachmentPropagations'),
        outputPath: 'TransitGatewayAttachmentPropagations',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayAttachmentPropagations.TransitGatewayAttachmentPropagations', props);
    return resource.getResponseField('TransitGatewayAttachmentPropagations') as unknown as shapes.Ec2TransitGatewayAttachmentPropagation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayAttachmentPropagations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayAttachmentPropagations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayAttachmentPropagations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2FetchTransitGatewayMulticastDomainAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetTransitGatewayMulticastDomainAssociationsRequest) {
    super(scope, id);
  }

  public get multicastDomainAssociations(): shapes.Ec2TransitGatewayMulticastDomainAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayMulticastDomainAssociations.MulticastDomainAssociations'),
        outputPath: 'MulticastDomainAssociations',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayMulticastDomainAssociations.MulticastDomainAssociations', props);
    return resource.getResponseField('MulticastDomainAssociations') as unknown as shapes.Ec2TransitGatewayMulticastDomainAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayMulticastDomainAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayMulticastDomainAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2FetchTransitGatewayPrefixListReferences extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetTransitGatewayPrefixListReferencesRequest) {
    super(scope, id);
  }

  public get transitGatewayPrefixListReferences(): shapes.Ec2TransitGatewayPrefixListReference[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayPrefixListReferences',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayPrefixListReferences.TransitGatewayPrefixListReferences'),
        outputPath: 'TransitGatewayPrefixListReferences',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayPrefixListReferences.TransitGatewayPrefixListReferences', props);
    return resource.getResponseField('TransitGatewayPrefixListReferences') as unknown as shapes.Ec2TransitGatewayPrefixListReference[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayPrefixListReferences',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayPrefixListReferences.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayPrefixListReferences.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2FetchTransitGatewayRouteTableAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetTransitGatewayRouteTableAssociationsRequest) {
    super(scope, id);
  }

  public get associations(): shapes.Ec2TransitGatewayRouteTableAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayRouteTableAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayRouteTableAssociations.Associations'),
        outputPath: 'Associations',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayRouteTableAssociations.Associations', props);
    return resource.getResponseField('Associations') as unknown as shapes.Ec2TransitGatewayRouteTableAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayRouteTableAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayRouteTableAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayRouteTableAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2FetchTransitGatewayRouteTablePropagations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2GetTransitGatewayRouteTablePropagationsRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTablePropagations(): shapes.Ec2TransitGatewayRouteTablePropagation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayRouteTablePropagations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayRouteTablePropagations.TransitGatewayRouteTablePropagations'),
        outputPath: 'TransitGatewayRouteTablePropagations',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayRouteTablePropagations.TransitGatewayRouteTablePropagations', props);
    return resource.getResponseField('TransitGatewayRouteTablePropagations') as unknown as shapes.Ec2TransitGatewayRouteTablePropagation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayRouteTablePropagations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayRouteTablePropagations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetTransitGatewayRouteTablePropagations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ImportClientVpnClientCertificateRevocationList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportClientVpnClientCertificateRevocationListRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importClientVpnClientCertificateRevocationList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportClientVpnClientCertificateRevocationList.Return'),
        outputPath: 'Return',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          CertificateRevocationList: this.input.certificateRevocationList,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportClientVpnClientCertificateRevocationList.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ImportImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportImageRequest) {
    super(scope, id);
  }

  public get architecture(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Architecture'),
        outputPath: 'Architecture',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.Architecture', props);
    return resource.getResponseField('Architecture') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Description'),
        outputPath: 'Description',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Encrypted'),
        outputPath: 'Encrypted',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.Encrypted', props);
    return resource.getResponseField('Encrypted') as unknown as boolean;
  }

  public get hypervisor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Hypervisor'),
        outputPath: 'Hypervisor',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.Hypervisor', props);
    return resource.getResponseField('Hypervisor') as unknown as string;
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

  public get importTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.ImportTaskId'),
        outputPath: 'ImportTaskId',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.ImportTaskId', props);
    return resource.getResponseField('ImportTaskId') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get licenseType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.LicenseType'),
        outputPath: 'LicenseType',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.LicenseType', props);
    return resource.getResponseField('LicenseType') as unknown as string;
  }

  public get platform(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Platform'),
        outputPath: 'Platform',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.Platform', props);
    return resource.getResponseField('Platform') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Progress'),
        outputPath: 'Progress',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.Progress', props);
    return resource.getResponseField('Progress') as unknown as string;
  }

  public get snapshotDetails(): shapes.Ec2SnapshotDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.SnapshotDetails'),
        outputPath: 'SnapshotDetails',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.SnapshotDetails', props);
    return resource.getResponseField('SnapshotDetails') as unknown as shapes.Ec2SnapshotDetail[];
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Status'),
        outputPath: 'Status',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.StatusMessage'),
        outputPath: 'StatusMessage',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.StatusMessage', props);
    return resource.getResponseField('StatusMessage') as unknown as string;
  }

  public get licenseSpecifications(): shapes.Ec2ImportImageLicenseConfigurationResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.LicenseSpecifications'),
        outputPath: 'LicenseSpecifications',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.LicenseSpecifications', props);
    return resource.getResponseField('LicenseSpecifications') as unknown as shapes.Ec2ImportImageLicenseConfigurationResponse[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Tags'),
        outputPath: 'Tags',
        parameters: {
          Architecture: this.input.architecture,
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainers: this.input.diskContainers,
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          Hypervisor: this.input.hypervisor,
          KmsKeyId: this.input.kmsKeyId,
          LicenseType: this.input.licenseType,
          Platform: this.input.platform,
          RoleName: this.input.roleName,
          LicenseSpecifications: this.input.licenseSpecifications,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportImage.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ImportInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportInstanceRequest) {
    super(scope, id);
  }

  public get conversionTask(): EC2ImportInstanceConversionTask {
    return new EC2ImportInstanceConversionTask(this, 'ConversionTask', this.__resources, this.input);
  }

}

export class EC2ImportInstanceConversionTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportInstanceRequest) {
    super(scope, id);
  }

  public get conversionTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ConversionTaskId'),
        outputPath: 'ConversionTask.ConversionTaskId',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ConversionTaskId', props);
    return resource.getResponseField('ConversionTask.ConversionTaskId') as unknown as string;
  }

  public get expirationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ExpirationTime'),
        outputPath: 'ConversionTask.ExpirationTime',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ExpirationTime', props);
    return resource.getResponseField('ConversionTask.ExpirationTime') as unknown as string;
  }

  public get importInstance(): EC2ImportInstanceConversionTaskImportInstance {
    return new EC2ImportInstanceConversionTaskImportInstance(this, 'ImportInstance', this.__resources, this.input);
  }

  public get importVolume(): EC2ImportInstanceConversionTaskImportVolume {
    return new EC2ImportInstanceConversionTaskImportVolume(this, 'ImportVolume', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.State'),
        outputPath: 'ConversionTask.State',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.State', props);
    return resource.getResponseField('ConversionTask.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.StatusMessage'),
        outputPath: 'ConversionTask.StatusMessage',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.StatusMessage', props);
    return resource.getResponseField('ConversionTask.StatusMessage') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.Tags'),
        outputPath: 'ConversionTask.Tags',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.Tags', props);
    return resource.getResponseField('ConversionTask.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ImportInstanceConversionTaskImportInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportInstanceRequest) {
    super(scope, id);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportInstance.Description'),
        outputPath: 'ConversionTask.ImportInstance.Description',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportInstance.Description', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Description') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportInstance.InstanceId'),
        outputPath: 'ConversionTask.ImportInstance.InstanceId',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportInstance.InstanceId', props);
    return resource.getResponseField('ConversionTask.ImportInstance.InstanceId') as unknown as string;
  }

  public get platform(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportInstance.Platform'),
        outputPath: 'ConversionTask.ImportInstance.Platform',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportInstance.Platform', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Platform') as unknown as string;
  }

  public get volumes(): shapes.Ec2ImportInstanceVolumeDetailItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportInstance.Volumes'),
        outputPath: 'ConversionTask.ImportInstance.Volumes',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportInstance.Volumes', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Volumes') as unknown as shapes.Ec2ImportInstanceVolumeDetailItem[];
  }

}

export class EC2ImportInstanceConversionTaskImportVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportInstanceRequest) {
    super(scope, id);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.AvailabilityZone'),
        outputPath: 'ConversionTask.ImportVolume.AvailabilityZone',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.AvailabilityZone', props);
    return resource.getResponseField('ConversionTask.ImportVolume.AvailabilityZone') as unknown as string;
  }

  public get bytesConverted(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.BytesConverted'),
        outputPath: 'ConversionTask.ImportVolume.BytesConverted',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.BytesConverted', props);
    return resource.getResponseField('ConversionTask.ImportVolume.BytesConverted') as unknown as number;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Description'),
        outputPath: 'ConversionTask.ImportVolume.Description',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.Description', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Description') as unknown as string;
  }

  public get image(): EC2ImportInstanceConversionTaskImportVolumeImage {
    return new EC2ImportInstanceConversionTaskImportVolumeImage(this, 'Image', this.__resources, this.input);
  }

  public get volume(): EC2ImportInstanceConversionTaskImportVolumeVolume {
    return new EC2ImportInstanceConversionTaskImportVolumeVolume(this, 'Volume', this.__resources, this.input);
  }

}

export class EC2ImportInstanceConversionTaskImportVolumeImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportInstanceRequest) {
    super(scope, id);
  }

  public get checksum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Image.Checksum'),
        outputPath: 'ConversionTask.ImportVolume.Image.Checksum',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.Image.Checksum', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Checksum') as unknown as string;
  }

  public get format(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Image.Format'),
        outputPath: 'ConversionTask.ImportVolume.Image.Format',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.Image.Format', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Format') as unknown as string;
  }

  public get importManifestUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Image.ImportManifestUrl'),
        outputPath: 'ConversionTask.ImportVolume.Image.ImportManifestUrl',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.Image.ImportManifestUrl', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.ImportManifestUrl') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Image.Size'),
        outputPath: 'ConversionTask.ImportVolume.Image.Size',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.Image.Size', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Size') as unknown as number;
  }

}

export class EC2ImportInstanceConversionTaskImportVolumeVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportInstanceRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Volume.Id'),
        outputPath: 'ConversionTask.ImportVolume.Volume.Id',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.Volume.Id', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Volume.Id') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Volume.Size'),
        outputPath: 'ConversionTask.ImportVolume.Volume.Size',
        parameters: {
          Description: this.input.description,
          DiskImages: this.input.diskImages,
          DryRun: this.input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.input.launchSpecification?.additionalInfo,
            Architecture: this.input.launchSpecification?.architecture,
            GroupIds: this.input.launchSpecification?.groupIds,
            GroupNames: this.input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.input.launchSpecification?.instanceType,
            Monitoring: this.input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.input.launchSpecification?.placement?.affinity,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.input.launchSpecification?.placement?.partitionNumber,
              HostId: this.input.launchSpecification?.placement?.hostId,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.input.launchSpecification?.privateIpAddress,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: {
              Data: this.input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstance.ConversionTask.ImportVolume.Volume.Size', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Volume.Size') as unknown as number;
  }

}

export class EC2ImportKeyPair extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportKeyPairRequest) {
    super(scope, id);
  }

  public get keyFingerprint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportKeyPair.KeyFingerprint'),
        outputPath: 'KeyFingerprint',
        parameters: {
          DryRun: this.input.dryRun,
          KeyName: this.input.keyName,
          PublicKeyMaterial: {
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportKeyPair.KeyFingerprint', props);
    return resource.getResponseField('KeyFingerprint') as unknown as string;
  }

  public get keyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportKeyPair.KeyName'),
        outputPath: 'KeyName',
        parameters: {
          DryRun: this.input.dryRun,
          KeyName: this.input.keyName,
          PublicKeyMaterial: {
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportKeyPair.KeyName', props);
    return resource.getResponseField('KeyName') as unknown as string;
  }

  public get keyPairId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportKeyPair.KeyPairId'),
        outputPath: 'KeyPairId',
        parameters: {
          DryRun: this.input.dryRun,
          KeyName: this.input.keyName,
          PublicKeyMaterial: {
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportKeyPair.KeyPairId', props);
    return resource.getResponseField('KeyPairId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportKeyPair.Tags'),
        outputPath: 'Tags',
        parameters: {
          DryRun: this.input.dryRun,
          KeyName: this.input.keyName,
          PublicKeyMaterial: {
          },
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportKeyPair.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ImportSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportSnapshotRequest) {
    super(scope, id);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.Description'),
        outputPath: 'Description',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get importTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.ImportTaskId'),
        outputPath: 'ImportTaskId',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.ImportTaskId', props);
    return resource.getResponseField('ImportTaskId') as unknown as string;
  }

  public get snapshotTaskDetail(): EC2ImportSnapshotSnapshotTaskDetail {
    return new EC2ImportSnapshotSnapshotTaskDetail(this, 'SnapshotTaskDetail', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.Tags'),
        outputPath: 'Tags',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ImportSnapshotSnapshotTaskDetail extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportSnapshotRequest) {
    super(scope, id);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Description'),
        outputPath: 'SnapshotTaskDetail.Description',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.Description', props);
    return resource.getResponseField('SnapshotTaskDetail.Description') as unknown as string;
  }

  public get diskImageSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.DiskImageSize'),
        outputPath: 'SnapshotTaskDetail.DiskImageSize',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.DiskImageSize', props);
    return resource.getResponseField('SnapshotTaskDetail.DiskImageSize') as unknown as number;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Encrypted'),
        outputPath: 'SnapshotTaskDetail.Encrypted',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.Encrypted', props);
    return resource.getResponseField('SnapshotTaskDetail.Encrypted') as unknown as boolean;
  }

  public get format(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Format'),
        outputPath: 'SnapshotTaskDetail.Format',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.Format', props);
    return resource.getResponseField('SnapshotTaskDetail.Format') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.KmsKeyId'),
        outputPath: 'SnapshotTaskDetail.KmsKeyId',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.KmsKeyId', props);
    return resource.getResponseField('SnapshotTaskDetail.KmsKeyId') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Progress'),
        outputPath: 'SnapshotTaskDetail.Progress',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.Progress', props);
    return resource.getResponseField('SnapshotTaskDetail.Progress') as unknown as string;
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.SnapshotId'),
        outputPath: 'SnapshotTaskDetail.SnapshotId',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.SnapshotId', props);
    return resource.getResponseField('SnapshotTaskDetail.SnapshotId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Status'),
        outputPath: 'SnapshotTaskDetail.Status',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.Status', props);
    return resource.getResponseField('SnapshotTaskDetail.Status') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.StatusMessage'),
        outputPath: 'SnapshotTaskDetail.StatusMessage',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.StatusMessage', props);
    return resource.getResponseField('SnapshotTaskDetail.StatusMessage') as unknown as string;
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Url'),
        outputPath: 'SnapshotTaskDetail.Url',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.Url', props);
    return resource.getResponseField('SnapshotTaskDetail.Url') as unknown as string;
  }

  public get userBucket(): EC2ImportSnapshotSnapshotTaskDetailUserBucket {
    return new EC2ImportSnapshotSnapshotTaskDetailUserBucket(this, 'UserBucket', this.__resources, this.input);
  }

}

export class EC2ImportSnapshotSnapshotTaskDetailUserBucket extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportSnapshotRequest) {
    super(scope, id);
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.UserBucket.S3Bucket'),
        outputPath: 'SnapshotTaskDetail.UserBucket.S3Bucket',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.UserBucket.S3Bucket', props);
    return resource.getResponseField('SnapshotTaskDetail.UserBucket.S3Bucket') as unknown as string;
  }

  public get s3Key(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.UserBucket.S3Key'),
        outputPath: 'SnapshotTaskDetail.UserBucket.S3Key',
        parameters: {
          ClientData: {
            Comment: this.input.clientData?.comment,
            UploadEnd: this.input.clientData?.uploadEnd,
            UploadSize: this.input.clientData?.uploadSize,
            UploadStart: this.input.clientData?.uploadStart,
          },
          ClientToken: this.input.clientToken,
          Description: this.input.description,
          DiskContainer: {
            Description: this.input.diskContainer?.description,
            Format: this.input.diskContainer?.format,
            Url: this.input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.input.dryRun,
          Encrypted: this.input.encrypted,
          KmsKeyId: this.input.kmsKeyId,
          RoleName: this.input.roleName,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportSnapshot.SnapshotTaskDetail.UserBucket.S3Key', props);
    return resource.getResponseField('SnapshotTaskDetail.UserBucket.S3Key') as unknown as string;
  }

}

export class EC2ImportVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportVolumeRequest) {
    super(scope, id);
  }

  public get conversionTask(): EC2ImportVolumeConversionTask {
    return new EC2ImportVolumeConversionTask(this, 'ConversionTask', this.__resources, this.input);
  }

}

export class EC2ImportVolumeConversionTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportVolumeRequest) {
    super(scope, id);
  }

  public get conversionTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ConversionTaskId'),
        outputPath: 'ConversionTask.ConversionTaskId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ConversionTaskId', props);
    return resource.getResponseField('ConversionTask.ConversionTaskId') as unknown as string;
  }

  public get expirationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ExpirationTime'),
        outputPath: 'ConversionTask.ExpirationTime',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ExpirationTime', props);
    return resource.getResponseField('ConversionTask.ExpirationTime') as unknown as string;
  }

  public get importInstance(): EC2ImportVolumeConversionTaskImportInstance {
    return new EC2ImportVolumeConversionTaskImportInstance(this, 'ImportInstance', this.__resources, this.input);
  }

  public get importVolume(): EC2ImportVolumeConversionTaskImportVolume {
    return new EC2ImportVolumeConversionTaskImportVolume(this, 'ImportVolume', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.State'),
        outputPath: 'ConversionTask.State',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.State', props);
    return resource.getResponseField('ConversionTask.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.StatusMessage'),
        outputPath: 'ConversionTask.StatusMessage',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.StatusMessage', props);
    return resource.getResponseField('ConversionTask.StatusMessage') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.Tags'),
        outputPath: 'ConversionTask.Tags',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.Tags', props);
    return resource.getResponseField('ConversionTask.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ImportVolumeConversionTaskImportInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportVolumeRequest) {
    super(scope, id);
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportInstance.Description'),
        outputPath: 'ConversionTask.ImportInstance.Description',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportInstance.Description', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Description') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportInstance.InstanceId'),
        outputPath: 'ConversionTask.ImportInstance.InstanceId',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportInstance.InstanceId', props);
    return resource.getResponseField('ConversionTask.ImportInstance.InstanceId') as unknown as string;
  }

  public get platform(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportInstance.Platform'),
        outputPath: 'ConversionTask.ImportInstance.Platform',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportInstance.Platform', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Platform') as unknown as string;
  }

  public get volumes(): shapes.Ec2ImportInstanceVolumeDetailItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportInstance.Volumes'),
        outputPath: 'ConversionTask.ImportInstance.Volumes',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportInstance.Volumes', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Volumes') as unknown as shapes.Ec2ImportInstanceVolumeDetailItem[];
  }

}

export class EC2ImportVolumeConversionTaskImportVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportVolumeRequest) {
    super(scope, id);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.AvailabilityZone'),
        outputPath: 'ConversionTask.ImportVolume.AvailabilityZone',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.AvailabilityZone', props);
    return resource.getResponseField('ConversionTask.ImportVolume.AvailabilityZone') as unknown as string;
  }

  public get bytesConverted(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.BytesConverted'),
        outputPath: 'ConversionTask.ImportVolume.BytesConverted',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.BytesConverted', props);
    return resource.getResponseField('ConversionTask.ImportVolume.BytesConverted') as unknown as number;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Description'),
        outputPath: 'ConversionTask.ImportVolume.Description',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.Description', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Description') as unknown as string;
  }

  public get image(): EC2ImportVolumeConversionTaskImportVolumeImage {
    return new EC2ImportVolumeConversionTaskImportVolumeImage(this, 'Image', this.__resources, this.input);
  }

  public get volume(): EC2ImportVolumeConversionTaskImportVolumeVolume {
    return new EC2ImportVolumeConversionTaskImportVolumeVolume(this, 'Volume', this.__resources, this.input);
  }

}

export class EC2ImportVolumeConversionTaskImportVolumeImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportVolumeRequest) {
    super(scope, id);
  }

  public get checksum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Image.Checksum'),
        outputPath: 'ConversionTask.ImportVolume.Image.Checksum',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.Image.Checksum', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Checksum') as unknown as string;
  }

  public get format(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Image.Format'),
        outputPath: 'ConversionTask.ImportVolume.Image.Format',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.Image.Format', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Format') as unknown as string;
  }

  public get importManifestUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Image.ImportManifestUrl'),
        outputPath: 'ConversionTask.ImportVolume.Image.ImportManifestUrl',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.Image.ImportManifestUrl', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.ImportManifestUrl') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Image.Size'),
        outputPath: 'ConversionTask.ImportVolume.Image.Size',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.Image.Size', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Size') as unknown as number;
  }

}

export class EC2ImportVolumeConversionTaskImportVolumeVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ImportVolumeRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Volume.Id'),
        outputPath: 'ConversionTask.ImportVolume.Volume.Id',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.Volume.Id', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Volume.Id') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Volume.Size'),
        outputPath: 'ConversionTask.ImportVolume.Volume.Size',
        parameters: {
          AvailabilityZone: this.input.availabilityZone,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          Image: {
            Bytes: this.input.image.bytes,
            Format: this.input.image.format,
            ImportManifestUrl: this.input.image.importManifestUrl,
          },
          Volume: {
            Size: this.input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportVolume.ConversionTask.ImportVolume.Volume.Size', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Volume.Size') as unknown as number;
  }

}

export class EC2ModifyAvailabilityZoneGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyAvailabilityZoneGroupRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAvailabilityZoneGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyAvailabilityZoneGroup.Return'),
        outputPath: 'Return',
        parameters: {
          GroupName: this.input.groupName,
          OptInStatus: this.input.optInStatus,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyAvailabilityZoneGroup.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyCapacityReservation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyCapacityReservationRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyCapacityReservation.Return'),
        outputPath: 'Return',
        parameters: {
          CapacityReservationId: this.input.capacityReservationId,
          InstanceCount: this.input.instanceCount,
          EndDate: this.input.endDate,
          EndDateType: this.input.endDateType,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCapacityReservation.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyClientVpnEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyClientVpnEndpointRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyClientVpnEndpoint.Return'),
        outputPath: 'Return',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          ServerCertificateArn: this.input.serverCertificateArn,
          ConnectionLogOptions: {
            Enabled: this.input.connectionLogOptions?.enabled,
            CloudwatchLogGroup: this.input.connectionLogOptions?.cloudwatchLogGroup,
            CloudwatchLogStream: this.input.connectionLogOptions?.cloudwatchLogStream,
          },
          DnsServers: {
            CustomDnsServers: this.input.dnsServers?.customDnsServers,
            Enabled: this.input.dnsServers?.enabled,
          },
          VpnPort: this.input.vpnPort,
          Description: this.input.description,
          SplitTunnel: this.input.splitTunnel,
          DryRun: this.input.dryRun,
          SecurityGroupIds: this.input.securityGroupIds,
          VpcId: this.input.vpcId,
          SelfServicePortal: this.input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyClientVpnEndpoint.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyDefaultCreditSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyDefaultCreditSpecificationRequest) {
    super(scope, id);
  }

  public get instanceFamilyCreditSpecification(): EC2ModifyDefaultCreditSpecificationInstanceFamilyCreditSpecification {
    return new EC2ModifyDefaultCreditSpecificationInstanceFamilyCreditSpecification(this, 'InstanceFamilyCreditSpecification', this.__resources, this.input);
  }

}

export class EC2ModifyDefaultCreditSpecificationInstanceFamilyCreditSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyDefaultCreditSpecificationRequest) {
    super(scope, id);
  }

  public get instanceFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDefaultCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyDefaultCreditSpecification.InstanceFamilyCreditSpecification.InstanceFamily'),
        outputPath: 'InstanceFamilyCreditSpecification.InstanceFamily',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceFamily: this.input.instanceFamily,
          CpuCredits: this.input.cpuCredits,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDefaultCreditSpecification.InstanceFamilyCreditSpecification.InstanceFamily', props);
    return resource.getResponseField('InstanceFamilyCreditSpecification.InstanceFamily') as unknown as string;
  }

  public get cpuCredits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDefaultCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyDefaultCreditSpecification.InstanceFamilyCreditSpecification.CpuCredits'),
        outputPath: 'InstanceFamilyCreditSpecification.CpuCredits',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceFamily: this.input.instanceFamily,
          CpuCredits: this.input.cpuCredits,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDefaultCreditSpecification.InstanceFamilyCreditSpecification.CpuCredits', props);
    return resource.getResponseField('InstanceFamilyCreditSpecification.CpuCredits') as unknown as string;
  }

}

export class EC2ModifyEbsDefaultKmsKeyId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyEbsDefaultKmsKeyIdRequest) {
    super(scope, id);
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEbsDefaultKmsKeyId',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyEbsDefaultKmsKeyId.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          KmsKeyId: this.input.kmsKeyId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEbsDefaultKmsKeyId.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

}

export class EC2ModifyFleet extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyFleetRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFleet.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          ExcessCapacityTerminationPolicy: this.input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.input.launchTemplateConfigs,
          FleetId: this.input.fleetId,
          TargetCapacitySpecification: {
            TotalTargetCapacity: this.input.targetCapacitySpecification?.totalTargetCapacity,
            OnDemandTargetCapacity: this.input.targetCapacitySpecification?.onDemandTargetCapacity,
            SpotTargetCapacity: this.input.targetCapacitySpecification?.spotTargetCapacity,
            DefaultTargetCapacityType: this.input.targetCapacitySpecification?.defaultTargetCapacityType,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyFleet.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyFpgaImageAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyFpgaImageAttributeRequest) {
    super(scope, id);
  }

  public get fpgaImageAttribute(): EC2ModifyFpgaImageAttributeFpgaImageAttribute {
    return new EC2ModifyFpgaImageAttributeFpgaImageAttribute(this, 'FpgaImageAttribute', this.__resources, this.input);
  }

}

export class EC2ModifyFpgaImageAttributeFpgaImageAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyFpgaImageAttributeRequest) {
    super(scope, id);
  }

  public get fpgaImageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.FpgaImageId'),
        outputPath: 'FpgaImageAttribute.FpgaImageId',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
          OperationType: this.input.operationType,
          UserIds: this.input.userIds,
          UserGroups: this.input.userGroups,
          ProductCodes: this.input.productCodes,
          LoadPermission: {
            Add: this.input.loadPermission?.add,
            Remove: this.input.loadPermission?.remove,
          },
          Description: this.input.description,
          Name: this.input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyFpgaImageAttribute.FpgaImageAttribute.FpgaImageId', props);
    return resource.getResponseField('FpgaImageAttribute.FpgaImageId') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.Name'),
        outputPath: 'FpgaImageAttribute.Name',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
          OperationType: this.input.operationType,
          UserIds: this.input.userIds,
          UserGroups: this.input.userGroups,
          ProductCodes: this.input.productCodes,
          LoadPermission: {
            Add: this.input.loadPermission?.add,
            Remove: this.input.loadPermission?.remove,
          },
          Description: this.input.description,
          Name: this.input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyFpgaImageAttribute.FpgaImageAttribute.Name', props);
    return resource.getResponseField('FpgaImageAttribute.Name') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.Description'),
        outputPath: 'FpgaImageAttribute.Description',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
          OperationType: this.input.operationType,
          UserIds: this.input.userIds,
          UserGroups: this.input.userGroups,
          ProductCodes: this.input.productCodes,
          LoadPermission: {
            Add: this.input.loadPermission?.add,
            Remove: this.input.loadPermission?.remove,
          },
          Description: this.input.description,
          Name: this.input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyFpgaImageAttribute.FpgaImageAttribute.Description', props);
    return resource.getResponseField('FpgaImageAttribute.Description') as unknown as string;
  }

  public get loadPermissions(): shapes.Ec2LoadPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.LoadPermissions'),
        outputPath: 'FpgaImageAttribute.LoadPermissions',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
          OperationType: this.input.operationType,
          UserIds: this.input.userIds,
          UserGroups: this.input.userGroups,
          ProductCodes: this.input.productCodes,
          LoadPermission: {
            Add: this.input.loadPermission?.add,
            Remove: this.input.loadPermission?.remove,
          },
          Description: this.input.description,
          Name: this.input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyFpgaImageAttribute.FpgaImageAttribute.LoadPermissions', props);
    return resource.getResponseField('FpgaImageAttribute.LoadPermissions') as unknown as shapes.Ec2LoadPermission[];
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.ProductCodes'),
        outputPath: 'FpgaImageAttribute.ProductCodes',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
          OperationType: this.input.operationType,
          UserIds: this.input.userIds,
          UserGroups: this.input.userGroups,
          ProductCodes: this.input.productCodes,
          LoadPermission: {
            Add: this.input.loadPermission?.add,
            Remove: this.input.loadPermission?.remove,
          },
          Description: this.input.description,
          Name: this.input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyFpgaImageAttribute.FpgaImageAttribute.ProductCodes', props);
    return resource.getResponseField('FpgaImageAttribute.ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

}

export class EC2ModifyHosts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyHostsRequest) {
    super(scope, id);
  }

  public get successful(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyHosts.Successful'),
        outputPath: 'Successful',
        parameters: {
          AutoPlacement: this.input.autoPlacement,
          HostIds: this.input.hostIds,
          HostRecovery: this.input.hostRecovery,
          InstanceType: this.input.instanceType,
          InstanceFamily: this.input.instanceFamily,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyHosts.Successful', props);
    return resource.getResponseField('Successful') as unknown as string[];
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyHosts.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          AutoPlacement: this.input.autoPlacement,
          HostIds: this.input.hostIds,
          HostRecovery: this.input.hostRecovery,
          InstanceType: this.input.instanceType,
          InstanceFamily: this.input.instanceFamily,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyHosts.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ModifyInstanceCapacityReservationAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyInstanceCapacityReservationAttributesRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceCapacityReservationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceCapacityReservationAttributes.Return'),
        outputPath: 'Return',
        parameters: {
          InstanceId: this.input.instanceId,
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.input.capacityReservationSpecification.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.input.capacityReservationSpecification.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.input.capacityReservationSpecification.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceCapacityReservationAttributes.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyInstanceCreditSpecification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyInstanceCreditSpecificationRequest) {
    super(scope, id);
  }

  public get successfulInstanceCreditSpecifications(): shapes.Ec2SuccessfulInstanceCreditSpecificationItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceCreditSpecification.SuccessfulInstanceCreditSpecifications'),
        outputPath: 'SuccessfulInstanceCreditSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          InstanceCreditSpecifications: this.input.instanceCreditSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceCreditSpecification.SuccessfulInstanceCreditSpecifications', props);
    return resource.getResponseField('SuccessfulInstanceCreditSpecifications') as unknown as shapes.Ec2SuccessfulInstanceCreditSpecificationItem[];
  }

  public get unsuccessfulInstanceCreditSpecifications(): shapes.Ec2UnsuccessfulInstanceCreditSpecificationItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceCreditSpecification.UnsuccessfulInstanceCreditSpecifications'),
        outputPath: 'UnsuccessfulInstanceCreditSpecifications',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          InstanceCreditSpecifications: this.input.instanceCreditSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceCreditSpecification.UnsuccessfulInstanceCreditSpecifications', props);
    return resource.getResponseField('UnsuccessfulInstanceCreditSpecifications') as unknown as shapes.Ec2UnsuccessfulInstanceCreditSpecificationItem[];
  }

}

export class EC2ModifyInstanceEventStartTime extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyInstanceEventStartTimeRequest) {
    super(scope, id);
  }

  public get event(): EC2ModifyInstanceEventStartTimeEvent {
    return new EC2ModifyInstanceEventStartTimeEvent(this, 'Event', this.__resources, this.input);
  }

}

export class EC2ModifyInstanceEventStartTimeEvent extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyInstanceEventStartTimeRequest) {
    super(scope, id);
  }

  public get instanceEventId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.InstanceEventId'),
        outputPath: 'Event.InstanceEventId',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          InstanceEventId: this.input.instanceEventId,
          NotBefore: this.input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceEventStartTime.Event.InstanceEventId', props);
    return resource.getResponseField('Event.InstanceEventId') as unknown as string;
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.Code'),
        outputPath: 'Event.Code',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          InstanceEventId: this.input.instanceEventId,
          NotBefore: this.input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceEventStartTime.Event.Code', props);
    return resource.getResponseField('Event.Code') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.Description'),
        outputPath: 'Event.Description',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          InstanceEventId: this.input.instanceEventId,
          NotBefore: this.input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceEventStartTime.Event.Description', props);
    return resource.getResponseField('Event.Description') as unknown as string;
  }

  public get notAfter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.NotAfter'),
        outputPath: 'Event.NotAfter',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          InstanceEventId: this.input.instanceEventId,
          NotBefore: this.input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceEventStartTime.Event.NotAfter', props);
    return resource.getResponseField('Event.NotAfter') as unknown as string;
  }

  public get notBefore(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.NotBefore'),
        outputPath: 'Event.NotBefore',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          InstanceEventId: this.input.instanceEventId,
          NotBefore: this.input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceEventStartTime.Event.NotBefore', props);
    return resource.getResponseField('Event.NotBefore') as unknown as string;
  }

  public get notBeforeDeadline(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.NotBeforeDeadline'),
        outputPath: 'Event.NotBeforeDeadline',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceId: this.input.instanceId,
          InstanceEventId: this.input.instanceEventId,
          NotBefore: this.input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceEventStartTime.Event.NotBeforeDeadline', props);
    return resource.getResponseField('Event.NotBeforeDeadline') as unknown as string;
  }

}

export class EC2ModifyInstanceMetadataOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyInstanceMetadataOptionsRequest) {
    super(scope, id);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          InstanceId: this.input.instanceId,
          HttpTokens: this.input.httpTokens,
          HttpPutResponseHopLimit: this.input.httpPutResponseHopLimit,
          HttpEndpoint: this.input.httpEndpoint,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceMetadataOptions.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get instanceMetadataOptions(): EC2ModifyInstanceMetadataOptionsInstanceMetadataOptions {
    return new EC2ModifyInstanceMetadataOptionsInstanceMetadataOptions(this, 'InstanceMetadataOptions', this.__resources, this.input);
  }

}

export class EC2ModifyInstanceMetadataOptionsInstanceMetadataOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyInstanceMetadataOptionsRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceMetadataOptions.State'),
        outputPath: 'InstanceMetadataOptions.State',
        parameters: {
          InstanceId: this.input.instanceId,
          HttpTokens: this.input.httpTokens,
          HttpPutResponseHopLimit: this.input.httpPutResponseHopLimit,
          HttpEndpoint: this.input.httpEndpoint,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceMetadataOptions.InstanceMetadataOptions.State', props);
    return resource.getResponseField('InstanceMetadataOptions.State') as unknown as string;
  }

  public get httpTokens(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpTokens'),
        outputPath: 'InstanceMetadataOptions.HttpTokens',
        parameters: {
          InstanceId: this.input.instanceId,
          HttpTokens: this.input.httpTokens,
          HttpPutResponseHopLimit: this.input.httpPutResponseHopLimit,
          HttpEndpoint: this.input.httpEndpoint,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpTokens', props);
    return resource.getResponseField('InstanceMetadataOptions.HttpTokens') as unknown as string;
  }

  public get httpPutResponseHopLimit(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpPutResponseHopLimit'),
        outputPath: 'InstanceMetadataOptions.HttpPutResponseHopLimit',
        parameters: {
          InstanceId: this.input.instanceId,
          HttpTokens: this.input.httpTokens,
          HttpPutResponseHopLimit: this.input.httpPutResponseHopLimit,
          HttpEndpoint: this.input.httpEndpoint,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpPutResponseHopLimit', props);
    return resource.getResponseField('InstanceMetadataOptions.HttpPutResponseHopLimit') as unknown as number;
  }

  public get httpEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpEndpoint'),
        outputPath: 'InstanceMetadataOptions.HttpEndpoint',
        parameters: {
          InstanceId: this.input.instanceId,
          HttpTokens: this.input.httpTokens,
          HttpPutResponseHopLimit: this.input.httpPutResponseHopLimit,
          HttpEndpoint: this.input.httpEndpoint,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpEndpoint', props);
    return resource.getResponseField('InstanceMetadataOptions.HttpEndpoint') as unknown as string;
  }

}

export class EC2ModifyInstancePlacement extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyInstancePlacementRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstancePlacement',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstancePlacement.Return'),
        outputPath: 'Return',
        parameters: {
          Affinity: this.input.affinity,
          GroupName: this.input.groupName,
          HostId: this.input.hostId,
          InstanceId: this.input.instanceId,
          Tenancy: this.input.tenancy,
          PartitionNumber: this.input.partitionNumber,
          HostResourceGroupArn: this.input.hostResourceGroupArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyInstancePlacement.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyLaunchTemplate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyLaunchTemplateRequest) {
    super(scope, id);
  }

  public get launchTemplate(): EC2ModifyLaunchTemplateLaunchTemplate {
    return new EC2ModifyLaunchTemplateLaunchTemplate(this, 'LaunchTemplate', this.__resources, this.input);
  }

}

export class EC2ModifyLaunchTemplateLaunchTemplate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyLaunchTemplateRequest) {
    super(scope, id);
  }

  public get launchTemplateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.LaunchTemplateId'),
        outputPath: 'LaunchTemplate.LaunchTemplateId',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          DefaultVersion: this.input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyLaunchTemplate.LaunchTemplate.LaunchTemplateId', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateId') as unknown as string;
  }

  public get launchTemplateName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.LaunchTemplateName'),
        outputPath: 'LaunchTemplate.LaunchTemplateName',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          DefaultVersion: this.input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyLaunchTemplate.LaunchTemplate.LaunchTemplateName', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateName') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.CreateTime'),
        outputPath: 'LaunchTemplate.CreateTime',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          DefaultVersion: this.input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyLaunchTemplate.LaunchTemplate.CreateTime', props);
    return resource.getResponseField('LaunchTemplate.CreateTime') as unknown as string;
  }

  public get createdBy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.CreatedBy'),
        outputPath: 'LaunchTemplate.CreatedBy',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          DefaultVersion: this.input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyLaunchTemplate.LaunchTemplate.CreatedBy', props);
    return resource.getResponseField('LaunchTemplate.CreatedBy') as unknown as string;
  }

  public get defaultVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.DefaultVersionNumber'),
        outputPath: 'LaunchTemplate.DefaultVersionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          DefaultVersion: this.input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyLaunchTemplate.LaunchTemplate.DefaultVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.DefaultVersionNumber') as unknown as number;
  }

  public get latestVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.LatestVersionNumber'),
        outputPath: 'LaunchTemplate.LatestVersionNumber',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          DefaultVersion: this.input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyLaunchTemplate.LaunchTemplate.LatestVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.LatestVersionNumber') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.Tags'),
        outputPath: 'LaunchTemplate.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          ClientToken: this.input.clientToken,
          LaunchTemplateId: this.input.launchTemplateId,
          LaunchTemplateName: this.input.launchTemplateName,
          DefaultVersion: this.input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyLaunchTemplate.LaunchTemplate.Tags', props);
    return resource.getResponseField('LaunchTemplate.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ModifyManagedPrefixList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyManagedPrefixListRequest) {
    super(scope, id);
  }

  public get prefixList(): EC2ModifyManagedPrefixListPrefixList {
    return new EC2ModifyManagedPrefixListPrefixList(this, 'PrefixList', this.__resources, this.input);
  }

}

export class EC2ModifyManagedPrefixListPrefixList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyManagedPrefixListRequest) {
    super(scope, id);
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.PrefixListId'),
        outputPath: 'PrefixList.PrefixListId',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.PrefixListId', props);
    return resource.getResponseField('PrefixList.PrefixListId') as unknown as string;
  }

  public get addressFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.AddressFamily'),
        outputPath: 'PrefixList.AddressFamily',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.AddressFamily', props);
    return resource.getResponseField('PrefixList.AddressFamily') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.State'),
        outputPath: 'PrefixList.State',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.State', props);
    return resource.getResponseField('PrefixList.State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.StateMessage'),
        outputPath: 'PrefixList.StateMessage',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.StateMessage', props);
    return resource.getResponseField('PrefixList.StateMessage') as unknown as string;
  }

  public get prefixListArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.PrefixListArn'),
        outputPath: 'PrefixList.PrefixListArn',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.PrefixListArn', props);
    return resource.getResponseField('PrefixList.PrefixListArn') as unknown as string;
  }

  public get prefixListName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.PrefixListName'),
        outputPath: 'PrefixList.PrefixListName',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.PrefixListName', props);
    return resource.getResponseField('PrefixList.PrefixListName') as unknown as string;
  }

  public get maxEntries(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.MaxEntries'),
        outputPath: 'PrefixList.MaxEntries',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.MaxEntries', props);
    return resource.getResponseField('PrefixList.MaxEntries') as unknown as number;
  }

  public get version(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.Version'),
        outputPath: 'PrefixList.Version',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.Version', props);
    return resource.getResponseField('PrefixList.Version') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.Tags'),
        outputPath: 'PrefixList.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.Tags', props);
    return resource.getResponseField('PrefixList.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.OwnerId'),
        outputPath: 'PrefixList.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          CurrentVersion: this.input.currentVersion,
          PrefixListName: this.input.prefixListName,
          AddEntries: this.input.addEntries,
          RemoveEntries: this.input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyManagedPrefixList.PrefixList.OwnerId', props);
    return resource.getResponseField('PrefixList.OwnerId') as unknown as string;
  }

}

export class EC2ModifyReservedInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyReservedInstancesRequest) {
    super(scope, id);
  }

  public get reservedInstancesModificationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyReservedInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyReservedInstances.ReservedInstancesModificationId'),
        outputPath: 'ReservedInstancesModificationId',
        parameters: {
          ReservedInstancesIds: this.input.reservedInstancesIds,
          ClientToken: this.input.clientToken,
          TargetConfigurations: this.input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyReservedInstances.ReservedInstancesModificationId', props);
    return resource.getResponseField('ReservedInstancesModificationId') as unknown as string;
  }

}

export class EC2ModifySpotFleetRequest extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifySpotFleetRequestRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySpotFleetRequest',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifySpotFleetRequest.Return'),
        outputPath: 'Return',
        parameters: {
          ExcessCapacityTerminationPolicy: this.input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.input.launchTemplateConfigs,
          SpotFleetRequestId: this.input.spotFleetRequestId,
          TargetCapacity: this.input.targetCapacity,
          OnDemandTargetCapacity: this.input.onDemandTargetCapacity,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifySpotFleetRequest.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyTrafficMirrorFilterNetworkServices extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTrafficMirrorFilterNetworkServicesRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilter(): EC2ModifyTrafficMirrorFilterNetworkServicesTrafficMirrorFilter {
    return new EC2ModifyTrafficMirrorFilterNetworkServicesTrafficMirrorFilter(this, 'TrafficMirrorFilter', this.__resources, this.input);
  }

}

export class EC2ModifyTrafficMirrorFilterNetworkServicesTrafficMirrorFilter extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTrafficMirrorFilterNetworkServicesRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilter.TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          AddNetworkServices: this.input.addNetworkServices,
          RemoveNetworkServices: this.input.removeNetworkServices,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilter.TrafficMirrorFilterId') as unknown as string;
  }

  public get ingressFilterRules(): shapes.Ec2TrafficMirrorFilterRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.IngressFilterRules'),
        outputPath: 'TrafficMirrorFilter.IngressFilterRules',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          AddNetworkServices: this.input.addNetworkServices,
          RemoveNetworkServices: this.input.removeNetworkServices,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.IngressFilterRules', props);
    return resource.getResponseField('TrafficMirrorFilter.IngressFilterRules') as unknown as shapes.Ec2TrafficMirrorFilterRule[];
  }

  public get egressFilterRules(): shapes.Ec2TrafficMirrorFilterRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.EgressFilterRules'),
        outputPath: 'TrafficMirrorFilter.EgressFilterRules',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          AddNetworkServices: this.input.addNetworkServices,
          RemoveNetworkServices: this.input.removeNetworkServices,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.EgressFilterRules', props);
    return resource.getResponseField('TrafficMirrorFilter.EgressFilterRules') as unknown as shapes.Ec2TrafficMirrorFilterRule[];
  }

  public get networkServices(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.NetworkServices'),
        outputPath: 'TrafficMirrorFilter.NetworkServices',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          AddNetworkServices: this.input.addNetworkServices,
          RemoveNetworkServices: this.input.removeNetworkServices,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.NetworkServices', props);
    return resource.getResponseField('TrafficMirrorFilter.NetworkServices') as unknown as string[];
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.Description'),
        outputPath: 'TrafficMirrorFilter.Description',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          AddNetworkServices: this.input.addNetworkServices,
          RemoveNetworkServices: this.input.removeNetworkServices,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.Description', props);
    return resource.getResponseField('TrafficMirrorFilter.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.Tags'),
        outputPath: 'TrafficMirrorFilter.Tags',
        parameters: {
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          AddNetworkServices: this.input.addNetworkServices,
          RemoveNetworkServices: this.input.removeNetworkServices,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.Tags', props);
    return resource.getResponseField('TrafficMirrorFilter.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ModifyTrafficMirrorFilterRule extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilterRule(): EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRule {
    return new EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRule(this, 'TrafficMirrorFilterRule', this.__resources, this.input);
  }

}

export class EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRule extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get trafficMirrorFilterRuleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId'),
        outputPath: 'TrafficMirrorFilterRule.TrafficMirrorFilterRuleId',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficMirrorFilterRuleId') as unknown as string;
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilterRule.TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficMirrorFilterId') as unknown as string;
  }

  public get trafficDirection(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficDirection'),
        outputPath: 'TrafficMirrorFilterRule.TrafficDirection',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficDirection', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficDirection') as unknown as string;
  }

  public get ruleNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleNumber'),
        outputPath: 'TrafficMirrorFilterRule.RuleNumber',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleNumber', props);
    return resource.getResponseField('TrafficMirrorFilterRule.RuleNumber') as unknown as number;
  }

  public get ruleAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleAction'),
        outputPath: 'TrafficMirrorFilterRule.RuleAction',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleAction', props);
    return resource.getResponseField('TrafficMirrorFilterRule.RuleAction') as unknown as string;
  }

  public get protocol(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.Protocol'),
        outputPath: 'TrafficMirrorFilterRule.Protocol',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.Protocol', props);
    return resource.getResponseField('TrafficMirrorFilterRule.Protocol') as unknown as number;
  }

  public get destinationPortRange(): EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange {
    return new EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange(this, 'DestinationPortRange', this.__resources, this.input);
  }

  public get sourcePortRange(): EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange {
    return new EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange(this, 'SourcePortRange', this.__resources, this.input);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationCidrBlock'),
        outputPath: 'TrafficMirrorFilterRule.DestinationCidrBlock',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationCidrBlock', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationCidrBlock') as unknown as string;
  }

  public get sourceCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourceCidrBlock'),
        outputPath: 'TrafficMirrorFilterRule.SourceCidrBlock',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourceCidrBlock', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourceCidrBlock') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.Description'),
        outputPath: 'TrafficMirrorFilterRule.Description',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.Description', props);
    return resource.getResponseField('TrafficMirrorFilterRule.Description') as unknown as string;
  }

}

export class EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get fromPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.FromPort'),
        outputPath: 'TrafficMirrorFilterRule.DestinationPortRange.FromPort',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.FromPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationPortRange.FromPort') as unknown as number;
  }

  public get toPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.ToPort'),
        outputPath: 'TrafficMirrorFilterRule.DestinationPortRange.ToPort',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.ToPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationPortRange.ToPort') as unknown as number;
  }

}

export class EC2ModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest) {
    super(scope, id);
  }

  public get fromPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.FromPort'),
        outputPath: 'TrafficMirrorFilterRule.SourcePortRange.FromPort',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.FromPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourcePortRange.FromPort') as unknown as number;
  }

  public get toPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.ToPort'),
        outputPath: 'TrafficMirrorFilterRule.SourcePortRange.ToPort',
        parameters: {
          TrafficMirrorFilterRuleId: this.input.trafficMirrorFilterRuleId,
          TrafficDirection: this.input.trafficDirection,
          RuleNumber: this.input.ruleNumber,
          RuleAction: this.input.ruleAction,
          DestinationPortRange: {
            FromPort: this.input.destinationPortRange?.fromPort,
            ToPort: this.input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.input.sourcePortRange?.fromPort,
            ToPort: this.input.sourcePortRange?.toPort,
          },
          Protocol: this.input.protocol,
          DestinationCidrBlock: this.input.destinationCidrBlock,
          SourceCidrBlock: this.input.sourceCidrBlock,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.ToPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourcePortRange.ToPort') as unknown as number;
  }

}

export class EC2ModifyTrafficMirrorSession extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTrafficMirrorSessionRequest) {
    super(scope, id);
  }

  public get trafficMirrorSession(): EC2ModifyTrafficMirrorSessionTrafficMirrorSession {
    return new EC2ModifyTrafficMirrorSessionTrafficMirrorSession(this, 'TrafficMirrorSession', this.__resources, this.input);
  }

}

export class EC2ModifyTrafficMirrorSessionTrafficMirrorSession extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTrafficMirrorSessionRequest) {
    super(scope, id);
  }

  public get trafficMirrorSessionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorSessionId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorSessionId',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorSessionId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorSessionId') as unknown as string;
  }

  public get trafficMirrorTargetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorTargetId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorTargetId',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorTargetId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorTargetId') as unknown as string;
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorFilterId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.NetworkInterfaceId'),
        outputPath: 'TrafficMirrorSession.NetworkInterfaceId',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.NetworkInterfaceId', props);
    return resource.getResponseField('TrafficMirrorSession.NetworkInterfaceId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.OwnerId'),
        outputPath: 'TrafficMirrorSession.OwnerId',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.OwnerId', props);
    return resource.getResponseField('TrafficMirrorSession.OwnerId') as unknown as string;
  }

  public get packetLength(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.PacketLength'),
        outputPath: 'TrafficMirrorSession.PacketLength',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.PacketLength', props);
    return resource.getResponseField('TrafficMirrorSession.PacketLength') as unknown as number;
  }

  public get sessionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.SessionNumber'),
        outputPath: 'TrafficMirrorSession.SessionNumber',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.SessionNumber', props);
    return resource.getResponseField('TrafficMirrorSession.SessionNumber') as unknown as number;
  }

  public get virtualNetworkId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.VirtualNetworkId'),
        outputPath: 'TrafficMirrorSession.VirtualNetworkId',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.VirtualNetworkId', props);
    return resource.getResponseField('TrafficMirrorSession.VirtualNetworkId') as unknown as number;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.Description'),
        outputPath: 'TrafficMirrorSession.Description',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.Description', props);
    return resource.getResponseField('TrafficMirrorSession.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.Tags'),
        outputPath: 'TrafficMirrorSession.Tags',
        parameters: {
          TrafficMirrorSessionId: this.input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.input.trafficMirrorFilterId,
          PacketLength: this.input.packetLength,
          SessionNumber: this.input.sessionNumber,
          VirtualNetworkId: this.input.virtualNetworkId,
          Description: this.input.description,
          RemoveFields: this.input.removeFields,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTrafficMirrorSession.TrafficMirrorSession.Tags', props);
    return resource.getResponseField('TrafficMirrorSession.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ModifyTransitGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayRequest) {
    super(scope, id);
  }

  public get transitGateway(): EC2ModifyTransitGatewayTransitGateway {
    return new EC2ModifyTransitGatewayTransitGateway(this, 'TransitGateway', this.__resources, this.input);
  }

}

export class EC2ModifyTransitGatewayTransitGateway extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.TransitGatewayId'),
        outputPath: 'TransitGateway.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.TransitGatewayId', props);
    return resource.getResponseField('TransitGateway.TransitGatewayId') as unknown as string;
  }

  public get transitGatewayArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.TransitGatewayArn'),
        outputPath: 'TransitGateway.TransitGatewayArn',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.TransitGatewayArn', props);
    return resource.getResponseField('TransitGateway.TransitGatewayArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.State'),
        outputPath: 'TransitGateway.State',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.State', props);
    return resource.getResponseField('TransitGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.OwnerId'),
        outputPath: 'TransitGateway.OwnerId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.OwnerId', props);
    return resource.getResponseField('TransitGateway.OwnerId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Description'),
        outputPath: 'TransitGateway.Description',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Description', props);
    return resource.getResponseField('TransitGateway.Description') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.CreationTime'),
        outputPath: 'TransitGateway.CreationTime',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.CreationTime', props);
    return resource.getResponseField('TransitGateway.CreationTime') as unknown as string;
  }

  public get options(): EC2ModifyTransitGatewayTransitGatewayOptions {
    return new EC2ModifyTransitGatewayTransitGatewayOptions(this, 'Options', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Tags'),
        outputPath: 'TransitGateway.Tags',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Tags', props);
    return resource.getResponseField('TransitGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ModifyTransitGatewayTransitGatewayOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayRequest) {
    super(scope, id);
  }

  public get amazonSideAsn(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.AmazonSideAsn'),
        outputPath: 'TransitGateway.Options.AmazonSideAsn',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.AmazonSideAsn', props);
    return resource.getResponseField('TransitGateway.Options.AmazonSideAsn') as unknown as number;
  }

  public get autoAcceptSharedAttachments(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments'),
        outputPath: 'TransitGateway.Options.AutoAcceptSharedAttachments',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments', props);
    return resource.getResponseField('TransitGateway.Options.AutoAcceptSharedAttachments') as unknown as string;
  }

  public get defaultRouteTableAssociation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTableAssociation',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTableAssociation') as unknown as string;
  }

  public get associationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.AssociationDefaultRouteTableId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.AssociationDefaultRouteTableId') as unknown as string;
  }

  public get defaultRouteTablePropagation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTablePropagation',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTablePropagation') as unknown as string;
  }

  public get propagationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.PropagationDefaultRouteTableId',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.PropagationDefaultRouteTableId') as unknown as string;
  }

  public get vpnEcmpSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.VpnEcmpSupport'),
        outputPath: 'TransitGateway.Options.VpnEcmpSupport',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.VpnEcmpSupport', props);
    return resource.getResponseField('TransitGateway.Options.VpnEcmpSupport') as unknown as string;
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.DnsSupport'),
        outputPath: 'TransitGateway.Options.DnsSupport',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.DnsSupport', props);
    return resource.getResponseField('TransitGateway.Options.DnsSupport') as unknown as string;
  }

  public get multicastSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.MulticastSupport'),
        outputPath: 'TransitGateway.Options.MulticastSupport',
        parameters: {
          TransitGatewayId: this.input.transitGatewayId,
          Description: this.input.description,
          Options: {
            VpnEcmpSupport: this.input.options?.vpnEcmpSupport,
            DnsSupport: this.input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGateway.TransitGateway.Options.MulticastSupport', props);
    return resource.getResponseField('TransitGateway.Options.MulticastSupport') as unknown as string;
  }

}

export class EC2ModifyTransitGatewayPrefixListReference extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayPrefixListReference(): EC2ModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {
    return new EC2ModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference(this, 'TransitGatewayPrefixListReference', this.__resources, this.input);
  }

}

export class EC2ModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayRouteTableId') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListId') as unknown as string;
  }

  public get prefixListOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListOwnerId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State'),
        outputPath: 'TransitGatewayPrefixListReference.State',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.State') as unknown as string;
  }

  public get blackhole(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole'),
        outputPath: 'TransitGatewayPrefixListReference.Blackhole',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.Blackhole') as unknown as boolean;
  }

  public get transitGatewayAttachment(): EC2ModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {
    return new EC2ModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment(this, 'TransitGatewayAttachment', this.__resources, this.input);
  }

}

export class EC2ModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayPrefixListReferenceRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          PrefixListId: this.input.prefixListId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId') as unknown as string;
  }

}

export class EC2ModifyTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayVpcAttachment(): EC2ModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2ModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this, 'TransitGatewayVpcAttachment', this.__resources, this.input);
  }

}

export class EC2ModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2ModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2ModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this, 'Options', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          Options: {
            DnsSupport: this.input.options?.dnsSupport,
            Ipv6Support: this.input.options?.ipv6Support,
            ApplianceModeSupport: this.input.options?.applianceModeSupport,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2ModifyVolume extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVolumeRequest) {
    super(scope, id);
  }

  public get volumeModification(): EC2ModifyVolumeVolumeModification {
    return new EC2ModifyVolumeVolumeModification(this, 'VolumeModification', this.__resources, this.input);
  }

}

export class EC2ModifyVolumeVolumeModification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVolumeRequest) {
    super(scope, id);
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.VolumeId'),
        outputPath: 'VolumeModification.VolumeId',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.VolumeId', props);
    return resource.getResponseField('VolumeModification.VolumeId') as unknown as string;
  }

  public get modificationState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.ModificationState'),
        outputPath: 'VolumeModification.ModificationState',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.ModificationState', props);
    return resource.getResponseField('VolumeModification.ModificationState') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.StatusMessage'),
        outputPath: 'VolumeModification.StatusMessage',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.StatusMessage', props);
    return resource.getResponseField('VolumeModification.StatusMessage') as unknown as string;
  }

  public get targetSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.TargetSize'),
        outputPath: 'VolumeModification.TargetSize',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.TargetSize', props);
    return resource.getResponseField('VolumeModification.TargetSize') as unknown as number;
  }

  public get targetIops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.TargetIops'),
        outputPath: 'VolumeModification.TargetIops',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.TargetIops', props);
    return resource.getResponseField('VolumeModification.TargetIops') as unknown as number;
  }

  public get targetVolumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.TargetVolumeType'),
        outputPath: 'VolumeModification.TargetVolumeType',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.TargetVolumeType', props);
    return resource.getResponseField('VolumeModification.TargetVolumeType') as unknown as string;
  }

  public get originalSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.OriginalSize'),
        outputPath: 'VolumeModification.OriginalSize',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.OriginalSize', props);
    return resource.getResponseField('VolumeModification.OriginalSize') as unknown as number;
  }

  public get originalIops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.OriginalIops'),
        outputPath: 'VolumeModification.OriginalIops',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.OriginalIops', props);
    return resource.getResponseField('VolumeModification.OriginalIops') as unknown as number;
  }

  public get originalVolumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.OriginalVolumeType'),
        outputPath: 'VolumeModification.OriginalVolumeType',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.OriginalVolumeType', props);
    return resource.getResponseField('VolumeModification.OriginalVolumeType') as unknown as string;
  }

  public get progress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.Progress'),
        outputPath: 'VolumeModification.Progress',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.Progress', props);
    return resource.getResponseField('VolumeModification.Progress') as unknown as number;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.StartTime'),
        outputPath: 'VolumeModification.StartTime',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.StartTime', props);
    return resource.getResponseField('VolumeModification.StartTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.EndTime'),
        outputPath: 'VolumeModification.EndTime',
        parameters: {
          DryRun: this.input.dryRun,
          VolumeId: this.input.volumeId,
          Size: this.input.size,
          VolumeType: this.input.volumeType,
          Iops: this.input.iops,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVolume.VolumeModification.EndTime', props);
    return resource.getResponseField('VolumeModification.EndTime') as unknown as string;
  }

}

export class EC2ModifyVpcEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpcEndpointRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcEndpoint.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          VpcEndpointId: this.input.vpcEndpointId,
          ResetPolicy: this.input.resetPolicy,
          PolicyDocument: this.input.policyDocument,
          AddRouteTableIds: this.input.addRouteTableIds,
          RemoveRouteTableIds: this.input.removeRouteTableIds,
          AddSubnetIds: this.input.addSubnetIds,
          RemoveSubnetIds: this.input.removeSubnetIds,
          AddSecurityGroupIds: this.input.addSecurityGroupIds,
          RemoveSecurityGroupIds: this.input.removeSecurityGroupIds,
          PrivateDnsEnabled: this.input.privateDnsEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcEndpoint.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyVpcEndpointConnectionNotification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpcEndpointConnectionNotificationRequest) {
    super(scope, id);
  }

  public get returnValue(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcEndpointConnectionNotification.ReturnValue'),
        outputPath: 'ReturnValue',
        parameters: {
          DryRun: this.input.dryRun,
          ConnectionNotificationId: this.input.connectionNotificationId,
          ConnectionNotificationArn: this.input.connectionNotificationArn,
          ConnectionEvents: this.input.connectionEvents,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcEndpointConnectionNotification.ReturnValue', props);
    return resource.getResponseField('ReturnValue') as unknown as boolean;
  }

}

export class EC2ModifyVpcEndpointServiceConfiguration extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpcEndpointServiceConfigurationRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcEndpointServiceConfiguration.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          PrivateDnsName: this.input.privateDnsName,
          RemovePrivateDnsName: this.input.removePrivateDnsName,
          AcceptanceRequired: this.input.acceptanceRequired,
          AddNetworkLoadBalancerArns: this.input.addNetworkLoadBalancerArns,
          RemoveNetworkLoadBalancerArns: this.input.removeNetworkLoadBalancerArns,
          AddGatewayLoadBalancerArns: this.input.addGatewayLoadBalancerArns,
          RemoveGatewayLoadBalancerArns: this.input.removeGatewayLoadBalancerArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcEndpointServiceConfiguration.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ModifyVpcEndpointServicePermissions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpcEndpointServicePermissionsRequest) {
    super(scope, id);
  }

  public get returnValue(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcEndpointServicePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcEndpointServicePermissions.ReturnValue'),
        outputPath: 'ReturnValue',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          AddAllowedPrincipals: this.input.addAllowedPrincipals,
          RemoveAllowedPrincipals: this.input.removeAllowedPrincipals,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcEndpointServicePermissions.ReturnValue', props);
    return resource.getResponseField('ReturnValue') as unknown as boolean;
  }

}

export class EC2ModifyVpcPeeringConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpcPeeringConnectionOptionsRequest) {
    super(scope, id);
  }

  public get accepterPeeringConnectionOptions(): EC2ModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions {
    return new EC2ModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions(this, 'AccepterPeeringConnectionOptions', this.__resources, this.input);
  }

  public get requesterPeeringConnectionOptions(): EC2ModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions {
    return new EC2ModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions(this, 'RequesterPeeringConnectionOptions', this.__resources, this.input);
  }

}

export class EC2ModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpcPeeringConnectionOptionsRequest) {
    super(scope, id);
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'AccepterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('AccepterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'AccepterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('AccepterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'AccepterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('AccepterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2ModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpcPeeringConnectionOptionsRequest) {
    super(scope, id);
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'RequesterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('RequesterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'RequesterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('RequesterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'RequesterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('RequesterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2ModifyVpcTenancy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpcTenancyRequest) {
    super(scope, id);
  }

  public get returnValue(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcTenancy',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcTenancy.ReturnValue'),
        outputPath: 'ReturnValue',
        parameters: {
          VpcId: this.input.vpcId,
          InstanceTenancy: this.input.instanceTenancy,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpcTenancy.ReturnValue', props);
    return resource.getResponseField('ReturnValue') as unknown as boolean;
  }

}

export class EC2ModifyVpnConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnConnectionRequest) {
    super(scope, id);
  }

  public get vpnConnection(): EC2ModifyVpnConnectionVpnConnection {
    return new EC2ModifyVpnConnectionVpnConnection(this, 'VpnConnection', this.__resources, this.input);
  }

}

export class EC2ModifyVpnConnectionVpnConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnConnectionRequest) {
    super(scope, id);
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ModifyVpnConnectionVpnConnectionOptions {
    return new EC2ModifyVpnConnectionVpnConnectionOptions(this, 'Options', this.__resources, this.input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ModifyVpnConnectionVpnConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnConnectionRequest) {
    super(scope, id);
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          TransitGatewayId: this.input.transitGatewayId,
          CustomerGatewayId: this.input.customerGatewayId,
          VpnGatewayId: this.input.vpnGatewayId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnection.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2ModifyVpnConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnConnectionOptionsRequest) {
    super(scope, id);
  }

  public get vpnConnection(): EC2ModifyVpnConnectionOptionsVpnConnection {
    return new EC2ModifyVpnConnectionOptionsVpnConnection(this, 'VpnConnection', this.__resources, this.input);
  }

}

export class EC2ModifyVpnConnectionOptionsVpnConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnConnectionOptionsRequest) {
    super(scope, id);
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ModifyVpnConnectionOptionsVpnConnectionOptions {
    return new EC2ModifyVpnConnectionOptionsVpnConnectionOptions(this, 'Options', this.__resources, this.input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ModifyVpnConnectionOptionsVpnConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnConnectionOptionsRequest) {
    super(scope, id);
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.input.remoteIpv6NetworkCidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnConnectionOptions.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2ModifyVpnTunnelCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnTunnelCertificateRequest) {
    super(scope, id);
  }

  public get vpnConnection(): EC2ModifyVpnTunnelCertificateVpnConnection {
    return new EC2ModifyVpnTunnelCertificateVpnConnection(this, 'VpnConnection', this.__resources, this.input);
  }

}

export class EC2ModifyVpnTunnelCertificateVpnConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnTunnelCertificateRequest) {
    super(scope, id);
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ModifyVpnTunnelCertificateVpnConnectionOptions {
    return new EC2ModifyVpnTunnelCertificateVpnConnectionOptions(this, 'Options', this.__resources, this.input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ModifyVpnTunnelCertificateVpnConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnTunnelCertificateRequest) {
    super(scope, id);
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelCertificate.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2ModifyVpnTunnelOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnTunnelOptionsRequest) {
    super(scope, id);
  }

  public get vpnConnection(): EC2ModifyVpnTunnelOptionsVpnConnection {
    return new EC2ModifyVpnTunnelOptionsVpnConnection(this, 'VpnConnection', this.__resources, this.input);
  }

}

export class EC2ModifyVpnTunnelOptionsVpnConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnTunnelOptionsRequest) {
    super(scope, id);
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ModifyVpnTunnelOptionsVpnConnectionOptions {
    return new EC2ModifyVpnTunnelOptionsVpnConnectionOptions(this, 'Options', this.__resources, this.input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ModifyVpnTunnelOptionsVpnConnectionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ModifyVpnTunnelOptionsRequest) {
    super(scope, id);
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          VpnConnectionId: this.input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.input.tunnelOptions.ikeVersions,
            StartupAction: this.input.tunnelOptions.startupAction,
          },
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyVpnTunnelOptions.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2MonitorInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2MonitorInstancesRequest) {
    super(scope, id);
  }

  public get instanceMonitorings(): shapes.Ec2InstanceMonitoring[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'monitorInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.MonitorInstances.InstanceMonitorings'),
        outputPath: 'InstanceMonitorings',
        parameters: {
          InstanceIds: this.input.instanceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'MonitorInstances.InstanceMonitorings', props);
    return resource.getResponseField('InstanceMonitorings') as unknown as shapes.Ec2InstanceMonitoring[];
  }

}

export class EC2MoveAddressToVpc extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2MoveAddressToVpcRequest) {
    super(scope, id);
  }

  public get allocationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'moveAddressToVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.MoveAddressToVpc.AllocationId'),
        outputPath: 'AllocationId',
        parameters: {
          DryRun: this.input.dryRun,
          PublicIp: this.input.publicIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'MoveAddressToVpc.AllocationId', props);
    return resource.getResponseField('AllocationId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'moveAddressToVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.MoveAddressToVpc.Status'),
        outputPath: 'Status',
        parameters: {
          DryRun: this.input.dryRun,
          PublicIp: this.input.publicIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'MoveAddressToVpc.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class EC2ProvisionByoipCidr extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ProvisionByoipCidrRequest) {
    super(scope, id);
  }

  public get byoipCidr(): EC2ProvisionByoipCidrByoipCidr {
    return new EC2ProvisionByoipCidrByoipCidr(this, 'ByoipCidr', this.__resources, this.input);
  }

}

export class EC2ProvisionByoipCidrByoipCidr extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ProvisionByoipCidrRequest) {
    super(scope, id);
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'provisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ProvisionByoipCidr.ByoipCidr.Cidr'),
        outputPath: 'ByoipCidr.Cidr',
        parameters: {
          Cidr: this.input.cidr,
          CidrAuthorizationContext: {
            Message: this.input.cidrAuthorizationContext?.message,
            Signature: this.input.cidrAuthorizationContext?.signature,
          },
          PubliclyAdvertisable: this.input.publiclyAdvertisable,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          PoolTagSpecifications: this.input.poolTagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ProvisionByoipCidr.ByoipCidr.Cidr', props);
    return resource.getResponseField('ByoipCidr.Cidr') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'provisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ProvisionByoipCidr.ByoipCidr.Description'),
        outputPath: 'ByoipCidr.Description',
        parameters: {
          Cidr: this.input.cidr,
          CidrAuthorizationContext: {
            Message: this.input.cidrAuthorizationContext?.message,
            Signature: this.input.cidrAuthorizationContext?.signature,
          },
          PubliclyAdvertisable: this.input.publiclyAdvertisable,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          PoolTagSpecifications: this.input.poolTagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ProvisionByoipCidr.ByoipCidr.Description', props);
    return resource.getResponseField('ByoipCidr.Description') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'provisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ProvisionByoipCidr.ByoipCidr.StatusMessage'),
        outputPath: 'ByoipCidr.StatusMessage',
        parameters: {
          Cidr: this.input.cidr,
          CidrAuthorizationContext: {
            Message: this.input.cidrAuthorizationContext?.message,
            Signature: this.input.cidrAuthorizationContext?.signature,
          },
          PubliclyAdvertisable: this.input.publiclyAdvertisable,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          PoolTagSpecifications: this.input.poolTagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ProvisionByoipCidr.ByoipCidr.StatusMessage', props);
    return resource.getResponseField('ByoipCidr.StatusMessage') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'provisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ProvisionByoipCidr.ByoipCidr.State'),
        outputPath: 'ByoipCidr.State',
        parameters: {
          Cidr: this.input.cidr,
          CidrAuthorizationContext: {
            Message: this.input.cidrAuthorizationContext?.message,
            Signature: this.input.cidrAuthorizationContext?.signature,
          },
          PubliclyAdvertisable: this.input.publiclyAdvertisable,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          PoolTagSpecifications: this.input.poolTagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ProvisionByoipCidr.ByoipCidr.State', props);
    return resource.getResponseField('ByoipCidr.State') as unknown as string;
  }

}

export class EC2PurchaseHostReservation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2PurchaseHostReservationRequest) {
    super(scope, id);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          ClientToken: this.input.clientToken,
          CurrencyCode: this.input.currencyCode,
          HostIdSet: this.input.hostIdSet,
          LimitPrice: this.input.limitPrice,
          OfferingId: this.input.offeringId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseHostReservation.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          ClientToken: this.input.clientToken,
          CurrencyCode: this.input.currencyCode,
          HostIdSet: this.input.hostIdSet,
          LimitPrice: this.input.limitPrice,
          OfferingId: this.input.offeringId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseHostReservation.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get purchase(): shapes.Ec2Purchase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.Purchase'),
        outputPath: 'Purchase',
        parameters: {
          ClientToken: this.input.clientToken,
          CurrencyCode: this.input.currencyCode,
          HostIdSet: this.input.hostIdSet,
          LimitPrice: this.input.limitPrice,
          OfferingId: this.input.offeringId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseHostReservation.Purchase', props);
    return resource.getResponseField('Purchase') as unknown as shapes.Ec2Purchase[];
  }

  public get totalHourlyPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.TotalHourlyPrice'),
        outputPath: 'TotalHourlyPrice',
        parameters: {
          ClientToken: this.input.clientToken,
          CurrencyCode: this.input.currencyCode,
          HostIdSet: this.input.hostIdSet,
          LimitPrice: this.input.limitPrice,
          OfferingId: this.input.offeringId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseHostReservation.TotalHourlyPrice', props);
    return resource.getResponseField('TotalHourlyPrice') as unknown as string;
  }

  public get totalUpfrontPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.TotalUpfrontPrice'),
        outputPath: 'TotalUpfrontPrice',
        parameters: {
          ClientToken: this.input.clientToken,
          CurrencyCode: this.input.currencyCode,
          HostIdSet: this.input.hostIdSet,
          LimitPrice: this.input.limitPrice,
          OfferingId: this.input.offeringId,
          TagSpecifications: this.input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseHostReservation.TotalUpfrontPrice', props);
    return resource.getResponseField('TotalUpfrontPrice') as unknown as string;
  }

}

export class EC2PurchaseReservedInstancesOffering extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2PurchaseReservedInstancesOfferingRequest) {
    super(scope, id);
  }

  public get reservedInstancesId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedInstancesOffering',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseReservedInstancesOffering.ReservedInstancesId'),
        outputPath: 'ReservedInstancesId',
        parameters: {
          InstanceCount: this.input.instanceCount,
          ReservedInstancesOfferingId: this.input.reservedInstancesOfferingId,
          DryRun: this.input.dryRun,
          LimitPrice: {
            Amount: this.input.limitPrice?.amount,
            CurrencyCode: this.input.limitPrice?.currencyCode,
          },
          PurchaseTime: this.input.purchaseTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedInstancesOffering.ReservedInstancesId', props);
    return resource.getResponseField('ReservedInstancesId') as unknown as string;
  }

}

export class EC2PurchaseScheduledInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2PurchaseScheduledInstancesRequest) {
    super(scope, id);
  }

  public get scheduledInstanceSet(): shapes.Ec2ScheduledInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseScheduledInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseScheduledInstances.ScheduledInstanceSet'),
        outputPath: 'ScheduledInstanceSet',
        parameters: {
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          PurchaseRequests: this.input.purchaseRequests,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseScheduledInstances.ScheduledInstanceSet', props);
    return resource.getResponseField('ScheduledInstanceSet') as unknown as shapes.Ec2ScheduledInstance[];
  }

}

export class EC2RegisterImage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RegisterImageRequest) {
    super(scope, id);
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          ImageLocation: this.input.imageLocation,
          Architecture: this.input.architecture,
          BlockDeviceMappings: this.input.blockDeviceMappings,
          Description: this.input.description,
          DryRun: this.input.dryRun,
          EnaSupport: this.input.enaSupport,
          KernelId: this.input.kernelId,
          Name: this.input.name,
          BillingProducts: this.input.billingProducts,
          RamdiskId: this.input.ramdiskId,
          RootDeviceName: this.input.rootDeviceName,
          SriovNetSupport: this.input.sriovNetSupport,
          VirtualizationType: this.input.virtualizationType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

}

export class EC2RegisterInstanceEventNotificationAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RegisterInstanceEventNotificationAttributesRequest) {
    super(scope, id);
  }

  public get instanceTagAttribute(): EC2RegisterInstanceEventNotificationAttributesInstanceTagAttribute {
    return new EC2RegisterInstanceEventNotificationAttributesInstanceTagAttribute(this, 'InstanceTagAttribute', this.__resources, this.input);
  }

}

export class EC2RegisterInstanceEventNotificationAttributesInstanceTagAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RegisterInstanceEventNotificationAttributesRequest) {
    super(scope, id);
  }

  public get instanceTagKeys(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys'),
        outputPath: 'InstanceTagAttribute.InstanceTagKeys',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceTagAttribute: {
            IncludeAllTagsOfInstance: this.input.instanceTagAttribute?.includeAllTagsOfInstance,
            InstanceTagKeys: this.input.instanceTagAttribute?.instanceTagKeys,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys', props);
    return resource.getResponseField('InstanceTagAttribute.InstanceTagKeys') as unknown as string[];
  }

  public get includeAllTagsOfInstance(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance'),
        outputPath: 'InstanceTagAttribute.IncludeAllTagsOfInstance',
        parameters: {
          DryRun: this.input.dryRun,
          InstanceTagAttribute: {
            IncludeAllTagsOfInstance: this.input.instanceTagAttribute?.includeAllTagsOfInstance,
            InstanceTagKeys: this.input.instanceTagAttribute?.instanceTagKeys,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance', props);
    return resource.getResponseField('InstanceTagAttribute.IncludeAllTagsOfInstance') as unknown as boolean;
  }

}

export class EC2RegisterTransitGatewayMulticastGroupMembers extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RegisterTransitGatewayMulticastGroupMembersRequest) {
    super(scope, id);
  }

  public get registeredMulticastGroupMembers(): EC2RegisterTransitGatewayMulticastGroupMembersRegisteredMulticastGroupMembers {
    return new EC2RegisterTransitGatewayMulticastGroupMembersRegisteredMulticastGroupMembers(this, 'RegisteredMulticastGroupMembers', this.__resources, this.input);
  }

}

export class EC2RegisterTransitGatewayMulticastGroupMembersRegisteredMulticastGroupMembers extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RegisterTransitGatewayMulticastGroupMembersRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.TransitGatewayMulticastDomainId'),
        outputPath: 'RegisteredMulticastGroupMembers.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('RegisteredMulticastGroupMembers.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get registeredNetworkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.RegisteredNetworkInterfaceIds'),
        outputPath: 'RegisteredMulticastGroupMembers.RegisteredNetworkInterfaceIds',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.RegisteredNetworkInterfaceIds', props);
    return resource.getResponseField('RegisteredMulticastGroupMembers.RegisteredNetworkInterfaceIds') as unknown as string[];
  }

  public get groupIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.GroupIpAddress'),
        outputPath: 'RegisteredMulticastGroupMembers.GroupIpAddress',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.GroupIpAddress', props);
    return resource.getResponseField('RegisteredMulticastGroupMembers.GroupIpAddress') as unknown as string;
  }

}

export class EC2RegisterTransitGatewayMulticastGroupSources extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RegisterTransitGatewayMulticastGroupSourcesRequest) {
    super(scope, id);
  }

  public get registeredMulticastGroupSources(): EC2RegisterTransitGatewayMulticastGroupSourcesRegisteredMulticastGroupSources {
    return new EC2RegisterTransitGatewayMulticastGroupSourcesRegisteredMulticastGroupSources(this, 'RegisteredMulticastGroupSources', this.__resources, this.input);
  }

}

export class EC2RegisterTransitGatewayMulticastGroupSourcesRegisteredMulticastGroupSources extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RegisterTransitGatewayMulticastGroupSourcesRequest) {
    super(scope, id);
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.TransitGatewayMulticastDomainId'),
        outputPath: 'RegisteredMulticastGroupSources.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('RegisteredMulticastGroupSources.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get registeredNetworkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.RegisteredNetworkInterfaceIds'),
        outputPath: 'RegisteredMulticastGroupSources.RegisteredNetworkInterfaceIds',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.RegisteredNetworkInterfaceIds', props);
    return resource.getResponseField('RegisteredMulticastGroupSources.RegisteredNetworkInterfaceIds') as unknown as string[];
  }

  public get groupIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.GroupIpAddress'),
        outputPath: 'RegisteredMulticastGroupSources.GroupIpAddress',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.input.groupIpAddress,
          NetworkInterfaceIds: this.input.networkInterfaceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.GroupIpAddress', props);
    return resource.getResponseField('RegisteredMulticastGroupSources.GroupIpAddress') as unknown as string;
  }

}

export class EC2RejectTransitGatewayPeeringAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayPeeringAttachment(): EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {
    return new EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment(this, 'TransitGatewayPeeringAttachment', this.__resources, this.input);
  }

}

export class EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPeeringAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get requesterTgwInfo(): EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {
    return new EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo(this, 'RequesterTgwInfo', this.__resources, this.input);
  }

  public get accepterTgwInfo(): EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {
    return new EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo(this, 'AccepterTgwInfo', this.__resources, this.input);
  }

  public get status(): EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {
    return new EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus(this, 'Status', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State'),
        outputPath: 'TransitGatewayPeeringAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime'),
        outputPath: 'TransitGatewayPeeringAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags'),
        outputPath: 'TransitGatewayPeeringAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.Region') as unknown as string;
  }

}

export class EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.Region') as unknown as string;
  }

}

export class EC2RejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Code',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Message',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Message') as unknown as string;
  }

}

export class EC2RejectTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayVpcAttachment(): EC2RejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2RejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this, 'TransitGatewayVpcAttachment', this.__resources, this.input);
  }

}

export class EC2RejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachment extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2RejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2RejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this, 'Options', this.__resources, this.input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2RejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectTransitGatewayVpcAttachmentRequest) {
    super(scope, id);
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2RejectVpcEndpointConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectVpcEndpointConnectionsRequest) {
    super(scope, id);
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectVpcEndpointConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectVpcEndpointConnections.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
          VpcEndpointIds: this.input.vpcEndpointIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectVpcEndpointConnections.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2RejectVpcPeeringConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RejectVpcPeeringConnectionRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectVpcPeeringConnection.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          VpcPeeringConnectionId: this.input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectVpcPeeringConnection.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ReleaseHosts extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReleaseHostsRequest) {
    super(scope, id);
  }

  public get successful(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'releaseHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReleaseHosts.Successful'),
        outputPath: 'Successful',
        parameters: {
          HostIds: this.input.hostIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReleaseHosts.Successful', props);
    return resource.getResponseField('Successful') as unknown as string[];
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'releaseHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReleaseHosts.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          HostIds: this.input.hostIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReleaseHosts.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ReplaceIamInstanceProfileAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReplaceIamInstanceProfileAssociationRequest) {
    super(scope, id);
  }

  public get iamInstanceProfileAssociation(): EC2ReplaceIamInstanceProfileAssociationIamInstanceProfileAssociation {
    return new EC2ReplaceIamInstanceProfileAssociationIamInstanceProfileAssociation(this, 'IamInstanceProfileAssociation', this.__resources, this.input);
  }

}

export class EC2ReplaceIamInstanceProfileAssociationIamInstanceProfileAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReplaceIamInstanceProfileAssociationRequest) {
    super(scope, id);
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.AssociationId'),
        outputPath: 'IamInstanceProfileAssociation.AssociationId',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.AssociationId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.AssociationId') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.InstanceId'),
        outputPath: 'IamInstanceProfileAssociation.InstanceId',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.InstanceId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.InstanceId') as unknown as string;
  }

  public get iamInstanceProfile(): EC2ReplaceIamInstanceProfileAssociationIamInstanceProfileAssociationIamInstanceProfile {
    return new EC2ReplaceIamInstanceProfileAssociationIamInstanceProfileAssociationIamInstanceProfile(this, 'IamInstanceProfile', this.__resources, this.input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.State'),
        outputPath: 'IamInstanceProfileAssociation.State',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.State', props);
    return resource.getResponseField('IamInstanceProfileAssociation.State') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.Timestamp'),
        outputPath: 'IamInstanceProfileAssociation.Timestamp',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.Timestamp', props);
    return resource.getResponseField('IamInstanceProfileAssociation.Timestamp') as unknown as string;
  }

}

export class EC2ReplaceIamInstanceProfileAssociationIamInstanceProfileAssociationIamInstanceProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReplaceIamInstanceProfileAssociationRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.IamInstanceProfile.Arn'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Arn',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.IamInstanceProfile.Arn', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.IamInstanceProfile.Id'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Id',
        parameters: {
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile.arn,
            Name: this.input.iamInstanceProfile.name,
          },
          AssociationId: this.input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.IamInstanceProfile.Id', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Id') as unknown as string;
  }

}

export class EC2ReplaceNetworkAclAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReplaceNetworkAclAssociationRequest) {
    super(scope, id);
  }

  public get newAssociationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceNetworkAclAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceNetworkAclAssociation.NewAssociationId'),
        outputPath: 'NewAssociationId',
        parameters: {
          AssociationId: this.input.associationId,
          DryRun: this.input.dryRun,
          NetworkAclId: this.input.networkAclId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceNetworkAclAssociation.NewAssociationId', props);
    return resource.getResponseField('NewAssociationId') as unknown as string;
  }

}

export class EC2ReplaceRouteTableAssociation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReplaceRouteTableAssociationRequest) {
    super(scope, id);
  }

  public get newAssociationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceRouteTableAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceRouteTableAssociation.NewAssociationId'),
        outputPath: 'NewAssociationId',
        parameters: {
          AssociationId: this.input.associationId,
          DryRun: this.input.dryRun,
          RouteTableId: this.input.routeTableId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceRouteTableAssociation.NewAssociationId', props);
    return resource.getResponseField('NewAssociationId') as unknown as string;
  }

  public get associationState(): EC2ReplaceRouteTableAssociationAssociationState {
    return new EC2ReplaceRouteTableAssociationAssociationState(this, 'AssociationState', this.__resources, this.input);
  }

}

export class EC2ReplaceRouteTableAssociationAssociationState extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReplaceRouteTableAssociationRequest) {
    super(scope, id);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceRouteTableAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceRouteTableAssociation.AssociationState.State'),
        outputPath: 'AssociationState.State',
        parameters: {
          AssociationId: this.input.associationId,
          DryRun: this.input.dryRun,
          RouteTableId: this.input.routeTableId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceRouteTableAssociation.AssociationState.State', props);
    return resource.getResponseField('AssociationState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceRouteTableAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceRouteTableAssociation.AssociationState.StatusMessage'),
        outputPath: 'AssociationState.StatusMessage',
        parameters: {
          AssociationId: this.input.associationId,
          DryRun: this.input.dryRun,
          RouteTableId: this.input.routeTableId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceRouteTableAssociation.AssociationState.StatusMessage', props);
    return resource.getResponseField('AssociationState.StatusMessage') as unknown as string;
  }

}

export class EC2ReplaceTransitGatewayRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReplaceTransitGatewayRouteRequest) {
    super(scope, id);
  }

  public get route(): EC2ReplaceTransitGatewayRouteRoute {
    return new EC2ReplaceTransitGatewayRouteRoute(this, 'Route', this.__resources, this.input);
  }

}

export class EC2ReplaceTransitGatewayRouteRoute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ReplaceTransitGatewayRouteRequest) {
    super(scope, id);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceTransitGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.PrefixListId'),
        outputPath: 'Route.PrefixListId',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceTransitGatewayRoute.Route.PrefixListId', props);
    return resource.getResponseField('Route.PrefixListId') as unknown as string;
  }

  public get transitGatewayAttachments(): shapes.Ec2TransitGatewayRouteAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.TransitGatewayAttachments'),
        outputPath: 'Route.TransitGatewayAttachments',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceTransitGatewayRoute.Route.TransitGatewayAttachments', props);
    return resource.getResponseField('Route.TransitGatewayAttachments') as unknown as shapes.Ec2TransitGatewayRouteAttachment[];
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceTransitGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          DestinationCidrBlock: this.input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.input.transitGatewayAttachmentId,
          Blackhole: this.input.blackhole,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ReplaceTransitGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

}

export class EC2RequestSpotFleet extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RequestSpotFleetRequest) {
    super(scope, id);
  }

  public get spotFleetRequestId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'requestSpotFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RequestSpotFleet.SpotFleetRequestId'),
        outputPath: 'SpotFleetRequestId',
        parameters: {
          DryRun: this.input.dryRun,
          SpotFleetRequestConfig: {
            AllocationStrategy: this.input.spotFleetRequestConfig.allocationStrategy,
            OnDemandAllocationStrategy: this.input.spotFleetRequestConfig.onDemandAllocationStrategy,
            SpotMaintenanceStrategies: {
              CapacityRebalance: {
                ReplacementStrategy: this.input.spotFleetRequestConfig.spotMaintenanceStrategies?.capacityRebalance?.replacementStrategy,
              },
            },
            ClientToken: this.input.spotFleetRequestConfig.clientToken,
            ExcessCapacityTerminationPolicy: this.input.spotFleetRequestConfig.excessCapacityTerminationPolicy,
            FulfilledCapacity: this.input.spotFleetRequestConfig.fulfilledCapacity,
            OnDemandFulfilledCapacity: this.input.spotFleetRequestConfig.onDemandFulfilledCapacity,
            IamFleetRole: this.input.spotFleetRequestConfig.iamFleetRole,
            LaunchSpecifications: this.input.spotFleetRequestConfig.launchSpecifications,
            LaunchTemplateConfigs: this.input.spotFleetRequestConfig.launchTemplateConfigs,
            SpotPrice: this.input.spotFleetRequestConfig.spotPrice,
            TargetCapacity: this.input.spotFleetRequestConfig.targetCapacity,
            OnDemandTargetCapacity: this.input.spotFleetRequestConfig.onDemandTargetCapacity,
            OnDemandMaxTotalPrice: this.input.spotFleetRequestConfig.onDemandMaxTotalPrice,
            SpotMaxTotalPrice: this.input.spotFleetRequestConfig.spotMaxTotalPrice,
            TerminateInstancesWithExpiration: this.input.spotFleetRequestConfig.terminateInstancesWithExpiration,
            Type: this.input.spotFleetRequestConfig.type,
            ValidFrom: this.input.spotFleetRequestConfig.validFrom,
            ValidUntil: this.input.spotFleetRequestConfig.validUntil,
            ReplaceUnhealthyInstances: this.input.spotFleetRequestConfig.replaceUnhealthyInstances,
            InstanceInterruptionBehavior: this.input.spotFleetRequestConfig.instanceInterruptionBehavior,
            LoadBalancersConfig: {
              ClassicLoadBalancersConfig: {
                ClassicLoadBalancers: this.input.spotFleetRequestConfig.loadBalancersConfig?.classicLoadBalancersConfig?.classicLoadBalancers,
              },
              TargetGroupsConfig: {
                TargetGroups: this.input.spotFleetRequestConfig.loadBalancersConfig?.targetGroupsConfig?.targetGroups,
              },
            },
            InstancePoolsToUseCount: this.input.spotFleetRequestConfig.instancePoolsToUseCount,
            TagSpecifications: this.input.spotFleetRequestConfig.tagSpecifications,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RequestSpotFleet.SpotFleetRequestId', props);
    return resource.getResponseField('SpotFleetRequestId') as unknown as string;
  }

}

export class EC2RequestSpotInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RequestSpotInstancesRequest) {
    super(scope, id);
  }

  public get spotInstanceRequests(): shapes.Ec2SpotInstanceRequest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'requestSpotInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RequestSpotInstances.SpotInstanceRequests'),
        outputPath: 'SpotInstanceRequests',
        parameters: {
          AvailabilityZoneGroup: this.input.availabilityZoneGroup,
          BlockDurationMinutes: this.input.blockDurationMinutes,
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          InstanceCount: this.input.instanceCount,
          LaunchGroup: this.input.launchGroup,
          LaunchSpecification: {
            SecurityGroupIds: this.input.launchSpecification?.securityGroupIds,
            SecurityGroups: this.input.launchSpecification?.securityGroups,
            AddressingType: this.input.launchSpecification?.addressingType,
            BlockDeviceMappings: this.input.launchSpecification?.blockDeviceMappings,
            EbsOptimized: this.input.launchSpecification?.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchSpecification?.iamInstanceProfile?.arn,
              Name: this.input.launchSpecification?.iamInstanceProfile?.name,
            },
            ImageId: this.input.launchSpecification?.imageId,
            InstanceType: this.input.launchSpecification?.instanceType,
            KernelId: this.input.launchSpecification?.kernelId,
            KeyName: this.input.launchSpecification?.keyName,
            Monitoring: {
              Enabled: this.input.launchSpecification?.monitoring?.enabled,
            },
            NetworkInterfaces: this.input.launchSpecification?.networkInterfaces,
            Placement: {
              AvailabilityZone: this.input.launchSpecification?.placement?.availabilityZone,
              GroupName: this.input.launchSpecification?.placement?.groupName,
              Tenancy: this.input.launchSpecification?.placement?.tenancy,
            },
            RamdiskId: this.input.launchSpecification?.ramdiskId,
            SubnetId: this.input.launchSpecification?.subnetId,
            UserData: this.input.launchSpecification?.userData,
          },
          SpotPrice: this.input.spotPrice,
          Type: this.input.type,
          ValidFrom: this.input.validFrom,
          ValidUntil: this.input.validUntil,
          TagSpecifications: this.input.tagSpecifications,
          InstanceInterruptionBehavior: this.input.instanceInterruptionBehavior,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RequestSpotInstances.SpotInstanceRequests', props);
    return resource.getResponseField('SpotInstanceRequests') as unknown as shapes.Ec2SpotInstanceRequest[];
  }

}

export class EC2ResetEbsDefaultKmsKeyId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ResetEbsDefaultKmsKeyIdRequest) {
    super(scope, id);
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetEbsDefaultKmsKeyId',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetEbsDefaultKmsKeyId.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResetEbsDefaultKmsKeyId.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

}

export class EC2ResetFpgaImageAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2ResetFpgaImageAttributeRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetFpgaImageAttribute.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          FpgaImageId: this.input.fpgaImageId,
          Attribute: this.input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResetFpgaImageAttribute.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2RestoreAddressToClassic extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RestoreAddressToClassicRequest) {
    super(scope, id);
  }

  public get publicIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreAddressToClassic',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreAddressToClassic.PublicIp'),
        outputPath: 'PublicIp',
        parameters: {
          DryRun: this.input.dryRun,
          PublicIp: this.input.publicIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreAddressToClassic.PublicIp', props);
    return resource.getResponseField('PublicIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreAddressToClassic',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreAddressToClassic.Status'),
        outputPath: 'Status',
        parameters: {
          DryRun: this.input.dryRun,
          PublicIp: this.input.publicIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreAddressToClassic.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class EC2RestoreManagedPrefixListVersion extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RestoreManagedPrefixListVersionRequest) {
    super(scope, id);
  }

  public get prefixList(): EC2RestoreManagedPrefixListVersionPrefixList {
    return new EC2RestoreManagedPrefixListVersionPrefixList(this, 'PrefixList', this.__resources, this.input);
  }

}

export class EC2RestoreManagedPrefixListVersionPrefixList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RestoreManagedPrefixListVersionRequest) {
    super(scope, id);
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.PrefixListId'),
        outputPath: 'PrefixList.PrefixListId',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.PrefixListId', props);
    return resource.getResponseField('PrefixList.PrefixListId') as unknown as string;
  }

  public get addressFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.AddressFamily'),
        outputPath: 'PrefixList.AddressFamily',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.AddressFamily', props);
    return resource.getResponseField('PrefixList.AddressFamily') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.State'),
        outputPath: 'PrefixList.State',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.State', props);
    return resource.getResponseField('PrefixList.State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.StateMessage'),
        outputPath: 'PrefixList.StateMessage',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.StateMessage', props);
    return resource.getResponseField('PrefixList.StateMessage') as unknown as string;
  }

  public get prefixListArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.PrefixListArn'),
        outputPath: 'PrefixList.PrefixListArn',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.PrefixListArn', props);
    return resource.getResponseField('PrefixList.PrefixListArn') as unknown as string;
  }

  public get prefixListName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.PrefixListName'),
        outputPath: 'PrefixList.PrefixListName',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.PrefixListName', props);
    return resource.getResponseField('PrefixList.PrefixListName') as unknown as string;
  }

  public get maxEntries(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.MaxEntries'),
        outputPath: 'PrefixList.MaxEntries',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.MaxEntries', props);
    return resource.getResponseField('PrefixList.MaxEntries') as unknown as number;
  }

  public get version(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.Version'),
        outputPath: 'PrefixList.Version',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.Version', props);
    return resource.getResponseField('PrefixList.Version') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.Tags'),
        outputPath: 'PrefixList.Tags',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.Tags', props);
    return resource.getResponseField('PrefixList.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.OwnerId'),
        outputPath: 'PrefixList.OwnerId',
        parameters: {
          DryRun: this.input.dryRun,
          PrefixListId: this.input.prefixListId,
          PreviousVersion: this.input.previousVersion,
          CurrentVersion: this.input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreManagedPrefixListVersion.PrefixList.OwnerId', props);
    return resource.getResponseField('PrefixList.OwnerId') as unknown as string;
  }

}

export class EC2RevokeClientVpnIngress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RevokeClientVpnIngressRequest) {
    super(scope, id);
  }

  public get status(): EC2RevokeClientVpnIngressStatus {
    return new EC2RevokeClientVpnIngressStatus(this, 'Status', this.__resources, this.input);
  }

}

export class EC2RevokeClientVpnIngressStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RevokeClientVpnIngressRequest) {
    super(scope, id);
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClientVpnIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeClientVpnIngress.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          TargetNetworkCidr: this.input.targetNetworkCidr,
          AccessGroupId: this.input.accessGroupId,
          RevokeAllGroups: this.input.revokeAllGroups,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeClientVpnIngress.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClientVpnIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeClientVpnIngress.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          TargetNetworkCidr: this.input.targetNetworkCidr,
          AccessGroupId: this.input.accessGroupId,
          RevokeAllGroups: this.input.revokeAllGroups,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeClientVpnIngress.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2RevokeSecurityGroupEgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RevokeSecurityGroupEgressRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSecurityGroupEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeSecurityGroupEgress.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          GroupId: this.input.groupId,
          IpPermissions: this.input.ipPermissions,
          CidrIp: this.input.cidrIp,
          FromPort: this.input.fromPort,
          IpProtocol: this.input.ipProtocol,
          ToPort: this.input.toPort,
          SourceSecurityGroupName: this.input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.input.sourceSecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSecurityGroupEgress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

  public get unknownIpPermissions(): shapes.Ec2IpPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSecurityGroupEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeSecurityGroupEgress.UnknownIpPermissions'),
        outputPath: 'UnknownIpPermissions',
        parameters: {
          DryRun: this.input.dryRun,
          GroupId: this.input.groupId,
          IpPermissions: this.input.ipPermissions,
          CidrIp: this.input.cidrIp,
          FromPort: this.input.fromPort,
          IpProtocol: this.input.ipProtocol,
          ToPort: this.input.toPort,
          SourceSecurityGroupName: this.input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.input.sourceSecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSecurityGroupEgress.UnknownIpPermissions', props);
    return resource.getResponseField('UnknownIpPermissions') as unknown as shapes.Ec2IpPermission[];
  }

}

export class EC2RevokeSecurityGroupIngress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RevokeSecurityGroupIngressRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSecurityGroupIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeSecurityGroupIngress.Return'),
        outputPath: 'Return',
        parameters: {
          CidrIp: this.input.cidrIp,
          FromPort: this.input.fromPort,
          GroupId: this.input.groupId,
          GroupName: this.input.groupName,
          IpPermissions: this.input.ipPermissions,
          IpProtocol: this.input.ipProtocol,
          SourceSecurityGroupName: this.input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.input.sourceSecurityGroupOwnerId,
          ToPort: this.input.toPort,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSecurityGroupIngress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

  public get unknownIpPermissions(): shapes.Ec2IpPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSecurityGroupIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeSecurityGroupIngress.UnknownIpPermissions'),
        outputPath: 'UnknownIpPermissions',
        parameters: {
          CidrIp: this.input.cidrIp,
          FromPort: this.input.fromPort,
          GroupId: this.input.groupId,
          GroupName: this.input.groupName,
          IpPermissions: this.input.ipPermissions,
          IpProtocol: this.input.ipProtocol,
          SourceSecurityGroupName: this.input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.input.sourceSecurityGroupOwnerId,
          ToPort: this.input.toPort,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeSecurityGroupIngress.UnknownIpPermissions', props);
    return resource.getResponseField('UnknownIpPermissions') as unknown as shapes.Ec2IpPermission[];
  }

}

export class EC2RunInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RunInstancesRequest) {
    super(scope, id);
  }

  public get groups(): shapes.Ec2GroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.Groups'),
        outputPath: 'Groups',
        parameters: {
          BlockDeviceMappings: this.input.blockDeviceMappings,
          ImageId: this.input.imageId,
          InstanceType: this.input.instanceType,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          KernelId: this.input.kernelId,
          KeyName: this.input.keyName,
          MaxCount: this.input.maxCount,
          MinCount: this.input.minCount,
          Monitoring: {
            Enabled: this.input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.input.placement?.availabilityZone,
            Affinity: this.input.placement?.affinity,
            GroupName: this.input.placement?.groupName,
            PartitionNumber: this.input.placement?.partitionNumber,
            HostId: this.input.placement?.hostId,
            Tenancy: this.input.placement?.tenancy,
            SpreadDomain: this.input.placement?.spreadDomain,
            HostResourceGroupArn: this.input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.input.ramdiskId,
          SecurityGroupIds: this.input.securityGroupIds,
          SecurityGroups: this.input.securityGroups,
          SubnetId: this.input.subnetId,
          UserData: this.input.userData,
          AdditionalInfo: this.input.additionalInfo,
          ClientToken: this.input.clientToken,
          DisableApiTermination: this.input.disableApiTermination,
          DryRun: this.input.dryRun,
          EbsOptimized: this.input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile?.arn,
            Name: this.input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.input.networkInterfaces,
          PrivateIpAddress: this.input.privateIpAddress,
          ElasticGpuSpecification: this.input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.input.elasticInferenceAccelerators,
          TagSpecifications: this.input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.input.launchTemplate?.launchTemplateName,
            Version: this.input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.input.cpuOptions?.coreCount,
            ThreadsPerCore: this.input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RunInstances.Groups', props);
    return resource.getResponseField('Groups') as unknown as shapes.Ec2GroupIdentifier[];
  }

  public get instances(): shapes.Ec2Instance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.Instances'),
        outputPath: 'Instances',
        parameters: {
          BlockDeviceMappings: this.input.blockDeviceMappings,
          ImageId: this.input.imageId,
          InstanceType: this.input.instanceType,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          KernelId: this.input.kernelId,
          KeyName: this.input.keyName,
          MaxCount: this.input.maxCount,
          MinCount: this.input.minCount,
          Monitoring: {
            Enabled: this.input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.input.placement?.availabilityZone,
            Affinity: this.input.placement?.affinity,
            GroupName: this.input.placement?.groupName,
            PartitionNumber: this.input.placement?.partitionNumber,
            HostId: this.input.placement?.hostId,
            Tenancy: this.input.placement?.tenancy,
            SpreadDomain: this.input.placement?.spreadDomain,
            HostResourceGroupArn: this.input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.input.ramdiskId,
          SecurityGroupIds: this.input.securityGroupIds,
          SecurityGroups: this.input.securityGroups,
          SubnetId: this.input.subnetId,
          UserData: this.input.userData,
          AdditionalInfo: this.input.additionalInfo,
          ClientToken: this.input.clientToken,
          DisableApiTermination: this.input.disableApiTermination,
          DryRun: this.input.dryRun,
          EbsOptimized: this.input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile?.arn,
            Name: this.input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.input.networkInterfaces,
          PrivateIpAddress: this.input.privateIpAddress,
          ElasticGpuSpecification: this.input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.input.elasticInferenceAccelerators,
          TagSpecifications: this.input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.input.launchTemplate?.launchTemplateName,
            Version: this.input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.input.cpuOptions?.coreCount,
            ThreadsPerCore: this.input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RunInstances.Instances', props);
    return resource.getResponseField('Instances') as unknown as shapes.Ec2Instance[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.OwnerId'),
        outputPath: 'OwnerId',
        parameters: {
          BlockDeviceMappings: this.input.blockDeviceMappings,
          ImageId: this.input.imageId,
          InstanceType: this.input.instanceType,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          KernelId: this.input.kernelId,
          KeyName: this.input.keyName,
          MaxCount: this.input.maxCount,
          MinCount: this.input.minCount,
          Monitoring: {
            Enabled: this.input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.input.placement?.availabilityZone,
            Affinity: this.input.placement?.affinity,
            GroupName: this.input.placement?.groupName,
            PartitionNumber: this.input.placement?.partitionNumber,
            HostId: this.input.placement?.hostId,
            Tenancy: this.input.placement?.tenancy,
            SpreadDomain: this.input.placement?.spreadDomain,
            HostResourceGroupArn: this.input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.input.ramdiskId,
          SecurityGroupIds: this.input.securityGroupIds,
          SecurityGroups: this.input.securityGroups,
          SubnetId: this.input.subnetId,
          UserData: this.input.userData,
          AdditionalInfo: this.input.additionalInfo,
          ClientToken: this.input.clientToken,
          DisableApiTermination: this.input.disableApiTermination,
          DryRun: this.input.dryRun,
          EbsOptimized: this.input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile?.arn,
            Name: this.input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.input.networkInterfaces,
          PrivateIpAddress: this.input.privateIpAddress,
          ElasticGpuSpecification: this.input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.input.elasticInferenceAccelerators,
          TagSpecifications: this.input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.input.launchTemplate?.launchTemplateName,
            Version: this.input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.input.cpuOptions?.coreCount,
            ThreadsPerCore: this.input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RunInstances.OwnerId', props);
    return resource.getResponseField('OwnerId') as unknown as string;
  }

  public get requesterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.RequesterId'),
        outputPath: 'RequesterId',
        parameters: {
          BlockDeviceMappings: this.input.blockDeviceMappings,
          ImageId: this.input.imageId,
          InstanceType: this.input.instanceType,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          KernelId: this.input.kernelId,
          KeyName: this.input.keyName,
          MaxCount: this.input.maxCount,
          MinCount: this.input.minCount,
          Monitoring: {
            Enabled: this.input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.input.placement?.availabilityZone,
            Affinity: this.input.placement?.affinity,
            GroupName: this.input.placement?.groupName,
            PartitionNumber: this.input.placement?.partitionNumber,
            HostId: this.input.placement?.hostId,
            Tenancy: this.input.placement?.tenancy,
            SpreadDomain: this.input.placement?.spreadDomain,
            HostResourceGroupArn: this.input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.input.ramdiskId,
          SecurityGroupIds: this.input.securityGroupIds,
          SecurityGroups: this.input.securityGroups,
          SubnetId: this.input.subnetId,
          UserData: this.input.userData,
          AdditionalInfo: this.input.additionalInfo,
          ClientToken: this.input.clientToken,
          DisableApiTermination: this.input.disableApiTermination,
          DryRun: this.input.dryRun,
          EbsOptimized: this.input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile?.arn,
            Name: this.input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.input.networkInterfaces,
          PrivateIpAddress: this.input.privateIpAddress,
          ElasticGpuSpecification: this.input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.input.elasticInferenceAccelerators,
          TagSpecifications: this.input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.input.launchTemplate?.launchTemplateName,
            Version: this.input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.input.cpuOptions?.coreCount,
            ThreadsPerCore: this.input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RunInstances.RequesterId', props);
    return resource.getResponseField('RequesterId') as unknown as string;
  }

  public get reservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.ReservationId'),
        outputPath: 'ReservationId',
        parameters: {
          BlockDeviceMappings: this.input.blockDeviceMappings,
          ImageId: this.input.imageId,
          InstanceType: this.input.instanceType,
          Ipv6AddressCount: this.input.ipv6AddressCount,
          Ipv6Addresses: this.input.ipv6Addresses,
          KernelId: this.input.kernelId,
          KeyName: this.input.keyName,
          MaxCount: this.input.maxCount,
          MinCount: this.input.minCount,
          Monitoring: {
            Enabled: this.input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.input.placement?.availabilityZone,
            Affinity: this.input.placement?.affinity,
            GroupName: this.input.placement?.groupName,
            PartitionNumber: this.input.placement?.partitionNumber,
            HostId: this.input.placement?.hostId,
            Tenancy: this.input.placement?.tenancy,
            SpreadDomain: this.input.placement?.spreadDomain,
            HostResourceGroupArn: this.input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.input.ramdiskId,
          SecurityGroupIds: this.input.securityGroupIds,
          SecurityGroups: this.input.securityGroups,
          SubnetId: this.input.subnetId,
          UserData: this.input.userData,
          AdditionalInfo: this.input.additionalInfo,
          ClientToken: this.input.clientToken,
          DisableApiTermination: this.input.disableApiTermination,
          DryRun: this.input.dryRun,
          EbsOptimized: this.input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.input.iamInstanceProfile?.arn,
            Name: this.input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.input.networkInterfaces,
          PrivateIpAddress: this.input.privateIpAddress,
          ElasticGpuSpecification: this.input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.input.elasticInferenceAccelerators,
          TagSpecifications: this.input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.input.launchTemplate?.launchTemplateName,
            Version: this.input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.input.cpuOptions?.coreCount,
            ThreadsPerCore: this.input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RunInstances.ReservationId', props);
    return resource.getResponseField('ReservationId') as unknown as string;
  }

}

export class EC2RunScheduledInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2RunScheduledInstancesRequest) {
    super(scope, id);
  }

  public get instanceIdSet(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runScheduledInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunScheduledInstances.InstanceIdSet'),
        outputPath: 'InstanceIdSet',
        parameters: {
          ClientToken: this.input.clientToken,
          DryRun: this.input.dryRun,
          InstanceCount: this.input.instanceCount,
          LaunchSpecification: {
            BlockDeviceMappings: this.input.launchSpecification.blockDeviceMappings,
            EbsOptimized: this.input.launchSpecification.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.input.launchSpecification.iamInstanceProfile?.arn,
              Name: this.input.launchSpecification.iamInstanceProfile?.name,
            },
            ImageId: this.input.launchSpecification.imageId,
            InstanceType: this.input.launchSpecification.instanceType,
            KernelId: this.input.launchSpecification.kernelId,
            KeyName: this.input.launchSpecification.keyName,
            Monitoring: {
              Enabled: this.input.launchSpecification.monitoring?.enabled,
            },
            NetworkInterfaces: this.input.launchSpecification.networkInterfaces,
            Placement: {
              AvailabilityZone: this.input.launchSpecification.placement?.availabilityZone,
              GroupName: this.input.launchSpecification.placement?.groupName,
            },
            RamdiskId: this.input.launchSpecification.ramdiskId,
            SecurityGroupIds: this.input.launchSpecification.securityGroupIds,
            SubnetId: this.input.launchSpecification.subnetId,
            UserData: this.input.launchSpecification.userData,
          },
          ScheduledInstanceId: this.input.scheduledInstanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RunScheduledInstances.InstanceIdSet', props);
    return resource.getResponseField('InstanceIdSet') as unknown as string[];
  }

}

export class EC2SearchLocalGatewayRoutes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2SearchLocalGatewayRoutesRequest) {
    super(scope, id);
  }

  public get routes(): shapes.Ec2LocalGatewayRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchLocalGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchLocalGatewayRoutes.Routes'),
        outputPath: 'Routes',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'SearchLocalGatewayRoutes.Routes', props);
    return resource.getResponseField('Routes') as unknown as shapes.Ec2LocalGatewayRoute[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchLocalGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchLocalGatewayRoutes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayRouteTableId: this.input.localGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'SearchLocalGatewayRoutes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2SearchTransitGatewayMulticastGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2SearchTransitGatewayMulticastGroupsRequest) {
    super(scope, id);
  }

  public get multicastGroups(): shapes.Ec2TransitGatewayMulticastGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchTransitGatewayMulticastGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchTransitGatewayMulticastGroups.MulticastGroups'),
        outputPath: 'MulticastGroups',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'SearchTransitGatewayMulticastGroups.MulticastGroups', props);
    return resource.getResponseField('MulticastGroups') as unknown as shapes.Ec2TransitGatewayMulticastGroup[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchTransitGatewayMulticastGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchTransitGatewayMulticastGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayMulticastDomainId: this.input.transitGatewayMulticastDomainId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'SearchTransitGatewayMulticastGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2SearchTransitGatewayRoutes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2SearchTransitGatewayRoutesRequest) {
    super(scope, id);
  }

  public get routes(): shapes.Ec2TransitGatewayRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchTransitGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchTransitGatewayRoutes.Routes'),
        outputPath: 'Routes',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'SearchTransitGatewayRoutes.Routes', props);
    return resource.getResponseField('Routes') as unknown as shapes.Ec2TransitGatewayRoute[];
  }

  public get additionalRoutesAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchTransitGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchTransitGatewayRoutes.AdditionalRoutesAvailable'),
        outputPath: 'AdditionalRoutesAvailable',
        parameters: {
          TransitGatewayRouteTableId: this.input.transitGatewayRouteTableId,
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'SearchTransitGatewayRoutes.AdditionalRoutesAvailable', props);
    return resource.getResponseField('AdditionalRoutesAvailable') as unknown as boolean;
  }

}

export class EC2StartInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2StartInstancesRequest) {
    super(scope, id);
  }

  public get startingInstances(): shapes.Ec2InstanceStateChange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartInstances.StartingInstances'),
        outputPath: 'StartingInstances',
        parameters: {
          InstanceIds: this.input.instanceIds,
          AdditionalInfo: this.input.additionalInfo,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartInstances.StartingInstances', props);
    return resource.getResponseField('StartingInstances') as unknown as shapes.Ec2InstanceStateChange[];
  }

}

export class EC2StartVpcEndpointServicePrivateDnsVerification extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2StartVpcEndpointServicePrivateDnsVerificationRequest) {
    super(scope, id);
  }

  public get returnValue(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startVpcEndpointServicePrivateDnsVerification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartVpcEndpointServicePrivateDnsVerification.ReturnValue'),
        outputPath: 'ReturnValue',
        parameters: {
          DryRun: this.input.dryRun,
          ServiceId: this.input.serviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartVpcEndpointServicePrivateDnsVerification.ReturnValue', props);
    return resource.getResponseField('ReturnValue') as unknown as boolean;
  }

}

export class EC2StopInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2StopInstancesRequest) {
    super(scope, id);
  }

  public get stoppingInstances(): shapes.Ec2InstanceStateChange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StopInstances.StoppingInstances'),
        outputPath: 'StoppingInstances',
        parameters: {
          InstanceIds: this.input.instanceIds,
          Hibernate: this.input.hibernate,
          DryRun: this.input.dryRun,
          Force: this.input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopInstances.StoppingInstances', props);
    return resource.getResponseField('StoppingInstances') as unknown as shapes.Ec2InstanceStateChange[];
  }

}

export class EC2TerminateClientVpnConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2TerminateClientVpnConnectionsRequest) {
    super(scope, id);
  }

  public get clientVpnEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'terminateClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.TerminateClientVpnConnections.ClientVpnEndpointId'),
        outputPath: 'ClientVpnEndpointId',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          ConnectionId: this.input.connectionId,
          Username: this.input.username,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'TerminateClientVpnConnections.ClientVpnEndpointId', props);
    return resource.getResponseField('ClientVpnEndpointId') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'terminateClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.TerminateClientVpnConnections.Username'),
        outputPath: 'Username',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          ConnectionId: this.input.connectionId,
          Username: this.input.username,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'TerminateClientVpnConnections.Username', props);
    return resource.getResponseField('Username') as unknown as string;
  }

  public get connectionStatuses(): shapes.Ec2TerminateConnectionStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'terminateClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.TerminateClientVpnConnections.ConnectionStatuses'),
        outputPath: 'ConnectionStatuses',
        parameters: {
          ClientVpnEndpointId: this.input.clientVpnEndpointId,
          ConnectionId: this.input.connectionId,
          Username: this.input.username,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'TerminateClientVpnConnections.ConnectionStatuses', props);
    return resource.getResponseField('ConnectionStatuses') as unknown as shapes.Ec2TerminateConnectionStatus[];
  }

}

export class EC2TerminateInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2TerminateInstancesRequest) {
    super(scope, id);
  }

  public get terminatingInstances(): shapes.Ec2InstanceStateChange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'terminateInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.TerminateInstances.TerminatingInstances'),
        outputPath: 'TerminatingInstances',
        parameters: {
          InstanceIds: this.input.instanceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'TerminateInstances.TerminatingInstances', props);
    return resource.getResponseField('TerminatingInstances') as unknown as shapes.Ec2InstanceStateChange[];
  }

}

export class EC2UnassignIpv6Addresses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2UnassignIpv6AddressesRequest) {
    super(scope, id);
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unassignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnassignIpv6Addresses.NetworkInterfaceId'),
        outputPath: 'NetworkInterfaceId',
        parameters: {
          Ipv6Addresses: this.input.ipv6Addresses,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UnassignIpv6Addresses.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterfaceId') as unknown as string;
  }

  public get unassignedIpv6Addresses(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unassignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnassignIpv6Addresses.UnassignedIpv6Addresses'),
        outputPath: 'UnassignedIpv6Addresses',
        parameters: {
          Ipv6Addresses: this.input.ipv6Addresses,
          NetworkInterfaceId: this.input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UnassignIpv6Addresses.UnassignedIpv6Addresses', props);
    return resource.getResponseField('UnassignedIpv6Addresses') as unknown as string[];
  }

}

export class EC2UnmonitorInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2UnmonitorInstancesRequest) {
    super(scope, id);
  }

  public get instanceMonitorings(): shapes.Ec2InstanceMonitoring[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unmonitorInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnmonitorInstances.InstanceMonitorings'),
        outputPath: 'InstanceMonitorings',
        parameters: {
          InstanceIds: this.input.instanceIds,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UnmonitorInstances.InstanceMonitorings', props);
    return resource.getResponseField('InstanceMonitorings') as unknown as shapes.Ec2InstanceMonitoring[];
  }

}

export class EC2UpdateSecurityGroupRuleDescriptionsEgress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateSecurityGroupRuleDescriptionsEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UpdateSecurityGroupRuleDescriptionsEgress.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          GroupId: this.input.groupId,
          GroupName: this.input.groupName,
          IpPermissions: this.input.ipPermissions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateSecurityGroupRuleDescriptionsEgress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2UpdateSecurityGroupRuleDescriptionsIngress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest) {
    super(scope, id);
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateSecurityGroupRuleDescriptionsIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UpdateSecurityGroupRuleDescriptionsIngress.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.input.dryRun,
          GroupId: this.input.groupId,
          GroupName: this.input.groupName,
          IpPermissions: this.input.ipPermissions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateSecurityGroupRuleDescriptionsIngress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2WithdrawByoipCidr extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2WithdrawByoipCidrRequest) {
    super(scope, id);
  }

  public get byoipCidr(): EC2WithdrawByoipCidrByoipCidr {
    return new EC2WithdrawByoipCidrByoipCidr(this, 'ByoipCidr', this.__resources, this.input);
  }

}

export class EC2WithdrawByoipCidrByoipCidr extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.Ec2WithdrawByoipCidrRequest) {
    super(scope, id);
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'withdrawByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.WithdrawByoipCidr.ByoipCidr.Cidr'),
        outputPath: 'ByoipCidr.Cidr',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'WithdrawByoipCidr.ByoipCidr.Cidr', props);
    return resource.getResponseField('ByoipCidr.Cidr') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'withdrawByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.WithdrawByoipCidr.ByoipCidr.Description'),
        outputPath: 'ByoipCidr.Description',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'WithdrawByoipCidr.ByoipCidr.Description', props);
    return resource.getResponseField('ByoipCidr.Description') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'withdrawByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.WithdrawByoipCidr.ByoipCidr.StatusMessage'),
        outputPath: 'ByoipCidr.StatusMessage',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'WithdrawByoipCidr.ByoipCidr.StatusMessage', props);
    return resource.getResponseField('ByoipCidr.StatusMessage') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'withdrawByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.WithdrawByoipCidr.ByoipCidr.State'),
        outputPath: 'ByoipCidr.State',
        parameters: {
          Cidr: this.input.cidr,
          DryRun: this.input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'WithdrawByoipCidr.ByoipCidr.State', props);
    return resource.getResponseField('ByoipCidr.State') as unknown as string;
  }

}

