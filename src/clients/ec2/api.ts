import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class Ec2Client extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public acceptReservedInstancesExchangeQuote(input: shapes.Ec2AcceptReservedInstancesExchangeQuoteRequest): EC2ResponsesAcceptReservedInstancesExchangeQuote {
    return new EC2ResponsesAcceptReservedInstancesExchangeQuote(this, this.__resources, input);
  }

  public acceptTransitGatewayMulticastDomainAssociations(input: shapes.Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest): EC2ResponsesAcceptTransitGatewayMulticastDomainAssociations {
    return new EC2ResponsesAcceptTransitGatewayMulticastDomainAssociations(this, this.__resources, input);
  }

  public acceptTransitGatewayPeeringAttachment(input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest): EC2ResponsesAcceptTransitGatewayPeeringAttachment {
    return new EC2ResponsesAcceptTransitGatewayPeeringAttachment(this, this.__resources, input);
  }

  public acceptTransitGatewayVpcAttachment(input: shapes.Ec2AcceptTransitGatewayVpcAttachmentRequest): EC2ResponsesAcceptTransitGatewayVpcAttachment {
    return new EC2ResponsesAcceptTransitGatewayVpcAttachment(this, this.__resources, input);
  }

  public acceptVpcEndpointConnections(input: shapes.Ec2AcceptVpcEndpointConnectionsRequest): EC2ResponsesAcceptVpcEndpointConnections {
    return new EC2ResponsesAcceptVpcEndpointConnections(this, this.__resources, input);
  }

  public acceptVpcPeeringConnection(input: shapes.Ec2AcceptVpcPeeringConnectionRequest): EC2ResponsesAcceptVpcPeeringConnection {
    return new EC2ResponsesAcceptVpcPeeringConnection(this, this.__resources, input);
  }

  public advertiseByoipCidr(input: shapes.Ec2AdvertiseByoipCidrRequest): EC2ResponsesAdvertiseByoipCidr {
    return new EC2ResponsesAdvertiseByoipCidr(this, this.__resources, input);
  }

  public allocateAddress(input: shapes.Ec2AllocateAddressRequest): EC2ResponsesAllocateAddress {
    return new EC2ResponsesAllocateAddress(this, this.__resources, input);
  }

  public allocateHosts(input: shapes.Ec2AllocateHostsRequest): EC2ResponsesAllocateHosts {
    return new EC2ResponsesAllocateHosts(this, this.__resources, input);
  }

  public applySecurityGroupsToClientVpnTargetNetwork(input: shapes.Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest): EC2ResponsesApplySecurityGroupsToClientVpnTargetNetwork {
    return new EC2ResponsesApplySecurityGroupsToClientVpnTargetNetwork(this, this.__resources, input);
  }

  public assignIpv6Addresses(input: shapes.Ec2AssignIpv6AddressesRequest): EC2ResponsesAssignIpv6Addresses {
    return new EC2ResponsesAssignIpv6Addresses(this, this.__resources, input);
  }

  public assignPrivateIpAddresses(input: shapes.Ec2AssignPrivateIpAddressesRequest): EC2ResponsesAssignPrivateIpAddresses {
    return new EC2ResponsesAssignPrivateIpAddresses(this, this.__resources, input);
  }

  public associateAddress(input: shapes.Ec2AssociateAddressRequest): EC2ResponsesAssociateAddress {
    return new EC2ResponsesAssociateAddress(this, this.__resources, input);
  }

  public associateClientVpnTargetNetwork(input: shapes.Ec2AssociateClientVpnTargetNetworkRequest): EC2ResponsesAssociateClientVpnTargetNetwork {
    return new EC2ResponsesAssociateClientVpnTargetNetwork(this, this.__resources, input);
  }

  public associateDhcpOptions(input: shapes.Ec2AssociateDhcpOptionsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateDhcpOptions'),
        parameters: {
          DhcpOptionsId: input.dhcpOptionsId,
          VpcId: input.vpcId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AssociateDhcpOptions', props);
  }

  public associateEnclaveCertificateIamRole(input: shapes.Ec2AssociateEnclaveCertificateIamRoleRequest): EC2ResponsesAssociateEnclaveCertificateIamRole {
    return new EC2ResponsesAssociateEnclaveCertificateIamRole(this, this.__resources, input);
  }

  public associateIamInstanceProfile(input: shapes.Ec2AssociateIamInstanceProfileRequest): EC2ResponsesAssociateIamInstanceProfile {
    return new EC2ResponsesAssociateIamInstanceProfile(this, this.__resources, input);
  }

  public associateInstanceEventWindow(input: shapes.Ec2AssociateInstanceEventWindowRequest): EC2ResponsesAssociateInstanceEventWindow {
    return new EC2ResponsesAssociateInstanceEventWindow(this, this.__resources, input);
  }

  public associateRouteTable(input: shapes.Ec2AssociateRouteTableRequest): EC2ResponsesAssociateRouteTable {
    return new EC2ResponsesAssociateRouteTable(this, this.__resources, input);
  }

  public associateSubnetCidrBlock(input: shapes.Ec2AssociateSubnetCidrBlockRequest): EC2ResponsesAssociateSubnetCidrBlock {
    return new EC2ResponsesAssociateSubnetCidrBlock(this, this.__resources, input);
  }

  public associateTransitGatewayMulticastDomain(input: shapes.Ec2AssociateTransitGatewayMulticastDomainRequest): EC2ResponsesAssociateTransitGatewayMulticastDomain {
    return new EC2ResponsesAssociateTransitGatewayMulticastDomain(this, this.__resources, input);
  }

  public associateTransitGatewayRouteTable(input: shapes.Ec2AssociateTransitGatewayRouteTableRequest): EC2ResponsesAssociateTransitGatewayRouteTable {
    return new EC2ResponsesAssociateTransitGatewayRouteTable(this, this.__resources, input);
  }

  public associateTrunkInterface(input: shapes.Ec2AssociateTrunkInterfaceRequest): EC2ResponsesAssociateTrunkInterface {
    return new EC2ResponsesAssociateTrunkInterface(this, this.__resources, input);
  }

  public associateVpcCidrBlock(input: shapes.Ec2AssociateVpcCidrBlockRequest): EC2ResponsesAssociateVpcCidrBlock {
    return new EC2ResponsesAssociateVpcCidrBlock(this, this.__resources, input);
  }

  public attachClassicLinkVpc(input: shapes.Ec2AttachClassicLinkVpcRequest): EC2ResponsesAttachClassicLinkVpc {
    return new EC2ResponsesAttachClassicLinkVpc(this, this.__resources, input);
  }

  public attachInternetGateway(input: shapes.Ec2AttachInternetGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachInternetGateway'),
        parameters: {
          DryRun: input.dryRun,
          InternetGatewayId: input.internetGatewayId,
          VpcId: input.vpcId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AttachInternetGateway', props);
  }

  public attachNetworkInterface(input: shapes.Ec2AttachNetworkInterfaceRequest): EC2ResponsesAttachNetworkInterface {
    return new EC2ResponsesAttachNetworkInterface(this, this.__resources, input);
  }

  public attachVolume(input: shapes.Ec2AttachVolumeRequest): EC2ResponsesAttachVolume {
    return new EC2ResponsesAttachVolume(this, this.__resources, input);
  }

  public attachVpnGateway(input: shapes.Ec2AttachVpnGatewayRequest): EC2ResponsesAttachVpnGateway {
    return new EC2ResponsesAttachVpnGateway(this, this.__resources, input);
  }

  public authorizeClientVpnIngress(input: shapes.Ec2AuthorizeClientVpnIngressRequest): EC2ResponsesAuthorizeClientVpnIngress {
    return new EC2ResponsesAuthorizeClientVpnIngress(this, this.__resources, input);
  }

  public authorizeSecurityGroupEgress(input: shapes.Ec2AuthorizeSecurityGroupEgressRequest): EC2ResponsesAuthorizeSecurityGroupEgress {
    return new EC2ResponsesAuthorizeSecurityGroupEgress(this, this.__resources, input);
  }

  public authorizeSecurityGroupIngress(input: shapes.Ec2AuthorizeSecurityGroupIngressRequest): EC2ResponsesAuthorizeSecurityGroupIngress {
    return new EC2ResponsesAuthorizeSecurityGroupIngress(this, this.__resources, input);
  }

  public bundleInstance(input: shapes.Ec2BundleInstanceRequest): EC2ResponsesBundleInstance {
    return new EC2ResponsesBundleInstance(this, this.__resources, input);
  }

  public cancelBundleTask(input: shapes.Ec2CancelBundleTaskRequest): EC2ResponsesCancelBundleTask {
    return new EC2ResponsesCancelBundleTask(this, this.__resources, input);
  }

  public cancelCapacityReservation(input: shapes.Ec2CancelCapacityReservationRequest): EC2ResponsesCancelCapacityReservation {
    return new EC2ResponsesCancelCapacityReservation(this, this.__resources, input);
  }

  public cancelConversionTask(input: shapes.Ec2CancelConversionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelConversionTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelConversionTask'),
        parameters: {
          ConversionTaskId: input.conversionTaskId,
          DryRun: input.dryRun,
          ReasonMessage: input.reasonMessage,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CancelConversionTask', props);
  }

  public cancelExportTask(input: shapes.Ec2CancelExportTaskRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelExportTask'),
        parameters: {
          ExportTaskId: input.exportTaskId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CancelExportTask', props);
  }

  public cancelImportTask(input: shapes.Ec2CancelImportTaskRequest): EC2ResponsesCancelImportTask {
    return new EC2ResponsesCancelImportTask(this, this.__resources, input);
  }

  public cancelReservedInstancesListing(input: shapes.Ec2CancelReservedInstancesListingRequest): EC2ResponsesCancelReservedInstancesListing {
    return new EC2ResponsesCancelReservedInstancesListing(this, this.__resources, input);
  }

  public cancelSpotFleetRequests(input: shapes.Ec2CancelSpotFleetRequestsRequest): EC2ResponsesCancelSpotFleetRequests {
    return new EC2ResponsesCancelSpotFleetRequests(this, this.__resources, input);
  }

  public cancelSpotInstanceRequests(input: shapes.Ec2CancelSpotInstanceRequestsRequest): EC2ResponsesCancelSpotInstanceRequests {
    return new EC2ResponsesCancelSpotInstanceRequests(this, this.__resources, input);
  }

  public confirmProductInstance(input: shapes.Ec2ConfirmProductInstanceRequest): EC2ResponsesConfirmProductInstance {
    return new EC2ResponsesConfirmProductInstance(this, this.__resources, input);
  }

  public copyFpgaImage(input: shapes.Ec2CopyFpgaImageRequest): EC2ResponsesCopyFpgaImage {
    return new EC2ResponsesCopyFpgaImage(this, this.__resources, input);
  }

  public copyImage(input: shapes.Ec2CopyImageRequest): EC2ResponsesCopyImage {
    return new EC2ResponsesCopyImage(this, this.__resources, input);
  }

  public copySnapshot(input: shapes.Ec2CopySnapshotRequest): EC2ResponsesCopySnapshot {
    return new EC2ResponsesCopySnapshot(this, this.__resources, input);
  }

  public createCapacityReservation(input: shapes.Ec2CreateCapacityReservationRequest): EC2ResponsesCreateCapacityReservation {
    return new EC2ResponsesCreateCapacityReservation(this, this.__resources, input);
  }

  public createCarrierGateway(input: shapes.Ec2CreateCarrierGatewayRequest): EC2ResponsesCreateCarrierGateway {
    return new EC2ResponsesCreateCarrierGateway(this, this.__resources, input);
  }

  public createClientVpnEndpoint(input: shapes.Ec2CreateClientVpnEndpointRequest): EC2ResponsesCreateClientVpnEndpoint {
    return new EC2ResponsesCreateClientVpnEndpoint(this, this.__resources, input);
  }

  public createClientVpnRoute(input: shapes.Ec2CreateClientVpnRouteRequest): EC2ResponsesCreateClientVpnRoute {
    return new EC2ResponsesCreateClientVpnRoute(this, this.__resources, input);
  }

  public createCustomerGateway(input: shapes.Ec2CreateCustomerGatewayRequest): EC2ResponsesCreateCustomerGateway {
    return new EC2ResponsesCreateCustomerGateway(this, this.__resources, input);
  }

  public createDefaultSubnet(input: shapes.Ec2CreateDefaultSubnetRequest): EC2ResponsesCreateDefaultSubnet {
    return new EC2ResponsesCreateDefaultSubnet(this, this.__resources, input);
  }

  public createDefaultVpc(input: shapes.Ec2CreateDefaultVpcRequest): EC2ResponsesCreateDefaultVpc {
    return new EC2ResponsesCreateDefaultVpc(this, this.__resources, input);
  }

  public createDhcpOptions(input: shapes.Ec2CreateDhcpOptionsRequest): EC2ResponsesCreateDhcpOptions {
    return new EC2ResponsesCreateDhcpOptions(this, this.__resources, input);
  }

  public createEgressOnlyInternetGateway(input: shapes.Ec2CreateEgressOnlyInternetGatewayRequest): EC2ResponsesCreateEgressOnlyInternetGateway {
    return new EC2ResponsesCreateEgressOnlyInternetGateway(this, this.__resources, input);
  }

  public createFleet(input: shapes.Ec2CreateFleetRequest): EC2ResponsesCreateFleet {
    return new EC2ResponsesCreateFleet(this, this.__resources, input);
  }

  public createFlowLogs(input: shapes.Ec2CreateFlowLogsRequest): EC2ResponsesCreateFlowLogs {
    return new EC2ResponsesCreateFlowLogs(this, this.__resources, input);
  }

  public createFpgaImage(input: shapes.Ec2CreateFpgaImageRequest): EC2ResponsesCreateFpgaImage {
    return new EC2ResponsesCreateFpgaImage(this, this.__resources, input);
  }

  public createImage(input: shapes.Ec2CreateImageRequest): EC2ResponsesCreateImage {
    return new EC2ResponsesCreateImage(this, this.__resources, input);
  }

  public createInstanceEventWindow(input: shapes.Ec2CreateInstanceEventWindowRequest): EC2ResponsesCreateInstanceEventWindow {
    return new EC2ResponsesCreateInstanceEventWindow(this, this.__resources, input);
  }

  public createInstanceExportTask(input: shapes.Ec2CreateInstanceExportTaskRequest): EC2ResponsesCreateInstanceExportTask {
    return new EC2ResponsesCreateInstanceExportTask(this, this.__resources, input);
  }

  public createInternetGateway(input: shapes.Ec2CreateInternetGatewayRequest): EC2ResponsesCreateInternetGateway {
    return new EC2ResponsesCreateInternetGateway(this, this.__resources, input);
  }

  public createKeyPair(input: shapes.Ec2CreateKeyPairRequest): EC2ResponsesCreateKeyPair {
    return new EC2ResponsesCreateKeyPair(this, this.__resources, input);
  }

  public createLaunchTemplate(input: shapes.Ec2CreateLaunchTemplateRequest): EC2ResponsesCreateLaunchTemplate {
    return new EC2ResponsesCreateLaunchTemplate(this, this.__resources, input);
  }

  public createLaunchTemplateVersion(input: shapes.Ec2CreateLaunchTemplateVersionRequest): EC2ResponsesCreateLaunchTemplateVersion {
    return new EC2ResponsesCreateLaunchTemplateVersion(this, this.__resources, input);
  }

  public createLocalGatewayRoute(input: shapes.Ec2CreateLocalGatewayRouteRequest): EC2ResponsesCreateLocalGatewayRoute {
    return new EC2ResponsesCreateLocalGatewayRoute(this, this.__resources, input);
  }

  public createLocalGatewayRouteTableVpcAssociation(input: shapes.Ec2CreateLocalGatewayRouteTableVpcAssociationRequest): EC2ResponsesCreateLocalGatewayRouteTableVpcAssociation {
    return new EC2ResponsesCreateLocalGatewayRouteTableVpcAssociation(this, this.__resources, input);
  }

  public createManagedPrefixList(input: shapes.Ec2CreateManagedPrefixListRequest): EC2ResponsesCreateManagedPrefixList {
    return new EC2ResponsesCreateManagedPrefixList(this, this.__resources, input);
  }

  public createNatGateway(input: shapes.Ec2CreateNatGatewayRequest): EC2ResponsesCreateNatGateway {
    return new EC2ResponsesCreateNatGateway(this, this.__resources, input);
  }

  public createNetworkAcl(input: shapes.Ec2CreateNetworkAclRequest): EC2ResponsesCreateNetworkAcl {
    return new EC2ResponsesCreateNetworkAcl(this, this.__resources, input);
  }

  public createNetworkAclEntry(input: shapes.Ec2CreateNetworkAclEntryRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAclEntry',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAclEntry'),
        parameters: {
          CidrBlock: input.cidrBlock,
          DryRun: input.dryRun,
          Egress: input.egress,
          IcmpTypeCode: {
            Code: input.icmpTypeCode?.code,
            Type: input.icmpTypeCode?.type,
          },
          Ipv6CidrBlock: input.ipv6CidrBlock,
          NetworkAclId: input.networkAclId,
          PortRange: {
            From: input.portRange?.from,
            To: input.portRange?.to,
          },
          Protocol: input.protocol,
          RuleAction: input.ruleAction,
          RuleNumber: input.ruleNumber,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateNetworkAclEntry', props);
  }

  public createNetworkInsightsPath(input: shapes.Ec2CreateNetworkInsightsPathRequest): EC2ResponsesCreateNetworkInsightsPath {
    return new EC2ResponsesCreateNetworkInsightsPath(this, this.__resources, input);
  }

  public createNetworkInterface(input: shapes.Ec2CreateNetworkInterfaceRequest): EC2ResponsesCreateNetworkInterface {
    return new EC2ResponsesCreateNetworkInterface(this, this.__resources, input);
  }

  public createNetworkInterfacePermission(input: shapes.Ec2CreateNetworkInterfacePermissionRequest): EC2ResponsesCreateNetworkInterfacePermission {
    return new EC2ResponsesCreateNetworkInterfacePermission(this, this.__resources, input);
  }

  public createPlacementGroup(input: shapes.Ec2CreatePlacementGroupRequest): EC2ResponsesCreatePlacementGroup {
    return new EC2ResponsesCreatePlacementGroup(this, this.__resources, input);
  }

  public createReplaceRootVolumeTask(input: shapes.Ec2CreateReplaceRootVolumeTaskRequest): EC2ResponsesCreateReplaceRootVolumeTask {
    return new EC2ResponsesCreateReplaceRootVolumeTask(this, this.__resources, input);
  }

  public createReservedInstancesListing(input: shapes.Ec2CreateReservedInstancesListingRequest): EC2ResponsesCreateReservedInstancesListing {
    return new EC2ResponsesCreateReservedInstancesListing(this, this.__resources, input);
  }

  public createRestoreImageTask(input: shapes.Ec2CreateRestoreImageTaskRequest): EC2ResponsesCreateRestoreImageTask {
    return new EC2ResponsesCreateRestoreImageTask(this, this.__resources, input);
  }

  public createRoute(input: shapes.Ec2CreateRouteRequest): EC2ResponsesCreateRoute {
    return new EC2ResponsesCreateRoute(this, this.__resources, input);
  }

  public createRouteTable(input: shapes.Ec2CreateRouteTableRequest): EC2ResponsesCreateRouteTable {
    return new EC2ResponsesCreateRouteTable(this, this.__resources, input);
  }

  public createSecurityGroup(input: shapes.Ec2CreateSecurityGroupRequest): EC2ResponsesCreateSecurityGroup {
    return new EC2ResponsesCreateSecurityGroup(this, this.__resources, input);
  }

  public createSnapshot(input: shapes.Ec2CreateSnapshotRequest): EC2ResponsesCreateSnapshot {
    return new EC2ResponsesCreateSnapshot(this, this.__resources, input);
  }

  public createSnapshots(input: shapes.Ec2CreateSnapshotsRequest): EC2ResponsesCreateSnapshots {
    return new EC2ResponsesCreateSnapshots(this, this.__resources, input);
  }

  public createSpotDatafeedSubscription(input: shapes.Ec2CreateSpotDatafeedSubscriptionRequest): EC2ResponsesCreateSpotDatafeedSubscription {
    return new EC2ResponsesCreateSpotDatafeedSubscription(this, this.__resources, input);
  }

  public createStoreImageTask(input: shapes.Ec2CreateStoreImageTaskRequest): EC2ResponsesCreateStoreImageTask {
    return new EC2ResponsesCreateStoreImageTask(this, this.__resources, input);
  }

  public createSubnet(input: shapes.Ec2CreateSubnetRequest): EC2ResponsesCreateSubnet {
    return new EC2ResponsesCreateSubnet(this, this.__resources, input);
  }

  public createSubnetCidrReservation(input: shapes.Ec2CreateSubnetCidrReservationRequest): EC2ResponsesCreateSubnetCidrReservation {
    return new EC2ResponsesCreateSubnetCidrReservation(this, this.__resources, input);
  }

  public createTags(input: shapes.Ec2CreateTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTags',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTags'),
        parameters: {
          DryRun: input.dryRun,
          Resources: input.resources,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateTags', props);
  }

  public createTrafficMirrorFilter(input: shapes.Ec2CreateTrafficMirrorFilterRequest): EC2ResponsesCreateTrafficMirrorFilter {
    return new EC2ResponsesCreateTrafficMirrorFilter(this, this.__resources, input);
  }

  public createTrafficMirrorFilterRule(input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest): EC2ResponsesCreateTrafficMirrorFilterRule {
    return new EC2ResponsesCreateTrafficMirrorFilterRule(this, this.__resources, input);
  }

  public createTrafficMirrorSession(input: shapes.Ec2CreateTrafficMirrorSessionRequest): EC2ResponsesCreateTrafficMirrorSession {
    return new EC2ResponsesCreateTrafficMirrorSession(this, this.__resources, input);
  }

  public createTrafficMirrorTarget(input: shapes.Ec2CreateTrafficMirrorTargetRequest): EC2ResponsesCreateTrafficMirrorTarget {
    return new EC2ResponsesCreateTrafficMirrorTarget(this, this.__resources, input);
  }

  public createTransitGateway(input: shapes.Ec2CreateTransitGatewayRequest): EC2ResponsesCreateTransitGateway {
    return new EC2ResponsesCreateTransitGateway(this, this.__resources, input);
  }

  public createTransitGatewayConnect(input: shapes.Ec2CreateTransitGatewayConnectRequest): EC2ResponsesCreateTransitGatewayConnect {
    return new EC2ResponsesCreateTransitGatewayConnect(this, this.__resources, input);
  }

  public createTransitGatewayConnectPeer(input: shapes.Ec2CreateTransitGatewayConnectPeerRequest): EC2ResponsesCreateTransitGatewayConnectPeer {
    return new EC2ResponsesCreateTransitGatewayConnectPeer(this, this.__resources, input);
  }

  public createTransitGatewayMulticastDomain(input: shapes.Ec2CreateTransitGatewayMulticastDomainRequest): EC2ResponsesCreateTransitGatewayMulticastDomain {
    return new EC2ResponsesCreateTransitGatewayMulticastDomain(this, this.__resources, input);
  }

  public createTransitGatewayPeeringAttachment(input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest): EC2ResponsesCreateTransitGatewayPeeringAttachment {
    return new EC2ResponsesCreateTransitGatewayPeeringAttachment(this, this.__resources, input);
  }

  public createTransitGatewayPrefixListReference(input: shapes.Ec2CreateTransitGatewayPrefixListReferenceRequest): EC2ResponsesCreateTransitGatewayPrefixListReference {
    return new EC2ResponsesCreateTransitGatewayPrefixListReference(this, this.__resources, input);
  }

  public createTransitGatewayRoute(input: shapes.Ec2CreateTransitGatewayRouteRequest): EC2ResponsesCreateTransitGatewayRoute {
    return new EC2ResponsesCreateTransitGatewayRoute(this, this.__resources, input);
  }

  public createTransitGatewayRouteTable(input: shapes.Ec2CreateTransitGatewayRouteTableRequest): EC2ResponsesCreateTransitGatewayRouteTable {
    return new EC2ResponsesCreateTransitGatewayRouteTable(this, this.__resources, input);
  }

  public createTransitGatewayVpcAttachment(input: shapes.Ec2CreateTransitGatewayVpcAttachmentRequest): EC2ResponsesCreateTransitGatewayVpcAttachment {
    return new EC2ResponsesCreateTransitGatewayVpcAttachment(this, this.__resources, input);
  }

  public createVolume(input: shapes.Ec2CreateVolumeRequest): EC2ResponsesCreateVolume {
    return new EC2ResponsesCreateVolume(this, this.__resources, input);
  }

  public createVpc(input: shapes.Ec2CreateVpcRequest): EC2ResponsesCreateVpc {
    return new EC2ResponsesCreateVpc(this, this.__resources, input);
  }

  public createVpcEndpoint(input: shapes.Ec2CreateVpcEndpointRequest): EC2ResponsesCreateVpcEndpoint {
    return new EC2ResponsesCreateVpcEndpoint(this, this.__resources, input);
  }

  public createVpcEndpointConnectionNotification(input: shapes.Ec2CreateVpcEndpointConnectionNotificationRequest): EC2ResponsesCreateVpcEndpointConnectionNotification {
    return new EC2ResponsesCreateVpcEndpointConnectionNotification(this, this.__resources, input);
  }

  public createVpcEndpointServiceConfiguration(input: shapes.Ec2CreateVpcEndpointServiceConfigurationRequest): EC2ResponsesCreateVpcEndpointServiceConfiguration {
    return new EC2ResponsesCreateVpcEndpointServiceConfiguration(this, this.__resources, input);
  }

  public createVpcPeeringConnection(input: shapes.Ec2CreateVpcPeeringConnectionRequest): EC2ResponsesCreateVpcPeeringConnection {
    return new EC2ResponsesCreateVpcPeeringConnection(this, this.__resources, input);
  }

  public createVpnConnection(input: shapes.Ec2CreateVpnConnectionRequest): EC2ResponsesCreateVpnConnection {
    return new EC2ResponsesCreateVpnConnection(this, this.__resources, input);
  }

  public createVpnConnectionRoute(input: shapes.Ec2CreateVpnConnectionRouteRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnectionRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnectionRoute'),
        parameters: {
          DestinationCidrBlock: input.destinationCidrBlock,
          VpnConnectionId: input.vpnConnectionId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateVpnConnectionRoute', props);
  }

  public createVpnGateway(input: shapes.Ec2CreateVpnGatewayRequest): EC2ResponsesCreateVpnGateway {
    return new EC2ResponsesCreateVpnGateway(this, this.__resources, input);
  }

  public deleteCarrierGateway(input: shapes.Ec2DeleteCarrierGatewayRequest): EC2ResponsesDeleteCarrierGateway {
    return new EC2ResponsesDeleteCarrierGateway(this, this.__resources, input);
  }

  public deleteClientVpnEndpoint(input: shapes.Ec2DeleteClientVpnEndpointRequest): EC2ResponsesDeleteClientVpnEndpoint {
    return new EC2ResponsesDeleteClientVpnEndpoint(this, this.__resources, input);
  }

  public deleteClientVpnRoute(input: shapes.Ec2DeleteClientVpnRouteRequest): EC2ResponsesDeleteClientVpnRoute {
    return new EC2ResponsesDeleteClientVpnRoute(this, this.__resources, input);
  }

  public deleteCustomerGateway(input: shapes.Ec2DeleteCustomerGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCustomerGateway'),
        parameters: {
          CustomerGatewayId: input.customerGatewayId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteCustomerGateway', props);
  }

  public deleteDhcpOptions(input: shapes.Ec2DeleteDhcpOptionsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteDhcpOptions'),
        parameters: {
          DhcpOptionsId: input.dhcpOptionsId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDhcpOptions', props);
  }

  public deleteEgressOnlyInternetGateway(input: shapes.Ec2DeleteEgressOnlyInternetGatewayRequest): EC2ResponsesDeleteEgressOnlyInternetGateway {
    return new EC2ResponsesDeleteEgressOnlyInternetGateway(this, this.__resources, input);
  }

  public deleteFleets(input: shapes.Ec2DeleteFleetsRequest): EC2ResponsesDeleteFleets {
    return new EC2ResponsesDeleteFleets(this, this.__resources, input);
  }

  public deleteFlowLogs(input: shapes.Ec2DeleteFlowLogsRequest): EC2ResponsesDeleteFlowLogs {
    return new EC2ResponsesDeleteFlowLogs(this, this.__resources, input);
  }

  public deleteFpgaImage(input: shapes.Ec2DeleteFpgaImageRequest): EC2ResponsesDeleteFpgaImage {
    return new EC2ResponsesDeleteFpgaImage(this, this.__resources, input);
  }

  public deleteInstanceEventWindow(input: shapes.Ec2DeleteInstanceEventWindowRequest): EC2ResponsesDeleteInstanceEventWindow {
    return new EC2ResponsesDeleteInstanceEventWindow(this, this.__resources, input);
  }

  public deleteInternetGateway(input: shapes.Ec2DeleteInternetGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteInternetGateway'),
        parameters: {
          DryRun: input.dryRun,
          InternetGatewayId: input.internetGatewayId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteInternetGateway', props);
  }

  public deleteKeyPair(input: shapes.Ec2DeleteKeyPairRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteKeyPair'),
        parameters: {
          KeyName: input.keyName,
          KeyPairId: input.keyPairId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteKeyPair', props);
  }

  public deleteLaunchTemplate(input: shapes.Ec2DeleteLaunchTemplateRequest): EC2ResponsesDeleteLaunchTemplate {
    return new EC2ResponsesDeleteLaunchTemplate(this, this.__resources, input);
  }

  public deleteLaunchTemplateVersions(input: shapes.Ec2DeleteLaunchTemplateVersionsRequest): EC2ResponsesDeleteLaunchTemplateVersions {
    return new EC2ResponsesDeleteLaunchTemplateVersions(this, this.__resources, input);
  }

  public deleteLocalGatewayRoute(input: shapes.Ec2DeleteLocalGatewayRouteRequest): EC2ResponsesDeleteLocalGatewayRoute {
    return new EC2ResponsesDeleteLocalGatewayRoute(this, this.__resources, input);
  }

  public deleteLocalGatewayRouteTableVpcAssociation(input: shapes.Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest): EC2ResponsesDeleteLocalGatewayRouteTableVpcAssociation {
    return new EC2ResponsesDeleteLocalGatewayRouteTableVpcAssociation(this, this.__resources, input);
  }

  public deleteManagedPrefixList(input: shapes.Ec2DeleteManagedPrefixListRequest): EC2ResponsesDeleteManagedPrefixList {
    return new EC2ResponsesDeleteManagedPrefixList(this, this.__resources, input);
  }

  public deleteNatGateway(input: shapes.Ec2DeleteNatGatewayRequest): EC2ResponsesDeleteNatGateway {
    return new EC2ResponsesDeleteNatGateway(this, this.__resources, input);
  }

  public deleteNetworkAcl(input: shapes.Ec2DeleteNetworkAclRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkAcl'),
        parameters: {
          DryRun: input.dryRun,
          NetworkAclId: input.networkAclId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteNetworkAcl', props);
  }

  public deleteNetworkAclEntry(input: shapes.Ec2DeleteNetworkAclEntryRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkAclEntry',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkAclEntry'),
        parameters: {
          DryRun: input.dryRun,
          Egress: input.egress,
          NetworkAclId: input.networkAclId,
          RuleNumber: input.ruleNumber,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteNetworkAclEntry', props);
  }

  public deleteNetworkInsightsAnalysis(input: shapes.Ec2DeleteNetworkInsightsAnalysisRequest): EC2ResponsesDeleteNetworkInsightsAnalysis {
    return new EC2ResponsesDeleteNetworkInsightsAnalysis(this, this.__resources, input);
  }

  public deleteNetworkInsightsPath(input: shapes.Ec2DeleteNetworkInsightsPathRequest): EC2ResponsesDeleteNetworkInsightsPath {
    return new EC2ResponsesDeleteNetworkInsightsPath(this, this.__resources, input);
  }

  public deleteNetworkInterface(input: shapes.Ec2DeleteNetworkInterfaceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkInterface'),
        parameters: {
          DryRun: input.dryRun,
          NetworkInterfaceId: input.networkInterfaceId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteNetworkInterface', props);
  }

  public deleteNetworkInterfacePermission(input: shapes.Ec2DeleteNetworkInterfacePermissionRequest): EC2ResponsesDeleteNetworkInterfacePermission {
    return new EC2ResponsesDeleteNetworkInterfacePermission(this, this.__resources, input);
  }

  public deletePlacementGroup(input: shapes.Ec2DeletePlacementGroupRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeletePlacementGroup'),
        parameters: {
          DryRun: input.dryRun,
          GroupName: input.groupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeletePlacementGroup', props);
  }

  public deleteQueuedReservedInstances(input: shapes.Ec2DeleteQueuedReservedInstancesRequest): EC2ResponsesDeleteQueuedReservedInstances {
    return new EC2ResponsesDeleteQueuedReservedInstances(this, this.__resources, input);
  }

  public deleteRoute(input: shapes.Ec2DeleteRouteRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteRoute'),
        parameters: {
          DestinationCidrBlock: input.destinationCidrBlock,
          DestinationIpv6CidrBlock: input.destinationIpv6CidrBlock,
          DestinationPrefixListId: input.destinationPrefixListId,
          DryRun: input.dryRun,
          RouteTableId: input.routeTableId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteRoute', props);
  }

  public deleteRouteTable(input: shapes.Ec2DeleteRouteTableRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteRouteTable'),
        parameters: {
          DryRun: input.dryRun,
          RouteTableId: input.routeTableId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteRouteTable', props);
  }

  public deleteSecurityGroup(input: shapes.Ec2DeleteSecurityGroupRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSecurityGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSecurityGroup'),
        parameters: {
          GroupId: input.groupId,
          GroupName: input.groupName,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSecurityGroup', props);
  }

  public deleteSnapshot(input: shapes.Ec2DeleteSnapshotRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSnapshot'),
        parameters: {
          SnapshotId: input.snapshotId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSnapshot', props);
  }

  public deleteSpotDatafeedSubscription(input: shapes.Ec2DeleteSpotDatafeedSubscriptionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSpotDatafeedSubscription'),
        parameters: {
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSpotDatafeedSubscription', props);
  }

  public deleteSubnet(input: shapes.Ec2DeleteSubnetRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnet'),
        parameters: {
          SubnetId: input.subnetId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSubnet', props);
  }

  public deleteSubnetCidrReservation(input: shapes.Ec2DeleteSubnetCidrReservationRequest): EC2ResponsesDeleteSubnetCidrReservation {
    return new EC2ResponsesDeleteSubnetCidrReservation(this, this.__resources, input);
  }

  public deleteTags(input: shapes.Ec2DeleteTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTags',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTags'),
        parameters: {
          DryRun: input.dryRun,
          Resources: input.resources,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteTags', props);
  }

  public deleteTrafficMirrorFilter(input: shapes.Ec2DeleteTrafficMirrorFilterRequest): EC2ResponsesDeleteTrafficMirrorFilter {
    return new EC2ResponsesDeleteTrafficMirrorFilter(this, this.__resources, input);
  }

  public deleteTrafficMirrorFilterRule(input: shapes.Ec2DeleteTrafficMirrorFilterRuleRequest): EC2ResponsesDeleteTrafficMirrorFilterRule {
    return new EC2ResponsesDeleteTrafficMirrorFilterRule(this, this.__resources, input);
  }

  public deleteTrafficMirrorSession(input: shapes.Ec2DeleteTrafficMirrorSessionRequest): EC2ResponsesDeleteTrafficMirrorSession {
    return new EC2ResponsesDeleteTrafficMirrorSession(this, this.__resources, input);
  }

  public deleteTrafficMirrorTarget(input: shapes.Ec2DeleteTrafficMirrorTargetRequest): EC2ResponsesDeleteTrafficMirrorTarget {
    return new EC2ResponsesDeleteTrafficMirrorTarget(this, this.__resources, input);
  }

  public deleteTransitGateway(input: shapes.Ec2DeleteTransitGatewayRequest): EC2ResponsesDeleteTransitGateway {
    return new EC2ResponsesDeleteTransitGateway(this, this.__resources, input);
  }

  public deleteTransitGatewayConnect(input: shapes.Ec2DeleteTransitGatewayConnectRequest): EC2ResponsesDeleteTransitGatewayConnect {
    return new EC2ResponsesDeleteTransitGatewayConnect(this, this.__resources, input);
  }

  public deleteTransitGatewayConnectPeer(input: shapes.Ec2DeleteTransitGatewayConnectPeerRequest): EC2ResponsesDeleteTransitGatewayConnectPeer {
    return new EC2ResponsesDeleteTransitGatewayConnectPeer(this, this.__resources, input);
  }

  public deleteTransitGatewayMulticastDomain(input: shapes.Ec2DeleteTransitGatewayMulticastDomainRequest): EC2ResponsesDeleteTransitGatewayMulticastDomain {
    return new EC2ResponsesDeleteTransitGatewayMulticastDomain(this, this.__resources, input);
  }

  public deleteTransitGatewayPeeringAttachment(input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest): EC2ResponsesDeleteTransitGatewayPeeringAttachment {
    return new EC2ResponsesDeleteTransitGatewayPeeringAttachment(this, this.__resources, input);
  }

  public deleteTransitGatewayPrefixListReference(input: shapes.Ec2DeleteTransitGatewayPrefixListReferenceRequest): EC2ResponsesDeleteTransitGatewayPrefixListReference {
    return new EC2ResponsesDeleteTransitGatewayPrefixListReference(this, this.__resources, input);
  }

  public deleteTransitGatewayRoute(input: shapes.Ec2DeleteTransitGatewayRouteRequest): EC2ResponsesDeleteTransitGatewayRoute {
    return new EC2ResponsesDeleteTransitGatewayRoute(this, this.__resources, input);
  }

  public deleteTransitGatewayRouteTable(input: shapes.Ec2DeleteTransitGatewayRouteTableRequest): EC2ResponsesDeleteTransitGatewayRouteTable {
    return new EC2ResponsesDeleteTransitGatewayRouteTable(this, this.__resources, input);
  }

  public deleteTransitGatewayVpcAttachment(input: shapes.Ec2DeleteTransitGatewayVpcAttachmentRequest): EC2ResponsesDeleteTransitGatewayVpcAttachment {
    return new EC2ResponsesDeleteTransitGatewayVpcAttachment(this, this.__resources, input);
  }

  public deleteVolume(input: shapes.Ec2DeleteVolumeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVolume'),
        parameters: {
          VolumeId: input.volumeId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVolume', props);
  }

  public deleteVpc(input: shapes.Ec2DeleteVpcRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpc'),
        parameters: {
          VpcId: input.vpcId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVpc', props);
  }

  public deleteVpcEndpointConnectionNotifications(input: shapes.Ec2DeleteVpcEndpointConnectionNotificationsRequest): EC2ResponsesDeleteVpcEndpointConnectionNotifications {
    return new EC2ResponsesDeleteVpcEndpointConnectionNotifications(this, this.__resources, input);
  }

  public deleteVpcEndpointServiceConfigurations(input: shapes.Ec2DeleteVpcEndpointServiceConfigurationsRequest): EC2ResponsesDeleteVpcEndpointServiceConfigurations {
    return new EC2ResponsesDeleteVpcEndpointServiceConfigurations(this, this.__resources, input);
  }

  public deleteVpcEndpoints(input: shapes.Ec2DeleteVpcEndpointsRequest): EC2ResponsesDeleteVpcEndpoints {
    return new EC2ResponsesDeleteVpcEndpoints(this, this.__resources, input);
  }

  public deleteVpcPeeringConnection(input: shapes.Ec2DeleteVpcPeeringConnectionRequest): EC2ResponsesDeleteVpcPeeringConnection {
    return new EC2ResponsesDeleteVpcPeeringConnection(this, this.__resources, input);
  }

  public deleteVpnConnection(input: shapes.Ec2DeleteVpnConnectionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpnConnection'),
        parameters: {
          VpnConnectionId: input.vpnConnectionId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVpnConnection', props);
  }

  public deleteVpnConnectionRoute(input: shapes.Ec2DeleteVpnConnectionRouteRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpnConnectionRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpnConnectionRoute'),
        parameters: {
          DestinationCidrBlock: input.destinationCidrBlock,
          VpnConnectionId: input.vpnConnectionId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVpnConnectionRoute', props);
  }

  public deleteVpnGateway(input: shapes.Ec2DeleteVpnGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpnGateway'),
        parameters: {
          VpnGatewayId: input.vpnGatewayId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteVpnGateway', props);
  }

  public deprovisionByoipCidr(input: shapes.Ec2DeprovisionByoipCidrRequest): EC2ResponsesDeprovisionByoipCidr {
    return new EC2ResponsesDeprovisionByoipCidr(this, this.__resources, input);
  }

  public deregisterImage(input: shapes.Ec2DeregisterImageRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterImage'),
        parameters: {
          ImageId: input.imageId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeregisterImage', props);
  }

  public deregisterInstanceEventNotificationAttributes(input: shapes.Ec2DeregisterInstanceEventNotificationAttributesRequest): EC2ResponsesDeregisterInstanceEventNotificationAttributes {
    return new EC2ResponsesDeregisterInstanceEventNotificationAttributes(this, this.__resources, input);
  }

  public deregisterTransitGatewayMulticastGroupMembers(input: shapes.Ec2DeregisterTransitGatewayMulticastGroupMembersRequest): EC2ResponsesDeregisterTransitGatewayMulticastGroupMembers {
    return new EC2ResponsesDeregisterTransitGatewayMulticastGroupMembers(this, this.__resources, input);
  }

  public deregisterTransitGatewayMulticastGroupSources(input: shapes.Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest): EC2ResponsesDeregisterTransitGatewayMulticastGroupSources {
    return new EC2ResponsesDeregisterTransitGatewayMulticastGroupSources(this, this.__resources, input);
  }

  public describeAccountAttributes(input: shapes.Ec2DescribeAccountAttributesRequest): EC2ResponsesDescribeAccountAttributes {
    return new EC2ResponsesDescribeAccountAttributes(this, this.__resources, input);
  }

  public describeAddresses(input: shapes.Ec2DescribeAddressesRequest): EC2ResponsesDescribeAddresses {
    return new EC2ResponsesDescribeAddresses(this, this.__resources, input);
  }

  public describeAddressesAttribute(input: shapes.Ec2DescribeAddressesAttributeRequest): EC2ResponsesDescribeAddressesAttribute {
    return new EC2ResponsesDescribeAddressesAttribute(this, this.__resources, input);
  }

  public describeAggregateIdFormat(input: shapes.Ec2DescribeAggregateIdFormatRequest): EC2ResponsesDescribeAggregateIdFormat {
    return new EC2ResponsesDescribeAggregateIdFormat(this, this.__resources, input);
  }

  public describeAvailabilityZones(input: shapes.Ec2DescribeAvailabilityZonesRequest): EC2ResponsesDescribeAvailabilityZones {
    return new EC2ResponsesDescribeAvailabilityZones(this, this.__resources, input);
  }

  public describeBundleTasks(input: shapes.Ec2DescribeBundleTasksRequest): EC2ResponsesDescribeBundleTasks {
    return new EC2ResponsesDescribeBundleTasks(this, this.__resources, input);
  }

  public describeByoipCidrs(input: shapes.Ec2DescribeByoipCidrsRequest): EC2ResponsesDescribeByoipCidrs {
    return new EC2ResponsesDescribeByoipCidrs(this, this.__resources, input);
  }

  public describeCapacityReservations(input: shapes.Ec2DescribeCapacityReservationsRequest): EC2ResponsesDescribeCapacityReservations {
    return new EC2ResponsesDescribeCapacityReservations(this, this.__resources, input);
  }

  public describeCarrierGateways(input: shapes.Ec2DescribeCarrierGatewaysRequest): EC2ResponsesDescribeCarrierGateways {
    return new EC2ResponsesDescribeCarrierGateways(this, this.__resources, input);
  }

  public describeClassicLinkInstances(input: shapes.Ec2DescribeClassicLinkInstancesRequest): EC2ResponsesDescribeClassicLinkInstances {
    return new EC2ResponsesDescribeClassicLinkInstances(this, this.__resources, input);
  }

  public describeClientVpnAuthorizationRules(input: shapes.Ec2DescribeClientVpnAuthorizationRulesRequest): EC2ResponsesDescribeClientVpnAuthorizationRules {
    return new EC2ResponsesDescribeClientVpnAuthorizationRules(this, this.__resources, input);
  }

  public describeClientVpnConnections(input: shapes.Ec2DescribeClientVpnConnectionsRequest): EC2ResponsesDescribeClientVpnConnections {
    return new EC2ResponsesDescribeClientVpnConnections(this, this.__resources, input);
  }

  public describeClientVpnEndpoints(input: shapes.Ec2DescribeClientVpnEndpointsRequest): EC2ResponsesDescribeClientVpnEndpoints {
    return new EC2ResponsesDescribeClientVpnEndpoints(this, this.__resources, input);
  }

  public describeClientVpnRoutes(input: shapes.Ec2DescribeClientVpnRoutesRequest): EC2ResponsesDescribeClientVpnRoutes {
    return new EC2ResponsesDescribeClientVpnRoutes(this, this.__resources, input);
  }

  public describeClientVpnTargetNetworks(input: shapes.Ec2DescribeClientVpnTargetNetworksRequest): EC2ResponsesDescribeClientVpnTargetNetworks {
    return new EC2ResponsesDescribeClientVpnTargetNetworks(this, this.__resources, input);
  }

  public describeCoipPools(input: shapes.Ec2DescribeCoipPoolsRequest): EC2ResponsesDescribeCoipPools {
    return new EC2ResponsesDescribeCoipPools(this, this.__resources, input);
  }

  public describeConversionTasks(input: shapes.Ec2DescribeConversionTasksRequest): EC2ResponsesDescribeConversionTasks {
    return new EC2ResponsesDescribeConversionTasks(this, this.__resources, input);
  }

  public describeCustomerGateways(input: shapes.Ec2DescribeCustomerGatewaysRequest): EC2ResponsesDescribeCustomerGateways {
    return new EC2ResponsesDescribeCustomerGateways(this, this.__resources, input);
  }

  public describeDhcpOptions(input: shapes.Ec2DescribeDhcpOptionsRequest): EC2ResponsesDescribeDhcpOptions {
    return new EC2ResponsesDescribeDhcpOptions(this, this.__resources, input);
  }

  public describeEgressOnlyInternetGateways(input: shapes.Ec2DescribeEgressOnlyInternetGatewaysRequest): EC2ResponsesDescribeEgressOnlyInternetGateways {
    return new EC2ResponsesDescribeEgressOnlyInternetGateways(this, this.__resources, input);
  }

  public describeElasticGpus(input: shapes.Ec2DescribeElasticGpusRequest): EC2ResponsesDescribeElasticGpus {
    return new EC2ResponsesDescribeElasticGpus(this, this.__resources, input);
  }

  public describeExportImageTasks(input: shapes.Ec2DescribeExportImageTasksRequest): EC2ResponsesDescribeExportImageTasks {
    return new EC2ResponsesDescribeExportImageTasks(this, this.__resources, input);
  }

  public describeExportTasks(input: shapes.Ec2DescribeExportTasksRequest): EC2ResponsesDescribeExportTasks {
    return new EC2ResponsesDescribeExportTasks(this, this.__resources, input);
  }

  public describeFastSnapshotRestores(input: shapes.Ec2DescribeFastSnapshotRestoresRequest): EC2ResponsesDescribeFastSnapshotRestores {
    return new EC2ResponsesDescribeFastSnapshotRestores(this, this.__resources, input);
  }

  public describeFleetHistory(input: shapes.Ec2DescribeFleetHistoryRequest): EC2ResponsesDescribeFleetHistory {
    return new EC2ResponsesDescribeFleetHistory(this, this.__resources, input);
  }

  public describeFleetInstances(input: shapes.Ec2DescribeFleetInstancesRequest): EC2ResponsesDescribeFleetInstances {
    return new EC2ResponsesDescribeFleetInstances(this, this.__resources, input);
  }

  public describeFleets(input: shapes.Ec2DescribeFleetsRequest): EC2ResponsesDescribeFleets {
    return new EC2ResponsesDescribeFleets(this, this.__resources, input);
  }

  public describeFlowLogs(input: shapes.Ec2DescribeFlowLogsRequest): EC2ResponsesDescribeFlowLogs {
    return new EC2ResponsesDescribeFlowLogs(this, this.__resources, input);
  }

  public describeFpgaImageAttribute(input: shapes.Ec2DescribeFpgaImageAttributeRequest): EC2ResponsesDescribeFpgaImageAttribute {
    return new EC2ResponsesDescribeFpgaImageAttribute(this, this.__resources, input);
  }

  public describeFpgaImages(input: shapes.Ec2DescribeFpgaImagesRequest): EC2ResponsesDescribeFpgaImages {
    return new EC2ResponsesDescribeFpgaImages(this, this.__resources, input);
  }

  public describeHostReservationOfferings(input: shapes.Ec2DescribeHostReservationOfferingsRequest): EC2ResponsesDescribeHostReservationOfferings {
    return new EC2ResponsesDescribeHostReservationOfferings(this, this.__resources, input);
  }

  public describeHostReservations(input: shapes.Ec2DescribeHostReservationsRequest): EC2ResponsesDescribeHostReservations {
    return new EC2ResponsesDescribeHostReservations(this, this.__resources, input);
  }

  public describeHosts(input: shapes.Ec2DescribeHostsRequest): EC2ResponsesDescribeHosts {
    return new EC2ResponsesDescribeHosts(this, this.__resources, input);
  }

  public describeIamInstanceProfileAssociations(input: shapes.Ec2DescribeIamInstanceProfileAssociationsRequest): EC2ResponsesDescribeIamInstanceProfileAssociations {
    return new EC2ResponsesDescribeIamInstanceProfileAssociations(this, this.__resources, input);
  }

  public describeIdFormat(input: shapes.Ec2DescribeIdFormatRequest): EC2ResponsesDescribeIdFormat {
    return new EC2ResponsesDescribeIdFormat(this, this.__resources, input);
  }

  public describeIdentityIdFormat(input: shapes.Ec2DescribeIdentityIdFormatRequest): EC2ResponsesDescribeIdentityIdFormat {
    return new EC2ResponsesDescribeIdentityIdFormat(this, this.__resources, input);
  }

  public describeImageAttribute(input: shapes.Ec2DescribeImageAttributeRequest): EC2ResponsesDescribeImageAttribute {
    return new EC2ResponsesDescribeImageAttribute(this, this.__resources, input);
  }

  public describeImages(input: shapes.Ec2DescribeImagesRequest): EC2ResponsesDescribeImages {
    return new EC2ResponsesDescribeImages(this, this.__resources, input);
  }

  public describeImportImageTasks(input: shapes.Ec2DescribeImportImageTasksRequest): EC2ResponsesDescribeImportImageTasks {
    return new EC2ResponsesDescribeImportImageTasks(this, this.__resources, input);
  }

  public describeImportSnapshotTasks(input: shapes.Ec2DescribeImportSnapshotTasksRequest): EC2ResponsesDescribeImportSnapshotTasks {
    return new EC2ResponsesDescribeImportSnapshotTasks(this, this.__resources, input);
  }

  public describeInstanceAttribute(input: shapes.Ec2DescribeInstanceAttributeRequest): EC2ResponsesDescribeInstanceAttribute {
    return new EC2ResponsesDescribeInstanceAttribute(this, this.__resources, input);
  }

  public describeInstanceCreditSpecifications(input: shapes.Ec2DescribeInstanceCreditSpecificationsRequest): EC2ResponsesDescribeInstanceCreditSpecifications {
    return new EC2ResponsesDescribeInstanceCreditSpecifications(this, this.__resources, input);
  }

  public describeInstanceEventNotificationAttributes(input: shapes.Ec2DescribeInstanceEventNotificationAttributesRequest): EC2ResponsesDescribeInstanceEventNotificationAttributes {
    return new EC2ResponsesDescribeInstanceEventNotificationAttributes(this, this.__resources, input);
  }

  public describeInstanceEventWindows(input: shapes.Ec2DescribeInstanceEventWindowsRequest): EC2ResponsesDescribeInstanceEventWindows {
    return new EC2ResponsesDescribeInstanceEventWindows(this, this.__resources, input);
  }

  public describeInstanceStatus(input: shapes.Ec2DescribeInstanceStatusRequest): EC2ResponsesDescribeInstanceStatus {
    return new EC2ResponsesDescribeInstanceStatus(this, this.__resources, input);
  }

  public describeInstanceTypeOfferings(input: shapes.Ec2DescribeInstanceTypeOfferingsRequest): EC2ResponsesDescribeInstanceTypeOfferings {
    return new EC2ResponsesDescribeInstanceTypeOfferings(this, this.__resources, input);
  }

  public describeInstanceTypes(input: shapes.Ec2DescribeInstanceTypesRequest): EC2ResponsesDescribeInstanceTypes {
    return new EC2ResponsesDescribeInstanceTypes(this, this.__resources, input);
  }

  public describeInstances(input: shapes.Ec2DescribeInstancesRequest): EC2ResponsesDescribeInstances {
    return new EC2ResponsesDescribeInstances(this, this.__resources, input);
  }

  public describeInternetGateways(input: shapes.Ec2DescribeInternetGatewaysRequest): EC2ResponsesDescribeInternetGateways {
    return new EC2ResponsesDescribeInternetGateways(this, this.__resources, input);
  }

  public describeIpv6Pools(input: shapes.Ec2DescribeIpv6PoolsRequest): EC2ResponsesDescribeIpv6Pools {
    return new EC2ResponsesDescribeIpv6Pools(this, this.__resources, input);
  }

  public describeKeyPairs(input: shapes.Ec2DescribeKeyPairsRequest): EC2ResponsesDescribeKeyPairs {
    return new EC2ResponsesDescribeKeyPairs(this, this.__resources, input);
  }

  public describeLaunchTemplateVersions(input: shapes.Ec2DescribeLaunchTemplateVersionsRequest): EC2ResponsesDescribeLaunchTemplateVersions {
    return new EC2ResponsesDescribeLaunchTemplateVersions(this, this.__resources, input);
  }

  public describeLaunchTemplates(input: shapes.Ec2DescribeLaunchTemplatesRequest): EC2ResponsesDescribeLaunchTemplates {
    return new EC2ResponsesDescribeLaunchTemplates(this, this.__resources, input);
  }

  public describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(input: shapes.Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest): EC2ResponsesDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations {
    return new EC2ResponsesDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(this, this.__resources, input);
  }

  public describeLocalGatewayRouteTableVpcAssociations(input: shapes.Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest): EC2ResponsesDescribeLocalGatewayRouteTableVpcAssociations {
    return new EC2ResponsesDescribeLocalGatewayRouteTableVpcAssociations(this, this.__resources, input);
  }

  public describeLocalGatewayRouteTables(input: shapes.Ec2DescribeLocalGatewayRouteTablesRequest): EC2ResponsesDescribeLocalGatewayRouteTables {
    return new EC2ResponsesDescribeLocalGatewayRouteTables(this, this.__resources, input);
  }

  public describeLocalGatewayVirtualInterfaceGroups(input: shapes.Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest): EC2ResponsesDescribeLocalGatewayVirtualInterfaceGroups {
    return new EC2ResponsesDescribeLocalGatewayVirtualInterfaceGroups(this, this.__resources, input);
  }

  public describeLocalGatewayVirtualInterfaces(input: shapes.Ec2DescribeLocalGatewayVirtualInterfacesRequest): EC2ResponsesDescribeLocalGatewayVirtualInterfaces {
    return new EC2ResponsesDescribeLocalGatewayVirtualInterfaces(this, this.__resources, input);
  }

  public describeLocalGateways(input: shapes.Ec2DescribeLocalGatewaysRequest): EC2ResponsesDescribeLocalGateways {
    return new EC2ResponsesDescribeLocalGateways(this, this.__resources, input);
  }

  public describeManagedPrefixLists(input: shapes.Ec2DescribeManagedPrefixListsRequest): EC2ResponsesDescribeManagedPrefixLists {
    return new EC2ResponsesDescribeManagedPrefixLists(this, this.__resources, input);
  }

  public describeMovingAddresses(input: shapes.Ec2DescribeMovingAddressesRequest): EC2ResponsesDescribeMovingAddresses {
    return new EC2ResponsesDescribeMovingAddresses(this, this.__resources, input);
  }

  public describeNatGateways(input: shapes.Ec2DescribeNatGatewaysRequest): EC2ResponsesDescribeNatGateways {
    return new EC2ResponsesDescribeNatGateways(this, this.__resources, input);
  }

  public describeNetworkAcls(input: shapes.Ec2DescribeNetworkAclsRequest): EC2ResponsesDescribeNetworkAcls {
    return new EC2ResponsesDescribeNetworkAcls(this, this.__resources, input);
  }

  public describeNetworkInsightsAnalyses(input: shapes.Ec2DescribeNetworkInsightsAnalysesRequest): EC2ResponsesDescribeNetworkInsightsAnalyses {
    return new EC2ResponsesDescribeNetworkInsightsAnalyses(this, this.__resources, input);
  }

  public describeNetworkInsightsPaths(input: shapes.Ec2DescribeNetworkInsightsPathsRequest): EC2ResponsesDescribeNetworkInsightsPaths {
    return new EC2ResponsesDescribeNetworkInsightsPaths(this, this.__resources, input);
  }

  public describeNetworkInterfaceAttribute(input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest): EC2ResponsesDescribeNetworkInterfaceAttribute {
    return new EC2ResponsesDescribeNetworkInterfaceAttribute(this, this.__resources, input);
  }

  public describeNetworkInterfacePermissions(input: shapes.Ec2DescribeNetworkInterfacePermissionsRequest): EC2ResponsesDescribeNetworkInterfacePermissions {
    return new EC2ResponsesDescribeNetworkInterfacePermissions(this, this.__resources, input);
  }

  public describeNetworkInterfaces(input: shapes.Ec2DescribeNetworkInterfacesRequest): EC2ResponsesDescribeNetworkInterfaces {
    return new EC2ResponsesDescribeNetworkInterfaces(this, this.__resources, input);
  }

  public describePlacementGroups(input: shapes.Ec2DescribePlacementGroupsRequest): EC2ResponsesDescribePlacementGroups {
    return new EC2ResponsesDescribePlacementGroups(this, this.__resources, input);
  }

  public describePrefixLists(input: shapes.Ec2DescribePrefixListsRequest): EC2ResponsesDescribePrefixLists {
    return new EC2ResponsesDescribePrefixLists(this, this.__resources, input);
  }

  public describePrincipalIdFormat(input: shapes.Ec2DescribePrincipalIdFormatRequest): EC2ResponsesDescribePrincipalIdFormat {
    return new EC2ResponsesDescribePrincipalIdFormat(this, this.__resources, input);
  }

  public describePublicIpv4Pools(input: shapes.Ec2DescribePublicIpv4PoolsRequest): EC2ResponsesDescribePublicIpv4Pools {
    return new EC2ResponsesDescribePublicIpv4Pools(this, this.__resources, input);
  }

  public describeRegions(input: shapes.Ec2DescribeRegionsRequest): EC2ResponsesDescribeRegions {
    return new EC2ResponsesDescribeRegions(this, this.__resources, input);
  }

  public describeReplaceRootVolumeTasks(input: shapes.Ec2DescribeReplaceRootVolumeTasksRequest): EC2ResponsesDescribeReplaceRootVolumeTasks {
    return new EC2ResponsesDescribeReplaceRootVolumeTasks(this, this.__resources, input);
  }

  public describeReservedInstances(input: shapes.Ec2DescribeReservedInstancesRequest): EC2ResponsesDescribeReservedInstances {
    return new EC2ResponsesDescribeReservedInstances(this, this.__resources, input);
  }

  public describeReservedInstancesListings(input: shapes.Ec2DescribeReservedInstancesListingsRequest): EC2ResponsesDescribeReservedInstancesListings {
    return new EC2ResponsesDescribeReservedInstancesListings(this, this.__resources, input);
  }

  public describeReservedInstancesModifications(input: shapes.Ec2DescribeReservedInstancesModificationsRequest): EC2ResponsesDescribeReservedInstancesModifications {
    return new EC2ResponsesDescribeReservedInstancesModifications(this, this.__resources, input);
  }

  public describeReservedInstancesOfferings(input: shapes.Ec2DescribeReservedInstancesOfferingsRequest): EC2ResponsesDescribeReservedInstancesOfferings {
    return new EC2ResponsesDescribeReservedInstancesOfferings(this, this.__resources, input);
  }

  public describeRouteTables(input: shapes.Ec2DescribeRouteTablesRequest): EC2ResponsesDescribeRouteTables {
    return new EC2ResponsesDescribeRouteTables(this, this.__resources, input);
  }

  public describeScheduledInstanceAvailability(input: shapes.Ec2DescribeScheduledInstanceAvailabilityRequest): EC2ResponsesDescribeScheduledInstanceAvailability {
    return new EC2ResponsesDescribeScheduledInstanceAvailability(this, this.__resources, input);
  }

  public describeScheduledInstances(input: shapes.Ec2DescribeScheduledInstancesRequest): EC2ResponsesDescribeScheduledInstances {
    return new EC2ResponsesDescribeScheduledInstances(this, this.__resources, input);
  }

  public describeSecurityGroupReferences(input: shapes.Ec2DescribeSecurityGroupReferencesRequest): EC2ResponsesDescribeSecurityGroupReferences {
    return new EC2ResponsesDescribeSecurityGroupReferences(this, this.__resources, input);
  }

  public describeSecurityGroupRules(input: shapes.Ec2DescribeSecurityGroupRulesRequest): EC2ResponsesDescribeSecurityGroupRules {
    return new EC2ResponsesDescribeSecurityGroupRules(this, this.__resources, input);
  }

  public describeSecurityGroups(input: shapes.Ec2DescribeSecurityGroupsRequest): EC2ResponsesDescribeSecurityGroups {
    return new EC2ResponsesDescribeSecurityGroups(this, this.__resources, input);
  }

  public describeSnapshotAttribute(input: shapes.Ec2DescribeSnapshotAttributeRequest): EC2ResponsesDescribeSnapshotAttribute {
    return new EC2ResponsesDescribeSnapshotAttribute(this, this.__resources, input);
  }

  public describeSnapshots(input: shapes.Ec2DescribeSnapshotsRequest): EC2ResponsesDescribeSnapshots {
    return new EC2ResponsesDescribeSnapshots(this, this.__resources, input);
  }

  public describeSpotDatafeedSubscription(input: shapes.Ec2DescribeSpotDatafeedSubscriptionRequest): EC2ResponsesDescribeSpotDatafeedSubscription {
    return new EC2ResponsesDescribeSpotDatafeedSubscription(this, this.__resources, input);
  }

  public describeSpotFleetInstances(input: shapes.Ec2DescribeSpotFleetInstancesRequest): EC2ResponsesDescribeSpotFleetInstances {
    return new EC2ResponsesDescribeSpotFleetInstances(this, this.__resources, input);
  }

  public describeSpotFleetRequestHistory(input: shapes.Ec2DescribeSpotFleetRequestHistoryRequest): EC2ResponsesDescribeSpotFleetRequestHistory {
    return new EC2ResponsesDescribeSpotFleetRequestHistory(this, this.__resources, input);
  }

  public describeSpotFleetRequests(input: shapes.Ec2DescribeSpotFleetRequestsRequest): EC2ResponsesDescribeSpotFleetRequests {
    return new EC2ResponsesDescribeSpotFleetRequests(this, this.__resources, input);
  }

  public describeSpotInstanceRequests(input: shapes.Ec2DescribeSpotInstanceRequestsRequest): EC2ResponsesDescribeSpotInstanceRequests {
    return new EC2ResponsesDescribeSpotInstanceRequests(this, this.__resources, input);
  }

  public describeSpotPriceHistory(input: shapes.Ec2DescribeSpotPriceHistoryRequest): EC2ResponsesDescribeSpotPriceHistory {
    return new EC2ResponsesDescribeSpotPriceHistory(this, this.__resources, input);
  }

  public describeStaleSecurityGroups(input: shapes.Ec2DescribeStaleSecurityGroupsRequest): EC2ResponsesDescribeStaleSecurityGroups {
    return new EC2ResponsesDescribeStaleSecurityGroups(this, this.__resources, input);
  }

  public describeStoreImageTasks(input: shapes.Ec2DescribeStoreImageTasksRequest): EC2ResponsesDescribeStoreImageTasks {
    return new EC2ResponsesDescribeStoreImageTasks(this, this.__resources, input);
  }

  public describeSubnets(input: shapes.Ec2DescribeSubnetsRequest): EC2ResponsesDescribeSubnets {
    return new EC2ResponsesDescribeSubnets(this, this.__resources, input);
  }

  public describeTags(input: shapes.Ec2DescribeTagsRequest): EC2ResponsesDescribeTags {
    return new EC2ResponsesDescribeTags(this, this.__resources, input);
  }

  public describeTrafficMirrorFilters(input: shapes.Ec2DescribeTrafficMirrorFiltersRequest): EC2ResponsesDescribeTrafficMirrorFilters {
    return new EC2ResponsesDescribeTrafficMirrorFilters(this, this.__resources, input);
  }

  public describeTrafficMirrorSessions(input: shapes.Ec2DescribeTrafficMirrorSessionsRequest): EC2ResponsesDescribeTrafficMirrorSessions {
    return new EC2ResponsesDescribeTrafficMirrorSessions(this, this.__resources, input);
  }

  public describeTrafficMirrorTargets(input: shapes.Ec2DescribeTrafficMirrorTargetsRequest): EC2ResponsesDescribeTrafficMirrorTargets {
    return new EC2ResponsesDescribeTrafficMirrorTargets(this, this.__resources, input);
  }

  public describeTransitGatewayAttachments(input: shapes.Ec2DescribeTransitGatewayAttachmentsRequest): EC2ResponsesDescribeTransitGatewayAttachments {
    return new EC2ResponsesDescribeTransitGatewayAttachments(this, this.__resources, input);
  }

  public describeTransitGatewayConnectPeers(input: shapes.Ec2DescribeTransitGatewayConnectPeersRequest): EC2ResponsesDescribeTransitGatewayConnectPeers {
    return new EC2ResponsesDescribeTransitGatewayConnectPeers(this, this.__resources, input);
  }

  public describeTransitGatewayConnects(input: shapes.Ec2DescribeTransitGatewayConnectsRequest): EC2ResponsesDescribeTransitGatewayConnects {
    return new EC2ResponsesDescribeTransitGatewayConnects(this, this.__resources, input);
  }

  public describeTransitGatewayMulticastDomains(input: shapes.Ec2DescribeTransitGatewayMulticastDomainsRequest): EC2ResponsesDescribeTransitGatewayMulticastDomains {
    return new EC2ResponsesDescribeTransitGatewayMulticastDomains(this, this.__resources, input);
  }

  public describeTransitGatewayPeeringAttachments(input: shapes.Ec2DescribeTransitGatewayPeeringAttachmentsRequest): EC2ResponsesDescribeTransitGatewayPeeringAttachments {
    return new EC2ResponsesDescribeTransitGatewayPeeringAttachments(this, this.__resources, input);
  }

  public describeTransitGatewayRouteTables(input: shapes.Ec2DescribeTransitGatewayRouteTablesRequest): EC2ResponsesDescribeTransitGatewayRouteTables {
    return new EC2ResponsesDescribeTransitGatewayRouteTables(this, this.__resources, input);
  }

  public describeTransitGatewayVpcAttachments(input: shapes.Ec2DescribeTransitGatewayVpcAttachmentsRequest): EC2ResponsesDescribeTransitGatewayVpcAttachments {
    return new EC2ResponsesDescribeTransitGatewayVpcAttachments(this, this.__resources, input);
  }

  public describeTransitGateways(input: shapes.Ec2DescribeTransitGatewaysRequest): EC2ResponsesDescribeTransitGateways {
    return new EC2ResponsesDescribeTransitGateways(this, this.__resources, input);
  }

  public describeTrunkInterfaceAssociations(input: shapes.Ec2DescribeTrunkInterfaceAssociationsRequest): EC2ResponsesDescribeTrunkInterfaceAssociations {
    return new EC2ResponsesDescribeTrunkInterfaceAssociations(this, this.__resources, input);
  }

  public describeVolumeAttribute(input: shapes.Ec2DescribeVolumeAttributeRequest): EC2ResponsesDescribeVolumeAttribute {
    return new EC2ResponsesDescribeVolumeAttribute(this, this.__resources, input);
  }

  public describeVolumeStatus(input: shapes.Ec2DescribeVolumeStatusRequest): EC2ResponsesDescribeVolumeStatus {
    return new EC2ResponsesDescribeVolumeStatus(this, this.__resources, input);
  }

  public describeVolumes(input: shapes.Ec2DescribeVolumesRequest): EC2ResponsesDescribeVolumes {
    return new EC2ResponsesDescribeVolumes(this, this.__resources, input);
  }

  public describeVolumesModifications(input: shapes.Ec2DescribeVolumesModificationsRequest): EC2ResponsesDescribeVolumesModifications {
    return new EC2ResponsesDescribeVolumesModifications(this, this.__resources, input);
  }

  public describeVpcAttribute(input: shapes.Ec2DescribeVpcAttributeRequest): EC2ResponsesDescribeVpcAttribute {
    return new EC2ResponsesDescribeVpcAttribute(this, this.__resources, input);
  }

  public describeVpcClassicLink(input: shapes.Ec2DescribeVpcClassicLinkRequest): EC2ResponsesDescribeVpcClassicLink {
    return new EC2ResponsesDescribeVpcClassicLink(this, this.__resources, input);
  }

  public describeVpcClassicLinkDnsSupport(input: shapes.Ec2DescribeVpcClassicLinkDnsSupportRequest): EC2ResponsesDescribeVpcClassicLinkDnsSupport {
    return new EC2ResponsesDescribeVpcClassicLinkDnsSupport(this, this.__resources, input);
  }

  public describeVpcEndpointConnectionNotifications(input: shapes.Ec2DescribeVpcEndpointConnectionNotificationsRequest): EC2ResponsesDescribeVpcEndpointConnectionNotifications {
    return new EC2ResponsesDescribeVpcEndpointConnectionNotifications(this, this.__resources, input);
  }

  public describeVpcEndpointConnections(input: shapes.Ec2DescribeVpcEndpointConnectionsRequest): EC2ResponsesDescribeVpcEndpointConnections {
    return new EC2ResponsesDescribeVpcEndpointConnections(this, this.__resources, input);
  }

  public describeVpcEndpointServiceConfigurations(input: shapes.Ec2DescribeVpcEndpointServiceConfigurationsRequest): EC2ResponsesDescribeVpcEndpointServiceConfigurations {
    return new EC2ResponsesDescribeVpcEndpointServiceConfigurations(this, this.__resources, input);
  }

  public describeVpcEndpointServicePermissions(input: shapes.Ec2DescribeVpcEndpointServicePermissionsRequest): EC2ResponsesDescribeVpcEndpointServicePermissions {
    return new EC2ResponsesDescribeVpcEndpointServicePermissions(this, this.__resources, input);
  }

  public describeVpcEndpointServices(input: shapes.Ec2DescribeVpcEndpointServicesRequest): EC2ResponsesDescribeVpcEndpointServices {
    return new EC2ResponsesDescribeVpcEndpointServices(this, this.__resources, input);
  }

  public describeVpcEndpoints(input: shapes.Ec2DescribeVpcEndpointsRequest): EC2ResponsesDescribeVpcEndpoints {
    return new EC2ResponsesDescribeVpcEndpoints(this, this.__resources, input);
  }

  public describeVpcPeeringConnections(input: shapes.Ec2DescribeVpcPeeringConnectionsRequest): EC2ResponsesDescribeVpcPeeringConnections {
    return new EC2ResponsesDescribeVpcPeeringConnections(this, this.__resources, input);
  }

  public describeVpcs(input: shapes.Ec2DescribeVpcsRequest): EC2ResponsesDescribeVpcs {
    return new EC2ResponsesDescribeVpcs(this, this.__resources, input);
  }

  public describeVpnConnections(input: shapes.Ec2DescribeVpnConnectionsRequest): EC2ResponsesDescribeVpnConnections {
    return new EC2ResponsesDescribeVpnConnections(this, this.__resources, input);
  }

  public describeVpnGateways(input: shapes.Ec2DescribeVpnGatewaysRequest): EC2ResponsesDescribeVpnGateways {
    return new EC2ResponsesDescribeVpnGateways(this, this.__resources, input);
  }

  public detachClassicLinkVpc(input: shapes.Ec2DetachClassicLinkVpcRequest): EC2ResponsesDetachClassicLinkVpc {
    return new EC2ResponsesDetachClassicLinkVpc(this, this.__resources, input);
  }

  public detachInternetGateway(input: shapes.Ec2DetachInternetGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachInternetGateway'),
        parameters: {
          DryRun: input.dryRun,
          InternetGatewayId: input.internetGatewayId,
          VpcId: input.vpcId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DetachInternetGateway', props);
  }

  public detachNetworkInterface(input: shapes.Ec2DetachNetworkInterfaceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachNetworkInterface'),
        parameters: {
          AttachmentId: input.attachmentId,
          DryRun: input.dryRun,
          Force: input.force,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DetachNetworkInterface', props);
  }

  public detachVolume(input: shapes.Ec2DetachVolumeRequest): EC2ResponsesDetachVolume {
    return new EC2ResponsesDetachVolume(this, this.__resources, input);
  }

  public detachVpnGateway(input: shapes.Ec2DetachVpnGatewayRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVpnGateway'),
        parameters: {
          VpcId: input.vpcId,
          VpnGatewayId: input.vpnGatewayId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DetachVpnGateway', props);
  }

  public disableEbsEncryptionByDefault(input: shapes.Ec2DisableEbsEncryptionByDefaultRequest): EC2ResponsesDisableEbsEncryptionByDefault {
    return new EC2ResponsesDisableEbsEncryptionByDefault(this, this.__resources, input);
  }

  public disableFastSnapshotRestores(input: shapes.Ec2DisableFastSnapshotRestoresRequest): EC2ResponsesDisableFastSnapshotRestores {
    return new EC2ResponsesDisableFastSnapshotRestores(this, this.__resources, input);
  }

  public disableImageDeprecation(input: shapes.Ec2DisableImageDeprecationRequest): EC2ResponsesDisableImageDeprecation {
    return new EC2ResponsesDisableImageDeprecation(this, this.__resources, input);
  }

  public disableSerialConsoleAccess(input: shapes.Ec2DisableSerialConsoleAccessRequest): EC2ResponsesDisableSerialConsoleAccess {
    return new EC2ResponsesDisableSerialConsoleAccess(this, this.__resources, input);
  }

  public disableTransitGatewayRouteTablePropagation(input: shapes.Ec2DisableTransitGatewayRouteTablePropagationRequest): EC2ResponsesDisableTransitGatewayRouteTablePropagation {
    return new EC2ResponsesDisableTransitGatewayRouteTablePropagation(this, this.__resources, input);
  }

  public disableVgwRoutePropagation(input: shapes.Ec2DisableVgwRoutePropagationRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableVgwRoutePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableVgwRoutePropagation'),
        parameters: {
          GatewayId: input.gatewayId,
          RouteTableId: input.routeTableId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DisableVgwRoutePropagation', props);
  }

  public disableVpcClassicLink(input: shapes.Ec2DisableVpcClassicLinkRequest): EC2ResponsesDisableVpcClassicLink {
    return new EC2ResponsesDisableVpcClassicLink(this, this.__resources, input);
  }

  public disableVpcClassicLinkDnsSupport(input: shapes.Ec2DisableVpcClassicLinkDnsSupportRequest): EC2ResponsesDisableVpcClassicLinkDnsSupport {
    return new EC2ResponsesDisableVpcClassicLinkDnsSupport(this, this.__resources, input);
  }

  public disassociateAddress(input: shapes.Ec2DisassociateAddressRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateAddress'),
        parameters: {
          AssociationId: input.associationId,
          PublicIp: input.publicIp,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DisassociateAddress', props);
  }

  public disassociateClientVpnTargetNetwork(input: shapes.Ec2DisassociateClientVpnTargetNetworkRequest): EC2ResponsesDisassociateClientVpnTargetNetwork {
    return new EC2ResponsesDisassociateClientVpnTargetNetwork(this, this.__resources, input);
  }

  public disassociateEnclaveCertificateIamRole(input: shapes.Ec2DisassociateEnclaveCertificateIamRoleRequest): EC2ResponsesDisassociateEnclaveCertificateIamRole {
    return new EC2ResponsesDisassociateEnclaveCertificateIamRole(this, this.__resources, input);
  }

  public disassociateIamInstanceProfile(input: shapes.Ec2DisassociateIamInstanceProfileRequest): EC2ResponsesDisassociateIamInstanceProfile {
    return new EC2ResponsesDisassociateIamInstanceProfile(this, this.__resources, input);
  }

  public disassociateInstanceEventWindow(input: shapes.Ec2DisassociateInstanceEventWindowRequest): EC2ResponsesDisassociateInstanceEventWindow {
    return new EC2ResponsesDisassociateInstanceEventWindow(this, this.__resources, input);
  }

  public disassociateRouteTable(input: shapes.Ec2DisassociateRouteTableRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateRouteTable'),
        parameters: {
          AssociationId: input.associationId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DisassociateRouteTable', props);
  }

  public disassociateSubnetCidrBlock(input: shapes.Ec2DisassociateSubnetCidrBlockRequest): EC2ResponsesDisassociateSubnetCidrBlock {
    return new EC2ResponsesDisassociateSubnetCidrBlock(this, this.__resources, input);
  }

  public disassociateTransitGatewayMulticastDomain(input: shapes.Ec2DisassociateTransitGatewayMulticastDomainRequest): EC2ResponsesDisassociateTransitGatewayMulticastDomain {
    return new EC2ResponsesDisassociateTransitGatewayMulticastDomain(this, this.__resources, input);
  }

  public disassociateTransitGatewayRouteTable(input: shapes.Ec2DisassociateTransitGatewayRouteTableRequest): EC2ResponsesDisassociateTransitGatewayRouteTable {
    return new EC2ResponsesDisassociateTransitGatewayRouteTable(this, this.__resources, input);
  }

  public disassociateTrunkInterface(input: shapes.Ec2DisassociateTrunkInterfaceRequest): EC2ResponsesDisassociateTrunkInterface {
    return new EC2ResponsesDisassociateTrunkInterface(this, this.__resources, input);
  }

  public disassociateVpcCidrBlock(input: shapes.Ec2DisassociateVpcCidrBlockRequest): EC2ResponsesDisassociateVpcCidrBlock {
    return new EC2ResponsesDisassociateVpcCidrBlock(this, this.__resources, input);
  }

  public enableEbsEncryptionByDefault(input: shapes.Ec2EnableEbsEncryptionByDefaultRequest): EC2ResponsesEnableEbsEncryptionByDefault {
    return new EC2ResponsesEnableEbsEncryptionByDefault(this, this.__resources, input);
  }

  public enableFastSnapshotRestores(input: shapes.Ec2EnableFastSnapshotRestoresRequest): EC2ResponsesEnableFastSnapshotRestores {
    return new EC2ResponsesEnableFastSnapshotRestores(this, this.__resources, input);
  }

  public enableImageDeprecation(input: shapes.Ec2EnableImageDeprecationRequest): EC2ResponsesEnableImageDeprecation {
    return new EC2ResponsesEnableImageDeprecation(this, this.__resources, input);
  }

  public enableSerialConsoleAccess(input: shapes.Ec2EnableSerialConsoleAccessRequest): EC2ResponsesEnableSerialConsoleAccess {
    return new EC2ResponsesEnableSerialConsoleAccess(this, this.__resources, input);
  }

  public enableTransitGatewayRouteTablePropagation(input: shapes.Ec2EnableTransitGatewayRouteTablePropagationRequest): EC2ResponsesEnableTransitGatewayRouteTablePropagation {
    return new EC2ResponsesEnableTransitGatewayRouteTablePropagation(this, this.__resources, input);
  }

  public enableVgwRoutePropagation(input: shapes.Ec2EnableVgwRoutePropagationRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableVgwRoutePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableVgwRoutePropagation'),
        parameters: {
          GatewayId: input.gatewayId,
          RouteTableId: input.routeTableId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'EnableVgwRoutePropagation', props);
  }

  public enableVolumeIo(input: shapes.Ec2EnableVolumeIoRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableVolumeIo',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableVolumeIO'),
        parameters: {
          DryRun: input.dryRun,
          VolumeId: input.volumeId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'EnableVolumeIO', props);
  }

  public enableVpcClassicLink(input: shapes.Ec2EnableVpcClassicLinkRequest): EC2ResponsesEnableVpcClassicLink {
    return new EC2ResponsesEnableVpcClassicLink(this, this.__resources, input);
  }

  public enableVpcClassicLinkDnsSupport(input: shapes.Ec2EnableVpcClassicLinkDnsSupportRequest): EC2ResponsesEnableVpcClassicLinkDnsSupport {
    return new EC2ResponsesEnableVpcClassicLinkDnsSupport(this, this.__resources, input);
  }

  public exportClientVpnClientCertificateRevocationList(input: shapes.Ec2ExportClientVpnClientCertificateRevocationListRequest): EC2ResponsesExportClientVpnClientCertificateRevocationList {
    return new EC2ResponsesExportClientVpnClientCertificateRevocationList(this, this.__resources, input);
  }

  public exportClientVpnClientConfiguration(input: shapes.Ec2ExportClientVpnClientConfigurationRequest): EC2ResponsesExportClientVpnClientConfiguration {
    return new EC2ResponsesExportClientVpnClientConfiguration(this, this.__resources, input);
  }

  public exportImage(input: shapes.Ec2ExportImageRequest): EC2ResponsesExportImage {
    return new EC2ResponsesExportImage(this, this.__resources, input);
  }

  public exportTransitGatewayRoutes(input: shapes.Ec2ExportTransitGatewayRoutesRequest): EC2ResponsesExportTransitGatewayRoutes {
    return new EC2ResponsesExportTransitGatewayRoutes(this, this.__resources, input);
  }

  public fetchAssociatedEnclaveCertificateIamRoles(input: shapes.Ec2GetAssociatedEnclaveCertificateIamRolesRequest): EC2ResponsesFetchAssociatedEnclaveCertificateIamRoles {
    return new EC2ResponsesFetchAssociatedEnclaveCertificateIamRoles(this, this.__resources, input);
  }

  public fetchAssociatedIpv6PoolCidrs(input: shapes.Ec2GetAssociatedIpv6PoolCidrsRequest): EC2ResponsesFetchAssociatedIpv6PoolCidrs {
    return new EC2ResponsesFetchAssociatedIpv6PoolCidrs(this, this.__resources, input);
  }

  public fetchCapacityReservationUsage(input: shapes.Ec2GetCapacityReservationUsageRequest): EC2ResponsesFetchCapacityReservationUsage {
    return new EC2ResponsesFetchCapacityReservationUsage(this, this.__resources, input);
  }

  public fetchCoipPoolUsage(input: shapes.Ec2GetCoipPoolUsageRequest): EC2ResponsesFetchCoipPoolUsage {
    return new EC2ResponsesFetchCoipPoolUsage(this, this.__resources, input);
  }

  public fetchConsoleOutput(input: shapes.Ec2GetConsoleOutputRequest): EC2ResponsesFetchConsoleOutput {
    return new EC2ResponsesFetchConsoleOutput(this, this.__resources, input);
  }

  public fetchConsoleScreenshot(input: shapes.Ec2GetConsoleScreenshotRequest): EC2ResponsesFetchConsoleScreenshot {
    return new EC2ResponsesFetchConsoleScreenshot(this, this.__resources, input);
  }

  public fetchDefaultCreditSpecification(input: shapes.Ec2GetDefaultCreditSpecificationRequest): EC2ResponsesFetchDefaultCreditSpecification {
    return new EC2ResponsesFetchDefaultCreditSpecification(this, this.__resources, input);
  }

  public fetchEbsDefaultKmsKeyId(input: shapes.Ec2GetEbsDefaultKmsKeyIdRequest): EC2ResponsesFetchEbsDefaultKmsKeyId {
    return new EC2ResponsesFetchEbsDefaultKmsKeyId(this, this.__resources, input);
  }

  public fetchEbsEncryptionByDefault(input: shapes.Ec2GetEbsEncryptionByDefaultRequest): EC2ResponsesFetchEbsEncryptionByDefault {
    return new EC2ResponsesFetchEbsEncryptionByDefault(this, this.__resources, input);
  }

  public fetchFlowLogsIntegrationTemplate(input: shapes.Ec2GetFlowLogsIntegrationTemplateRequest): EC2ResponsesFetchFlowLogsIntegrationTemplate {
    return new EC2ResponsesFetchFlowLogsIntegrationTemplate(this, this.__resources, input);
  }

  public fetchGroupsForCapacityReservation(input: shapes.Ec2GetGroupsForCapacityReservationRequest): EC2ResponsesFetchGroupsForCapacityReservation {
    return new EC2ResponsesFetchGroupsForCapacityReservation(this, this.__resources, input);
  }

  public fetchHostReservationPurchasePreview(input: shapes.Ec2GetHostReservationPurchasePreviewRequest): EC2ResponsesFetchHostReservationPurchasePreview {
    return new EC2ResponsesFetchHostReservationPurchasePreview(this, this.__resources, input);
  }

  public fetchLaunchTemplateData(input: shapes.Ec2GetLaunchTemplateDataRequest): EC2ResponsesFetchLaunchTemplateData {
    return new EC2ResponsesFetchLaunchTemplateData(this, this.__resources, input);
  }

  public fetchManagedPrefixListAssociations(input: shapes.Ec2GetManagedPrefixListAssociationsRequest): EC2ResponsesFetchManagedPrefixListAssociations {
    return new EC2ResponsesFetchManagedPrefixListAssociations(this, this.__resources, input);
  }

  public fetchManagedPrefixListEntries(input: shapes.Ec2GetManagedPrefixListEntriesRequest): EC2ResponsesFetchManagedPrefixListEntries {
    return new EC2ResponsesFetchManagedPrefixListEntries(this, this.__resources, input);
  }

  public fetchPasswordData(input: shapes.Ec2GetPasswordDataRequest): EC2ResponsesFetchPasswordData {
    return new EC2ResponsesFetchPasswordData(this, this.__resources, input);
  }

  public fetchReservedInstancesExchangeQuote(input: shapes.Ec2GetReservedInstancesExchangeQuoteRequest): EC2ResponsesFetchReservedInstancesExchangeQuote {
    return new EC2ResponsesFetchReservedInstancesExchangeQuote(this, this.__resources, input);
  }

  public fetchSerialConsoleAccessStatus(input: shapes.Ec2GetSerialConsoleAccessStatusRequest): EC2ResponsesFetchSerialConsoleAccessStatus {
    return new EC2ResponsesFetchSerialConsoleAccessStatus(this, this.__resources, input);
  }

  public fetchSubnetCidrReservations(input: shapes.Ec2GetSubnetCidrReservationsRequest): EC2ResponsesFetchSubnetCidrReservations {
    return new EC2ResponsesFetchSubnetCidrReservations(this, this.__resources, input);
  }

  public fetchTransitGatewayAttachmentPropagations(input: shapes.Ec2GetTransitGatewayAttachmentPropagationsRequest): EC2ResponsesFetchTransitGatewayAttachmentPropagations {
    return new EC2ResponsesFetchTransitGatewayAttachmentPropagations(this, this.__resources, input);
  }

  public fetchTransitGatewayMulticastDomainAssociations(input: shapes.Ec2GetTransitGatewayMulticastDomainAssociationsRequest): EC2ResponsesFetchTransitGatewayMulticastDomainAssociations {
    return new EC2ResponsesFetchTransitGatewayMulticastDomainAssociations(this, this.__resources, input);
  }

  public fetchTransitGatewayPrefixListReferences(input: shapes.Ec2GetTransitGatewayPrefixListReferencesRequest): EC2ResponsesFetchTransitGatewayPrefixListReferences {
    return new EC2ResponsesFetchTransitGatewayPrefixListReferences(this, this.__resources, input);
  }

  public fetchTransitGatewayRouteTableAssociations(input: shapes.Ec2GetTransitGatewayRouteTableAssociationsRequest): EC2ResponsesFetchTransitGatewayRouteTableAssociations {
    return new EC2ResponsesFetchTransitGatewayRouteTableAssociations(this, this.__resources, input);
  }

  public fetchTransitGatewayRouteTablePropagations(input: shapes.Ec2GetTransitGatewayRouteTablePropagationsRequest): EC2ResponsesFetchTransitGatewayRouteTablePropagations {
    return new EC2ResponsesFetchTransitGatewayRouteTablePropagations(this, this.__resources, input);
  }

  public importClientVpnClientCertificateRevocationList(input: shapes.Ec2ImportClientVpnClientCertificateRevocationListRequest): EC2ResponsesImportClientVpnClientCertificateRevocationList {
    return new EC2ResponsesImportClientVpnClientCertificateRevocationList(this, this.__resources, input);
  }

  public importImage(input: shapes.Ec2ImportImageRequest): EC2ResponsesImportImage {
    return new EC2ResponsesImportImage(this, this.__resources, input);
  }

  public importInstance(input: shapes.Ec2ImportInstanceRequest): EC2ResponsesImportInstance {
    return new EC2ResponsesImportInstance(this, this.__resources, input);
  }

  public importKeyPair(input: shapes.Ec2ImportKeyPairRequest): EC2ResponsesImportKeyPair {
    return new EC2ResponsesImportKeyPair(this, this.__resources, input);
  }

  public importSnapshot(input: shapes.Ec2ImportSnapshotRequest): EC2ResponsesImportSnapshot {
    return new EC2ResponsesImportSnapshot(this, this.__resources, input);
  }

  public importVolume(input: shapes.Ec2ImportVolumeRequest): EC2ResponsesImportVolume {
    return new EC2ResponsesImportVolume(this, this.__resources, input);
  }

  public modifyAddressAttribute(input: shapes.Ec2ModifyAddressAttributeRequest): EC2ResponsesModifyAddressAttribute {
    return new EC2ResponsesModifyAddressAttribute(this, this.__resources, input);
  }

  public modifyAvailabilityZoneGroup(input: shapes.Ec2ModifyAvailabilityZoneGroupRequest): EC2ResponsesModifyAvailabilityZoneGroup {
    return new EC2ResponsesModifyAvailabilityZoneGroup(this, this.__resources, input);
  }

  public modifyCapacityReservation(input: shapes.Ec2ModifyCapacityReservationRequest): EC2ResponsesModifyCapacityReservation {
    return new EC2ResponsesModifyCapacityReservation(this, this.__resources, input);
  }

  public modifyClientVpnEndpoint(input: shapes.Ec2ModifyClientVpnEndpointRequest): EC2ResponsesModifyClientVpnEndpoint {
    return new EC2ResponsesModifyClientVpnEndpoint(this, this.__resources, input);
  }

  public modifyDefaultCreditSpecification(input: shapes.Ec2ModifyDefaultCreditSpecificationRequest): EC2ResponsesModifyDefaultCreditSpecification {
    return new EC2ResponsesModifyDefaultCreditSpecification(this, this.__resources, input);
  }

  public modifyEbsDefaultKmsKeyId(input: shapes.Ec2ModifyEbsDefaultKmsKeyIdRequest): EC2ResponsesModifyEbsDefaultKmsKeyId {
    return new EC2ResponsesModifyEbsDefaultKmsKeyId(this, this.__resources, input);
  }

  public modifyFleet(input: shapes.Ec2ModifyFleetRequest): EC2ResponsesModifyFleet {
    return new EC2ResponsesModifyFleet(this, this.__resources, input);
  }

  public modifyFpgaImageAttribute(input: shapes.Ec2ModifyFpgaImageAttributeRequest): EC2ResponsesModifyFpgaImageAttribute {
    return new EC2ResponsesModifyFpgaImageAttribute(this, this.__resources, input);
  }

  public modifyHosts(input: shapes.Ec2ModifyHostsRequest): EC2ResponsesModifyHosts {
    return new EC2ResponsesModifyHosts(this, this.__resources, input);
  }

  public modifyIdFormat(input: shapes.Ec2ModifyIdFormatRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyIdFormat'),
        parameters: {
          Resource: input.resource,
          UseLongIds: input.useLongIds,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyIdFormat', props);
  }

  public modifyIdentityIdFormat(input: shapes.Ec2ModifyIdentityIdFormatRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyIdentityIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyIdentityIdFormat'),
        parameters: {
          PrincipalArn: input.principalArn,
          Resource: input.resource,
          UseLongIds: input.useLongIds,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyIdentityIdFormat', props);
  }

  public modifyImageAttribute(input: shapes.Ec2ModifyImageAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyImageAttribute'),
        parameters: {
          Attribute: input.attribute,
          Description: {
            Value: input.description?.value,
          },
          ImageId: input.imageId,
          LaunchPermission: {
            Add: input.launchPermission?.add,
            Remove: input.launchPermission?.remove,
          },
          OperationType: input.operationType,
          ProductCodes: input.productCodes,
          UserGroups: input.userGroups,
          UserIds: input.userIds,
          Value: input.value,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyImageAttribute', props);
  }

  public modifyInstanceAttribute(input: shapes.Ec2ModifyInstanceAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceAttribute'),
        parameters: {
          SourceDestCheck: {
            Value: input.sourceDestCheck?.value,
          },
          Attribute: input.attribute,
          BlockDeviceMappings: input.blockDeviceMappings,
          DisableApiTermination: {
            Value: input.disableApiTermination?.value,
          },
          DryRun: input.dryRun,
          EbsOptimized: {
            Value: input.ebsOptimized?.value,
          },
          EnaSupport: {
            Value: input.enaSupport?.value,
          },
          Groups: input.groups,
          InstanceId: input.instanceId,
          InstanceInitiatedShutdownBehavior: {
            Value: input.instanceInitiatedShutdownBehavior?.value,
          },
          InstanceType: {
            Value: input.instanceType?.value,
          },
          Kernel: {
            Value: input.kernel?.value,
          },
          Ramdisk: {
            Value: input.ramdisk?.value,
          },
          SriovNetSupport: {
            Value: input.sriovNetSupport?.value,
          },
          UserData: {
            Value: {
            },
          },
          Value: input.value,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyInstanceAttribute', props);
  }

  public modifyInstanceCapacityReservationAttributes(input: shapes.Ec2ModifyInstanceCapacityReservationAttributesRequest): EC2ResponsesModifyInstanceCapacityReservationAttributes {
    return new EC2ResponsesModifyInstanceCapacityReservationAttributes(this, this.__resources, input);
  }

  public modifyInstanceCreditSpecification(input: shapes.Ec2ModifyInstanceCreditSpecificationRequest): EC2ResponsesModifyInstanceCreditSpecification {
    return new EC2ResponsesModifyInstanceCreditSpecification(this, this.__resources, input);
  }

  public modifyInstanceEventStartTime(input: shapes.Ec2ModifyInstanceEventStartTimeRequest): EC2ResponsesModifyInstanceEventStartTime {
    return new EC2ResponsesModifyInstanceEventStartTime(this, this.__resources, input);
  }

  public modifyInstanceEventWindow(input: shapes.Ec2ModifyInstanceEventWindowRequest): EC2ResponsesModifyInstanceEventWindow {
    return new EC2ResponsesModifyInstanceEventWindow(this, this.__resources, input);
  }

  public modifyInstanceMetadataOptions(input: shapes.Ec2ModifyInstanceMetadataOptionsRequest): EC2ResponsesModifyInstanceMetadataOptions {
    return new EC2ResponsesModifyInstanceMetadataOptions(this, this.__resources, input);
  }

  public modifyInstancePlacement(input: shapes.Ec2ModifyInstancePlacementRequest): EC2ResponsesModifyInstancePlacement {
    return new EC2ResponsesModifyInstancePlacement(this, this.__resources, input);
  }

  public modifyLaunchTemplate(input: shapes.Ec2ModifyLaunchTemplateRequest): EC2ResponsesModifyLaunchTemplate {
    return new EC2ResponsesModifyLaunchTemplate(this, this.__resources, input);
  }

  public modifyManagedPrefixList(input: shapes.Ec2ModifyManagedPrefixListRequest): EC2ResponsesModifyManagedPrefixList {
    return new EC2ResponsesModifyManagedPrefixList(this, this.__resources, input);
  }

  public modifyNetworkInterfaceAttribute(input: shapes.Ec2ModifyNetworkInterfaceAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyNetworkInterfaceAttribute'),
        parameters: {
          Attachment: {
            AttachmentId: input.attachment?.attachmentId,
            DeleteOnTermination: input.attachment?.deleteOnTermination,
          },
          Description: {
            Value: input.description?.value,
          },
          DryRun: input.dryRun,
          Groups: input.groups,
          NetworkInterfaceId: input.networkInterfaceId,
          SourceDestCheck: {
            Value: input.sourceDestCheck?.value,
          },
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyNetworkInterfaceAttribute', props);
  }

  public modifyReservedInstances(input: shapes.Ec2ModifyReservedInstancesRequest): EC2ResponsesModifyReservedInstances {
    return new EC2ResponsesModifyReservedInstances(this, this.__resources, input);
  }

  public modifySecurityGroupRules(input: shapes.Ec2ModifySecurityGroupRulesRequest): EC2ResponsesModifySecurityGroupRules {
    return new EC2ResponsesModifySecurityGroupRules(this, this.__resources, input);
  }

  public modifySnapshotAttribute(input: shapes.Ec2ModifySnapshotAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifySnapshotAttribute'),
        parameters: {
          Attribute: input.attribute,
          CreateVolumePermission: {
            Add: input.createVolumePermission?.add,
            Remove: input.createVolumePermission?.remove,
          },
          GroupNames: input.groupNames,
          OperationType: input.operationType,
          SnapshotId: input.snapshotId,
          UserIds: input.userIds,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifySnapshotAttribute', props);
  }

  public modifySpotFleetRequest(input: shapes.Ec2ModifySpotFleetRequestRequest): EC2ResponsesModifySpotFleetRequest {
    return new EC2ResponsesModifySpotFleetRequest(this, this.__resources, input);
  }

  public modifySubnetAttribute(input: shapes.Ec2ModifySubnetAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySubnetAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifySubnetAttribute'),
        parameters: {
          AssignIpv6AddressOnCreation: {
            Value: input.assignIpv6AddressOnCreation?.value,
          },
          MapPublicIpOnLaunch: {
            Value: input.mapPublicIpOnLaunch?.value,
          },
          SubnetId: input.subnetId,
          MapCustomerOwnedIpOnLaunch: {
            Value: input.mapCustomerOwnedIpOnLaunch?.value,
          },
          CustomerOwnedIpv4Pool: input.customerOwnedIpv4Pool,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifySubnetAttribute', props);
  }

  public modifyTrafficMirrorFilterNetworkServices(input: shapes.Ec2ModifyTrafficMirrorFilterNetworkServicesRequest): EC2ResponsesModifyTrafficMirrorFilterNetworkServices {
    return new EC2ResponsesModifyTrafficMirrorFilterNetworkServices(this, this.__resources, input);
  }

  public modifyTrafficMirrorFilterRule(input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest): EC2ResponsesModifyTrafficMirrorFilterRule {
    return new EC2ResponsesModifyTrafficMirrorFilterRule(this, this.__resources, input);
  }

  public modifyTrafficMirrorSession(input: shapes.Ec2ModifyTrafficMirrorSessionRequest): EC2ResponsesModifyTrafficMirrorSession {
    return new EC2ResponsesModifyTrafficMirrorSession(this, this.__resources, input);
  }

  public modifyTransitGateway(input: shapes.Ec2ModifyTransitGatewayRequest): EC2ResponsesModifyTransitGateway {
    return new EC2ResponsesModifyTransitGateway(this, this.__resources, input);
  }

  public modifyTransitGatewayPrefixListReference(input: shapes.Ec2ModifyTransitGatewayPrefixListReferenceRequest): EC2ResponsesModifyTransitGatewayPrefixListReference {
    return new EC2ResponsesModifyTransitGatewayPrefixListReference(this, this.__resources, input);
  }

  public modifyTransitGatewayVpcAttachment(input: shapes.Ec2ModifyTransitGatewayVpcAttachmentRequest): EC2ResponsesModifyTransitGatewayVpcAttachment {
    return new EC2ResponsesModifyTransitGatewayVpcAttachment(this, this.__resources, input);
  }

  public modifyVolume(input: shapes.Ec2ModifyVolumeRequest): EC2ResponsesModifyVolume {
    return new EC2ResponsesModifyVolume(this, this.__resources, input);
  }

  public modifyVolumeAttribute(input: shapes.Ec2ModifyVolumeAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolumeAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolumeAttribute'),
        parameters: {
          AutoEnableIO: {
            Value: input.autoEnableIo?.value,
          },
          VolumeId: input.volumeId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyVolumeAttribute', props);
  }

  public modifyVpcAttribute(input: shapes.Ec2ModifyVpcAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcAttribute'),
        parameters: {
          EnableDnsHostnames: {
            Value: input.enableDnsHostnames?.value,
          },
          EnableDnsSupport: {
            Value: input.enableDnsSupport?.value,
          },
          VpcId: input.vpcId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ModifyVpcAttribute', props);
  }

  public modifyVpcEndpoint(input: shapes.Ec2ModifyVpcEndpointRequest): EC2ResponsesModifyVpcEndpoint {
    return new EC2ResponsesModifyVpcEndpoint(this, this.__resources, input);
  }

  public modifyVpcEndpointConnectionNotification(input: shapes.Ec2ModifyVpcEndpointConnectionNotificationRequest): EC2ResponsesModifyVpcEndpointConnectionNotification {
    return new EC2ResponsesModifyVpcEndpointConnectionNotification(this, this.__resources, input);
  }

  public modifyVpcEndpointServiceConfiguration(input: shapes.Ec2ModifyVpcEndpointServiceConfigurationRequest): EC2ResponsesModifyVpcEndpointServiceConfiguration {
    return new EC2ResponsesModifyVpcEndpointServiceConfiguration(this, this.__resources, input);
  }

  public modifyVpcEndpointServicePermissions(input: shapes.Ec2ModifyVpcEndpointServicePermissionsRequest): EC2ResponsesModifyVpcEndpointServicePermissions {
    return new EC2ResponsesModifyVpcEndpointServicePermissions(this, this.__resources, input);
  }

  public modifyVpcPeeringConnectionOptions(input: shapes.Ec2ModifyVpcPeeringConnectionOptionsRequest): EC2ResponsesModifyVpcPeeringConnectionOptions {
    return new EC2ResponsesModifyVpcPeeringConnectionOptions(this, this.__resources, input);
  }

  public modifyVpcTenancy(input: shapes.Ec2ModifyVpcTenancyRequest): EC2ResponsesModifyVpcTenancy {
    return new EC2ResponsesModifyVpcTenancy(this, this.__resources, input);
  }

  public modifyVpnConnection(input: shapes.Ec2ModifyVpnConnectionRequest): EC2ResponsesModifyVpnConnection {
    return new EC2ResponsesModifyVpnConnection(this, this.__resources, input);
  }

  public modifyVpnConnectionOptions(input: shapes.Ec2ModifyVpnConnectionOptionsRequest): EC2ResponsesModifyVpnConnectionOptions {
    return new EC2ResponsesModifyVpnConnectionOptions(this, this.__resources, input);
  }

  public modifyVpnTunnelCertificate(input: shapes.Ec2ModifyVpnTunnelCertificateRequest): EC2ResponsesModifyVpnTunnelCertificate {
    return new EC2ResponsesModifyVpnTunnelCertificate(this, this.__resources, input);
  }

  public modifyVpnTunnelOptions(input: shapes.Ec2ModifyVpnTunnelOptionsRequest): EC2ResponsesModifyVpnTunnelOptions {
    return new EC2ResponsesModifyVpnTunnelOptions(this, this.__resources, input);
  }

  public monitorInstances(input: shapes.Ec2MonitorInstancesRequest): EC2ResponsesMonitorInstances {
    return new EC2ResponsesMonitorInstances(this, this.__resources, input);
  }

  public moveAddressToVpc(input: shapes.Ec2MoveAddressToVpcRequest): EC2ResponsesMoveAddressToVpc {
    return new EC2ResponsesMoveAddressToVpc(this, this.__resources, input);
  }

  public provisionByoipCidr(input: shapes.Ec2ProvisionByoipCidrRequest): EC2ResponsesProvisionByoipCidr {
    return new EC2ResponsesProvisionByoipCidr(this, this.__resources, input);
  }

  public purchaseHostReservation(input: shapes.Ec2PurchaseHostReservationRequest): EC2ResponsesPurchaseHostReservation {
    return new EC2ResponsesPurchaseHostReservation(this, this.__resources, input);
  }

  public purchaseReservedInstancesOffering(input: shapes.Ec2PurchaseReservedInstancesOfferingRequest): EC2ResponsesPurchaseReservedInstancesOffering {
    return new EC2ResponsesPurchaseReservedInstancesOffering(this, this.__resources, input);
  }

  public purchaseScheduledInstances(input: shapes.Ec2PurchaseScheduledInstancesRequest): EC2ResponsesPurchaseScheduledInstances {
    return new EC2ResponsesPurchaseScheduledInstances(this, this.__resources, input);
  }

  public rebootInstances(input: shapes.Ec2RebootInstancesRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RebootInstances'),
        parameters: {
          InstanceIds: input.instanceIds,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RebootInstances', props);
  }

  public registerImage(input: shapes.Ec2RegisterImageRequest): EC2ResponsesRegisterImage {
    return new EC2ResponsesRegisterImage(this, this.__resources, input);
  }

  public registerInstanceEventNotificationAttributes(input: shapes.Ec2RegisterInstanceEventNotificationAttributesRequest): EC2ResponsesRegisterInstanceEventNotificationAttributes {
    return new EC2ResponsesRegisterInstanceEventNotificationAttributes(this, this.__resources, input);
  }

  public registerTransitGatewayMulticastGroupMembers(input: shapes.Ec2RegisterTransitGatewayMulticastGroupMembersRequest): EC2ResponsesRegisterTransitGatewayMulticastGroupMembers {
    return new EC2ResponsesRegisterTransitGatewayMulticastGroupMembers(this, this.__resources, input);
  }

  public registerTransitGatewayMulticastGroupSources(input: shapes.Ec2RegisterTransitGatewayMulticastGroupSourcesRequest): EC2ResponsesRegisterTransitGatewayMulticastGroupSources {
    return new EC2ResponsesRegisterTransitGatewayMulticastGroupSources(this, this.__resources, input);
  }

  public rejectTransitGatewayMulticastDomainAssociations(input: shapes.Ec2RejectTransitGatewayMulticastDomainAssociationsRequest): EC2ResponsesRejectTransitGatewayMulticastDomainAssociations {
    return new EC2ResponsesRejectTransitGatewayMulticastDomainAssociations(this, this.__resources, input);
  }

  public rejectTransitGatewayPeeringAttachment(input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest): EC2ResponsesRejectTransitGatewayPeeringAttachment {
    return new EC2ResponsesRejectTransitGatewayPeeringAttachment(this, this.__resources, input);
  }

  public rejectTransitGatewayVpcAttachment(input: shapes.Ec2RejectTransitGatewayVpcAttachmentRequest): EC2ResponsesRejectTransitGatewayVpcAttachment {
    return new EC2ResponsesRejectTransitGatewayVpcAttachment(this, this.__resources, input);
  }

  public rejectVpcEndpointConnections(input: shapes.Ec2RejectVpcEndpointConnectionsRequest): EC2ResponsesRejectVpcEndpointConnections {
    return new EC2ResponsesRejectVpcEndpointConnections(this, this.__resources, input);
  }

  public rejectVpcPeeringConnection(input: shapes.Ec2RejectVpcPeeringConnectionRequest): EC2ResponsesRejectVpcPeeringConnection {
    return new EC2ResponsesRejectVpcPeeringConnection(this, this.__resources, input);
  }

  public releaseAddress(input: shapes.Ec2ReleaseAddressRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'releaseAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReleaseAddress'),
        parameters: {
          AllocationId: input.allocationId,
          PublicIp: input.publicIp,
          NetworkBorderGroup: input.networkBorderGroup,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ReleaseAddress', props);
  }

  public releaseHosts(input: shapes.Ec2ReleaseHostsRequest): EC2ResponsesReleaseHosts {
    return new EC2ResponsesReleaseHosts(this, this.__resources, input);
  }

  public replaceIamInstanceProfileAssociation(input: shapes.Ec2ReplaceIamInstanceProfileAssociationRequest): EC2ResponsesReplaceIamInstanceProfileAssociation {
    return new EC2ResponsesReplaceIamInstanceProfileAssociation(this, this.__resources, input);
  }

  public replaceNetworkAclAssociation(input: shapes.Ec2ReplaceNetworkAclAssociationRequest): EC2ResponsesReplaceNetworkAclAssociation {
    return new EC2ResponsesReplaceNetworkAclAssociation(this, this.__resources, input);
  }

  public replaceNetworkAclEntry(input: shapes.Ec2ReplaceNetworkAclEntryRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceNetworkAclEntry',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceNetworkAclEntry'),
        parameters: {
          CidrBlock: input.cidrBlock,
          DryRun: input.dryRun,
          Egress: input.egress,
          IcmpTypeCode: {
            Code: input.icmpTypeCode?.code,
            Type: input.icmpTypeCode?.type,
          },
          Ipv6CidrBlock: input.ipv6CidrBlock,
          NetworkAclId: input.networkAclId,
          PortRange: {
            From: input.portRange?.from,
            To: input.portRange?.to,
          },
          Protocol: input.protocol,
          RuleAction: input.ruleAction,
          RuleNumber: input.ruleNumber,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ReplaceNetworkAclEntry', props);
  }

  public replaceRoute(input: shapes.Ec2ReplaceRouteRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceRoute'),
        parameters: {
          DestinationCidrBlock: input.destinationCidrBlock,
          DestinationIpv6CidrBlock: input.destinationIpv6CidrBlock,
          DestinationPrefixListId: input.destinationPrefixListId,
          DryRun: input.dryRun,
          VpcEndpointId: input.vpcEndpointId,
          EgressOnlyInternetGatewayId: input.egressOnlyInternetGatewayId,
          GatewayId: input.gatewayId,
          InstanceId: input.instanceId,
          LocalTarget: input.localTarget,
          NatGatewayId: input.natGatewayId,
          TransitGatewayId: input.transitGatewayId,
          LocalGatewayId: input.localGatewayId,
          CarrierGatewayId: input.carrierGatewayId,
          NetworkInterfaceId: input.networkInterfaceId,
          RouteTableId: input.routeTableId,
          VpcPeeringConnectionId: input.vpcPeeringConnectionId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ReplaceRoute', props);
  }

  public replaceRouteTableAssociation(input: shapes.Ec2ReplaceRouteTableAssociationRequest): EC2ResponsesReplaceRouteTableAssociation {
    return new EC2ResponsesReplaceRouteTableAssociation(this, this.__resources, input);
  }

  public replaceTransitGatewayRoute(input: shapes.Ec2ReplaceTransitGatewayRouteRequest): EC2ResponsesReplaceTransitGatewayRoute {
    return new EC2ResponsesReplaceTransitGatewayRoute(this, this.__resources, input);
  }

  public reportInstanceStatus(input: shapes.Ec2ReportInstanceStatusRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'reportInstanceStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReportInstanceStatus'),
        parameters: {
          Description: input.description,
          DryRun: input.dryRun,
          EndTime: input.endTime,
          Instances: input.instances,
          ReasonCodes: input.reasonCodes,
          StartTime: input.startTime,
          Status: input.status,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ReportInstanceStatus', props);
  }

  public requestSpotFleet(input: shapes.Ec2RequestSpotFleetRequest): EC2ResponsesRequestSpotFleet {
    return new EC2ResponsesRequestSpotFleet(this, this.__resources, input);
  }

  public requestSpotInstances(input: shapes.Ec2RequestSpotInstancesRequest): EC2ResponsesRequestSpotInstances {
    return new EC2ResponsesRequestSpotInstances(this, this.__resources, input);
  }

  public resetAddressAttribute(input: shapes.Ec2ResetAddressAttributeRequest): EC2ResponsesResetAddressAttribute {
    return new EC2ResponsesResetAddressAttribute(this, this.__resources, input);
  }

  public resetEbsDefaultKmsKeyId(input: shapes.Ec2ResetEbsDefaultKmsKeyIdRequest): EC2ResponsesResetEbsDefaultKmsKeyId {
    return new EC2ResponsesResetEbsDefaultKmsKeyId(this, this.__resources, input);
  }

  public resetFpgaImageAttribute(input: shapes.Ec2ResetFpgaImageAttributeRequest): EC2ResponsesResetFpgaImageAttribute {
    return new EC2ResponsesResetFpgaImageAttribute(this, this.__resources, input);
  }

  public resetImageAttribute(input: shapes.Ec2ResetImageAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetImageAttribute'),
        parameters: {
          Attribute: input.attribute,
          ImageId: input.imageId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ResetImageAttribute', props);
  }

  public resetInstanceAttribute(input: shapes.Ec2ResetInstanceAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetInstanceAttribute'),
        parameters: {
          Attribute: input.attribute,
          DryRun: input.dryRun,
          InstanceId: input.instanceId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ResetInstanceAttribute', props);
  }

  public resetNetworkInterfaceAttribute(input: shapes.Ec2ResetNetworkInterfaceAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetNetworkInterfaceAttribute'),
        parameters: {
          DryRun: input.dryRun,
          NetworkInterfaceId: input.networkInterfaceId,
          SourceDestCheck: input.sourceDestCheck,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ResetNetworkInterfaceAttribute', props);
  }

  public resetSnapshotAttribute(input: shapes.Ec2ResetSnapshotAttributeRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetSnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetSnapshotAttribute'),
        parameters: {
          Attribute: input.attribute,
          SnapshotId: input.snapshotId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'ResetSnapshotAttribute', props);
  }

  public restoreAddressToClassic(input: shapes.Ec2RestoreAddressToClassicRequest): EC2ResponsesRestoreAddressToClassic {
    return new EC2ResponsesRestoreAddressToClassic(this, this.__resources, input);
  }

  public restoreManagedPrefixListVersion(input: shapes.Ec2RestoreManagedPrefixListVersionRequest): EC2ResponsesRestoreManagedPrefixListVersion {
    return new EC2ResponsesRestoreManagedPrefixListVersion(this, this.__resources, input);
  }

  public revokeClientVpnIngress(input: shapes.Ec2RevokeClientVpnIngressRequest): EC2ResponsesRevokeClientVpnIngress {
    return new EC2ResponsesRevokeClientVpnIngress(this, this.__resources, input);
  }

  public revokeSecurityGroupEgress(input: shapes.Ec2RevokeSecurityGroupEgressRequest): EC2ResponsesRevokeSecurityGroupEgress {
    return new EC2ResponsesRevokeSecurityGroupEgress(this, this.__resources, input);
  }

  public revokeSecurityGroupIngress(input: shapes.Ec2RevokeSecurityGroupIngressRequest): EC2ResponsesRevokeSecurityGroupIngress {
    return new EC2ResponsesRevokeSecurityGroupIngress(this, this.__resources, input);
  }

  public runInstances(input: shapes.Ec2RunInstancesRequest): EC2ResponsesRunInstances {
    return new EC2ResponsesRunInstances(this, this.__resources, input);
  }

  public runScheduledInstances(input: shapes.Ec2RunScheduledInstancesRequest): EC2ResponsesRunScheduledInstances {
    return new EC2ResponsesRunScheduledInstances(this, this.__resources, input);
  }

  public searchLocalGatewayRoutes(input: shapes.Ec2SearchLocalGatewayRoutesRequest): EC2ResponsesSearchLocalGatewayRoutes {
    return new EC2ResponsesSearchLocalGatewayRoutes(this, this.__resources, input);
  }

  public searchTransitGatewayMulticastGroups(input: shapes.Ec2SearchTransitGatewayMulticastGroupsRequest): EC2ResponsesSearchTransitGatewayMulticastGroups {
    return new EC2ResponsesSearchTransitGatewayMulticastGroups(this, this.__resources, input);
  }

  public searchTransitGatewayRoutes(input: shapes.Ec2SearchTransitGatewayRoutesRequest): EC2ResponsesSearchTransitGatewayRoutes {
    return new EC2ResponsesSearchTransitGatewayRoutes(this, this.__resources, input);
  }

  public sendDiagnosticInterrupt(input: shapes.Ec2SendDiagnosticInterruptRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'sendDiagnosticInterrupt',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SendDiagnosticInterrupt'),
        parameters: {
          InstanceId: input.instanceId,
          DryRun: input.dryRun,
        },
      },
    };
    new cr.AwsCustomResource(this, 'SendDiagnosticInterrupt', props);
  }

  public startInstances(input: shapes.Ec2StartInstancesRequest): EC2ResponsesStartInstances {
    return new EC2ResponsesStartInstances(this, this.__resources, input);
  }

  public startNetworkInsightsAnalysis(input: shapes.Ec2StartNetworkInsightsAnalysisRequest): EC2ResponsesStartNetworkInsightsAnalysis {
    return new EC2ResponsesStartNetworkInsightsAnalysis(this, this.__resources, input);
  }

  public startVpcEndpointServicePrivateDnsVerification(input: shapes.Ec2StartVpcEndpointServicePrivateDnsVerificationRequest): EC2ResponsesStartVpcEndpointServicePrivateDnsVerification {
    return new EC2ResponsesStartVpcEndpointServicePrivateDnsVerification(this, this.__resources, input);
  }

  public stopInstances(input: shapes.Ec2StopInstancesRequest): EC2ResponsesStopInstances {
    return new EC2ResponsesStopInstances(this, this.__resources, input);
  }

  public terminateClientVpnConnections(input: shapes.Ec2TerminateClientVpnConnectionsRequest): EC2ResponsesTerminateClientVpnConnections {
    return new EC2ResponsesTerminateClientVpnConnections(this, this.__resources, input);
  }

  public terminateInstances(input: shapes.Ec2TerminateInstancesRequest): EC2ResponsesTerminateInstances {
    return new EC2ResponsesTerminateInstances(this, this.__resources, input);
  }

  public unassignIpv6Addresses(input: shapes.Ec2UnassignIpv6AddressesRequest): EC2ResponsesUnassignIpv6Addresses {
    return new EC2ResponsesUnassignIpv6Addresses(this, this.__resources, input);
  }

  public unassignPrivateIpAddresses(input: shapes.Ec2UnassignPrivateIpAddressesRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unassignPrivateIpAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnassignPrivateIpAddresses'),
        parameters: {
          NetworkInterfaceId: input.networkInterfaceId,
          PrivateIpAddresses: input.privateIpAddresses,
          Ipv4Prefixes: input.ipv4Prefixes,
        },
      },
    };
    new cr.AwsCustomResource(this, 'UnassignPrivateIpAddresses', props);
  }

  public unmonitorInstances(input: shapes.Ec2UnmonitorInstancesRequest): EC2ResponsesUnmonitorInstances {
    return new EC2ResponsesUnmonitorInstances(this, this.__resources, input);
  }

  public updateSecurityGroupRuleDescriptionsEgress(input: shapes.Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest): EC2ResponsesUpdateSecurityGroupRuleDescriptionsEgress {
    return new EC2ResponsesUpdateSecurityGroupRuleDescriptionsEgress(this, this.__resources, input);
  }

  public updateSecurityGroupRuleDescriptionsIngress(input: shapes.Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest): EC2ResponsesUpdateSecurityGroupRuleDescriptionsIngress {
    return new EC2ResponsesUpdateSecurityGroupRuleDescriptionsIngress(this, this.__resources, input);
  }

  public withdrawByoipCidr(input: shapes.Ec2WithdrawByoipCidrRequest): EC2ResponsesWithdrawByoipCidr {
    return new EC2ResponsesWithdrawByoipCidr(this, this.__resources, input);
  }

}

export class EC2ResponsesAcceptReservedInstancesExchangeQuote {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptReservedInstancesExchangeQuoteRequest) {
  }

  public get exchangeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptReservedInstancesExchangeQuote.ExchangeId'),
        outputPath: 'ExchangeId',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptReservedInstancesExchangeQuote.ExchangeId', props);
    return resource.getResponseField('ExchangeId') as unknown as string;
  }

}

export class EC2ResponsesAcceptTransitGatewayMulticastDomainAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest) {
  }

  public get associations(): EC2ResponsesAcceptTransitGatewayMulticastDomainAssociationsAssociations {
    return new EC2ResponsesAcceptTransitGatewayMulticastDomainAssociationsAssociations(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAcceptTransitGatewayMulticastDomainAssociationsAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayMulticastDomainAssociations.Associations.TransitGatewayMulticastDomainId'),
        outputPath: 'Associations.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayMulticastDomainAssociations.Associations.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('Associations.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayMulticastDomainAssociations.Associations.TransitGatewayAttachmentId'),
        outputPath: 'Associations.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayMulticastDomainAssociations.Associations.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Associations.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayMulticastDomainAssociations.Associations.ResourceId'),
        outputPath: 'Associations.ResourceId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayMulticastDomainAssociations.Associations.ResourceId', props);
    return resource.getResponseField('Associations.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayMulticastDomainAssociations.Associations.ResourceType'),
        outputPath: 'Associations.ResourceType',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayMulticastDomainAssociations.Associations.ResourceType', props);
    return resource.getResponseField('Associations.ResourceType') as unknown as string;
  }

  public get resourceOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayMulticastDomainAssociations.Associations.ResourceOwnerId'),
        outputPath: 'Associations.ResourceOwnerId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayMulticastDomainAssociations.Associations.ResourceOwnerId', props);
    return resource.getResponseField('Associations.ResourceOwnerId') as unknown as string;
  }

  public get subnets(): shapes.Ec2SubnetAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayMulticastDomainAssociations.Associations.Subnets'),
        outputPath: 'Associations.Subnets',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayMulticastDomainAssociations.Associations.Subnets', props);
    return resource.getResponseField('Associations.Subnets') as unknown as shapes.Ec2SubnetAssociation[];
  }

}

export class EC2ResponsesAcceptTransitGatewayPeeringAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayPeeringAttachment(): EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {
    return new EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPeeringAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get requesterTgwInfo(): EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {
    return new EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo(this.__scope, this.__resources, this.__input);
  }

  public get accepterTgwInfo(): EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {
    return new EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo(this.__scope, this.__resources, this.__input);
  }

  public get status(): EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {
    return new EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State'),
        outputPath: 'TransitGatewayPeeringAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime'),
        outputPath: 'TransitGatewayPeeringAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags'),
        outputPath: 'TransitGatewayPeeringAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesAcceptTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayPeeringAttachmentRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Code',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Message',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Message') as unknown as string;
  }

}

export class EC2ResponsesAcceptTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayVpcAttachment(): EC2ResponsesAcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2ResponsesAcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesAcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2ResponsesAcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesAcceptTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptTransitGatewayVpcAttachmentRequest) {
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2ResponsesAcceptVpcEndpointConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptVpcEndpointConnectionsRequest) {
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcEndpointConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcEndpointConnections.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointIds: this.__input.vpcEndpointIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcEndpointConnections.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesAcceptVpcPeeringConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
  }

  public get vpcPeeringConnection(): EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnection {
    return new EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnection(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
  }

  public get accepterVpcInfo(): EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo {
    return new EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo(this.__scope, this.__resources, this.__input);
  }

  public get expirationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.ExpirationTime'),
        outputPath: 'VpcPeeringConnection.ExpirationTime',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.ExpirationTime', props);
    return resource.getResponseField('VpcPeeringConnection.ExpirationTime') as unknown as string;
  }

  public get requesterVpcInfo(): EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo {
    return new EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo(this.__scope, this.__resources, this.__input);
  }

  public get status(): EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionStatus {
    return new EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionStatus(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.Tags'),
        outputPath: 'VpcPeeringConnection.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.Tags', props);
    return resource.getResponseField('VpcPeeringConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vpcPeeringConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.VpcPeeringConnectionId'),
        outputPath: 'VpcPeeringConnection.VpcPeeringConnectionId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.VpcPeeringConnectionId', props);
    return resource.getResponseField('VpcPeeringConnection.VpcPeeringConnectionId') as unknown as string;
  }

}

export class EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlock'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.CidrBlock',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlock', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockSet(): shapes.Ec2Ipv6CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet') as unknown as shapes.Ec2Ipv6CidrBlock[];
  }

  public get cidrBlockSet(): shapes.Ec2CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet') as unknown as shapes.Ec2CidrBlock[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.OwnerId'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.OwnerId', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.OwnerId') as unknown as string;
  }

  public get peeringOptions(): EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions {
    return new EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.VpcId'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.VpcId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.VpcId', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.VpcId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Region'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.Region',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Region', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlock'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.CidrBlock',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlock', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockSet(): shapes.Ec2Ipv6CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet') as unknown as shapes.Ec2Ipv6CidrBlock[];
  }

  public get cidrBlockSet(): shapes.Ec2CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet') as unknown as shapes.Ec2CidrBlock[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.OwnerId'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.OwnerId', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.OwnerId') as unknown as string;
  }

  public get peeringOptions(): EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions {
    return new EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.VpcId'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.VpcId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.VpcId', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.VpcId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Region'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.Region',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Region', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2ResponsesAcceptVpcPeeringConnectionVpcPeeringConnectionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AcceptVpcPeeringConnectionRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.Status.Code'),
        outputPath: 'VpcPeeringConnection.Status.Code',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.Status.Code', props);
    return resource.getResponseField('VpcPeeringConnection.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AcceptVpcPeeringConnection.VpcPeeringConnection.Status.Message'),
        outputPath: 'VpcPeeringConnection.Status.Message',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptVpcPeeringConnection.VpcPeeringConnection.Status.Message', props);
    return resource.getResponseField('VpcPeeringConnection.Status.Message') as unknown as string;
  }

}

export class EC2ResponsesAdvertiseByoipCidr {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AdvertiseByoipCidrRequest) {
  }

  public get byoipCidr(): EC2ResponsesAdvertiseByoipCidrByoipCidr {
    return new EC2ResponsesAdvertiseByoipCidrByoipCidr(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAdvertiseByoipCidrByoipCidr {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AdvertiseByoipCidrRequest) {
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'advertiseByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AdvertiseByoipCidr.ByoipCidr.Cidr'),
        outputPath: 'ByoipCidr.Cidr',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AdvertiseByoipCidr.ByoipCidr.Cidr', props);
    return resource.getResponseField('ByoipCidr.Cidr') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'advertiseByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AdvertiseByoipCidr.ByoipCidr.Description'),
        outputPath: 'ByoipCidr.Description',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AdvertiseByoipCidr.ByoipCidr.Description', props);
    return resource.getResponseField('ByoipCidr.Description') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'advertiseByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AdvertiseByoipCidr.ByoipCidr.StatusMessage'),
        outputPath: 'ByoipCidr.StatusMessage',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AdvertiseByoipCidr.ByoipCidr.StatusMessage', props);
    return resource.getResponseField('ByoipCidr.StatusMessage') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'advertiseByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AdvertiseByoipCidr.ByoipCidr.State'),
        outputPath: 'ByoipCidr.State',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AdvertiseByoipCidr.ByoipCidr.State', props);
    return resource.getResponseField('ByoipCidr.State') as unknown as string;
  }

}

export class EC2ResponsesAllocateAddress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AllocateAddressRequest) {
  }

  public get publicIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.PublicIp'),
        outputPath: 'PublicIp',
        parameters: {
          Domain: this.__input.domain,
          Address: this.__input.address,
          PublicIpv4Pool: this.__input.publicIpv4Pool,
          NetworkBorderGroup: this.__input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.__input.customerOwnedIpv4Pool,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateAddress.PublicIp', props);
    return resource.getResponseField('PublicIp') as unknown as string;
  }

  public get allocationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.AllocationId'),
        outputPath: 'AllocationId',
        parameters: {
          Domain: this.__input.domain,
          Address: this.__input.address,
          PublicIpv4Pool: this.__input.publicIpv4Pool,
          NetworkBorderGroup: this.__input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.__input.customerOwnedIpv4Pool,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateAddress.AllocationId', props);
    return resource.getResponseField('AllocationId') as unknown as string;
  }

  public get publicIpv4Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.PublicIpv4Pool'),
        outputPath: 'PublicIpv4Pool',
        parameters: {
          Domain: this.__input.domain,
          Address: this.__input.address,
          PublicIpv4Pool: this.__input.publicIpv4Pool,
          NetworkBorderGroup: this.__input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.__input.customerOwnedIpv4Pool,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateAddress.PublicIpv4Pool', props);
    return resource.getResponseField('PublicIpv4Pool') as unknown as string;
  }

  public get networkBorderGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.NetworkBorderGroup'),
        outputPath: 'NetworkBorderGroup',
        parameters: {
          Domain: this.__input.domain,
          Address: this.__input.address,
          PublicIpv4Pool: this.__input.publicIpv4Pool,
          NetworkBorderGroup: this.__input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.__input.customerOwnedIpv4Pool,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateAddress.NetworkBorderGroup', props);
    return resource.getResponseField('NetworkBorderGroup') as unknown as string;
  }

  public get domain(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.Domain'),
        outputPath: 'Domain',
        parameters: {
          Domain: this.__input.domain,
          Address: this.__input.address,
          PublicIpv4Pool: this.__input.publicIpv4Pool,
          NetworkBorderGroup: this.__input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.__input.customerOwnedIpv4Pool,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateAddress.Domain', props);
    return resource.getResponseField('Domain') as unknown as string;
  }

  public get customerOwnedIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.CustomerOwnedIp'),
        outputPath: 'CustomerOwnedIp',
        parameters: {
          Domain: this.__input.domain,
          Address: this.__input.address,
          PublicIpv4Pool: this.__input.publicIpv4Pool,
          NetworkBorderGroup: this.__input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.__input.customerOwnedIpv4Pool,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateAddress.CustomerOwnedIp', props);
    return resource.getResponseField('CustomerOwnedIp') as unknown as string;
  }

  public get customerOwnedIpv4Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.CustomerOwnedIpv4Pool'),
        outputPath: 'CustomerOwnedIpv4Pool',
        parameters: {
          Domain: this.__input.domain,
          Address: this.__input.address,
          PublicIpv4Pool: this.__input.publicIpv4Pool,
          NetworkBorderGroup: this.__input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.__input.customerOwnedIpv4Pool,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateAddress.CustomerOwnedIpv4Pool', props);
    return resource.getResponseField('CustomerOwnedIpv4Pool') as unknown as string;
  }

  public get carrierIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateAddress.CarrierIp'),
        outputPath: 'CarrierIp',
        parameters: {
          Domain: this.__input.domain,
          Address: this.__input.address,
          PublicIpv4Pool: this.__input.publicIpv4Pool,
          NetworkBorderGroup: this.__input.networkBorderGroup,
          CustomerOwnedIpv4Pool: this.__input.customerOwnedIpv4Pool,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateAddress.CarrierIp', props);
    return resource.getResponseField('CarrierIp') as unknown as string;
  }

}

export class EC2ResponsesAllocateHosts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AllocateHostsRequest) {
  }

  public get hostIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'allocateHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AllocateHosts.HostIds'),
        outputPath: 'HostIds',
        parameters: {
          AutoPlacement: this.__input.autoPlacement,
          AvailabilityZone: this.__input.availabilityZone,
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstanceFamily: this.__input.instanceFamily,
          Quantity: this.__input.quantity,
          TagSpecifications: this.__input.tagSpecifications,
          HostRecovery: this.__input.hostRecovery,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AllocateHosts.HostIds', props);
    return resource.getResponseField('HostIds') as unknown as string[];
  }

}

export class EC2ResponsesApplySecurityGroupsToClientVpnTargetNetwork {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest) {
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'applySecurityGroupsToClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ApplySecurityGroupsToClientVpnTargetNetwork.SecurityGroupIds'),
        outputPath: 'SecurityGroupIds',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          VpcId: this.__input.vpcId,
          SecurityGroupIds: this.__input.securityGroupIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ApplySecurityGroupsToClientVpnTargetNetwork.SecurityGroupIds', props);
    return resource.getResponseField('SecurityGroupIds') as unknown as string[];
  }

}

export class EC2ResponsesAssignIpv6Addresses {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssignIpv6AddressesRequest) {
  }

  public get assignedIpv6Addresses(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignIpv6Addresses.AssignedIpv6Addresses'),
        outputPath: 'AssignedIpv6Addresses',
        parameters: {
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssignIpv6Addresses.AssignedIpv6Addresses', props);
    return resource.getResponseField('AssignedIpv6Addresses') as unknown as string[];
  }

  public get assignedIpv6Prefixes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignIpv6Addresses.AssignedIpv6Prefixes'),
        outputPath: 'AssignedIpv6Prefixes',
        parameters: {
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssignIpv6Addresses.AssignedIpv6Prefixes', props);
    return resource.getResponseField('AssignedIpv6Prefixes') as unknown as string[];
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignIpv6Addresses.NetworkInterfaceId'),
        outputPath: 'NetworkInterfaceId',
        parameters: {
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssignIpv6Addresses.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterfaceId') as unknown as string;
  }

}

export class EC2ResponsesAssignPrivateIpAddresses {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssignPrivateIpAddressesRequest) {
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignPrivateIpAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignPrivateIpAddresses.NetworkInterfaceId'),
        outputPath: 'NetworkInterfaceId',
        parameters: {
          AllowReassignment: this.__input.allowReassignment,
          NetworkInterfaceId: this.__input.networkInterfaceId,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssignPrivateIpAddresses.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterfaceId') as unknown as string;
  }

  public get assignedPrivateIpAddresses(): shapes.Ec2AssignedPrivateIpAddress[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignPrivateIpAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignPrivateIpAddresses.AssignedPrivateIpAddresses'),
        outputPath: 'AssignedPrivateIpAddresses',
        parameters: {
          AllowReassignment: this.__input.allowReassignment,
          NetworkInterfaceId: this.__input.networkInterfaceId,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssignPrivateIpAddresses.AssignedPrivateIpAddresses', props);
    return resource.getResponseField('AssignedPrivateIpAddresses') as unknown as shapes.Ec2AssignedPrivateIpAddress[];
  }

  public get assignedIpv4Prefixes(): shapes.Ec2Ipv4PrefixSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'assignPrivateIpAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssignPrivateIpAddresses.AssignedIpv4Prefixes'),
        outputPath: 'AssignedIpv4Prefixes',
        parameters: {
          AllowReassignment: this.__input.allowReassignment,
          NetworkInterfaceId: this.__input.networkInterfaceId,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssignPrivateIpAddresses.AssignedIpv4Prefixes', props);
    return resource.getResponseField('AssignedIpv4Prefixes') as unknown as shapes.Ec2Ipv4PrefixSpecification[];
  }

}

export class EC2ResponsesAssociateAddress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateAddressRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateAddress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateAddress.AssociationId'),
        outputPath: 'AssociationId',
        parameters: {
          AllocationId: this.__input.allocationId,
          InstanceId: this.__input.instanceId,
          PublicIp: this.__input.publicIp,
          AllowReassociation: this.__input.allowReassociation,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
          PrivateIpAddress: this.__input.privateIpAddress,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateAddress.AssociationId', props);
    return resource.getResponseField('AssociationId') as unknown as string;
  }

}

export class EC2ResponsesAssociateClientVpnTargetNetwork {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateClientVpnTargetNetworkRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateClientVpnTargetNetwork.AssociationId'),
        outputPath: 'AssociationId',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          SubnetId: this.__input.subnetId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateClientVpnTargetNetwork.AssociationId', props);
    return resource.getResponseField('AssociationId') as unknown as string;
  }

  public get status(): EC2ResponsesAssociateClientVpnTargetNetworkStatus {
    return new EC2ResponsesAssociateClientVpnTargetNetworkStatus(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAssociateClientVpnTargetNetworkStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateClientVpnTargetNetworkRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateClientVpnTargetNetwork.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          SubnetId: this.__input.subnetId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateClientVpnTargetNetwork.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateClientVpnTargetNetwork.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          SubnetId: this.__input.subnetId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateClientVpnTargetNetwork.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesAssociateEnclaveCertificateIamRole {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateEnclaveCertificateIamRoleRequest) {
  }

  public get certificateS3BucketName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateEnclaveCertificateIamRole',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateEnclaveCertificateIamRole.CertificateS3BucketName'),
        outputPath: 'CertificateS3BucketName',
        parameters: {
          CertificateArn: this.__input.certificateArn,
          RoleArn: this.__input.roleArn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateEnclaveCertificateIamRole.CertificateS3BucketName', props);
    return resource.getResponseField('CertificateS3BucketName') as unknown as string;
  }

  public get certificateS3ObjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateEnclaveCertificateIamRole',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateEnclaveCertificateIamRole.CertificateS3ObjectKey'),
        outputPath: 'CertificateS3ObjectKey',
        parameters: {
          CertificateArn: this.__input.certificateArn,
          RoleArn: this.__input.roleArn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateEnclaveCertificateIamRole.CertificateS3ObjectKey', props);
    return resource.getResponseField('CertificateS3ObjectKey') as unknown as string;
  }

  public get encryptionKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateEnclaveCertificateIamRole',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateEnclaveCertificateIamRole.EncryptionKmsKeyId'),
        outputPath: 'EncryptionKmsKeyId',
        parameters: {
          CertificateArn: this.__input.certificateArn,
          RoleArn: this.__input.roleArn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateEnclaveCertificateIamRole.EncryptionKmsKeyId', props);
    return resource.getResponseField('EncryptionKmsKeyId') as unknown as string;
  }

}

export class EC2ResponsesAssociateIamInstanceProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateIamInstanceProfileRequest) {
  }

  public get iamInstanceProfileAssociation(): EC2ResponsesAssociateIamInstanceProfileIamInstanceProfileAssociation {
    return new EC2ResponsesAssociateIamInstanceProfileIamInstanceProfileAssociation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAssociateIamInstanceProfileIamInstanceProfileAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateIamInstanceProfileRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.AssociationId'),
        outputPath: 'IamInstanceProfileAssociation.AssociationId',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.AssociationId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.AssociationId') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.InstanceId'),
        outputPath: 'IamInstanceProfileAssociation.InstanceId',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.InstanceId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.InstanceId') as unknown as string;
  }

  public get iamInstanceProfile(): EC2ResponsesAssociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile {
    return new EC2ResponsesAssociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.State'),
        outputPath: 'IamInstanceProfileAssociation.State',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.State', props);
    return resource.getResponseField('IamInstanceProfileAssociation.State') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.Timestamp'),
        outputPath: 'IamInstanceProfileAssociation.Timestamp',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.Timestamp', props);
    return resource.getResponseField('IamInstanceProfileAssociation.Timestamp') as unknown as string;
  }

}

export class EC2ResponsesAssociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateIamInstanceProfileRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Arn'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Arn',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Arn', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Id'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Id',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Id', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Id') as unknown as string;
  }

}

export class EC2ResponsesAssociateInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateInstanceEventWindowRequest) {
  }

  public get instanceEventWindow(): EC2ResponsesAssociateInstanceEventWindowInstanceEventWindow {
    return new EC2ResponsesAssociateInstanceEventWindowInstanceEventWindow(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAssociateInstanceEventWindowInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateInstanceEventWindowRequest) {
  }

  public get instanceEventWindowId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.InstanceEventWindowId'),
        outputPath: 'InstanceEventWindow.InstanceEventWindowId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.InstanceEventWindowId', props);
    return resource.getResponseField('InstanceEventWindow.InstanceEventWindowId') as unknown as string;
  }

  public get timeRanges(): shapes.Ec2InstanceEventWindowTimeRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.TimeRanges'),
        outputPath: 'InstanceEventWindow.TimeRanges',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.TimeRanges', props);
    return resource.getResponseField('InstanceEventWindow.TimeRanges') as unknown as shapes.Ec2InstanceEventWindowTimeRange[];
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.Name'),
        outputPath: 'InstanceEventWindow.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.Name', props);
    return resource.getResponseField('InstanceEventWindow.Name') as unknown as string;
  }

  public get cronExpression(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.CronExpression'),
        outputPath: 'InstanceEventWindow.CronExpression',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.CronExpression', props);
    return resource.getResponseField('InstanceEventWindow.CronExpression') as unknown as string;
  }

  public get associationTarget(): EC2ResponsesAssociateInstanceEventWindowInstanceEventWindowAssociationTarget {
    return new EC2ResponsesAssociateInstanceEventWindowInstanceEventWindowAssociationTarget(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.State'),
        outputPath: 'InstanceEventWindow.State',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.State', props);
    return resource.getResponseField('InstanceEventWindow.State') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.Tags'),
        outputPath: 'InstanceEventWindow.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.Tags', props);
    return resource.getResponseField('InstanceEventWindow.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesAssociateInstanceEventWindowInstanceEventWindowAssociationTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateInstanceEventWindowRequest) {
  }

  public get instanceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.InstanceIds'),
        outputPath: 'InstanceEventWindow.AssociationTarget.InstanceIds',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.InstanceIds', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.InstanceIds') as unknown as string[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.Tags'),
        outputPath: 'InstanceEventWindow.AssociationTarget.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.Tags', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get dedicatedHostIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.DedicatedHostIds'),
        outputPath: 'InstanceEventWindow.AssociationTarget.DedicatedHostIds',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.DedicatedHostIds', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.DedicatedHostIds') as unknown as string[];
  }

}

export class EC2ResponsesAssociateRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateRouteTableRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateRouteTable.AssociationId'),
        outputPath: 'AssociationId',
        parameters: {
          DryRun: this.__input.dryRun,
          RouteTableId: this.__input.routeTableId,
          SubnetId: this.__input.subnetId,
          GatewayId: this.__input.gatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateRouteTable.AssociationId', props);
    return resource.getResponseField('AssociationId') as unknown as string;
  }

  public get associationState(): EC2ResponsesAssociateRouteTableAssociationState {
    return new EC2ResponsesAssociateRouteTableAssociationState(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAssociateRouteTableAssociationState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateRouteTableRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateRouteTable.AssociationState.State'),
        outputPath: 'AssociationState.State',
        parameters: {
          DryRun: this.__input.dryRun,
          RouteTableId: this.__input.routeTableId,
          SubnetId: this.__input.subnetId,
          GatewayId: this.__input.gatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateRouteTable.AssociationState.State', props);
    return resource.getResponseField('AssociationState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateRouteTable.AssociationState.StatusMessage'),
        outputPath: 'AssociationState.StatusMessage',
        parameters: {
          DryRun: this.__input.dryRun,
          RouteTableId: this.__input.routeTableId,
          SubnetId: this.__input.subnetId,
          GatewayId: this.__input.gatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateRouteTable.AssociationState.StatusMessage', props);
    return resource.getResponseField('AssociationState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesAssociateSubnetCidrBlock {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateSubnetCidrBlockRequest) {
  }

  public get ipv6CidrBlockAssociation(): EC2ResponsesAssociateSubnetCidrBlockIpv6CidrBlockAssociation {
    return new EC2ResponsesAssociateSubnetCidrBlockIpv6CidrBlockAssociation(this.__scope, this.__resources, this.__input);
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.SubnetId'),
        outputPath: 'SubnetId',
        parameters: {
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          SubnetId: this.__input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateSubnetCidrBlock.SubnetId', props);
    return resource.getResponseField('SubnetId') as unknown as string;
  }

}

export class EC2ResponsesAssociateSubnetCidrBlockIpv6CidrBlockAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateSubnetCidrBlockRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.AssociationId'),
        outputPath: 'Ipv6CidrBlockAssociation.AssociationId',
        parameters: {
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          SubnetId: this.__input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get ipv6CidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlock',
        parameters: {
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          SubnetId: this.__input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockState(): EC2ResponsesAssociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {
    return new EC2ResponsesAssociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAssociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateSubnetCidrBlockRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State',
        parameters: {
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          SubnetId: this.__input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage',
        parameters: {
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          SubnetId: this.__input.subnetId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesAssociateTransitGatewayMulticastDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateTransitGatewayMulticastDomainRequest) {
  }

  public get associations(): EC2ResponsesAssociateTransitGatewayMulticastDomainAssociations {
    return new EC2ResponsesAssociateTransitGatewayMulticastDomainAssociations(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAssociateTransitGatewayMulticastDomainAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateTransitGatewayMulticastDomainRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.TransitGatewayMulticastDomainId'),
        outputPath: 'Associations.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayMulticastDomain.Associations.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('Associations.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.TransitGatewayAttachmentId'),
        outputPath: 'Associations.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayMulticastDomain.Associations.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Associations.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.ResourceId'),
        outputPath: 'Associations.ResourceId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayMulticastDomain.Associations.ResourceId', props);
    return resource.getResponseField('Associations.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.ResourceType'),
        outputPath: 'Associations.ResourceType',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayMulticastDomain.Associations.ResourceType', props);
    return resource.getResponseField('Associations.ResourceType') as unknown as string;
  }

  public get resourceOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.ResourceOwnerId'),
        outputPath: 'Associations.ResourceOwnerId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayMulticastDomain.Associations.ResourceOwnerId', props);
    return resource.getResponseField('Associations.ResourceOwnerId') as unknown as string;
  }

  public get subnets(): shapes.Ec2SubnetAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayMulticastDomain.Associations.Subnets'),
        outputPath: 'Associations.Subnets',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayMulticastDomain.Associations.Subnets', props);
    return resource.getResponseField('Associations.Subnets') as unknown as shapes.Ec2SubnetAssociation[];
  }

}

export class EC2ResponsesAssociateTransitGatewayRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateTransitGatewayRouteTableRequest) {
  }

  public get association(): EC2ResponsesAssociateTransitGatewayRouteTableAssociation {
    return new EC2ResponsesAssociateTransitGatewayRouteTableAssociation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAssociateTransitGatewayRouteTableAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateTransitGatewayRouteTableRequest) {
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.TransitGatewayRouteTableId'),
        outputPath: 'Association.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayRouteTable.Association.TransitGatewayRouteTableId', props);
    return resource.getResponseField('Association.TransitGatewayRouteTableId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.TransitGatewayAttachmentId'),
        outputPath: 'Association.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayRouteTable.Association.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Association.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.ResourceId'),
        outputPath: 'Association.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayRouteTable.Association.ResourceId', props);
    return resource.getResponseField('Association.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.ResourceType'),
        outputPath: 'Association.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayRouteTable.Association.ResourceType', props);
    return resource.getResponseField('Association.ResourceType') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTransitGatewayRouteTable.Association.State'),
        outputPath: 'Association.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTransitGatewayRouteTable.Association.State', props);
    return resource.getResponseField('Association.State') as unknown as string;
  }

}

export class EC2ResponsesAssociateTrunkInterface {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateTrunkInterfaceRequest) {
  }

  public get interfaceAssociation(): EC2ResponsesAssociateTrunkInterfaceInterfaceAssociation {
    return new EC2ResponsesAssociateTrunkInterfaceInterfaceAssociation(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTrunkInterface.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          BranchInterfaceId: this.__input.branchInterfaceId,
          TrunkInterfaceId: this.__input.trunkInterfaceId,
          VlanId: this.__input.vlanId,
          GreKey: this.__input.greKey,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTrunkInterface.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesAssociateTrunkInterfaceInterfaceAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateTrunkInterfaceRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTrunkInterface.InterfaceAssociation.AssociationId'),
        outputPath: 'InterfaceAssociation.AssociationId',
        parameters: {
          BranchInterfaceId: this.__input.branchInterfaceId,
          TrunkInterfaceId: this.__input.trunkInterfaceId,
          VlanId: this.__input.vlanId,
          GreKey: this.__input.greKey,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTrunkInterface.InterfaceAssociation.AssociationId', props);
    return resource.getResponseField('InterfaceAssociation.AssociationId') as unknown as string;
  }

  public get branchInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTrunkInterface.InterfaceAssociation.BranchInterfaceId'),
        outputPath: 'InterfaceAssociation.BranchInterfaceId',
        parameters: {
          BranchInterfaceId: this.__input.branchInterfaceId,
          TrunkInterfaceId: this.__input.trunkInterfaceId,
          VlanId: this.__input.vlanId,
          GreKey: this.__input.greKey,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTrunkInterface.InterfaceAssociation.BranchInterfaceId', props);
    return resource.getResponseField('InterfaceAssociation.BranchInterfaceId') as unknown as string;
  }

  public get trunkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTrunkInterface.InterfaceAssociation.TrunkInterfaceId'),
        outputPath: 'InterfaceAssociation.TrunkInterfaceId',
        parameters: {
          BranchInterfaceId: this.__input.branchInterfaceId,
          TrunkInterfaceId: this.__input.trunkInterfaceId,
          VlanId: this.__input.vlanId,
          GreKey: this.__input.greKey,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTrunkInterface.InterfaceAssociation.TrunkInterfaceId', props);
    return resource.getResponseField('InterfaceAssociation.TrunkInterfaceId') as unknown as string;
  }

  public get interfaceProtocol(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTrunkInterface.InterfaceAssociation.InterfaceProtocol'),
        outputPath: 'InterfaceAssociation.InterfaceProtocol',
        parameters: {
          BranchInterfaceId: this.__input.branchInterfaceId,
          TrunkInterfaceId: this.__input.trunkInterfaceId,
          VlanId: this.__input.vlanId,
          GreKey: this.__input.greKey,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTrunkInterface.InterfaceAssociation.InterfaceProtocol', props);
    return resource.getResponseField('InterfaceAssociation.InterfaceProtocol') as unknown as string;
  }

  public get vlanId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTrunkInterface.InterfaceAssociation.VlanId'),
        outputPath: 'InterfaceAssociation.VlanId',
        parameters: {
          BranchInterfaceId: this.__input.branchInterfaceId,
          TrunkInterfaceId: this.__input.trunkInterfaceId,
          VlanId: this.__input.vlanId,
          GreKey: this.__input.greKey,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTrunkInterface.InterfaceAssociation.VlanId', props);
    return resource.getResponseField('InterfaceAssociation.VlanId') as unknown as number;
  }

  public get greKey(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTrunkInterface.InterfaceAssociation.GreKey'),
        outputPath: 'InterfaceAssociation.GreKey',
        parameters: {
          BranchInterfaceId: this.__input.branchInterfaceId,
          TrunkInterfaceId: this.__input.trunkInterfaceId,
          VlanId: this.__input.vlanId,
          GreKey: this.__input.greKey,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTrunkInterface.InterfaceAssociation.GreKey', props);
    return resource.getResponseField('InterfaceAssociation.GreKey') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateTrunkInterface.InterfaceAssociation.Tags'),
        outputPath: 'InterfaceAssociation.Tags',
        parameters: {
          BranchInterfaceId: this.__input.branchInterfaceId,
          TrunkInterfaceId: this.__input.trunkInterfaceId,
          VlanId: this.__input.vlanId,
          GreKey: this.__input.greKey,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateTrunkInterface.InterfaceAssociation.Tags', props);
    return resource.getResponseField('InterfaceAssociation.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesAssociateVpcCidrBlock {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateVpcCidrBlockRequest) {
  }

  public get ipv6CidrBlockAssociation(): EC2ResponsesAssociateVpcCidrBlockIpv6CidrBlockAssociation {
    return new EC2ResponsesAssociateVpcCidrBlockIpv6CidrBlockAssociation(this.__scope, this.__resources, this.__input);
  }

  public get cidrBlockAssociation(): EC2ResponsesAssociateVpcCidrBlockCidrBlockAssociation {
    return new EC2ResponsesAssociateVpcCidrBlockCidrBlockAssociation(this.__scope, this.__resources, this.__input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.VpcId'),
        outputPath: 'VpcId',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.VpcId', props);
    return resource.getResponseField('VpcId') as unknown as string;
  }

}

export class EC2ResponsesAssociateVpcCidrBlockIpv6CidrBlockAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateVpcCidrBlockRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.AssociationId'),
        outputPath: 'Ipv6CidrBlockAssociation.AssociationId',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get ipv6CidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlock',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockState(): EC2ResponsesAssociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {
    return new EC2ResponsesAssociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState(this.__scope, this.__resources, this.__input);
  }

  public get networkBorderGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.NetworkBorderGroup'),
        outputPath: 'Ipv6CidrBlockAssociation.NetworkBorderGroup',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.NetworkBorderGroup', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.NetworkBorderGroup') as unknown as string;
  }

  public get ipv6Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6Pool'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6Pool',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6Pool', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6Pool') as unknown as string;
  }

}

export class EC2ResponsesAssociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateVpcCidrBlockRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesAssociateVpcCidrBlockCidrBlockAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateVpcCidrBlockRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.CidrBlockAssociation.AssociationId'),
        outputPath: 'CidrBlockAssociation.AssociationId',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlock'),
        outputPath: 'CidrBlockAssociation.CidrBlock',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlock', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlock') as unknown as string;
  }

  public get cidrBlockState(): EC2ResponsesAssociateVpcCidrBlockCidrBlockAssociationCidrBlockState {
    return new EC2ResponsesAssociateVpcCidrBlockCidrBlockAssociationCidrBlockState(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAssociateVpcCidrBlockCidrBlockAssociationCidrBlockState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AssociateVpcCidrBlockRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.State'),
        outputPath: 'CidrBlockAssociation.CidrBlockState.State',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.State', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.StatusMessage'),
        outputPath: 'CidrBlockAssociation.CidrBlockState.StatusMessage',
        parameters: {
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          CidrBlock: this.__input.cidrBlock,
          VpcId: this.__input.vpcId,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.StatusMessage', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesAttachClassicLinkVpc {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AttachClassicLinkVpcRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachClassicLinkVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachClassicLinkVpc.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          InstanceId: this.__input.instanceId,
          VpcId: this.__input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachClassicLinkVpc.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesAttachNetworkInterface {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AttachNetworkInterfaceRequest) {
  }

  public get attachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachNetworkInterface.AttachmentId'),
        outputPath: 'AttachmentId',
        parameters: {
          DeviceIndex: this.__input.deviceIndex,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkCardIndex: this.__input.networkCardIndex,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachNetworkInterface.AttachmentId', props);
    return resource.getResponseField('AttachmentId') as unknown as string;
  }

  public get networkCardIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachNetworkInterface.NetworkCardIndex'),
        outputPath: 'NetworkCardIndex',
        parameters: {
          DeviceIndex: this.__input.deviceIndex,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkCardIndex: this.__input.networkCardIndex,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachNetworkInterface.NetworkCardIndex', props);
    return resource.getResponseField('NetworkCardIndex') as unknown as number;
  }

}

export class EC2ResponsesAttachVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AttachVolumeRequest) {
  }

  public get attachTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.AttachTime'),
        outputPath: 'AttachTime',
        parameters: {
          Device: this.__input.device,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachVolume.AttachTime', props);
    return resource.getResponseField('AttachTime') as unknown as string;
  }

  public get device(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.Device'),
        outputPath: 'Device',
        parameters: {
          Device: this.__input.device,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachVolume.Device', props);
    return resource.getResponseField('Device') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          Device: this.__input.device,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachVolume.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.State'),
        outputPath: 'State',
        parameters: {
          Device: this.__input.device,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachVolume.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          Device: this.__input.device,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachVolume.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

  public get deleteOnTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVolume.DeleteOnTermination'),
        outputPath: 'DeleteOnTermination',
        parameters: {
          Device: this.__input.device,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachVolume.DeleteOnTermination', props);
    return resource.getResponseField('DeleteOnTermination') as unknown as boolean;
  }

}

export class EC2ResponsesAttachVpnGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AttachVpnGatewayRequest) {
  }

  public get vpcAttachment(): EC2ResponsesAttachVpnGatewayVpcAttachment {
    return new EC2ResponsesAttachVpnGatewayVpcAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAttachVpnGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AttachVpnGatewayRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVpnGateway.VpcAttachment.State'),
        outputPath: 'VpcAttachment.State',
        parameters: {
          VpcId: this.__input.vpcId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachVpnGateway.VpcAttachment.State', props);
    return resource.getResponseField('VpcAttachment.State') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'attachVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AttachVpnGateway.VpcAttachment.VpcId'),
        outputPath: 'VpcAttachment.VpcId',
        parameters: {
          VpcId: this.__input.vpcId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AttachVpnGateway.VpcAttachment.VpcId', props);
    return resource.getResponseField('VpcAttachment.VpcId') as unknown as string;
  }

}

export class EC2ResponsesAuthorizeClientVpnIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AuthorizeClientVpnIngressRequest) {
  }

  public get status(): EC2ResponsesAuthorizeClientVpnIngressStatus {
    return new EC2ResponsesAuthorizeClientVpnIngressStatus(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesAuthorizeClientVpnIngressStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AuthorizeClientVpnIngressRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClientVpnIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeClientVpnIngress.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          TargetNetworkCidr: this.__input.targetNetworkCidr,
          AccessGroupId: this.__input.accessGroupId,
          AuthorizeAllGroups: this.__input.authorizeAllGroups,
          Description: this.__input.description,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeClientVpnIngress.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeClientVpnIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeClientVpnIngress.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          TargetNetworkCidr: this.__input.targetNetworkCidr,
          AccessGroupId: this.__input.accessGroupId,
          AuthorizeAllGroups: this.__input.authorizeAllGroups,
          Description: this.__input.description,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeClientVpnIngress.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesAuthorizeSecurityGroupEgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AuthorizeSecurityGroupEgressRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSecurityGroupEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeSecurityGroupEgress.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupId: this.__input.groupId,
          IpPermissions: this.__input.ipPermissions,
          TagSpecifications: this.__input.tagSpecifications,
          CidrIp: this.__input.cidrIp,
          FromPort: this.__input.fromPort,
          IpProtocol: this.__input.ipProtocol,
          ToPort: this.__input.toPort,
          SourceSecurityGroupName: this.__input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.__input.sourceSecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSecurityGroupEgress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

  public get securityGroupRules(): shapes.Ec2SecurityGroupRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSecurityGroupEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeSecurityGroupEgress.SecurityGroupRules'),
        outputPath: 'SecurityGroupRules',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupId: this.__input.groupId,
          IpPermissions: this.__input.ipPermissions,
          TagSpecifications: this.__input.tagSpecifications,
          CidrIp: this.__input.cidrIp,
          FromPort: this.__input.fromPort,
          IpProtocol: this.__input.ipProtocol,
          ToPort: this.__input.toPort,
          SourceSecurityGroupName: this.__input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.__input.sourceSecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSecurityGroupEgress.SecurityGroupRules', props);
    return resource.getResponseField('SecurityGroupRules') as unknown as shapes.Ec2SecurityGroupRule[];
  }

}

export class EC2ResponsesAuthorizeSecurityGroupIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2AuthorizeSecurityGroupIngressRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSecurityGroupIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeSecurityGroupIngress.Return'),
        outputPath: 'Return',
        parameters: {
          CidrIp: this.__input.cidrIp,
          FromPort: this.__input.fromPort,
          GroupId: this.__input.groupId,
          GroupName: this.__input.groupName,
          IpPermissions: this.__input.ipPermissions,
          IpProtocol: this.__input.ipProtocol,
          SourceSecurityGroupName: this.__input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.__input.sourceSecurityGroupOwnerId,
          ToPort: this.__input.toPort,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSecurityGroupIngress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

  public get securityGroupRules(): shapes.Ec2SecurityGroupRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeSecurityGroupIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.AuthorizeSecurityGroupIngress.SecurityGroupRules'),
        outputPath: 'SecurityGroupRules',
        parameters: {
          CidrIp: this.__input.cidrIp,
          FromPort: this.__input.fromPort,
          GroupId: this.__input.groupId,
          GroupName: this.__input.groupName,
          IpPermissions: this.__input.ipPermissions,
          IpProtocol: this.__input.ipProtocol,
          SourceSecurityGroupName: this.__input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.__input.sourceSecurityGroupOwnerId,
          ToPort: this.__input.toPort,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeSecurityGroupIngress.SecurityGroupRules', props);
    return resource.getResponseField('SecurityGroupRules') as unknown as shapes.Ec2SecurityGroupRule[];
  }

}

export class EC2ResponsesBundleInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2BundleInstanceRequest) {
  }

  public get bundleTask(): EC2ResponsesBundleInstanceBundleTask {
    return new EC2ResponsesBundleInstanceBundleTask(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesBundleInstanceBundleTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2BundleInstanceRequest) {
  }

  public get bundleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.BundleId'),
        outputPath: 'BundleTask.BundleId',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.BundleId', props);
    return resource.getResponseField('BundleTask.BundleId') as unknown as string;
  }

  public get bundleTaskError(): EC2ResponsesBundleInstanceBundleTaskBundleTaskError {
    return new EC2ResponsesBundleInstanceBundleTaskBundleTaskError(this.__scope, this.__resources, this.__input);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.InstanceId'),
        outputPath: 'BundleTask.InstanceId',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.InstanceId', props);
    return resource.getResponseField('BundleTask.InstanceId') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Progress'),
        outputPath: 'BundleTask.Progress',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.Progress', props);
    return resource.getResponseField('BundleTask.Progress') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.StartTime'),
        outputPath: 'BundleTask.StartTime',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.StartTime', props);
    return resource.getResponseField('BundleTask.StartTime') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.State'),
        outputPath: 'BundleTask.State',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.State', props);
    return resource.getResponseField('BundleTask.State') as unknown as string;
  }

  public get storage(): EC2ResponsesBundleInstanceBundleTaskStorage {
    return new EC2ResponsesBundleInstanceBundleTaskStorage(this.__scope, this.__resources, this.__input);
  }

  public get updateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.UpdateTime'),
        outputPath: 'BundleTask.UpdateTime',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.UpdateTime', props);
    return resource.getResponseField('BundleTask.UpdateTime') as unknown as string;
  }

}

export class EC2ResponsesBundleInstanceBundleTaskBundleTaskError {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2BundleInstanceRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.BundleTaskError.Code'),
        outputPath: 'BundleTask.BundleTaskError.Code',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.BundleTaskError.Code', props);
    return resource.getResponseField('BundleTask.BundleTaskError.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.BundleTaskError.Message'),
        outputPath: 'BundleTask.BundleTaskError.Message',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.BundleTaskError.Message', props);
    return resource.getResponseField('BundleTask.BundleTaskError.Message') as unknown as string;
  }

}

export class EC2ResponsesBundleInstanceBundleTaskStorage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2BundleInstanceRequest) {
  }

  public get s3(): EC2ResponsesBundleInstanceBundleTaskStorageS3 {
    return new EC2ResponsesBundleInstanceBundleTaskStorageS3(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesBundleInstanceBundleTaskStorageS3 {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2BundleInstanceRequest) {
  }

  public get awsAccessKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.AWSAccessKeyId'),
        outputPath: 'BundleTask.Storage.S3.AWSAccessKeyId',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.Storage.S3.AWSAccessKeyId', props);
    return resource.getResponseField('BundleTask.Storage.S3.AWSAccessKeyId') as unknown as string;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.Bucket'),
        outputPath: 'BundleTask.Storage.S3.Bucket',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.Storage.S3.Bucket', props);
    return resource.getResponseField('BundleTask.Storage.S3.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.Prefix'),
        outputPath: 'BundleTask.Storage.S3.Prefix',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.Storage.S3.Prefix', props);
    return resource.getResponseField('BundleTask.Storage.S3.Prefix') as unknown as string;
  }

  public get uploadPolicy(): any {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.UploadPolicy'),
        outputPath: 'BundleTask.Storage.S3.UploadPolicy',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.Storage.S3.UploadPolicy', props);
    return resource.getResponseField('BundleTask.Storage.S3.UploadPolicy') as unknown as any;
  }

  public get uploadPolicySignature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'bundleInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.BundleInstance.BundleTask.Storage.S3.UploadPolicySignature'),
        outputPath: 'BundleTask.Storage.S3.UploadPolicySignature',
        parameters: {
          InstanceId: this.__input.instanceId,
          Storage: {
            S3: {
              AWSAccessKeyId: this.__input.storage.s3?.awsAccessKeyId,
              Bucket: this.__input.storage.s3?.bucket,
              Prefix: this.__input.storage.s3?.prefix,
              UploadPolicy: {
              },
              UploadPolicySignature: this.__input.storage.s3?.uploadPolicySignature,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BundleInstance.BundleTask.Storage.S3.UploadPolicySignature', props);
    return resource.getResponseField('BundleTask.Storage.S3.UploadPolicySignature') as unknown as string;
  }

}

export class EC2ResponsesCancelBundleTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelBundleTaskRequest) {
  }

  public get bundleTask(): EC2ResponsesCancelBundleTaskBundleTask {
    return new EC2ResponsesCancelBundleTaskBundleTask(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCancelBundleTaskBundleTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelBundleTaskRequest) {
  }

  public get bundleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.BundleId'),
        outputPath: 'BundleTask.BundleId',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.BundleId', props);
    return resource.getResponseField('BundleTask.BundleId') as unknown as string;
  }

  public get bundleTaskError(): EC2ResponsesCancelBundleTaskBundleTaskBundleTaskError {
    return new EC2ResponsesCancelBundleTaskBundleTaskBundleTaskError(this.__scope, this.__resources, this.__input);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.InstanceId'),
        outputPath: 'BundleTask.InstanceId',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.InstanceId', props);
    return resource.getResponseField('BundleTask.InstanceId') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Progress'),
        outputPath: 'BundleTask.Progress',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.Progress', props);
    return resource.getResponseField('BundleTask.Progress') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.StartTime'),
        outputPath: 'BundleTask.StartTime',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.StartTime', props);
    return resource.getResponseField('BundleTask.StartTime') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.State'),
        outputPath: 'BundleTask.State',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.State', props);
    return resource.getResponseField('BundleTask.State') as unknown as string;
  }

  public get storage(): EC2ResponsesCancelBundleTaskBundleTaskStorage {
    return new EC2ResponsesCancelBundleTaskBundleTaskStorage(this.__scope, this.__resources, this.__input);
  }

  public get updateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.UpdateTime'),
        outputPath: 'BundleTask.UpdateTime',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.UpdateTime', props);
    return resource.getResponseField('BundleTask.UpdateTime') as unknown as string;
  }

}

export class EC2ResponsesCancelBundleTaskBundleTaskBundleTaskError {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelBundleTaskRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.BundleTaskError.Code'),
        outputPath: 'BundleTask.BundleTaskError.Code',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.BundleTaskError.Code', props);
    return resource.getResponseField('BundleTask.BundleTaskError.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.BundleTaskError.Message'),
        outputPath: 'BundleTask.BundleTaskError.Message',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.BundleTaskError.Message', props);
    return resource.getResponseField('BundleTask.BundleTaskError.Message') as unknown as string;
  }

}

export class EC2ResponsesCancelBundleTaskBundleTaskStorage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelBundleTaskRequest) {
  }

  public get s3(): EC2ResponsesCancelBundleTaskBundleTaskStorageS3 {
    return new EC2ResponsesCancelBundleTaskBundleTaskStorageS3(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCancelBundleTaskBundleTaskStorageS3 {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelBundleTaskRequest) {
  }

  public get awsAccessKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.AWSAccessKeyId'),
        outputPath: 'BundleTask.Storage.S3.AWSAccessKeyId',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.Storage.S3.AWSAccessKeyId', props);
    return resource.getResponseField('BundleTask.Storage.S3.AWSAccessKeyId') as unknown as string;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.Bucket'),
        outputPath: 'BundleTask.Storage.S3.Bucket',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.Storage.S3.Bucket', props);
    return resource.getResponseField('BundleTask.Storage.S3.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.Prefix'),
        outputPath: 'BundleTask.Storage.S3.Prefix',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.Storage.S3.Prefix', props);
    return resource.getResponseField('BundleTask.Storage.S3.Prefix') as unknown as string;
  }

  public get uploadPolicy(): any {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.UploadPolicy'),
        outputPath: 'BundleTask.Storage.S3.UploadPolicy',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.Storage.S3.UploadPolicy', props);
    return resource.getResponseField('BundleTask.Storage.S3.UploadPolicy') as unknown as any;
  }

  public get uploadPolicySignature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelBundleTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelBundleTask.BundleTask.Storage.S3.UploadPolicySignature'),
        outputPath: 'BundleTask.Storage.S3.UploadPolicySignature',
        parameters: {
          BundleId: this.__input.bundleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelBundleTask.BundleTask.Storage.S3.UploadPolicySignature', props);
    return resource.getResponseField('BundleTask.Storage.S3.UploadPolicySignature') as unknown as string;
  }

}

export class EC2ResponsesCancelCapacityReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelCapacityReservationRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelCapacityReservation.Return'),
        outputPath: 'Return',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelCapacityReservation.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesCancelImportTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelImportTaskRequest) {
  }

  public get importTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelImportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelImportTask.ImportTaskId'),
        outputPath: 'ImportTaskId',
        parameters: {
          CancelReason: this.__input.cancelReason,
          DryRun: this.__input.dryRun,
          ImportTaskId: this.__input.importTaskId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelImportTask.ImportTaskId', props);
    return resource.getResponseField('ImportTaskId') as unknown as string;
  }

  public get previousState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelImportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelImportTask.PreviousState'),
        outputPath: 'PreviousState',
        parameters: {
          CancelReason: this.__input.cancelReason,
          DryRun: this.__input.dryRun,
          ImportTaskId: this.__input.importTaskId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelImportTask.PreviousState', props);
    return resource.getResponseField('PreviousState') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelImportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelImportTask.State'),
        outputPath: 'State',
        parameters: {
          CancelReason: this.__input.cancelReason,
          DryRun: this.__input.dryRun,
          ImportTaskId: this.__input.importTaskId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelImportTask.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

}

export class EC2ResponsesCancelReservedInstancesListing {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelReservedInstancesListingRequest) {
  }

  public get reservedInstancesListings(): shapes.Ec2ReservedInstancesListing[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelReservedInstancesListing',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelReservedInstancesListing.ReservedInstancesListings'),
        outputPath: 'ReservedInstancesListings',
        parameters: {
          ReservedInstancesListingId: this.__input.reservedInstancesListingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelReservedInstancesListing.ReservedInstancesListings', props);
    return resource.getResponseField('ReservedInstancesListings') as unknown as shapes.Ec2ReservedInstancesListing[];
  }

}

export class EC2ResponsesCancelSpotFleetRequests {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelSpotFleetRequestsRequest) {
  }

  public get successfulFleetRequests(): shapes.Ec2CancelSpotFleetRequestsSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelSpotFleetRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelSpotFleetRequests.SuccessfulFleetRequests'),
        outputPath: 'SuccessfulFleetRequests',
        parameters: {
          DryRun: this.__input.dryRun,
          SpotFleetRequestIds: this.__input.spotFleetRequestIds,
          TerminateInstances: this.__input.terminateInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelSpotFleetRequests.SuccessfulFleetRequests', props);
    return resource.getResponseField('SuccessfulFleetRequests') as unknown as shapes.Ec2CancelSpotFleetRequestsSuccessItem[];
  }

  public get unsuccessfulFleetRequests(): shapes.Ec2CancelSpotFleetRequestsErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelSpotFleetRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelSpotFleetRequests.UnsuccessfulFleetRequests'),
        outputPath: 'UnsuccessfulFleetRequests',
        parameters: {
          DryRun: this.__input.dryRun,
          SpotFleetRequestIds: this.__input.spotFleetRequestIds,
          TerminateInstances: this.__input.terminateInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelSpotFleetRequests.UnsuccessfulFleetRequests', props);
    return resource.getResponseField('UnsuccessfulFleetRequests') as unknown as shapes.Ec2CancelSpotFleetRequestsErrorItem[];
  }

}

export class EC2ResponsesCancelSpotInstanceRequests {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CancelSpotInstanceRequestsRequest) {
  }

  public get cancelledSpotInstanceRequests(): shapes.Ec2CancelledSpotInstanceRequest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelSpotInstanceRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CancelSpotInstanceRequests.CancelledSpotInstanceRequests'),
        outputPath: 'CancelledSpotInstanceRequests',
        parameters: {
          DryRun: this.__input.dryRun,
          SpotInstanceRequestIds: this.__input.spotInstanceRequestIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelSpotInstanceRequests.CancelledSpotInstanceRequests', props);
    return resource.getResponseField('CancelledSpotInstanceRequests') as unknown as shapes.Ec2CancelledSpotInstanceRequest[];
  }

}

export class EC2ResponsesConfirmProductInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ConfirmProductInstanceRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'confirmProductInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ConfirmProductInstance.OwnerId'),
        outputPath: 'OwnerId',
        parameters: {
          InstanceId: this.__input.instanceId,
          ProductCode: this.__input.productCode,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ConfirmProductInstance.OwnerId', props);
    return resource.getResponseField('OwnerId') as unknown as string;
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'confirmProductInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ConfirmProductInstance.Return'),
        outputPath: 'Return',
        parameters: {
          InstanceId: this.__input.instanceId,
          ProductCode: this.__input.productCode,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ConfirmProductInstance.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesCopyFpgaImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CopyFpgaImageRequest) {
  }

  public get fpgaImageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyFpgaImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CopyFpgaImage.FpgaImageId'),
        outputPath: 'FpgaImageId',
        parameters: {
          DryRun: this.__input.dryRun,
          SourceFpgaImageId: this.__input.sourceFpgaImageId,
          Description: this.__input.description,
          Name: this.__input.name,
          SourceRegion: this.__input.sourceRegion,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyFpgaImage.FpgaImageId', props);
    return resource.getResponseField('FpgaImageId') as unknown as string;
  }

}

export class EC2ResponsesCopyImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CopyImageRequest) {
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CopyImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Name: this.__input.name,
          SourceImageId: this.__input.sourceImageId,
          SourceRegion: this.__input.sourceRegion,
          DestinationOutpostArn: this.__input.destinationOutpostArn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

}

export class EC2ResponsesCopySnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CopySnapshotRequest) {
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copySnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CopySnapshot.SnapshotId'),
        outputPath: 'SnapshotId',
        parameters: {
          Description: this.__input.description,
          DestinationOutpostArn: this.__input.destinationOutpostArn,
          DestinationRegion: this.__input.destinationRegion,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PresignedUrl: this.__input.presignedUrl,
          SourceRegion: this.__input.sourceRegion,
          SourceSnapshotId: this.__input.sourceSnapshotId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopySnapshot.SnapshotId', props);
    return resource.getResponseField('SnapshotId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copySnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CopySnapshot.Tags'),
        outputPath: 'Tags',
        parameters: {
          Description: this.__input.description,
          DestinationOutpostArn: this.__input.destinationOutpostArn,
          DestinationRegion: this.__input.destinationRegion,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PresignedUrl: this.__input.presignedUrl,
          SourceRegion: this.__input.sourceRegion,
          SourceSnapshotId: this.__input.sourceSnapshotId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopySnapshot.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateCapacityReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateCapacityReservationRequest) {
  }

  public get capacityReservation(): EC2ResponsesCreateCapacityReservationCapacityReservation {
    return new EC2ResponsesCreateCapacityReservationCapacityReservation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateCapacityReservationCapacityReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateCapacityReservationRequest) {
  }

  public get capacityReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.CapacityReservationId'),
        outputPath: 'CapacityReservation.CapacityReservationId',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.CapacityReservationId', props);
    return resource.getResponseField('CapacityReservation.CapacityReservationId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.OwnerId'),
        outputPath: 'CapacityReservation.OwnerId',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.OwnerId', props);
    return resource.getResponseField('CapacityReservation.OwnerId') as unknown as string;
  }

  public get capacityReservationArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.CapacityReservationArn'),
        outputPath: 'CapacityReservation.CapacityReservationArn',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.CapacityReservationArn', props);
    return resource.getResponseField('CapacityReservation.CapacityReservationArn') as unknown as string;
  }

  public get availabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.AvailabilityZoneId'),
        outputPath: 'CapacityReservation.AvailabilityZoneId',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.AvailabilityZoneId', props);
    return resource.getResponseField('CapacityReservation.AvailabilityZoneId') as unknown as string;
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.InstanceType'),
        outputPath: 'CapacityReservation.InstanceType',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.InstanceType', props);
    return resource.getResponseField('CapacityReservation.InstanceType') as unknown as string;
  }

  public get instancePlatform(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.InstancePlatform'),
        outputPath: 'CapacityReservation.InstancePlatform',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.InstancePlatform', props);
    return resource.getResponseField('CapacityReservation.InstancePlatform') as unknown as string;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.AvailabilityZone'),
        outputPath: 'CapacityReservation.AvailabilityZone',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.AvailabilityZone', props);
    return resource.getResponseField('CapacityReservation.AvailabilityZone') as unknown as string;
  }

  public get tenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.Tenancy'),
        outputPath: 'CapacityReservation.Tenancy',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.Tenancy', props);
    return resource.getResponseField('CapacityReservation.Tenancy') as unknown as string;
  }

  public get totalInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.TotalInstanceCount'),
        outputPath: 'CapacityReservation.TotalInstanceCount',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.TotalInstanceCount', props);
    return resource.getResponseField('CapacityReservation.TotalInstanceCount') as unknown as number;
  }

  public get availableInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.AvailableInstanceCount'),
        outputPath: 'CapacityReservation.AvailableInstanceCount',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.AvailableInstanceCount', props);
    return resource.getResponseField('CapacityReservation.AvailableInstanceCount') as unknown as number;
  }

  public get ebsOptimized(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.EbsOptimized'),
        outputPath: 'CapacityReservation.EbsOptimized',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.EbsOptimized', props);
    return resource.getResponseField('CapacityReservation.EbsOptimized') as unknown as boolean;
  }

  public get ephemeralStorage(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.EphemeralStorage'),
        outputPath: 'CapacityReservation.EphemeralStorage',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.EphemeralStorage', props);
    return resource.getResponseField('CapacityReservation.EphemeralStorage') as unknown as boolean;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.State'),
        outputPath: 'CapacityReservation.State',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.State', props);
    return resource.getResponseField('CapacityReservation.State') as unknown as string;
  }

  public get startDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.StartDate'),
        outputPath: 'CapacityReservation.StartDate',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.StartDate', props);
    return resource.getResponseField('CapacityReservation.StartDate') as unknown as string;
  }

  public get endDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.EndDate'),
        outputPath: 'CapacityReservation.EndDate',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.EndDate', props);
    return resource.getResponseField('CapacityReservation.EndDate') as unknown as string;
  }

  public get endDateType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.EndDateType'),
        outputPath: 'CapacityReservation.EndDateType',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.EndDateType', props);
    return resource.getResponseField('CapacityReservation.EndDateType') as unknown as string;
  }

  public get instanceMatchCriteria(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.InstanceMatchCriteria'),
        outputPath: 'CapacityReservation.InstanceMatchCriteria',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.InstanceMatchCriteria', props);
    return resource.getResponseField('CapacityReservation.InstanceMatchCriteria') as unknown as string;
  }

  public get createDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.CreateDate'),
        outputPath: 'CapacityReservation.CreateDate',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.CreateDate', props);
    return resource.getResponseField('CapacityReservation.CreateDate') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.Tags'),
        outputPath: 'CapacityReservation.Tags',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.Tags', props);
    return resource.getResponseField('CapacityReservation.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCapacityReservation.CapacityReservation.OutpostArn'),
        outputPath: 'CapacityReservation.OutpostArn',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceType: this.__input.instanceType,
          InstancePlatform: this.__input.instancePlatform,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Tenancy: this.__input.tenancy,
          InstanceCount: this.__input.instanceCount,
          EbsOptimized: this.__input.ebsOptimized,
          EphemeralStorage: this.__input.ephemeralStorage,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          InstanceMatchCriteria: this.__input.instanceMatchCriteria,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          OutpostArn: this.__input.outpostArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCapacityReservation.CapacityReservation.OutpostArn', props);
    return resource.getResponseField('CapacityReservation.OutpostArn') as unknown as string;
  }

}

export class EC2ResponsesCreateCarrierGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateCarrierGatewayRequest) {
  }

  public get carrierGateway(): EC2ResponsesCreateCarrierGatewayCarrierGateway {
    return new EC2ResponsesCreateCarrierGatewayCarrierGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateCarrierGatewayCarrierGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateCarrierGatewayRequest) {
  }

  public get carrierGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.CarrierGatewayId'),
        outputPath: 'CarrierGateway.CarrierGatewayId',
        parameters: {
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCarrierGateway.CarrierGateway.CarrierGatewayId', props);
    return resource.getResponseField('CarrierGateway.CarrierGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.VpcId'),
        outputPath: 'CarrierGateway.VpcId',
        parameters: {
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCarrierGateway.CarrierGateway.VpcId', props);
    return resource.getResponseField('CarrierGateway.VpcId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.State'),
        outputPath: 'CarrierGateway.State',
        parameters: {
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCarrierGateway.CarrierGateway.State', props);
    return resource.getResponseField('CarrierGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.OwnerId'),
        outputPath: 'CarrierGateway.OwnerId',
        parameters: {
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCarrierGateway.CarrierGateway.OwnerId', props);
    return resource.getResponseField('CarrierGateway.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCarrierGateway.CarrierGateway.Tags'),
        outputPath: 'CarrierGateway.Tags',
        parameters: {
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCarrierGateway.CarrierGateway.Tags', props);
    return resource.getResponseField('CarrierGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateClientVpnEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateClientVpnEndpointRequest) {
  }

  public get clientVpnEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnEndpoint.ClientVpnEndpointId'),
        outputPath: 'ClientVpnEndpointId',
        parameters: {
          ClientCidrBlock: this.__input.clientCidrBlock,
          ServerCertificateArn: this.__input.serverCertificateArn,
          AuthenticationOptions: this.__input.authenticationOptions,
          ConnectionLogOptions: {
            Enabled: this.__input.connectionLogOptions.enabled,
            CloudwatchLogGroup: this.__input.connectionLogOptions.cloudwatchLogGroup,
            CloudwatchLogStream: this.__input.connectionLogOptions.cloudwatchLogStream,
          },
          DnsServers: this.__input.dnsServers,
          TransportProtocol: this.__input.transportProtocol,
          VpnPort: this.__input.vpnPort,
          Description: this.__input.description,
          SplitTunnel: this.__input.splitTunnel,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
          SecurityGroupIds: this.__input.securityGroupIds,
          VpcId: this.__input.vpcId,
          SelfServicePortal: this.__input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.__input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.__input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClientVpnEndpoint.ClientVpnEndpointId', props);
    return resource.getResponseField('ClientVpnEndpointId') as unknown as string;
  }

  public get status(): EC2ResponsesCreateClientVpnEndpointStatus {
    return new EC2ResponsesCreateClientVpnEndpointStatus(this.__scope, this.__resources, this.__input);
  }

  public get dnsName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnEndpoint.DnsName'),
        outputPath: 'DnsName',
        parameters: {
          ClientCidrBlock: this.__input.clientCidrBlock,
          ServerCertificateArn: this.__input.serverCertificateArn,
          AuthenticationOptions: this.__input.authenticationOptions,
          ConnectionLogOptions: {
            Enabled: this.__input.connectionLogOptions.enabled,
            CloudwatchLogGroup: this.__input.connectionLogOptions.cloudwatchLogGroup,
            CloudwatchLogStream: this.__input.connectionLogOptions.cloudwatchLogStream,
          },
          DnsServers: this.__input.dnsServers,
          TransportProtocol: this.__input.transportProtocol,
          VpnPort: this.__input.vpnPort,
          Description: this.__input.description,
          SplitTunnel: this.__input.splitTunnel,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
          SecurityGroupIds: this.__input.securityGroupIds,
          VpcId: this.__input.vpcId,
          SelfServicePortal: this.__input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.__input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.__input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClientVpnEndpoint.DnsName', props);
    return resource.getResponseField('DnsName') as unknown as string;
  }

}

export class EC2ResponsesCreateClientVpnEndpointStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateClientVpnEndpointRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnEndpoint.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientCidrBlock: this.__input.clientCidrBlock,
          ServerCertificateArn: this.__input.serverCertificateArn,
          AuthenticationOptions: this.__input.authenticationOptions,
          ConnectionLogOptions: {
            Enabled: this.__input.connectionLogOptions.enabled,
            CloudwatchLogGroup: this.__input.connectionLogOptions.cloudwatchLogGroup,
            CloudwatchLogStream: this.__input.connectionLogOptions.cloudwatchLogStream,
          },
          DnsServers: this.__input.dnsServers,
          TransportProtocol: this.__input.transportProtocol,
          VpnPort: this.__input.vpnPort,
          Description: this.__input.description,
          SplitTunnel: this.__input.splitTunnel,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
          SecurityGroupIds: this.__input.securityGroupIds,
          VpcId: this.__input.vpcId,
          SelfServicePortal: this.__input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.__input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.__input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClientVpnEndpoint.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnEndpoint.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientCidrBlock: this.__input.clientCidrBlock,
          ServerCertificateArn: this.__input.serverCertificateArn,
          AuthenticationOptions: this.__input.authenticationOptions,
          ConnectionLogOptions: {
            Enabled: this.__input.connectionLogOptions.enabled,
            CloudwatchLogGroup: this.__input.connectionLogOptions.cloudwatchLogGroup,
            CloudwatchLogStream: this.__input.connectionLogOptions.cloudwatchLogStream,
          },
          DnsServers: this.__input.dnsServers,
          TransportProtocol: this.__input.transportProtocol,
          VpnPort: this.__input.vpnPort,
          Description: this.__input.description,
          SplitTunnel: this.__input.splitTunnel,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
          SecurityGroupIds: this.__input.securityGroupIds,
          VpcId: this.__input.vpcId,
          SelfServicePortal: this.__input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.__input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.__input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClientVpnEndpoint.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesCreateClientVpnRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateClientVpnRouteRequest) {
  }

  public get status(): EC2ResponsesCreateClientVpnRouteStatus {
    return new EC2ResponsesCreateClientVpnRouteStatus(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateClientVpnRouteStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateClientVpnRouteRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnRoute.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TargetVpcSubnetId: this.__input.targetVpcSubnetId,
          Description: this.__input.description,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClientVpnRoute.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createClientVpnRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateClientVpnRoute.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TargetVpcSubnetId: this.__input.targetVpcSubnetId,
          Description: this.__input.description,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateClientVpnRoute.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesCreateCustomerGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateCustomerGatewayRequest) {
  }

  public get customerGateway(): EC2ResponsesCreateCustomerGatewayCustomerGateway {
    return new EC2ResponsesCreateCustomerGatewayCustomerGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateCustomerGatewayCustomerGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateCustomerGatewayRequest) {
  }

  public get bgpAsn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.BgpAsn'),
        outputPath: 'CustomerGateway.BgpAsn',
        parameters: {
          BgpAsn: this.__input.bgpAsn,
          PublicIp: this.__input.publicIp,
          CertificateArn: this.__input.certificateArn,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          DeviceName: this.__input.deviceName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomerGateway.CustomerGateway.BgpAsn', props);
    return resource.getResponseField('CustomerGateway.BgpAsn') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.CustomerGatewayId'),
        outputPath: 'CustomerGateway.CustomerGatewayId',
        parameters: {
          BgpAsn: this.__input.bgpAsn,
          PublicIp: this.__input.publicIp,
          CertificateArn: this.__input.certificateArn,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          DeviceName: this.__input.deviceName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomerGateway.CustomerGateway.CustomerGatewayId', props);
    return resource.getResponseField('CustomerGateway.CustomerGatewayId') as unknown as string;
  }

  public get ipAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.IpAddress'),
        outputPath: 'CustomerGateway.IpAddress',
        parameters: {
          BgpAsn: this.__input.bgpAsn,
          PublicIp: this.__input.publicIp,
          CertificateArn: this.__input.certificateArn,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          DeviceName: this.__input.deviceName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomerGateway.CustomerGateway.IpAddress', props);
    return resource.getResponseField('CustomerGateway.IpAddress') as unknown as string;
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.CertificateArn'),
        outputPath: 'CustomerGateway.CertificateArn',
        parameters: {
          BgpAsn: this.__input.bgpAsn,
          PublicIp: this.__input.publicIp,
          CertificateArn: this.__input.certificateArn,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          DeviceName: this.__input.deviceName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomerGateway.CustomerGateway.CertificateArn', props);
    return resource.getResponseField('CustomerGateway.CertificateArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.State'),
        outputPath: 'CustomerGateway.State',
        parameters: {
          BgpAsn: this.__input.bgpAsn,
          PublicIp: this.__input.publicIp,
          CertificateArn: this.__input.certificateArn,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          DeviceName: this.__input.deviceName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomerGateway.CustomerGateway.State', props);
    return resource.getResponseField('CustomerGateway.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.Type'),
        outputPath: 'CustomerGateway.Type',
        parameters: {
          BgpAsn: this.__input.bgpAsn,
          PublicIp: this.__input.publicIp,
          CertificateArn: this.__input.certificateArn,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          DeviceName: this.__input.deviceName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomerGateway.CustomerGateway.Type', props);
    return resource.getResponseField('CustomerGateway.Type') as unknown as string;
  }

  public get deviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.DeviceName'),
        outputPath: 'CustomerGateway.DeviceName',
        parameters: {
          BgpAsn: this.__input.bgpAsn,
          PublicIp: this.__input.publicIp,
          CertificateArn: this.__input.certificateArn,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          DeviceName: this.__input.deviceName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomerGateway.CustomerGateway.DeviceName', props);
    return resource.getResponseField('CustomerGateway.DeviceName') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomerGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateCustomerGateway.CustomerGateway.Tags'),
        outputPath: 'CustomerGateway.Tags',
        parameters: {
          BgpAsn: this.__input.bgpAsn,
          PublicIp: this.__input.publicIp,
          CertificateArn: this.__input.certificateArn,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          DeviceName: this.__input.deviceName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomerGateway.CustomerGateway.Tags', props);
    return resource.getResponseField('CustomerGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateDefaultSubnet {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateDefaultSubnetRequest) {
  }

  public get subnet(): EC2ResponsesCreateDefaultSubnetSubnet {
    return new EC2ResponsesCreateDefaultSubnetSubnet(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateDefaultSubnetSubnet {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateDefaultSubnetRequest) {
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.AvailabilityZone'),
        outputPath: 'Subnet.AvailabilityZone',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.AvailabilityZone', props);
    return resource.getResponseField('Subnet.AvailabilityZone') as unknown as string;
  }

  public get availabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.AvailabilityZoneId'),
        outputPath: 'Subnet.AvailabilityZoneId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.AvailabilityZoneId', props);
    return resource.getResponseField('Subnet.AvailabilityZoneId') as unknown as string;
  }

  public get availableIpAddressCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.AvailableIpAddressCount'),
        outputPath: 'Subnet.AvailableIpAddressCount',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.AvailableIpAddressCount', props);
    return resource.getResponseField('Subnet.AvailableIpAddressCount') as unknown as number;
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.CidrBlock'),
        outputPath: 'Subnet.CidrBlock',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.CidrBlock', props);
    return resource.getResponseField('Subnet.CidrBlock') as unknown as string;
  }

  public get defaultForAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.DefaultForAz'),
        outputPath: 'Subnet.DefaultForAz',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.DefaultForAz', props);
    return resource.getResponseField('Subnet.DefaultForAz') as unknown as boolean;
  }

  public get mapPublicIpOnLaunch(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.MapPublicIpOnLaunch'),
        outputPath: 'Subnet.MapPublicIpOnLaunch',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.MapPublicIpOnLaunch', props);
    return resource.getResponseField('Subnet.MapPublicIpOnLaunch') as unknown as boolean;
  }

  public get mapCustomerOwnedIpOnLaunch(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.MapCustomerOwnedIpOnLaunch'),
        outputPath: 'Subnet.MapCustomerOwnedIpOnLaunch',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.MapCustomerOwnedIpOnLaunch', props);
    return resource.getResponseField('Subnet.MapCustomerOwnedIpOnLaunch') as unknown as boolean;
  }

  public get customerOwnedIpv4Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.CustomerOwnedIpv4Pool'),
        outputPath: 'Subnet.CustomerOwnedIpv4Pool',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.CustomerOwnedIpv4Pool', props);
    return resource.getResponseField('Subnet.CustomerOwnedIpv4Pool') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.State'),
        outputPath: 'Subnet.State',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.State', props);
    return resource.getResponseField('Subnet.State') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.SubnetId'),
        outputPath: 'Subnet.SubnetId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.SubnetId', props);
    return resource.getResponseField('Subnet.SubnetId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.VpcId'),
        outputPath: 'Subnet.VpcId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.VpcId', props);
    return resource.getResponseField('Subnet.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.OwnerId'),
        outputPath: 'Subnet.OwnerId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.OwnerId', props);
    return resource.getResponseField('Subnet.OwnerId') as unknown as string;
  }

  public get assignIpv6AddressOnCreation(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.AssignIpv6AddressOnCreation'),
        outputPath: 'Subnet.AssignIpv6AddressOnCreation',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.AssignIpv6AddressOnCreation', props);
    return resource.getResponseField('Subnet.AssignIpv6AddressOnCreation') as unknown as boolean;
  }

  public get ipv6CidrBlockAssociationSet(): shapes.Ec2SubnetIpv6CidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.Ipv6CidrBlockAssociationSet'),
        outputPath: 'Subnet.Ipv6CidrBlockAssociationSet',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.Ipv6CidrBlockAssociationSet', props);
    return resource.getResponseField('Subnet.Ipv6CidrBlockAssociationSet') as unknown as shapes.Ec2SubnetIpv6CidrBlockAssociation[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.Tags'),
        outputPath: 'Subnet.Tags',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.Tags', props);
    return resource.getResponseField('Subnet.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get subnetArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.SubnetArn'),
        outputPath: 'Subnet.SubnetArn',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.SubnetArn', props);
    return resource.getResponseField('Subnet.SubnetArn') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultSubnet.Subnet.OutpostArn'),
        outputPath: 'Subnet.OutpostArn',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultSubnet.Subnet.OutpostArn', props);
    return resource.getResponseField('Subnet.OutpostArn') as unknown as string;
  }

}

export class EC2ResponsesCreateDefaultVpc {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateDefaultVpcRequest) {
  }

  public get vpc(): EC2ResponsesCreateDefaultVpcVpc {
    return new EC2ResponsesCreateDefaultVpcVpc(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateDefaultVpcVpc {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateDefaultVpcRequest) {
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.CidrBlock'),
        outputPath: 'Vpc.CidrBlock',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.CidrBlock', props);
    return resource.getResponseField('Vpc.CidrBlock') as unknown as string;
  }

  public get dhcpOptionsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.DhcpOptionsId'),
        outputPath: 'Vpc.DhcpOptionsId',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.DhcpOptionsId', props);
    return resource.getResponseField('Vpc.DhcpOptionsId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.State'),
        outputPath: 'Vpc.State',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.State', props);
    return resource.getResponseField('Vpc.State') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.VpcId'),
        outputPath: 'Vpc.VpcId',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.VpcId', props);
    return resource.getResponseField('Vpc.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.OwnerId'),
        outputPath: 'Vpc.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.OwnerId', props);
    return resource.getResponseField('Vpc.OwnerId') as unknown as string;
  }

  public get instanceTenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.InstanceTenancy'),
        outputPath: 'Vpc.InstanceTenancy',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.InstanceTenancy', props);
    return resource.getResponseField('Vpc.InstanceTenancy') as unknown as string;
  }

  public get ipv6CidrBlockAssociationSet(): shapes.Ec2VpcIpv6CidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.Ipv6CidrBlockAssociationSet'),
        outputPath: 'Vpc.Ipv6CidrBlockAssociationSet',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.Ipv6CidrBlockAssociationSet', props);
    return resource.getResponseField('Vpc.Ipv6CidrBlockAssociationSet') as unknown as shapes.Ec2VpcIpv6CidrBlockAssociation[];
  }

  public get cidrBlockAssociationSet(): shapes.Ec2VpcCidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.CidrBlockAssociationSet'),
        outputPath: 'Vpc.CidrBlockAssociationSet',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.CidrBlockAssociationSet', props);
    return resource.getResponseField('Vpc.CidrBlockAssociationSet') as unknown as shapes.Ec2VpcCidrBlockAssociation[];
  }

  public get isDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.IsDefault'),
        outputPath: 'Vpc.IsDefault',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.IsDefault', props);
    return resource.getResponseField('Vpc.IsDefault') as unknown as boolean;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDefaultVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDefaultVpc.Vpc.Tags'),
        outputPath: 'Vpc.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDefaultVpc.Vpc.Tags', props);
    return resource.getResponseField('Vpc.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateDhcpOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateDhcpOptionsRequest) {
  }

  public get dhcpOptions(): EC2ResponsesCreateDhcpOptionsDhcpOptions {
    return new EC2ResponsesCreateDhcpOptionsDhcpOptions(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateDhcpOptionsDhcpOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateDhcpOptionsRequest) {
  }

  public get dhcpConfigurations(): shapes.Ec2DhcpConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDhcpOptions.DhcpOptions.DhcpConfigurations'),
        outputPath: 'DhcpOptions.DhcpConfigurations',
        parameters: {
          DhcpConfigurations: this.__input.dhcpConfigurations,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDhcpOptions.DhcpOptions.DhcpConfigurations', props);
    return resource.getResponseField('DhcpOptions.DhcpConfigurations') as unknown as shapes.Ec2DhcpConfiguration[];
  }

  public get dhcpOptionsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDhcpOptions.DhcpOptions.DhcpOptionsId'),
        outputPath: 'DhcpOptions.DhcpOptionsId',
        parameters: {
          DhcpConfigurations: this.__input.dhcpConfigurations,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDhcpOptions.DhcpOptions.DhcpOptionsId', props);
    return resource.getResponseField('DhcpOptions.DhcpOptionsId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDhcpOptions.DhcpOptions.OwnerId'),
        outputPath: 'DhcpOptions.OwnerId',
        parameters: {
          DhcpConfigurations: this.__input.dhcpConfigurations,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDhcpOptions.DhcpOptions.OwnerId', props);
    return resource.getResponseField('DhcpOptions.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateDhcpOptions.DhcpOptions.Tags'),
        outputPath: 'DhcpOptions.Tags',
        parameters: {
          DhcpConfigurations: this.__input.dhcpConfigurations,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDhcpOptions.DhcpOptions.Tags', props);
    return resource.getResponseField('DhcpOptions.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateEgressOnlyInternetGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateEgressOnlyInternetGatewayRequest) {
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateEgressOnlyInternetGateway.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEgressOnlyInternetGateway.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

  public get egressOnlyInternetGateway(): EC2ResponsesCreateEgressOnlyInternetGatewayEgressOnlyInternetGateway {
    return new EC2ResponsesCreateEgressOnlyInternetGatewayEgressOnlyInternetGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateEgressOnlyInternetGatewayEgressOnlyInternetGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateEgressOnlyInternetGatewayRequest) {
  }

  public get attachments(): shapes.Ec2InternetGatewayAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.Attachments'),
        outputPath: 'EgressOnlyInternetGateway.Attachments',
        parameters: {
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.Attachments', props);
    return resource.getResponseField('EgressOnlyInternetGateway.Attachments') as unknown as shapes.Ec2InternetGatewayAttachment[];
  }

  public get egressOnlyInternetGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.EgressOnlyInternetGatewayId'),
        outputPath: 'EgressOnlyInternetGateway.EgressOnlyInternetGatewayId',
        parameters: {
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.EgressOnlyInternetGatewayId', props);
    return resource.getResponseField('EgressOnlyInternetGateway.EgressOnlyInternetGatewayId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.Tags'),
        outputPath: 'EgressOnlyInternetGateway.Tags',
        parameters: {
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEgressOnlyInternetGateway.EgressOnlyInternetGateway.Tags', props);
    return resource.getResponseField('EgressOnlyInternetGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateFleet {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateFleetRequest) {
  }

  public get fleetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFleet.FleetId'),
        outputPath: 'FleetId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          SpotOptions: {
            AllocationStrategy: this.__input.spotOptions?.allocationStrategy,
            MaintenanceStrategies: {
              CapacityRebalance: {
                ReplacementStrategy: this.__input.spotOptions?.maintenanceStrategies?.capacityRebalance?.replacementStrategy,
              },
            },
            InstanceInterruptionBehavior: this.__input.spotOptions?.instanceInterruptionBehavior,
            InstancePoolsToUseCount: this.__input.spotOptions?.instancePoolsToUseCount,
            SingleInstanceType: this.__input.spotOptions?.singleInstanceType,
            SingleAvailabilityZone: this.__input.spotOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.__input.spotOptions?.minTargetCapacity,
            MaxTotalPrice: this.__input.spotOptions?.maxTotalPrice,
          },
          OnDemandOptions: {
            AllocationStrategy: this.__input.onDemandOptions?.allocationStrategy,
            CapacityReservationOptions: {
              UsageStrategy: this.__input.onDemandOptions?.capacityReservationOptions?.usageStrategy,
            },
            SingleInstanceType: this.__input.onDemandOptions?.singleInstanceType,
            SingleAvailabilityZone: this.__input.onDemandOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.__input.onDemandOptions?.minTargetCapacity,
            MaxTotalPrice: this.__input.onDemandOptions?.maxTotalPrice,
          },
          ExcessCapacityTerminationPolicy: this.__input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.__input.launchTemplateConfigs,
          TargetCapacitySpecification: {
            TotalTargetCapacity: this.__input.targetCapacitySpecification.totalTargetCapacity,
            OnDemandTargetCapacity: this.__input.targetCapacitySpecification.onDemandTargetCapacity,
            SpotTargetCapacity: this.__input.targetCapacitySpecification.spotTargetCapacity,
            DefaultTargetCapacityType: this.__input.targetCapacitySpecification.defaultTargetCapacityType,
          },
          TerminateInstancesWithExpiration: this.__input.terminateInstancesWithExpiration,
          Type: this.__input.type,
          ValidFrom: this.__input.validFrom,
          ValidUntil: this.__input.validUntil,
          ReplaceUnhealthyInstances: this.__input.replaceUnhealthyInstances,
          TagSpecifications: this.__input.tagSpecifications,
          Context: this.__input.context,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateFleet.FleetId', props);
    return resource.getResponseField('FleetId') as unknown as string;
  }

  public get errors(): shapes.Ec2CreateFleetError[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFleet.Errors'),
        outputPath: 'Errors',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          SpotOptions: {
            AllocationStrategy: this.__input.spotOptions?.allocationStrategy,
            MaintenanceStrategies: {
              CapacityRebalance: {
                ReplacementStrategy: this.__input.spotOptions?.maintenanceStrategies?.capacityRebalance?.replacementStrategy,
              },
            },
            InstanceInterruptionBehavior: this.__input.spotOptions?.instanceInterruptionBehavior,
            InstancePoolsToUseCount: this.__input.spotOptions?.instancePoolsToUseCount,
            SingleInstanceType: this.__input.spotOptions?.singleInstanceType,
            SingleAvailabilityZone: this.__input.spotOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.__input.spotOptions?.minTargetCapacity,
            MaxTotalPrice: this.__input.spotOptions?.maxTotalPrice,
          },
          OnDemandOptions: {
            AllocationStrategy: this.__input.onDemandOptions?.allocationStrategy,
            CapacityReservationOptions: {
              UsageStrategy: this.__input.onDemandOptions?.capacityReservationOptions?.usageStrategy,
            },
            SingleInstanceType: this.__input.onDemandOptions?.singleInstanceType,
            SingleAvailabilityZone: this.__input.onDemandOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.__input.onDemandOptions?.minTargetCapacity,
            MaxTotalPrice: this.__input.onDemandOptions?.maxTotalPrice,
          },
          ExcessCapacityTerminationPolicy: this.__input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.__input.launchTemplateConfigs,
          TargetCapacitySpecification: {
            TotalTargetCapacity: this.__input.targetCapacitySpecification.totalTargetCapacity,
            OnDemandTargetCapacity: this.__input.targetCapacitySpecification.onDemandTargetCapacity,
            SpotTargetCapacity: this.__input.targetCapacitySpecification.spotTargetCapacity,
            DefaultTargetCapacityType: this.__input.targetCapacitySpecification.defaultTargetCapacityType,
          },
          TerminateInstancesWithExpiration: this.__input.terminateInstancesWithExpiration,
          Type: this.__input.type,
          ValidFrom: this.__input.validFrom,
          ValidUntil: this.__input.validUntil,
          ReplaceUnhealthyInstances: this.__input.replaceUnhealthyInstances,
          TagSpecifications: this.__input.tagSpecifications,
          Context: this.__input.context,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateFleet.Errors', props);
    return resource.getResponseField('Errors') as unknown as shapes.Ec2CreateFleetError[];
  }

  public get instances(): shapes.Ec2CreateFleetInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFleet.Instances'),
        outputPath: 'Instances',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          SpotOptions: {
            AllocationStrategy: this.__input.spotOptions?.allocationStrategy,
            MaintenanceStrategies: {
              CapacityRebalance: {
                ReplacementStrategy: this.__input.spotOptions?.maintenanceStrategies?.capacityRebalance?.replacementStrategy,
              },
            },
            InstanceInterruptionBehavior: this.__input.spotOptions?.instanceInterruptionBehavior,
            InstancePoolsToUseCount: this.__input.spotOptions?.instancePoolsToUseCount,
            SingleInstanceType: this.__input.spotOptions?.singleInstanceType,
            SingleAvailabilityZone: this.__input.spotOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.__input.spotOptions?.minTargetCapacity,
            MaxTotalPrice: this.__input.spotOptions?.maxTotalPrice,
          },
          OnDemandOptions: {
            AllocationStrategy: this.__input.onDemandOptions?.allocationStrategy,
            CapacityReservationOptions: {
              UsageStrategy: this.__input.onDemandOptions?.capacityReservationOptions?.usageStrategy,
            },
            SingleInstanceType: this.__input.onDemandOptions?.singleInstanceType,
            SingleAvailabilityZone: this.__input.onDemandOptions?.singleAvailabilityZone,
            MinTargetCapacity: this.__input.onDemandOptions?.minTargetCapacity,
            MaxTotalPrice: this.__input.onDemandOptions?.maxTotalPrice,
          },
          ExcessCapacityTerminationPolicy: this.__input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.__input.launchTemplateConfigs,
          TargetCapacitySpecification: {
            TotalTargetCapacity: this.__input.targetCapacitySpecification.totalTargetCapacity,
            OnDemandTargetCapacity: this.__input.targetCapacitySpecification.onDemandTargetCapacity,
            SpotTargetCapacity: this.__input.targetCapacitySpecification.spotTargetCapacity,
            DefaultTargetCapacityType: this.__input.targetCapacitySpecification.defaultTargetCapacityType,
          },
          TerminateInstancesWithExpiration: this.__input.terminateInstancesWithExpiration,
          Type: this.__input.type,
          ValidFrom: this.__input.validFrom,
          ValidUntil: this.__input.validUntil,
          ReplaceUnhealthyInstances: this.__input.replaceUnhealthyInstances,
          TagSpecifications: this.__input.tagSpecifications,
          Context: this.__input.context,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateFleet.Instances', props);
    return resource.getResponseField('Instances') as unknown as shapes.Ec2CreateFleetInstance[];
  }

}

export class EC2ResponsesCreateFlowLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateFlowLogsRequest) {
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFlowLogs.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          DeliverLogsPermissionArn: this.__input.deliverLogsPermissionArn,
          LogGroupName: this.__input.logGroupName,
          ResourceIds: this.__input.resourceIds,
          ResourceType: this.__input.resourceType,
          TrafficType: this.__input.trafficType,
          LogDestinationType: this.__input.logDestinationType,
          LogDestination: this.__input.logDestination,
          LogFormat: this.__input.logFormat,
          TagSpecifications: this.__input.tagSpecifications,
          MaxAggregationInterval: this.__input.maxAggregationInterval,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateFlowLogs.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

  public get flowLogIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFlowLogs.FlowLogIds'),
        outputPath: 'FlowLogIds',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          DeliverLogsPermissionArn: this.__input.deliverLogsPermissionArn,
          LogGroupName: this.__input.logGroupName,
          ResourceIds: this.__input.resourceIds,
          ResourceType: this.__input.resourceType,
          TrafficType: this.__input.trafficType,
          LogDestinationType: this.__input.logDestinationType,
          LogDestination: this.__input.logDestination,
          LogFormat: this.__input.logFormat,
          TagSpecifications: this.__input.tagSpecifications,
          MaxAggregationInterval: this.__input.maxAggregationInterval,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateFlowLogs.FlowLogIds', props);
    return resource.getResponseField('FlowLogIds') as unknown as string[];
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFlowLogs.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          DeliverLogsPermissionArn: this.__input.deliverLogsPermissionArn,
          LogGroupName: this.__input.logGroupName,
          ResourceIds: this.__input.resourceIds,
          ResourceType: this.__input.resourceType,
          TrafficType: this.__input.trafficType,
          LogDestinationType: this.__input.logDestinationType,
          LogDestination: this.__input.logDestination,
          LogFormat: this.__input.logFormat,
          TagSpecifications: this.__input.tagSpecifications,
          MaxAggregationInterval: this.__input.maxAggregationInterval,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateFlowLogs.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesCreateFpgaImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateFpgaImageRequest) {
  }

  public get fpgaImageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFpgaImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFpgaImage.FpgaImageId'),
        outputPath: 'FpgaImageId',
        parameters: {
          DryRun: this.__input.dryRun,
          InputStorageLocation: {
            Bucket: this.__input.inputStorageLocation.bucket,
            Key: this.__input.inputStorageLocation.key,
          },
          LogsStorageLocation: {
            Bucket: this.__input.logsStorageLocation?.bucket,
            Key: this.__input.logsStorageLocation?.key,
          },
          Description: this.__input.description,
          Name: this.__input.name,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateFpgaImage.FpgaImageId', props);
    return resource.getResponseField('FpgaImageId') as unknown as string;
  }

  public get fpgaImageGlobalId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFpgaImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateFpgaImage.FpgaImageGlobalId'),
        outputPath: 'FpgaImageGlobalId',
        parameters: {
          DryRun: this.__input.dryRun,
          InputStorageLocation: {
            Bucket: this.__input.inputStorageLocation.bucket,
            Key: this.__input.inputStorageLocation.key,
          },
          LogsStorageLocation: {
            Bucket: this.__input.logsStorageLocation?.bucket,
            Key: this.__input.logsStorageLocation?.key,
          },
          Description: this.__input.description,
          Name: this.__input.name,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateFpgaImage.FpgaImageGlobalId', props);
    return resource.getResponseField('FpgaImageGlobalId') as unknown as string;
  }

}

export class EC2ResponsesCreateImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateImageRequest) {
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          BlockDeviceMappings: this.__input.blockDeviceMappings,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          Name: this.__input.name,
          NoReboot: this.__input.noReboot,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

}

export class EC2ResponsesCreateInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInstanceEventWindowRequest) {
  }

  public get instanceEventWindow(): EC2ResponsesCreateInstanceEventWindowInstanceEventWindow {
    return new EC2ResponsesCreateInstanceEventWindowInstanceEventWindow(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateInstanceEventWindowInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInstanceEventWindowRequest) {
  }

  public get instanceEventWindowId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.InstanceEventWindowId'),
        outputPath: 'InstanceEventWindow.InstanceEventWindowId',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.InstanceEventWindowId', props);
    return resource.getResponseField('InstanceEventWindow.InstanceEventWindowId') as unknown as string;
  }

  public get timeRanges(): shapes.Ec2InstanceEventWindowTimeRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.TimeRanges'),
        outputPath: 'InstanceEventWindow.TimeRanges',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.TimeRanges', props);
    return resource.getResponseField('InstanceEventWindow.TimeRanges') as unknown as shapes.Ec2InstanceEventWindowTimeRange[];
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.Name'),
        outputPath: 'InstanceEventWindow.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.Name', props);
    return resource.getResponseField('InstanceEventWindow.Name') as unknown as string;
  }

  public get cronExpression(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.CronExpression'),
        outputPath: 'InstanceEventWindow.CronExpression',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.CronExpression', props);
    return resource.getResponseField('InstanceEventWindow.CronExpression') as unknown as string;
  }

  public get associationTarget(): EC2ResponsesCreateInstanceEventWindowInstanceEventWindowAssociationTarget {
    return new EC2ResponsesCreateInstanceEventWindowInstanceEventWindowAssociationTarget(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.State'),
        outputPath: 'InstanceEventWindow.State',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.State', props);
    return resource.getResponseField('InstanceEventWindow.State') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.Tags'),
        outputPath: 'InstanceEventWindow.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.Tags', props);
    return resource.getResponseField('InstanceEventWindow.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateInstanceEventWindowInstanceEventWindowAssociationTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInstanceEventWindowRequest) {
  }

  public get instanceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.AssociationTarget.InstanceIds'),
        outputPath: 'InstanceEventWindow.AssociationTarget.InstanceIds',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.AssociationTarget.InstanceIds', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.InstanceIds') as unknown as string[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.AssociationTarget.Tags'),
        outputPath: 'InstanceEventWindow.AssociationTarget.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.AssociationTarget.Tags', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get dedicatedHostIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceEventWindow.InstanceEventWindow.AssociationTarget.DedicatedHostIds'),
        outputPath: 'InstanceEventWindow.AssociationTarget.DedicatedHostIds',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceEventWindow.InstanceEventWindow.AssociationTarget.DedicatedHostIds', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.DedicatedHostIds') as unknown as string[];
  }

}

export class EC2ResponsesCreateInstanceExportTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInstanceExportTaskRequest) {
  }

  public get exportTask(): EC2ResponsesCreateInstanceExportTaskExportTask {
    return new EC2ResponsesCreateInstanceExportTaskExportTask(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateInstanceExportTaskExportTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInstanceExportTaskRequest) {
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.Description'),
        outputPath: 'ExportTask.Description',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.Description', props);
    return resource.getResponseField('ExportTask.Description') as unknown as string;
  }

  public get exportTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportTaskId'),
        outputPath: 'ExportTask.ExportTaskId',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.ExportTaskId', props);
    return resource.getResponseField('ExportTask.ExportTaskId') as unknown as string;
  }

  public get exportToS3Task(): EC2ResponsesCreateInstanceExportTaskExportTaskExportToS3Task {
    return new EC2ResponsesCreateInstanceExportTaskExportTaskExportToS3Task(this.__scope, this.__resources, this.__input);
  }

  public get instanceExportDetails(): EC2ResponsesCreateInstanceExportTaskExportTaskInstanceExportDetails {
    return new EC2ResponsesCreateInstanceExportTaskExportTaskInstanceExportDetails(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.State'),
        outputPath: 'ExportTask.State',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.State', props);
    return resource.getResponseField('ExportTask.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.StatusMessage'),
        outputPath: 'ExportTask.StatusMessage',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.StatusMessage', props);
    return resource.getResponseField('ExportTask.StatusMessage') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.Tags'),
        outputPath: 'ExportTask.Tags',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.Tags', props);
    return resource.getResponseField('ExportTask.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateInstanceExportTaskExportTaskExportToS3Task {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInstanceExportTaskRequest) {
  }

  public get containerFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportToS3Task.ContainerFormat'),
        outputPath: 'ExportTask.ExportToS3Task.ContainerFormat',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.ExportToS3Task.ContainerFormat', props);
    return resource.getResponseField('ExportTask.ExportToS3Task.ContainerFormat') as unknown as string;
  }

  public get diskImageFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportToS3Task.DiskImageFormat'),
        outputPath: 'ExportTask.ExportToS3Task.DiskImageFormat',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.ExportToS3Task.DiskImageFormat', props);
    return resource.getResponseField('ExportTask.ExportToS3Task.DiskImageFormat') as unknown as string;
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportToS3Task.S3Bucket'),
        outputPath: 'ExportTask.ExportToS3Task.S3Bucket',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.ExportToS3Task.S3Bucket', props);
    return resource.getResponseField('ExportTask.ExportToS3Task.S3Bucket') as unknown as string;
  }

  public get s3Key(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.ExportToS3Task.S3Key'),
        outputPath: 'ExportTask.ExportToS3Task.S3Key',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.ExportToS3Task.S3Key', props);
    return resource.getResponseField('ExportTask.ExportToS3Task.S3Key') as unknown as string;
  }

}

export class EC2ResponsesCreateInstanceExportTaskExportTaskInstanceExportDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInstanceExportTaskRequest) {
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.InstanceExportDetails.InstanceId'),
        outputPath: 'ExportTask.InstanceExportDetails.InstanceId',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.InstanceExportDetails.InstanceId', props);
    return resource.getResponseField('ExportTask.InstanceExportDetails.InstanceId') as unknown as string;
  }

  public get targetEnvironment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInstanceExportTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInstanceExportTask.ExportTask.InstanceExportDetails.TargetEnvironment'),
        outputPath: 'ExportTask.InstanceExportDetails.TargetEnvironment',
        parameters: {
          Description: this.__input.description,
          ExportToS3Task: {
            ContainerFormat: this.__input.exportToS3Task.containerFormat,
            DiskImageFormat: this.__input.exportToS3Task.diskImageFormat,
            S3Bucket: this.__input.exportToS3Task.s3Bucket,
            S3Prefix: this.__input.exportToS3Task.s3Prefix,
          },
          InstanceId: this.__input.instanceId,
          TargetEnvironment: this.__input.targetEnvironment,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInstanceExportTask.ExportTask.InstanceExportDetails.TargetEnvironment', props);
    return resource.getResponseField('ExportTask.InstanceExportDetails.TargetEnvironment') as unknown as string;
  }

}

export class EC2ResponsesCreateInternetGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInternetGatewayRequest) {
  }

  public get internetGateway(): EC2ResponsesCreateInternetGatewayInternetGateway {
    return new EC2ResponsesCreateInternetGatewayInternetGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateInternetGatewayInternetGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateInternetGatewayRequest) {
  }

  public get attachments(): shapes.Ec2InternetGatewayAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInternetGateway.InternetGateway.Attachments'),
        outputPath: 'InternetGateway.Attachments',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInternetGateway.InternetGateway.Attachments', props);
    return resource.getResponseField('InternetGateway.Attachments') as unknown as shapes.Ec2InternetGatewayAttachment[];
  }

  public get internetGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInternetGateway.InternetGateway.InternetGatewayId'),
        outputPath: 'InternetGateway.InternetGatewayId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInternetGateway.InternetGateway.InternetGatewayId', props);
    return resource.getResponseField('InternetGateway.InternetGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInternetGateway.InternetGateway.OwnerId'),
        outputPath: 'InternetGateway.OwnerId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInternetGateway.InternetGateway.OwnerId', props);
    return resource.getResponseField('InternetGateway.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateInternetGateway.InternetGateway.Tags'),
        outputPath: 'InternetGateway.Tags',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInternetGateway.InternetGateway.Tags', props);
    return resource.getResponseField('InternetGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateKeyPair {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateKeyPairRequest) {
  }

  public get keyFingerprint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.KeyFingerprint'),
        outputPath: 'KeyFingerprint',
        parameters: {
          KeyName: this.__input.keyName,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateKeyPair.KeyFingerprint', props);
    return resource.getResponseField('KeyFingerprint') as unknown as string;
  }

  public get keyMaterial(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.KeyMaterial'),
        outputPath: 'KeyMaterial',
        parameters: {
          KeyName: this.__input.keyName,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateKeyPair.KeyMaterial', props);
    return resource.getResponseField('KeyMaterial') as unknown as string;
  }

  public get keyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.KeyName'),
        outputPath: 'KeyName',
        parameters: {
          KeyName: this.__input.keyName,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateKeyPair.KeyName', props);
    return resource.getResponseField('KeyName') as unknown as string;
  }

  public get keyPairId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.KeyPairId'),
        outputPath: 'KeyPairId',
        parameters: {
          KeyName: this.__input.keyName,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateKeyPair.KeyPairId', props);
    return resource.getResponseField('KeyPairId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateKeyPair.Tags'),
        outputPath: 'Tags',
        parameters: {
          KeyName: this.__input.keyName,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateKeyPair.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateLaunchTemplate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateRequest) {
  }

  public get launchTemplate(): EC2ResponsesCreateLaunchTemplateLaunchTemplate {
    return new EC2ResponsesCreateLaunchTemplateLaunchTemplate(this.__scope, this.__resources, this.__input);
  }

  public get warning(): EC2ResponsesCreateLaunchTemplateWarning {
    return new EC2ResponsesCreateLaunchTemplateWarning(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateLaunchTemplateLaunchTemplate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateRequest) {
  }

  public get launchTemplateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.LaunchTemplateId'),
        outputPath: 'LaunchTemplate.LaunchTemplateId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateName: this.__input.launchTemplateName,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplate.LaunchTemplate.LaunchTemplateId', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateId') as unknown as string;
  }

  public get launchTemplateName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.LaunchTemplateName'),
        outputPath: 'LaunchTemplate.LaunchTemplateName',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateName: this.__input.launchTemplateName,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplate.LaunchTemplate.LaunchTemplateName', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateName') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.CreateTime'),
        outputPath: 'LaunchTemplate.CreateTime',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateName: this.__input.launchTemplateName,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplate.LaunchTemplate.CreateTime', props);
    return resource.getResponseField('LaunchTemplate.CreateTime') as unknown as string;
  }

  public get createdBy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.CreatedBy'),
        outputPath: 'LaunchTemplate.CreatedBy',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateName: this.__input.launchTemplateName,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplate.LaunchTemplate.CreatedBy', props);
    return resource.getResponseField('LaunchTemplate.CreatedBy') as unknown as string;
  }

  public get defaultVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.DefaultVersionNumber'),
        outputPath: 'LaunchTemplate.DefaultVersionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateName: this.__input.launchTemplateName,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplate.LaunchTemplate.DefaultVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.DefaultVersionNumber') as unknown as number;
  }

  public get latestVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.LatestVersionNumber'),
        outputPath: 'LaunchTemplate.LatestVersionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateName: this.__input.launchTemplateName,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplate.LaunchTemplate.LatestVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.LatestVersionNumber') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.LaunchTemplate.Tags'),
        outputPath: 'LaunchTemplate.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateName: this.__input.launchTemplateName,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplate.LaunchTemplate.Tags', props);
    return resource.getResponseField('LaunchTemplate.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateLaunchTemplateWarning {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateRequest) {
  }

  public get errors(): shapes.Ec2ValidationError[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplate.Warning.Errors'),
        outputPath: 'Warning.Errors',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateName: this.__input.launchTemplateName,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplate.Warning.Errors', props);
    return resource.getResponseField('Warning.Errors') as unknown as shapes.Ec2ValidationError[];
  }

}

export class EC2ResponsesCreateLaunchTemplateVersion {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get launchTemplateVersion(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersion {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersion(this.__scope, this.__resources, this.__input);
  }

  public get warning(): EC2ResponsesCreateLaunchTemplateVersionWarning {
    return new EC2ResponsesCreateLaunchTemplateVersionWarning(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersion {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get launchTemplateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateId') as unknown as string;
  }

  public get launchTemplateName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateName'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateName',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateName', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateName') as unknown as string;
  }

  public get versionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.VersionNumber'),
        outputPath: 'LaunchTemplateVersion.VersionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.VersionNumber', props);
    return resource.getResponseField('LaunchTemplateVersion.VersionNumber') as unknown as number;
  }

  public get versionDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.VersionDescription'),
        outputPath: 'LaunchTemplateVersion.VersionDescription',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.VersionDescription', props);
    return resource.getResponseField('LaunchTemplateVersion.VersionDescription') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.CreateTime'),
        outputPath: 'LaunchTemplateVersion.CreateTime',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.CreateTime', props);
    return resource.getResponseField('LaunchTemplateVersion.CreateTime') as unknown as string;
  }

  public get createdBy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.CreatedBy'),
        outputPath: 'LaunchTemplateVersion.CreatedBy',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.CreatedBy', props);
    return resource.getResponseField('LaunchTemplateVersion.CreatedBy') as unknown as string;
  }

  public get defaultVersion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.DefaultVersion'),
        outputPath: 'LaunchTemplateVersion.DefaultVersion',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.DefaultVersion', props);
    return resource.getResponseField('LaunchTemplateVersion.DefaultVersion') as unknown as boolean;
  }

  public get launchTemplateData(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateData {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateData(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateData {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get kernelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.KernelId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.KernelId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.KernelId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.KernelId') as unknown as string;
  }

  public get ebsOptimized(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.EbsOptimized',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.EbsOptimized') as unknown as boolean;
  }

  public get iamInstanceProfile(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataIamInstanceProfile {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataIamInstanceProfile(this.__scope, this.__resources, this.__input);
  }

  public get blockDeviceMappings(): shapes.Ec2LaunchTemplateBlockDeviceMapping[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings') as unknown as shapes.Ec2LaunchTemplateBlockDeviceMapping[];
  }

  public get networkInterfaces(): shapes.Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces') as unknown as shapes.Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[];
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ImageId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.ImageId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ImageId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.ImageId') as unknown as string;
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceType'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceType',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceType', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceType') as unknown as string;
  }

  public get keyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.KeyName'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.KeyName',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.KeyName', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.KeyName') as unknown as string;
  }

  public get monitoring(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMonitoring {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMonitoring(this.__scope, this.__resources, this.__input);
  }

  public get placement(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataPlacement {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataPlacement(this.__scope, this.__resources, this.__input);
  }

  public get ramDiskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.RamDiskId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.RamDiskId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.RamDiskId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.RamDiskId') as unknown as string;
  }

  public get disableApiTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination') as unknown as boolean;
  }

  public get instanceInitiatedShutdownBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior') as unknown as string;
  }

  public get userData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.UserData'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.UserData',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.UserData', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.UserData') as unknown as string;
  }

  public get tagSpecifications(): shapes.Ec2LaunchTemplateTagSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.TagSpecifications'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.TagSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.TagSpecifications', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.TagSpecifications') as unknown as shapes.Ec2LaunchTemplateTagSpecification[];
  }

  public get elasticGpuSpecifications(): shapes.Ec2ElasticGpuSpecificationResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications') as unknown as shapes.Ec2ElasticGpuSpecificationResponse[];
  }

  public get elasticInferenceAccelerators(): shapes.Ec2LaunchTemplateElasticInferenceAcceleratorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators') as unknown as shapes.Ec2LaunchTemplateElasticInferenceAcceleratorResponse[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds') as unknown as string[];
  }

  public get securityGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.SecurityGroups',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.SecurityGroups') as unknown as string[];
  }

  public get instanceMarketOptions(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptions {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptions(this.__scope, this.__resources, this.__input);
  }

  public get creditSpecification(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCreditSpecification {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCreditSpecification(this.__scope, this.__resources, this.__input);
  }

  public get cpuOptions(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCpuOptions {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCpuOptions(this.__scope, this.__resources, this.__input);
  }

  public get capacityReservationSpecification(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecification {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecification(this.__scope, this.__resources, this.__input);
  }

  public get licenseSpecifications(): shapes.Ec2LaunchTemplateLicenseConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications') as unknown as shapes.Ec2LaunchTemplateLicenseConfiguration[];
  }

  public get hibernationOptions(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataHibernationOptions {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataHibernationOptions(this.__scope, this.__resources, this.__input);
  }

  public get metadataOptions(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMetadataOptions {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMetadataOptions(this.__scope, this.__resources, this.__input);
  }

  public get enclaveOptions(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataEnclaveOptions {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataEnclaveOptions(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataIamInstanceProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name') as unknown as string;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMonitoring {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled') as unknown as boolean;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataPlacement {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone') as unknown as string;
  }

  public get affinity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName') as unknown as string;
  }

  public get hostId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.HostId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.HostId') as unknown as string;
  }

  public get tenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy') as unknown as string;
  }

  public get spreadDomain(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain') as unknown as string;
  }

  public get hostResourceGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn') as unknown as string;
  }

  public get partitionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber') as unknown as number;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get marketType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType') as unknown as string;
  }

  public get spotOptions(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptions {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptions(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get maxPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice') as unknown as string;
  }

  public get spotInstanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType') as unknown as string;
  }

  public get blockDurationMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes') as unknown as number;
  }

  public get validUntil(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil') as unknown as string;
  }

  public get instanceInterruptionBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior') as unknown as string;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCreditSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get cpuCredits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits') as unknown as string;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCpuOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get coreCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount') as unknown as number;
  }

  public get threadsPerCore(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore') as unknown as number;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get capacityReservationPreference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference') as unknown as string;
  }

  public get capacityReservationTarget(): EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget {
    return new EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get capacityReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId') as unknown as string;
  }

  public get capacityReservationResourceGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn') as unknown as string;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataHibernationOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get configured(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured') as unknown as boolean;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataMetadataOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State') as unknown as string;
  }

  public get httpTokens(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens') as unknown as string;
  }

  public get httpPutResponseHopLimit(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit') as unknown as number;
  }

  public get httpEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint') as unknown as string;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionLaunchTemplateVersionLaunchTemplateDataEnclaveOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled'),
        outputPath: 'LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled', props);
    return resource.getResponseField('LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled') as unknown as boolean;
  }

}

export class EC2ResponsesCreateLaunchTemplateVersionWarning {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLaunchTemplateVersionRequest) {
  }

  public get errors(): shapes.Ec2ValidationError[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLaunchTemplateVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLaunchTemplateVersion.Warning.Errors'),
        outputPath: 'Warning.Errors',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          SourceVersion: this.__input.sourceVersion,
          VersionDescription: this.__input.versionDescription,
          LaunchTemplateData: {
            KernelId: this.__input.launchTemplateData.kernelId,
            EbsOptimized: this.__input.launchTemplateData.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchTemplateData.iamInstanceProfile?.arn,
              Name: this.__input.launchTemplateData.iamInstanceProfile?.name,
            },
            BlockDeviceMappings: this.__input.launchTemplateData.blockDeviceMappings,
            NetworkInterfaces: this.__input.launchTemplateData.networkInterfaces,
            ImageId: this.__input.launchTemplateData.imageId,
            InstanceType: this.__input.launchTemplateData.instanceType,
            KeyName: this.__input.launchTemplateData.keyName,
            Monitoring: {
              Enabled: this.__input.launchTemplateData.monitoring?.enabled,
            },
            Placement: {
              AvailabilityZone: this.__input.launchTemplateData.placement?.availabilityZone,
              Affinity: this.__input.launchTemplateData.placement?.affinity,
              GroupName: this.__input.launchTemplateData.placement?.groupName,
              HostId: this.__input.launchTemplateData.placement?.hostId,
              Tenancy: this.__input.launchTemplateData.placement?.tenancy,
              SpreadDomain: this.__input.launchTemplateData.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchTemplateData.placement?.hostResourceGroupArn,
              PartitionNumber: this.__input.launchTemplateData.placement?.partitionNumber,
            },
            RamDiskId: this.__input.launchTemplateData.ramDiskId,
            DisableApiTermination: this.__input.launchTemplateData.disableApiTermination,
            InstanceInitiatedShutdownBehavior: this.__input.launchTemplateData.instanceInitiatedShutdownBehavior,
            UserData: this.__input.launchTemplateData.userData,
            TagSpecifications: this.__input.launchTemplateData.tagSpecifications,
            ElasticGpuSpecifications: this.__input.launchTemplateData.elasticGpuSpecifications,
            ElasticInferenceAccelerators: this.__input.launchTemplateData.elasticInferenceAccelerators,
            SecurityGroupIds: this.__input.launchTemplateData.securityGroupIds,
            SecurityGroups: this.__input.launchTemplateData.securityGroups,
            InstanceMarketOptions: {
              MarketType: this.__input.launchTemplateData.instanceMarketOptions?.marketType,
              SpotOptions: {
                MaxPrice: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.maxPrice,
                SpotInstanceType: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.spotInstanceType,
                BlockDurationMinutes: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
                ValidUntil: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.validUntil,
                InstanceInterruptionBehavior: this.__input.launchTemplateData.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
              },
            },
            CreditSpecification: {
              CpuCredits: this.__input.launchTemplateData.creditSpecification?.cpuCredits,
            },
            CpuOptions: {
              CoreCount: this.__input.launchTemplateData.cpuOptions?.coreCount,
              ThreadsPerCore: this.__input.launchTemplateData.cpuOptions?.threadsPerCore,
            },
            CapacityReservationSpecification: {
              CapacityReservationPreference: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationPreference,
              CapacityReservationTarget: {
                CapacityReservationId: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
                CapacityReservationResourceGroupArn: this.__input.launchTemplateData.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
              },
            },
            LicenseSpecifications: this.__input.launchTemplateData.licenseSpecifications,
            HibernationOptions: {
              Configured: this.__input.launchTemplateData.hibernationOptions?.configured,
            },
            MetadataOptions: {
              HttpTokens: this.__input.launchTemplateData.metadataOptions?.httpTokens,
              HttpPutResponseHopLimit: this.__input.launchTemplateData.metadataOptions?.httpPutResponseHopLimit,
              HttpEndpoint: this.__input.launchTemplateData.metadataOptions?.httpEndpoint,
            },
            EnclaveOptions: {
              Enabled: this.__input.launchTemplateData.enclaveOptions?.enabled,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLaunchTemplateVersion.Warning.Errors', props);
    return resource.getResponseField('Warning.Errors') as unknown as shapes.Ec2ValidationError[];
  }

}

export class EC2ResponsesCreateLocalGatewayRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLocalGatewayRouteRequest) {
  }

  public get route(): EC2ResponsesCreateLocalGatewayRouteRoute {
    return new EC2ResponsesCreateLocalGatewayRouteRoute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateLocalGatewayRouteRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLocalGatewayRouteRequest) {
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
          LocalGatewayVirtualInterfaceGroupId: this.__input.localGatewayVirtualInterfaceGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get localGatewayVirtualInterfaceGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.LocalGatewayVirtualInterfaceGroupId'),
        outputPath: 'Route.LocalGatewayVirtualInterfaceGroupId',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
          LocalGatewayVirtualInterfaceGroupId: this.__input.localGatewayVirtualInterfaceGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRoute.Route.LocalGatewayVirtualInterfaceGroupId', props);
    return resource.getResponseField('Route.LocalGatewayVirtualInterfaceGroupId') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
          LocalGatewayVirtualInterfaceGroupId: this.__input.localGatewayVirtualInterfaceGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
          LocalGatewayVirtualInterfaceGroupId: this.__input.localGatewayVirtualInterfaceGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.LocalGatewayRouteTableId'),
        outputPath: 'Route.LocalGatewayRouteTableId',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
          LocalGatewayVirtualInterfaceGroupId: this.__input.localGatewayVirtualInterfaceGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRoute.Route.LocalGatewayRouteTableId', props);
    return resource.getResponseField('Route.LocalGatewayRouteTableId') as unknown as string;
  }

  public get localGatewayRouteTableArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.LocalGatewayRouteTableArn'),
        outputPath: 'Route.LocalGatewayRouteTableArn',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
          LocalGatewayVirtualInterfaceGroupId: this.__input.localGatewayVirtualInterfaceGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRoute.Route.LocalGatewayRouteTableArn', props);
    return resource.getResponseField('Route.LocalGatewayRouteTableArn') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRoute.Route.OwnerId'),
        outputPath: 'Route.OwnerId',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
          LocalGatewayVirtualInterfaceGroupId: this.__input.localGatewayVirtualInterfaceGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRoute.Route.OwnerId', props);
    return resource.getResponseField('Route.OwnerId') as unknown as string;
  }

}

export class EC2ResponsesCreateLocalGatewayRouteTableVpcAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLocalGatewayRouteTableVpcAssociationRequest) {
  }

  public get localGatewayRouteTableVpcAssociation(): EC2ResponsesCreateLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation {
    return new EC2ResponsesCreateLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateLocalGatewayRouteTableVpcAssociationRequest) {
  }

  public get localGatewayRouteTableVpcAssociationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId') as unknown as string;
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId') as unknown as string;
  }

  public get localGatewayRouteTableArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn') as unknown as string;
  }

  public get localGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayId',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.VpcId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.VpcId',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.VpcId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.OwnerId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.OwnerId',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.OwnerId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.OwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.State'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.State',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.State', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.State') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.Tags'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.Tags',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.Tags', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateManagedPrefixList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateManagedPrefixListRequest) {
  }

  public get prefixList(): EC2ResponsesCreateManagedPrefixListPrefixList {
    return new EC2ResponsesCreateManagedPrefixListPrefixList(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateManagedPrefixListPrefixList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateManagedPrefixListRequest) {
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.PrefixListId'),
        outputPath: 'PrefixList.PrefixListId',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.PrefixListId', props);
    return resource.getResponseField('PrefixList.PrefixListId') as unknown as string;
  }

  public get addressFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.AddressFamily'),
        outputPath: 'PrefixList.AddressFamily',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.AddressFamily', props);
    return resource.getResponseField('PrefixList.AddressFamily') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.State'),
        outputPath: 'PrefixList.State',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.State', props);
    return resource.getResponseField('PrefixList.State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.StateMessage'),
        outputPath: 'PrefixList.StateMessage',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.StateMessage', props);
    return resource.getResponseField('PrefixList.StateMessage') as unknown as string;
  }

  public get prefixListArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.PrefixListArn'),
        outputPath: 'PrefixList.PrefixListArn',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.PrefixListArn', props);
    return resource.getResponseField('PrefixList.PrefixListArn') as unknown as string;
  }

  public get prefixListName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.PrefixListName'),
        outputPath: 'PrefixList.PrefixListName',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.PrefixListName', props);
    return resource.getResponseField('PrefixList.PrefixListName') as unknown as string;
  }

  public get maxEntries(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.MaxEntries'),
        outputPath: 'PrefixList.MaxEntries',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.MaxEntries', props);
    return resource.getResponseField('PrefixList.MaxEntries') as unknown as number;
  }

  public get version(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.Version'),
        outputPath: 'PrefixList.Version',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.Version', props);
    return resource.getResponseField('PrefixList.Version') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.Tags'),
        outputPath: 'PrefixList.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.Tags', props);
    return resource.getResponseField('PrefixList.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateManagedPrefixList.PrefixList.OwnerId'),
        outputPath: 'PrefixList.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListName: this.__input.prefixListName,
          Entries: this.__input.entries,
          MaxEntries: this.__input.maxEntries,
          TagSpecifications: this.__input.tagSpecifications,
          AddressFamily: this.__input.addressFamily,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateManagedPrefixList.PrefixList.OwnerId', props);
    return resource.getResponseField('PrefixList.OwnerId') as unknown as string;
  }

}

export class EC2ResponsesCreateNatGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNatGatewayRequest) {
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

  public get natGateway(): EC2ResponsesCreateNatGatewayNatGateway {
    return new EC2ResponsesCreateNatGatewayNatGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateNatGatewayNatGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNatGatewayRequest) {
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.CreateTime'),
        outputPath: 'NatGateway.CreateTime',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.CreateTime', props);
    return resource.getResponseField('NatGateway.CreateTime') as unknown as string;
  }

  public get deleteTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.DeleteTime'),
        outputPath: 'NatGateway.DeleteTime',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.DeleteTime', props);
    return resource.getResponseField('NatGateway.DeleteTime') as unknown as string;
  }

  public get failureCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.FailureCode'),
        outputPath: 'NatGateway.FailureCode',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.FailureCode', props);
    return resource.getResponseField('NatGateway.FailureCode') as unknown as string;
  }

  public get failureMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.FailureMessage'),
        outputPath: 'NatGateway.FailureMessage',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.FailureMessage', props);
    return resource.getResponseField('NatGateway.FailureMessage') as unknown as string;
  }

  public get natGatewayAddresses(): shapes.Ec2NatGatewayAddress[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.NatGatewayAddresses'),
        outputPath: 'NatGateway.NatGatewayAddresses',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.NatGatewayAddresses', props);
    return resource.getResponseField('NatGateway.NatGatewayAddresses') as unknown as shapes.Ec2NatGatewayAddress[];
  }

  public get natGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.NatGatewayId'),
        outputPath: 'NatGateway.NatGatewayId',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.NatGatewayId', props);
    return resource.getResponseField('NatGateway.NatGatewayId') as unknown as string;
  }

  public get provisionedBandwidth(): EC2ResponsesCreateNatGatewayNatGatewayProvisionedBandwidth {
    return new EC2ResponsesCreateNatGatewayNatGatewayProvisionedBandwidth(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.State'),
        outputPath: 'NatGateway.State',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.State', props);
    return resource.getResponseField('NatGateway.State') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.SubnetId'),
        outputPath: 'NatGateway.SubnetId',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.SubnetId', props);
    return resource.getResponseField('NatGateway.SubnetId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.VpcId'),
        outputPath: 'NatGateway.VpcId',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.VpcId', props);
    return resource.getResponseField('NatGateway.VpcId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.Tags'),
        outputPath: 'NatGateway.Tags',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.Tags', props);
    return resource.getResponseField('NatGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get connectivityType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ConnectivityType'),
        outputPath: 'NatGateway.ConnectivityType',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.ConnectivityType', props);
    return resource.getResponseField('NatGateway.ConnectivityType') as unknown as string;
  }

}

export class EC2ResponsesCreateNatGatewayNatGatewayProvisionedBandwidth {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNatGatewayRequest) {
  }

  public get provisionTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.ProvisionTime'),
        outputPath: 'NatGateway.ProvisionedBandwidth.ProvisionTime',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.ProvisionTime', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.ProvisionTime') as unknown as string;
  }

  public get provisioned(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.Provisioned'),
        outputPath: 'NatGateway.ProvisionedBandwidth.Provisioned',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.Provisioned', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.Provisioned') as unknown as string;
  }

  public get requestTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.RequestTime'),
        outputPath: 'NatGateway.ProvisionedBandwidth.RequestTime',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.RequestTime', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.RequestTime') as unknown as string;
  }

  public get requested(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.Requested'),
        outputPath: 'NatGateway.ProvisionedBandwidth.Requested',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.Requested', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.Requested') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNatGateway.NatGateway.ProvisionedBandwidth.Status'),
        outputPath: 'NatGateway.ProvisionedBandwidth.Status',
        parameters: {
          AllocationId: this.__input.allocationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ConnectivityType: this.__input.connectivityType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNatGateway.NatGateway.ProvisionedBandwidth.Status', props);
    return resource.getResponseField('NatGateway.ProvisionedBandwidth.Status') as unknown as string;
  }

}

export class EC2ResponsesCreateNetworkAcl {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkAclRequest) {
  }

  public get networkAcl(): EC2ResponsesCreateNetworkAclNetworkAcl {
    return new EC2ResponsesCreateNetworkAclNetworkAcl(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateNetworkAclNetworkAcl {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkAclRequest) {
  }

  public get associations(): shapes.Ec2NetworkAclAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.Associations'),
        outputPath: 'NetworkAcl.Associations',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkAcl.NetworkAcl.Associations', props);
    return resource.getResponseField('NetworkAcl.Associations') as unknown as shapes.Ec2NetworkAclAssociation[];
  }

  public get entries(): shapes.Ec2NetworkAclEntry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.Entries'),
        outputPath: 'NetworkAcl.Entries',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkAcl.NetworkAcl.Entries', props);
    return resource.getResponseField('NetworkAcl.Entries') as unknown as shapes.Ec2NetworkAclEntry[];
  }

  public get isDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.IsDefault'),
        outputPath: 'NetworkAcl.IsDefault',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkAcl.NetworkAcl.IsDefault', props);
    return resource.getResponseField('NetworkAcl.IsDefault') as unknown as boolean;
  }

  public get networkAclId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.NetworkAclId'),
        outputPath: 'NetworkAcl.NetworkAclId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkAcl.NetworkAcl.NetworkAclId', props);
    return resource.getResponseField('NetworkAcl.NetworkAclId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.Tags'),
        outputPath: 'NetworkAcl.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkAcl.NetworkAcl.Tags', props);
    return resource.getResponseField('NetworkAcl.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.VpcId'),
        outputPath: 'NetworkAcl.VpcId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkAcl.NetworkAcl.VpcId', props);
    return resource.getResponseField('NetworkAcl.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkAcl',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkAcl.NetworkAcl.OwnerId'),
        outputPath: 'NetworkAcl.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkAcl.NetworkAcl.OwnerId', props);
    return resource.getResponseField('NetworkAcl.OwnerId') as unknown as string;
  }

}

export class EC2ResponsesCreateNetworkInsightsPath {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInsightsPathRequest) {
  }

  public get networkInsightsPath(): EC2ResponsesCreateNetworkInsightsPathNetworkInsightsPath {
    return new EC2ResponsesCreateNetworkInsightsPathNetworkInsightsPath(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateNetworkInsightsPathNetworkInsightsPath {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInsightsPathRequest) {
  }

  public get networkInsightsPathId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.NetworkInsightsPathId'),
        outputPath: 'NetworkInsightsPath.NetworkInsightsPathId',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.NetworkInsightsPathId', props);
    return resource.getResponseField('NetworkInsightsPath.NetworkInsightsPathId') as unknown as string;
  }

  public get networkInsightsPathArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.NetworkInsightsPathArn'),
        outputPath: 'NetworkInsightsPath.NetworkInsightsPathArn',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.NetworkInsightsPathArn', props);
    return resource.getResponseField('NetworkInsightsPath.NetworkInsightsPathArn') as unknown as string;
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.CreatedDate'),
        outputPath: 'NetworkInsightsPath.CreatedDate',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.CreatedDate', props);
    return resource.getResponseField('NetworkInsightsPath.CreatedDate') as unknown as string;
  }

  public get source(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.Source'),
        outputPath: 'NetworkInsightsPath.Source',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.Source', props);
    return resource.getResponseField('NetworkInsightsPath.Source') as unknown as string;
  }

  public get destination(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.Destination'),
        outputPath: 'NetworkInsightsPath.Destination',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.Destination', props);
    return resource.getResponseField('NetworkInsightsPath.Destination') as unknown as string;
  }

  public get sourceIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.SourceIp'),
        outputPath: 'NetworkInsightsPath.SourceIp',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.SourceIp', props);
    return resource.getResponseField('NetworkInsightsPath.SourceIp') as unknown as string;
  }

  public get destinationIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.DestinationIp'),
        outputPath: 'NetworkInsightsPath.DestinationIp',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.DestinationIp', props);
    return resource.getResponseField('NetworkInsightsPath.DestinationIp') as unknown as string;
  }

  public get protocol(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.Protocol'),
        outputPath: 'NetworkInsightsPath.Protocol',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.Protocol', props);
    return resource.getResponseField('NetworkInsightsPath.Protocol') as unknown as string;
  }

  public get destinationPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.DestinationPort'),
        outputPath: 'NetworkInsightsPath.DestinationPort',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.DestinationPort', props);
    return resource.getResponseField('NetworkInsightsPath.DestinationPort') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInsightsPath.NetworkInsightsPath.Tags'),
        outputPath: 'NetworkInsightsPath.Tags',
        parameters: {
          SourceIp: this.__input.sourceIp,
          DestinationIp: this.__input.destinationIp,
          Source: this.__input.source,
          Destination: this.__input.destination,
          Protocol: this.__input.protocol,
          DestinationPort: this.__input.destinationPort,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInsightsPath.NetworkInsightsPath.Tags', props);
    return resource.getResponseField('NetworkInsightsPath.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateNetworkInterface {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInterfaceRequest) {
  }

  public get networkInterface(): EC2ResponsesCreateNetworkInterfaceNetworkInterface {
    return new EC2ResponsesCreateNetworkInterfaceNetworkInterface(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesCreateNetworkInterfaceNetworkInterface {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInterfaceRequest) {
  }

  public get association(): EC2ResponsesCreateNetworkInterfaceNetworkInterfaceAssociation {
    return new EC2ResponsesCreateNetworkInterfaceNetworkInterfaceAssociation(this.__scope, this.__resources, this.__input);
  }

  public get attachment(): EC2ResponsesCreateNetworkInterfaceNetworkInterfaceAttachment {
    return new EC2ResponsesCreateNetworkInterfaceNetworkInterfaceAttachment(this.__scope, this.__resources, this.__input);
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.AvailabilityZone'),
        outputPath: 'NetworkInterface.AvailabilityZone',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.AvailabilityZone', props);
    return resource.getResponseField('NetworkInterface.AvailabilityZone') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Description'),
        outputPath: 'NetworkInterface.Description',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Description', props);
    return resource.getResponseField('NetworkInterface.Description') as unknown as string;
  }

  public get groups(): shapes.Ec2GroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Groups'),
        outputPath: 'NetworkInterface.Groups',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Groups', props);
    return resource.getResponseField('NetworkInterface.Groups') as unknown as shapes.Ec2GroupIdentifier[];
  }

  public get interfaceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.InterfaceType'),
        outputPath: 'NetworkInterface.InterfaceType',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.InterfaceType', props);
    return resource.getResponseField('NetworkInterface.InterfaceType') as unknown as string;
  }

  public get ipv6Addresses(): shapes.Ec2NetworkInterfaceIpv6Address[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Ipv6Addresses'),
        outputPath: 'NetworkInterface.Ipv6Addresses',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Ipv6Addresses', props);
    return resource.getResponseField('NetworkInterface.Ipv6Addresses') as unknown as shapes.Ec2NetworkInterfaceIpv6Address[];
  }

  public get macAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.MacAddress'),
        outputPath: 'NetworkInterface.MacAddress',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.MacAddress', props);
    return resource.getResponseField('NetworkInterface.MacAddress') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.NetworkInterfaceId'),
        outputPath: 'NetworkInterface.NetworkInterfaceId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterface.NetworkInterfaceId') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.OutpostArn'),
        outputPath: 'NetworkInterface.OutpostArn',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.OutpostArn', props);
    return resource.getResponseField('NetworkInterface.OutpostArn') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.OwnerId'),
        outputPath: 'NetworkInterface.OwnerId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.OwnerId', props);
    return resource.getResponseField('NetworkInterface.OwnerId') as unknown as string;
  }

  public get privateDnsName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.PrivateDnsName'),
        outputPath: 'NetworkInterface.PrivateDnsName',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.PrivateDnsName', props);
    return resource.getResponseField('NetworkInterface.PrivateDnsName') as unknown as string;
  }

  public get privateIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.PrivateIpAddress'),
        outputPath: 'NetworkInterface.PrivateIpAddress',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.PrivateIpAddress', props);
    return resource.getResponseField('NetworkInterface.PrivateIpAddress') as unknown as string;
  }

  public get privateIpAddresses(): shapes.Ec2NetworkInterfacePrivateIpAddress[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.PrivateIpAddresses'),
        outputPath: 'NetworkInterface.PrivateIpAddresses',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.PrivateIpAddresses', props);
    return resource.getResponseField('NetworkInterface.PrivateIpAddresses') as unknown as shapes.Ec2NetworkInterfacePrivateIpAddress[];
  }

  public get ipv4Prefixes(): shapes.Ec2Ipv4PrefixSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Ipv4Prefixes'),
        outputPath: 'NetworkInterface.Ipv4Prefixes',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Ipv4Prefixes', props);
    return resource.getResponseField('NetworkInterface.Ipv4Prefixes') as unknown as shapes.Ec2Ipv4PrefixSpecification[];
  }

  public get ipv6Prefixes(): shapes.Ec2Ipv6PrefixSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Ipv6Prefixes'),
        outputPath: 'NetworkInterface.Ipv6Prefixes',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Ipv6Prefixes', props);
    return resource.getResponseField('NetworkInterface.Ipv6Prefixes') as unknown as shapes.Ec2Ipv6PrefixSpecification[];
  }

  public get requesterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.RequesterId'),
        outputPath: 'NetworkInterface.RequesterId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.RequesterId', props);
    return resource.getResponseField('NetworkInterface.RequesterId') as unknown as string;
  }

  public get requesterManaged(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.RequesterManaged'),
        outputPath: 'NetworkInterface.RequesterManaged',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.RequesterManaged', props);
    return resource.getResponseField('NetworkInterface.RequesterManaged') as unknown as boolean;
  }

  public get sourceDestCheck(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.SourceDestCheck'),
        outputPath: 'NetworkInterface.SourceDestCheck',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.SourceDestCheck', props);
    return resource.getResponseField('NetworkInterface.SourceDestCheck') as unknown as boolean;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Status'),
        outputPath: 'NetworkInterface.Status',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Status', props);
    return resource.getResponseField('NetworkInterface.Status') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.SubnetId'),
        outputPath: 'NetworkInterface.SubnetId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.SubnetId', props);
    return resource.getResponseField('NetworkInterface.SubnetId') as unknown as string;
  }

  public get tagSet(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.TagSet'),
        outputPath: 'NetworkInterface.TagSet',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.TagSet', props);
    return resource.getResponseField('NetworkInterface.TagSet') as unknown as shapes.Ec2Tag[];
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.VpcId'),
        outputPath: 'NetworkInterface.VpcId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.VpcId', props);
    return resource.getResponseField('NetworkInterface.VpcId') as unknown as string;
  }

}

export class EC2ResponsesCreateNetworkInterfaceNetworkInterfaceAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInterfaceRequest) {
  }

  public get allocationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.AllocationId'),
        outputPath: 'NetworkInterface.Association.AllocationId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Association.AllocationId', props);
    return resource.getResponseField('NetworkInterface.Association.AllocationId') as unknown as string;
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.AssociationId'),
        outputPath: 'NetworkInterface.Association.AssociationId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Association.AssociationId', props);
    return resource.getResponseField('NetworkInterface.Association.AssociationId') as unknown as string;
  }

  public get ipOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.IpOwnerId'),
        outputPath: 'NetworkInterface.Association.IpOwnerId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Association.IpOwnerId', props);
    return resource.getResponseField('NetworkInterface.Association.IpOwnerId') as unknown as string;
  }

  public get publicDnsName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.PublicDnsName'),
        outputPath: 'NetworkInterface.Association.PublicDnsName',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Association.PublicDnsName', props);
    return resource.getResponseField('NetworkInterface.Association.PublicDnsName') as unknown as string;
  }

  public get publicIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.PublicIp'),
        outputPath: 'NetworkInterface.Association.PublicIp',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Association.PublicIp', props);
    return resource.getResponseField('NetworkInterface.Association.PublicIp') as unknown as string;
  }

  public get customerOwnedIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.CustomerOwnedIp'),
        outputPath: 'NetworkInterface.Association.CustomerOwnedIp',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Association.CustomerOwnedIp', props);
    return resource.getResponseField('NetworkInterface.Association.CustomerOwnedIp') as unknown as string;
  }

  public get carrierIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Association.CarrierIp'),
        outputPath: 'NetworkInterface.Association.CarrierIp',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Association.CarrierIp', props);
    return resource.getResponseField('NetworkInterface.Association.CarrierIp') as unknown as string;
  }

}

export class EC2ResponsesCreateNetworkInterfaceNetworkInterfaceAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInterfaceRequest) {
  }

  public get attachTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.AttachTime'),
        outputPath: 'NetworkInterface.Attachment.AttachTime',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Attachment.AttachTime', props);
    return resource.getResponseField('NetworkInterface.Attachment.AttachTime') as unknown as string;
  }

  public get attachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.AttachmentId'),
        outputPath: 'NetworkInterface.Attachment.AttachmentId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Attachment.AttachmentId', props);
    return resource.getResponseField('NetworkInterface.Attachment.AttachmentId') as unknown as string;
  }

  public get deleteOnTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.DeleteOnTermination'),
        outputPath: 'NetworkInterface.Attachment.DeleteOnTermination',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Attachment.DeleteOnTermination', props);
    return resource.getResponseField('NetworkInterface.Attachment.DeleteOnTermination') as unknown as boolean;
  }

  public get deviceIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.DeviceIndex'),
        outputPath: 'NetworkInterface.Attachment.DeviceIndex',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Attachment.DeviceIndex', props);
    return resource.getResponseField('NetworkInterface.Attachment.DeviceIndex') as unknown as number;
  }

  public get networkCardIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.NetworkCardIndex'),
        outputPath: 'NetworkInterface.Attachment.NetworkCardIndex',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Attachment.NetworkCardIndex', props);
    return resource.getResponseField('NetworkInterface.Attachment.NetworkCardIndex') as unknown as number;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.InstanceId'),
        outputPath: 'NetworkInterface.Attachment.InstanceId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Attachment.InstanceId', props);
    return resource.getResponseField('NetworkInterface.Attachment.InstanceId') as unknown as string;
  }

  public get instanceOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.InstanceOwnerId'),
        outputPath: 'NetworkInterface.Attachment.InstanceOwnerId',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Attachment.InstanceOwnerId', props);
    return resource.getResponseField('NetworkInterface.Attachment.InstanceOwnerId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterface.NetworkInterface.Attachment.Status'),
        outputPath: 'NetworkInterface.Attachment.Status',
        parameters: {
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Groups: this.__input.groups,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          PrivateIpAddress: this.__input.privateIpAddress,
          PrivateIpAddresses: this.__input.privateIpAddresses,
          SecondaryPrivateIpAddressCount: this.__input.secondaryPrivateIpAddressCount,
          Ipv4Prefixes: this.__input.ipv4Prefixes,
          Ipv4PrefixCount: this.__input.ipv4PrefixCount,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          Ipv6PrefixCount: this.__input.ipv6PrefixCount,
          InterfaceType: this.__input.interfaceType,
          SubnetId: this.__input.subnetId,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterface.NetworkInterface.Attachment.Status', props);
    return resource.getResponseField('NetworkInterface.Attachment.Status') as unknown as string;
  }

}

export class EC2ResponsesCreateNetworkInterfacePermission {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInterfacePermissionRequest) {
  }

  public get interfacePermission(): EC2ResponsesCreateNetworkInterfacePermissionInterfacePermission {
    return new EC2ResponsesCreateNetworkInterfacePermissionInterfacePermission(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateNetworkInterfacePermissionInterfacePermission {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInterfacePermissionRequest) {
  }

  public get networkInterfacePermissionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.NetworkInterfacePermissionId'),
        outputPath: 'InterfacePermission.NetworkInterfacePermissionId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          AwsAccountId: this.__input.awsAccountId,
          AwsService: this.__input.awsService,
          Permission: this.__input.permission,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterfacePermission.InterfacePermission.NetworkInterfacePermissionId', props);
    return resource.getResponseField('InterfacePermission.NetworkInterfacePermissionId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.NetworkInterfaceId'),
        outputPath: 'InterfacePermission.NetworkInterfaceId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          AwsAccountId: this.__input.awsAccountId,
          AwsService: this.__input.awsService,
          Permission: this.__input.permission,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterfacePermission.InterfacePermission.NetworkInterfaceId', props);
    return resource.getResponseField('InterfacePermission.NetworkInterfaceId') as unknown as string;
  }

  public get awsAccountId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.AwsAccountId'),
        outputPath: 'InterfacePermission.AwsAccountId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          AwsAccountId: this.__input.awsAccountId,
          AwsService: this.__input.awsService,
          Permission: this.__input.permission,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterfacePermission.InterfacePermission.AwsAccountId', props);
    return resource.getResponseField('InterfacePermission.AwsAccountId') as unknown as string;
  }

  public get awsService(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.AwsService'),
        outputPath: 'InterfacePermission.AwsService',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          AwsAccountId: this.__input.awsAccountId,
          AwsService: this.__input.awsService,
          Permission: this.__input.permission,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterfacePermission.InterfacePermission.AwsService', props);
    return resource.getResponseField('InterfacePermission.AwsService') as unknown as string;
  }

  public get permission(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.Permission'),
        outputPath: 'InterfacePermission.Permission',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          AwsAccountId: this.__input.awsAccountId,
          AwsService: this.__input.awsService,
          Permission: this.__input.permission,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterfacePermission.InterfacePermission.Permission', props);
    return resource.getResponseField('InterfacePermission.Permission') as unknown as string;
  }

  public get permissionState(): EC2ResponsesCreateNetworkInterfacePermissionInterfacePermissionPermissionState {
    return new EC2ResponsesCreateNetworkInterfacePermissionInterfacePermissionPermissionState(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateNetworkInterfacePermissionInterfacePermissionPermissionState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateNetworkInterfacePermissionRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.PermissionState.State'),
        outputPath: 'InterfacePermission.PermissionState.State',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          AwsAccountId: this.__input.awsAccountId,
          AwsService: this.__input.awsService,
          Permission: this.__input.permission,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterfacePermission.InterfacePermission.PermissionState.State', props);
    return resource.getResponseField('InterfacePermission.PermissionState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateNetworkInterfacePermission.InterfacePermission.PermissionState.StatusMessage'),
        outputPath: 'InterfacePermission.PermissionState.StatusMessage',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          AwsAccountId: this.__input.awsAccountId,
          AwsService: this.__input.awsService,
          Permission: this.__input.permission,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateNetworkInterfacePermission.InterfacePermission.PermissionState.StatusMessage', props);
    return resource.getResponseField('InterfacePermission.PermissionState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesCreatePlacementGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreatePlacementGroupRequest) {
  }

  public get placementGroup(): EC2ResponsesCreatePlacementGroupPlacementGroup {
    return new EC2ResponsesCreatePlacementGroupPlacementGroup(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreatePlacementGroupPlacementGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreatePlacementGroupRequest) {
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.GroupName'),
        outputPath: 'PlacementGroup.GroupName',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupName: this.__input.groupName,
          Strategy: this.__input.strategy,
          PartitionCount: this.__input.partitionCount,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePlacementGroup.PlacementGroup.GroupName', props);
    return resource.getResponseField('PlacementGroup.GroupName') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.State'),
        outputPath: 'PlacementGroup.State',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupName: this.__input.groupName,
          Strategy: this.__input.strategy,
          PartitionCount: this.__input.partitionCount,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePlacementGroup.PlacementGroup.State', props);
    return resource.getResponseField('PlacementGroup.State') as unknown as string;
  }

  public get strategy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.Strategy'),
        outputPath: 'PlacementGroup.Strategy',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupName: this.__input.groupName,
          Strategy: this.__input.strategy,
          PartitionCount: this.__input.partitionCount,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePlacementGroup.PlacementGroup.Strategy', props);
    return resource.getResponseField('PlacementGroup.Strategy') as unknown as string;
  }

  public get partitionCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.PartitionCount'),
        outputPath: 'PlacementGroup.PartitionCount',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupName: this.__input.groupName,
          Strategy: this.__input.strategy,
          PartitionCount: this.__input.partitionCount,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePlacementGroup.PlacementGroup.PartitionCount', props);
    return resource.getResponseField('PlacementGroup.PartitionCount') as unknown as number;
  }

  public get groupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.GroupId'),
        outputPath: 'PlacementGroup.GroupId',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupName: this.__input.groupName,
          Strategy: this.__input.strategy,
          PartitionCount: this.__input.partitionCount,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePlacementGroup.PlacementGroup.GroupId', props);
    return resource.getResponseField('PlacementGroup.GroupId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPlacementGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreatePlacementGroup.PlacementGroup.Tags'),
        outputPath: 'PlacementGroup.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupName: this.__input.groupName,
          Strategy: this.__input.strategy,
          PartitionCount: this.__input.partitionCount,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePlacementGroup.PlacementGroup.Tags', props);
    return resource.getResponseField('PlacementGroup.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateReplaceRootVolumeTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateReplaceRootVolumeTaskRequest) {
  }

  public get replaceRootVolumeTask(): EC2ResponsesCreateReplaceRootVolumeTaskReplaceRootVolumeTask {
    return new EC2ResponsesCreateReplaceRootVolumeTaskReplaceRootVolumeTask(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateReplaceRootVolumeTaskReplaceRootVolumeTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateReplaceRootVolumeTaskRequest) {
  }

  public get replaceRootVolumeTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReplaceRootVolumeTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.ReplaceRootVolumeTaskId'),
        outputPath: 'ReplaceRootVolumeTask.ReplaceRootVolumeTaskId',
        parameters: {
          InstanceId: this.__input.instanceId,
          SnapshotId: this.__input.snapshotId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.ReplaceRootVolumeTaskId', props);
    return resource.getResponseField('ReplaceRootVolumeTask.ReplaceRootVolumeTaskId') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReplaceRootVolumeTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.InstanceId'),
        outputPath: 'ReplaceRootVolumeTask.InstanceId',
        parameters: {
          InstanceId: this.__input.instanceId,
          SnapshotId: this.__input.snapshotId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.InstanceId', props);
    return resource.getResponseField('ReplaceRootVolumeTask.InstanceId') as unknown as string;
  }

  public get taskState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReplaceRootVolumeTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.TaskState'),
        outputPath: 'ReplaceRootVolumeTask.TaskState',
        parameters: {
          InstanceId: this.__input.instanceId,
          SnapshotId: this.__input.snapshotId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.TaskState', props);
    return resource.getResponseField('ReplaceRootVolumeTask.TaskState') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReplaceRootVolumeTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.StartTime'),
        outputPath: 'ReplaceRootVolumeTask.StartTime',
        parameters: {
          InstanceId: this.__input.instanceId,
          SnapshotId: this.__input.snapshotId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.StartTime', props);
    return resource.getResponseField('ReplaceRootVolumeTask.StartTime') as unknown as string;
  }

  public get completeTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReplaceRootVolumeTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.CompleteTime'),
        outputPath: 'ReplaceRootVolumeTask.CompleteTime',
        parameters: {
          InstanceId: this.__input.instanceId,
          SnapshotId: this.__input.snapshotId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.CompleteTime', props);
    return resource.getResponseField('ReplaceRootVolumeTask.CompleteTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReplaceRootVolumeTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.Tags'),
        outputPath: 'ReplaceRootVolumeTask.Tags',
        parameters: {
          InstanceId: this.__input.instanceId,
          SnapshotId: this.__input.snapshotId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReplaceRootVolumeTask.ReplaceRootVolumeTask.Tags', props);
    return resource.getResponseField('ReplaceRootVolumeTask.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateReservedInstancesListing {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateReservedInstancesListingRequest) {
  }

  public get reservedInstancesListings(): shapes.Ec2ReservedInstancesListing[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createReservedInstancesListing',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateReservedInstancesListing.ReservedInstancesListings'),
        outputPath: 'ReservedInstancesListings',
        parameters: {
          ClientToken: this.__input.clientToken,
          InstanceCount: this.__input.instanceCount,
          PriceSchedules: this.__input.priceSchedules,
          ReservedInstancesId: this.__input.reservedInstancesId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateReservedInstancesListing.ReservedInstancesListings', props);
    return resource.getResponseField('ReservedInstancesListings') as unknown as shapes.Ec2ReservedInstancesListing[];
  }

}

export class EC2ResponsesCreateRestoreImageTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateRestoreImageTaskRequest) {
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRestoreImageTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRestoreImageTask.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          Bucket: this.__input.bucket,
          ObjectKey: this.__input.objectKey,
          Name: this.__input.name,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRestoreImageTask.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

}

export class EC2ResponsesCreateRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateRouteRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRoute.Return'),
        outputPath: 'Return',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          DestinationIpv6CidrBlock: this.__input.destinationIpv6CidrBlock,
          DestinationPrefixListId: this.__input.destinationPrefixListId,
          DryRun: this.__input.dryRun,
          VpcEndpointId: this.__input.vpcEndpointId,
          EgressOnlyInternetGatewayId: this.__input.egressOnlyInternetGatewayId,
          GatewayId: this.__input.gatewayId,
          InstanceId: this.__input.instanceId,
          NatGatewayId: this.__input.natGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          LocalGatewayId: this.__input.localGatewayId,
          CarrierGatewayId: this.__input.carrierGatewayId,
          NetworkInterfaceId: this.__input.networkInterfaceId,
          RouteTableId: this.__input.routeTableId,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRoute.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesCreateRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateRouteTableRequest) {
  }

  public get routeTable(): EC2ResponsesCreateRouteTableRouteTable {
    return new EC2ResponsesCreateRouteTableRouteTable(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateRouteTableRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateRouteTableRequest) {
  }

  public get associations(): shapes.Ec2RouteTableAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.Associations'),
        outputPath: 'RouteTable.Associations',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRouteTable.RouteTable.Associations', props);
    return resource.getResponseField('RouteTable.Associations') as unknown as shapes.Ec2RouteTableAssociation[];
  }

  public get propagatingVgws(): shapes.Ec2PropagatingVgw[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.PropagatingVgws'),
        outputPath: 'RouteTable.PropagatingVgws',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRouteTable.RouteTable.PropagatingVgws', props);
    return resource.getResponseField('RouteTable.PropagatingVgws') as unknown as shapes.Ec2PropagatingVgw[];
  }

  public get routeTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.RouteTableId'),
        outputPath: 'RouteTable.RouteTableId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRouteTable.RouteTable.RouteTableId', props);
    return resource.getResponseField('RouteTable.RouteTableId') as unknown as string;
  }

  public get routes(): shapes.Ec2Route[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.Routes'),
        outputPath: 'RouteTable.Routes',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRouteTable.RouteTable.Routes', props);
    return resource.getResponseField('RouteTable.Routes') as unknown as shapes.Ec2Route[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.Tags'),
        outputPath: 'RouteTable.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRouteTable.RouteTable.Tags', props);
    return resource.getResponseField('RouteTable.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.VpcId'),
        outputPath: 'RouteTable.VpcId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRouteTable.RouteTable.VpcId', props);
    return resource.getResponseField('RouteTable.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateRouteTable.RouteTable.OwnerId'),
        outputPath: 'RouteTable.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateRouteTable.RouteTable.OwnerId', props);
    return resource.getResponseField('RouteTable.OwnerId') as unknown as string;
  }

}

export class EC2ResponsesCreateSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSecurityGroupRequest) {
  }

  public get groupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSecurityGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSecurityGroup.GroupId'),
        outputPath: 'GroupId',
        parameters: {
          Description: this.__input.description,
          GroupName: this.__input.groupName,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSecurityGroup.GroupId', props);
    return resource.getResponseField('GroupId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSecurityGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSecurityGroup.Tags'),
        outputPath: 'Tags',
        parameters: {
          Description: this.__input.description,
          GroupName: this.__input.groupName,
          VpcId: this.__input.vpcId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSecurityGroup.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSnapshotRequest) {
  }

  public get dataEncryptionKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.DataEncryptionKeyId'),
        outputPath: 'DataEncryptionKeyId',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.DataEncryptionKeyId', props);
    return resource.getResponseField('DataEncryptionKeyId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.Description'),
        outputPath: 'Description',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.Encrypted'),
        outputPath: 'Encrypted',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.Encrypted', props);
    return resource.getResponseField('Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.OwnerId'),
        outputPath: 'OwnerId',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.OwnerId', props);
    return resource.getResponseField('OwnerId') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.Progress'),
        outputPath: 'Progress',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.Progress', props);
    return resource.getResponseField('Progress') as unknown as string;
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.SnapshotId'),
        outputPath: 'SnapshotId',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.SnapshotId', props);
    return resource.getResponseField('SnapshotId') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.State'),
        outputPath: 'State',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.StateMessage'),
        outputPath: 'StateMessage',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.StateMessage', props);
    return resource.getResponseField('StateMessage') as unknown as string;
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.VolumeSize'),
        outputPath: 'VolumeSize',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.VolumeSize', props);
    return resource.getResponseField('VolumeSize') as unknown as number;
  }

  public get ownerAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.OwnerAlias'),
        outputPath: 'OwnerAlias',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.OwnerAlias', props);
    return resource.getResponseField('OwnerAlias') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.OutpostArn'),
        outputPath: 'OutpostArn',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.OutpostArn', props);
    return resource.getResponseField('OutpostArn') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshot.Tags'),
        outputPath: 'Tags',
        parameters: {
          Description: this.__input.description,
          OutpostArn: this.__input.outpostArn,
          VolumeId: this.__input.volumeId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshot.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateSnapshots {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSnapshotsRequest) {
  }

  public get snapshots(): shapes.Ec2SnapshotInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSnapshots',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSnapshots.Snapshots'),
        outputPath: 'Snapshots',
        parameters: {
          Description: this.__input.description,
          InstanceSpecification: {
            InstanceId: this.__input.instanceSpecification.instanceId,
            ExcludeBootVolume: this.__input.instanceSpecification.excludeBootVolume,
          },
          OutpostArn: this.__input.outpostArn,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          CopyTagsFromSource: this.__input.copyTagsFromSource,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSnapshots.Snapshots', props);
    return resource.getResponseField('Snapshots') as unknown as shapes.Ec2SnapshotInfo[];
  }

}

export class EC2ResponsesCreateSpotDatafeedSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSpotDatafeedSubscriptionRequest) {
  }

  public get spotDatafeedSubscription(): EC2ResponsesCreateSpotDatafeedSubscriptionSpotDatafeedSubscription {
    return new EC2ResponsesCreateSpotDatafeedSubscriptionSpotDatafeedSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateSpotDatafeedSubscriptionSpotDatafeedSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSpotDatafeedSubscriptionRequest) {
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Bucket'),
        outputPath: 'SpotDatafeedSubscription.Bucket',
        parameters: {
          Bucket: this.__input.bucket,
          DryRun: this.__input.dryRun,
          Prefix: this.__input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Bucket', props);
    return resource.getResponseField('SpotDatafeedSubscription.Bucket') as unknown as string;
  }

  public get fault(): EC2ResponsesCreateSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault {
    return new EC2ResponsesCreateSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault(this.__scope, this.__resources, this.__input);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.OwnerId'),
        outputPath: 'SpotDatafeedSubscription.OwnerId',
        parameters: {
          Bucket: this.__input.bucket,
          DryRun: this.__input.dryRun,
          Prefix: this.__input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.OwnerId', props);
    return resource.getResponseField('SpotDatafeedSubscription.OwnerId') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Prefix'),
        outputPath: 'SpotDatafeedSubscription.Prefix',
        parameters: {
          Bucket: this.__input.bucket,
          DryRun: this.__input.dryRun,
          Prefix: this.__input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Prefix', props);
    return resource.getResponseField('SpotDatafeedSubscription.Prefix') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.State'),
        outputPath: 'SpotDatafeedSubscription.State',
        parameters: {
          Bucket: this.__input.bucket,
          DryRun: this.__input.dryRun,
          Prefix: this.__input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.State', props);
    return resource.getResponseField('SpotDatafeedSubscription.State') as unknown as string;
  }

}

export class EC2ResponsesCreateSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSpotDatafeedSubscriptionRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Code'),
        outputPath: 'SpotDatafeedSubscription.Fault.Code',
        parameters: {
          Bucket: this.__input.bucket,
          DryRun: this.__input.dryRun,
          Prefix: this.__input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Code', props);
    return resource.getResponseField('SpotDatafeedSubscription.Fault.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Message'),
        outputPath: 'SpotDatafeedSubscription.Fault.Message',
        parameters: {
          Bucket: this.__input.bucket,
          DryRun: this.__input.dryRun,
          Prefix: this.__input.prefix,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Message', props);
    return resource.getResponseField('SpotDatafeedSubscription.Fault.Message') as unknown as string;
  }

}

export class EC2ResponsesCreateStoreImageTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateStoreImageTaskRequest) {
  }

  public get objectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStoreImageTask',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateStoreImageTask.ObjectKey'),
        outputPath: 'ObjectKey',
        parameters: {
          ImageId: this.__input.imageId,
          Bucket: this.__input.bucket,
          S3ObjectTags: this.__input.s3ObjectTags,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateStoreImageTask.ObjectKey', props);
    return resource.getResponseField('ObjectKey') as unknown as string;
  }

}

export class EC2ResponsesCreateSubnet {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSubnetRequest) {
  }

  public get subnet(): EC2ResponsesCreateSubnetSubnet {
    return new EC2ResponsesCreateSubnetSubnet(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateSubnetSubnet {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSubnetRequest) {
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.AvailabilityZone'),
        outputPath: 'Subnet.AvailabilityZone',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.AvailabilityZone', props);
    return resource.getResponseField('Subnet.AvailabilityZone') as unknown as string;
  }

  public get availabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.AvailabilityZoneId'),
        outputPath: 'Subnet.AvailabilityZoneId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.AvailabilityZoneId', props);
    return resource.getResponseField('Subnet.AvailabilityZoneId') as unknown as string;
  }

  public get availableIpAddressCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.AvailableIpAddressCount'),
        outputPath: 'Subnet.AvailableIpAddressCount',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.AvailableIpAddressCount', props);
    return resource.getResponseField('Subnet.AvailableIpAddressCount') as unknown as number;
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.CidrBlock'),
        outputPath: 'Subnet.CidrBlock',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.CidrBlock', props);
    return resource.getResponseField('Subnet.CidrBlock') as unknown as string;
  }

  public get defaultForAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.DefaultForAz'),
        outputPath: 'Subnet.DefaultForAz',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.DefaultForAz', props);
    return resource.getResponseField('Subnet.DefaultForAz') as unknown as boolean;
  }

  public get mapPublicIpOnLaunch(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.MapPublicIpOnLaunch'),
        outputPath: 'Subnet.MapPublicIpOnLaunch',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.MapPublicIpOnLaunch', props);
    return resource.getResponseField('Subnet.MapPublicIpOnLaunch') as unknown as boolean;
  }

  public get mapCustomerOwnedIpOnLaunch(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.MapCustomerOwnedIpOnLaunch'),
        outputPath: 'Subnet.MapCustomerOwnedIpOnLaunch',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.MapCustomerOwnedIpOnLaunch', props);
    return resource.getResponseField('Subnet.MapCustomerOwnedIpOnLaunch') as unknown as boolean;
  }

  public get customerOwnedIpv4Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.CustomerOwnedIpv4Pool'),
        outputPath: 'Subnet.CustomerOwnedIpv4Pool',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.CustomerOwnedIpv4Pool', props);
    return resource.getResponseField('Subnet.CustomerOwnedIpv4Pool') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.State'),
        outputPath: 'Subnet.State',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.State', props);
    return resource.getResponseField('Subnet.State') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.SubnetId'),
        outputPath: 'Subnet.SubnetId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.SubnetId', props);
    return resource.getResponseField('Subnet.SubnetId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.VpcId'),
        outputPath: 'Subnet.VpcId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.VpcId', props);
    return resource.getResponseField('Subnet.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.OwnerId'),
        outputPath: 'Subnet.OwnerId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.OwnerId', props);
    return resource.getResponseField('Subnet.OwnerId') as unknown as string;
  }

  public get assignIpv6AddressOnCreation(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.AssignIpv6AddressOnCreation'),
        outputPath: 'Subnet.AssignIpv6AddressOnCreation',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.AssignIpv6AddressOnCreation', props);
    return resource.getResponseField('Subnet.AssignIpv6AddressOnCreation') as unknown as boolean;
  }

  public get ipv6CidrBlockAssociationSet(): shapes.Ec2SubnetIpv6CidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.Ipv6CidrBlockAssociationSet'),
        outputPath: 'Subnet.Ipv6CidrBlockAssociationSet',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.Ipv6CidrBlockAssociationSet', props);
    return resource.getResponseField('Subnet.Ipv6CidrBlockAssociationSet') as unknown as shapes.Ec2SubnetIpv6CidrBlockAssociation[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.Tags'),
        outputPath: 'Subnet.Tags',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.Tags', props);
    return resource.getResponseField('Subnet.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get subnetArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.SubnetArn'),
        outputPath: 'Subnet.SubnetArn',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.SubnetArn', props);
    return resource.getResponseField('Subnet.SubnetArn') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnet.Subnet.OutpostArn'),
        outputPath: 'Subnet.OutpostArn',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          AvailabilityZone: this.__input.availabilityZone,
          AvailabilityZoneId: this.__input.availabilityZoneId,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          OutpostArn: this.__input.outpostArn,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
          CidrBlock: this.__input.cidrBlock,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnet.Subnet.OutpostArn', props);
    return resource.getResponseField('Subnet.OutpostArn') as unknown as string;
  }

}

export class EC2ResponsesCreateSubnetCidrReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSubnetCidrReservationRequest) {
  }

  public get subnetCidrReservation(): EC2ResponsesCreateSubnetCidrReservationSubnetCidrReservation {
    return new EC2ResponsesCreateSubnetCidrReservationSubnetCidrReservation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateSubnetCidrReservationSubnetCidrReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateSubnetCidrReservationRequest) {
  }

  public get subnetCidrReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnetCidrReservation.SubnetCidrReservation.SubnetCidrReservationId'),
        outputPath: 'SubnetCidrReservation.SubnetCidrReservationId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          SubnetId: this.__input.subnetId,
          Cidr: this.__input.cidr,
          ReservationType: this.__input.reservationType,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnetCidrReservation.SubnetCidrReservation.SubnetCidrReservationId', props);
    return resource.getResponseField('SubnetCidrReservation.SubnetCidrReservationId') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnetCidrReservation.SubnetCidrReservation.SubnetId'),
        outputPath: 'SubnetCidrReservation.SubnetId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          SubnetId: this.__input.subnetId,
          Cidr: this.__input.cidr,
          ReservationType: this.__input.reservationType,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnetCidrReservation.SubnetCidrReservation.SubnetId', props);
    return resource.getResponseField('SubnetCidrReservation.SubnetId') as unknown as string;
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnetCidrReservation.SubnetCidrReservation.Cidr'),
        outputPath: 'SubnetCidrReservation.Cidr',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          SubnetId: this.__input.subnetId,
          Cidr: this.__input.cidr,
          ReservationType: this.__input.reservationType,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnetCidrReservation.SubnetCidrReservation.Cidr', props);
    return resource.getResponseField('SubnetCidrReservation.Cidr') as unknown as string;
  }

  public get reservationType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnetCidrReservation.SubnetCidrReservation.ReservationType'),
        outputPath: 'SubnetCidrReservation.ReservationType',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          SubnetId: this.__input.subnetId,
          Cidr: this.__input.cidr,
          ReservationType: this.__input.reservationType,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnetCidrReservation.SubnetCidrReservation.ReservationType', props);
    return resource.getResponseField('SubnetCidrReservation.ReservationType') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnetCidrReservation.SubnetCidrReservation.OwnerId'),
        outputPath: 'SubnetCidrReservation.OwnerId',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          SubnetId: this.__input.subnetId,
          Cidr: this.__input.cidr,
          ReservationType: this.__input.reservationType,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnetCidrReservation.SubnetCidrReservation.OwnerId', props);
    return resource.getResponseField('SubnetCidrReservation.OwnerId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnetCidrReservation.SubnetCidrReservation.Description'),
        outputPath: 'SubnetCidrReservation.Description',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          SubnetId: this.__input.subnetId,
          Cidr: this.__input.cidr,
          ReservationType: this.__input.reservationType,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnetCidrReservation.SubnetCidrReservation.Description', props);
    return resource.getResponseField('SubnetCidrReservation.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateSubnetCidrReservation.SubnetCidrReservation.Tags'),
        outputPath: 'SubnetCidrReservation.Tags',
        parameters: {
          TagSpecifications: this.__input.tagSpecifications,
          SubnetId: this.__input.subnetId,
          Cidr: this.__input.cidr,
          ReservationType: this.__input.reservationType,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateSubnetCidrReservation.SubnetCidrReservation.Tags', props);
    return resource.getResponseField('SubnetCidrReservation.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTrafficMirrorFilter {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorFilterRequest) {
  }

  public get trafficMirrorFilter(): EC2ResponsesCreateTrafficMirrorFilterTrafficMirrorFilter {
    return new EC2ResponsesCreateTrafficMirrorFilterTrafficMirrorFilter(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilter.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesCreateTrafficMirrorFilterTrafficMirrorFilter {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorFilterRequest) {
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilter.TrafficMirrorFilterId',
        parameters: {
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilter.TrafficMirrorFilterId') as unknown as string;
  }

  public get ingressFilterRules(): shapes.Ec2TrafficMirrorFilterRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.IngressFilterRules'),
        outputPath: 'TrafficMirrorFilter.IngressFilterRules',
        parameters: {
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.IngressFilterRules', props);
    return resource.getResponseField('TrafficMirrorFilter.IngressFilterRules') as unknown as shapes.Ec2TrafficMirrorFilterRule[];
  }

  public get egressFilterRules(): shapes.Ec2TrafficMirrorFilterRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.EgressFilterRules'),
        outputPath: 'TrafficMirrorFilter.EgressFilterRules',
        parameters: {
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.EgressFilterRules', props);
    return resource.getResponseField('TrafficMirrorFilter.EgressFilterRules') as unknown as shapes.Ec2TrafficMirrorFilterRule[];
  }

  public get networkServices(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.NetworkServices'),
        outputPath: 'TrafficMirrorFilter.NetworkServices',
        parameters: {
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.NetworkServices', props);
    return resource.getResponseField('TrafficMirrorFilter.NetworkServices') as unknown as string[];
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.Description'),
        outputPath: 'TrafficMirrorFilter.Description',
        parameters: {
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.Description', props);
    return resource.getResponseField('TrafficMirrorFilter.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilter.TrafficMirrorFilter.Tags'),
        outputPath: 'TrafficMirrorFilter.Tags',
        parameters: {
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilter.TrafficMirrorFilter.Tags', props);
    return resource.getResponseField('TrafficMirrorFilter.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTrafficMirrorFilterRule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest) {
  }

  public get trafficMirrorFilterRule(): EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRule {
    return new EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRule(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest) {
  }

  public get trafficMirrorFilterRuleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId'),
        outputPath: 'TrafficMirrorFilterRule.TrafficMirrorFilterRuleId',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficMirrorFilterRuleId') as unknown as string;
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilterRule.TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficMirrorFilterId') as unknown as string;
  }

  public get trafficDirection(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficDirection'),
        outputPath: 'TrafficMirrorFilterRule.TrafficDirection',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficDirection', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficDirection') as unknown as string;
  }

  public get ruleNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleNumber'),
        outputPath: 'TrafficMirrorFilterRule.RuleNumber',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleNumber', props);
    return resource.getResponseField('TrafficMirrorFilterRule.RuleNumber') as unknown as number;
  }

  public get ruleAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleAction'),
        outputPath: 'TrafficMirrorFilterRule.RuleAction',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleAction', props);
    return resource.getResponseField('TrafficMirrorFilterRule.RuleAction') as unknown as string;
  }

  public get protocol(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.Protocol'),
        outputPath: 'TrafficMirrorFilterRule.Protocol',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.Protocol', props);
    return resource.getResponseField('TrafficMirrorFilterRule.Protocol') as unknown as number;
  }

  public get destinationPortRange(): EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange {
    return new EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange(this.__scope, this.__resources, this.__input);
  }

  public get sourcePortRange(): EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange {
    return new EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange(this.__scope, this.__resources, this.__input);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationCidrBlock'),
        outputPath: 'TrafficMirrorFilterRule.DestinationCidrBlock',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationCidrBlock', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationCidrBlock') as unknown as string;
  }

  public get sourceCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourceCidrBlock'),
        outputPath: 'TrafficMirrorFilterRule.SourceCidrBlock',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourceCidrBlock', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourceCidrBlock') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.Description'),
        outputPath: 'TrafficMirrorFilterRule.Description',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.Description', props);
    return resource.getResponseField('TrafficMirrorFilterRule.Description') as unknown as string;
  }

}

export class EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest) {
  }

  public get fromPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.FromPort'),
        outputPath: 'TrafficMirrorFilterRule.DestinationPortRange.FromPort',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.FromPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationPortRange.FromPort') as unknown as number;
  }

  public get toPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.ToPort'),
        outputPath: 'TrafficMirrorFilterRule.DestinationPortRange.ToPort',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.ToPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationPortRange.ToPort') as unknown as number;
  }

}

export class EC2ResponsesCreateTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorFilterRuleRequest) {
  }

  public get fromPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.FromPort'),
        outputPath: 'TrafficMirrorFilterRule.SourcePortRange.FromPort',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.FromPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourcePortRange.FromPort') as unknown as number;
  }

  public get toPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.ToPort'),
        outputPath: 'TrafficMirrorFilterRule.SourcePortRange.ToPort',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.ToPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourcePortRange.ToPort') as unknown as number;
  }

}

export class EC2ResponsesCreateTrafficMirrorSession {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorSessionRequest) {
  }

  public get trafficMirrorSession(): EC2ResponsesCreateTrafficMirrorSessionTrafficMirrorSession {
    return new EC2ResponsesCreateTrafficMirrorSessionTrafficMirrorSession(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesCreateTrafficMirrorSessionTrafficMirrorSession {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorSessionRequest) {
  }

  public get trafficMirrorSessionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorSessionId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorSessionId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorSessionId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorSessionId') as unknown as string;
  }

  public get trafficMirrorTargetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorTargetId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorTargetId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorTargetId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorTargetId') as unknown as string;
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorFilterId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorFilterId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.NetworkInterfaceId'),
        outputPath: 'TrafficMirrorSession.NetworkInterfaceId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.NetworkInterfaceId', props);
    return resource.getResponseField('TrafficMirrorSession.NetworkInterfaceId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.OwnerId'),
        outputPath: 'TrafficMirrorSession.OwnerId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.OwnerId', props);
    return resource.getResponseField('TrafficMirrorSession.OwnerId') as unknown as string;
  }

  public get packetLength(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.PacketLength'),
        outputPath: 'TrafficMirrorSession.PacketLength',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.PacketLength', props);
    return resource.getResponseField('TrafficMirrorSession.PacketLength') as unknown as number;
  }

  public get sessionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.SessionNumber'),
        outputPath: 'TrafficMirrorSession.SessionNumber',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.SessionNumber', props);
    return resource.getResponseField('TrafficMirrorSession.SessionNumber') as unknown as number;
  }

  public get virtualNetworkId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.VirtualNetworkId'),
        outputPath: 'TrafficMirrorSession.VirtualNetworkId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.VirtualNetworkId', props);
    return resource.getResponseField('TrafficMirrorSession.VirtualNetworkId') as unknown as number;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.Description'),
        outputPath: 'TrafficMirrorSession.Description',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.Description', props);
    return resource.getResponseField('TrafficMirrorSession.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorSession.TrafficMirrorSession.Tags'),
        outputPath: 'TrafficMirrorSession.Tags',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorSession.TrafficMirrorSession.Tags', props);
    return resource.getResponseField('TrafficMirrorSession.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTrafficMirrorTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorTargetRequest) {
  }

  public get trafficMirrorTarget(): EC2ResponsesCreateTrafficMirrorTargetTrafficMirrorTarget {
    return new EC2ResponsesCreateTrafficMirrorTargetTrafficMirrorTarget(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkLoadBalancerArn: this.__input.networkLoadBalancerArn,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorTarget.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesCreateTrafficMirrorTargetTrafficMirrorTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTrafficMirrorTargetRequest) {
  }

  public get trafficMirrorTargetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.TrafficMirrorTargetId'),
        outputPath: 'TrafficMirrorTarget.TrafficMirrorTargetId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkLoadBalancerArn: this.__input.networkLoadBalancerArn,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.TrafficMirrorTargetId', props);
    return resource.getResponseField('TrafficMirrorTarget.TrafficMirrorTargetId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.NetworkInterfaceId'),
        outputPath: 'TrafficMirrorTarget.NetworkInterfaceId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkLoadBalancerArn: this.__input.networkLoadBalancerArn,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.NetworkInterfaceId', props);
    return resource.getResponseField('TrafficMirrorTarget.NetworkInterfaceId') as unknown as string;
  }

  public get networkLoadBalancerArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.NetworkLoadBalancerArn'),
        outputPath: 'TrafficMirrorTarget.NetworkLoadBalancerArn',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkLoadBalancerArn: this.__input.networkLoadBalancerArn,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.NetworkLoadBalancerArn', props);
    return resource.getResponseField('TrafficMirrorTarget.NetworkLoadBalancerArn') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.Type'),
        outputPath: 'TrafficMirrorTarget.Type',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkLoadBalancerArn: this.__input.networkLoadBalancerArn,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.Type', props);
    return resource.getResponseField('TrafficMirrorTarget.Type') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.Description'),
        outputPath: 'TrafficMirrorTarget.Description',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkLoadBalancerArn: this.__input.networkLoadBalancerArn,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.Description', props);
    return resource.getResponseField('TrafficMirrorTarget.Description') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.OwnerId'),
        outputPath: 'TrafficMirrorTarget.OwnerId',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkLoadBalancerArn: this.__input.networkLoadBalancerArn,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.OwnerId', props);
    return resource.getResponseField('TrafficMirrorTarget.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTrafficMirrorTarget.TrafficMirrorTarget.Tags'),
        outputPath: 'TrafficMirrorTarget.Tags',
        parameters: {
          NetworkInterfaceId: this.__input.networkInterfaceId,
          NetworkLoadBalancerArn: this.__input.networkLoadBalancerArn,
          Description: this.__input.description,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTrafficMirrorTarget.TrafficMirrorTarget.Tags', props);
    return resource.getResponseField('TrafficMirrorTarget.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTransitGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayRequest) {
  }

  public get transitGateway(): EC2ResponsesCreateTransitGatewayTransitGateway {
    return new EC2ResponsesCreateTransitGatewayTransitGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayTransitGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.TransitGatewayId'),
        outputPath: 'TransitGateway.TransitGatewayId',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.TransitGatewayId', props);
    return resource.getResponseField('TransitGateway.TransitGatewayId') as unknown as string;
  }

  public get transitGatewayArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.TransitGatewayArn'),
        outputPath: 'TransitGateway.TransitGatewayArn',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.TransitGatewayArn', props);
    return resource.getResponseField('TransitGateway.TransitGatewayArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.State'),
        outputPath: 'TransitGateway.State',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.State', props);
    return resource.getResponseField('TransitGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.OwnerId'),
        outputPath: 'TransitGateway.OwnerId',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.OwnerId', props);
    return resource.getResponseField('TransitGateway.OwnerId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Description'),
        outputPath: 'TransitGateway.Description',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Description', props);
    return resource.getResponseField('TransitGateway.Description') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.CreationTime'),
        outputPath: 'TransitGateway.CreationTime',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.CreationTime', props);
    return resource.getResponseField('TransitGateway.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesCreateTransitGatewayTransitGatewayOptions {
    return new EC2ResponsesCreateTransitGatewayTransitGatewayOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Tags'),
        outputPath: 'TransitGateway.Tags',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Tags', props);
    return resource.getResponseField('TransitGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTransitGatewayTransitGatewayOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayRequest) {
  }

  public get amazonSideAsn(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.AmazonSideAsn'),
        outputPath: 'TransitGateway.Options.AmazonSideAsn',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.AmazonSideAsn', props);
    return resource.getResponseField('TransitGateway.Options.AmazonSideAsn') as unknown as number;
  }

  public get transitGatewayCidrBlocks(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.TransitGatewayCidrBlocks'),
        outputPath: 'TransitGateway.Options.TransitGatewayCidrBlocks',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.TransitGatewayCidrBlocks', props);
    return resource.getResponseField('TransitGateway.Options.TransitGatewayCidrBlocks') as unknown as string[];
  }

  public get autoAcceptSharedAttachments(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments'),
        outputPath: 'TransitGateway.Options.AutoAcceptSharedAttachments',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments', props);
    return resource.getResponseField('TransitGateway.Options.AutoAcceptSharedAttachments') as unknown as string;
  }

  public get defaultRouteTableAssociation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTableAssociation',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTableAssociation') as unknown as string;
  }

  public get associationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.AssociationDefaultRouteTableId',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.AssociationDefaultRouteTableId') as unknown as string;
  }

  public get defaultRouteTablePropagation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTablePropagation',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTablePropagation') as unknown as string;
  }

  public get propagationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.PropagationDefaultRouteTableId',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.PropagationDefaultRouteTableId') as unknown as string;
  }

  public get vpnEcmpSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.VpnEcmpSupport'),
        outputPath: 'TransitGateway.Options.VpnEcmpSupport',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.VpnEcmpSupport', props);
    return resource.getResponseField('TransitGateway.Options.VpnEcmpSupport') as unknown as string;
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.DnsSupport'),
        outputPath: 'TransitGateway.Options.DnsSupport',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.DnsSupport', props);
    return resource.getResponseField('TransitGateway.Options.DnsSupport') as unknown as string;
  }

  public get multicastSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGateway.TransitGateway.Options.MulticastSupport'),
        outputPath: 'TransitGateway.Options.MulticastSupport',
        parameters: {
          Description: this.__input.description,
          Options: {
            AmazonSideAsn: this.__input.options?.amazonSideAsn,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            MulticastSupport: this.__input.options?.multicastSupport,
            TransitGatewayCidrBlocks: this.__input.options?.transitGatewayCidrBlocks,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGateway.TransitGateway.Options.MulticastSupport', props);
    return resource.getResponseField('TransitGateway.Options.MulticastSupport') as unknown as string;
  }

}

export class EC2ResponsesCreateTransitGatewayConnect {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayConnectRequest) {
  }

  public get transitGatewayConnect(): EC2ResponsesCreateTransitGatewayConnectTransitGatewayConnect {
    return new EC2ResponsesCreateTransitGatewayConnectTransitGatewayConnect(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayConnectTransitGatewayConnect {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayConnectRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnect.TransitGatewayConnect.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayConnect.TransitGatewayAttachmentId',
        parameters: {
          TransportTransitGatewayAttachmentId: this.__input.transportTransitGatewayAttachmentId,
          Options: {
            Protocol: this.__input.options.protocol,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnect.TransitGatewayConnect.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayConnect.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transportTransitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnect.TransitGatewayConnect.TransportTransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayConnect.TransportTransitGatewayAttachmentId',
        parameters: {
          TransportTransitGatewayAttachmentId: this.__input.transportTransitGatewayAttachmentId,
          Options: {
            Protocol: this.__input.options.protocol,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnect.TransitGatewayConnect.TransportTransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayConnect.TransportTransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnect.TransitGatewayConnect.TransitGatewayId'),
        outputPath: 'TransitGatewayConnect.TransitGatewayId',
        parameters: {
          TransportTransitGatewayAttachmentId: this.__input.transportTransitGatewayAttachmentId,
          Options: {
            Protocol: this.__input.options.protocol,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnect.TransitGatewayConnect.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayConnect.TransitGatewayId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnect.TransitGatewayConnect.State'),
        outputPath: 'TransitGatewayConnect.State',
        parameters: {
          TransportTransitGatewayAttachmentId: this.__input.transportTransitGatewayAttachmentId,
          Options: {
            Protocol: this.__input.options.protocol,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnect.TransitGatewayConnect.State', props);
    return resource.getResponseField('TransitGatewayConnect.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnect.TransitGatewayConnect.CreationTime'),
        outputPath: 'TransitGatewayConnect.CreationTime',
        parameters: {
          TransportTransitGatewayAttachmentId: this.__input.transportTransitGatewayAttachmentId,
          Options: {
            Protocol: this.__input.options.protocol,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnect.TransitGatewayConnect.CreationTime', props);
    return resource.getResponseField('TransitGatewayConnect.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesCreateTransitGatewayConnectTransitGatewayConnectOptions {
    return new EC2ResponsesCreateTransitGatewayConnectTransitGatewayConnectOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnect.TransitGatewayConnect.Tags'),
        outputPath: 'TransitGatewayConnect.Tags',
        parameters: {
          TransportTransitGatewayAttachmentId: this.__input.transportTransitGatewayAttachmentId,
          Options: {
            Protocol: this.__input.options.protocol,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnect.TransitGatewayConnect.Tags', props);
    return resource.getResponseField('TransitGatewayConnect.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTransitGatewayConnectTransitGatewayConnectOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayConnectRequest) {
  }

  public get protocol(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnect.TransitGatewayConnect.Options.Protocol'),
        outputPath: 'TransitGatewayConnect.Options.Protocol',
        parameters: {
          TransportTransitGatewayAttachmentId: this.__input.transportTransitGatewayAttachmentId,
          Options: {
            Protocol: this.__input.options.protocol,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnect.TransitGatewayConnect.Options.Protocol', props);
    return resource.getResponseField('TransitGatewayConnect.Options.Protocol') as unknown as string;
  }

}

export class EC2ResponsesCreateTransitGatewayConnectPeer {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayConnectPeerRequest) {
  }

  public get transitGatewayConnectPeer(): EC2ResponsesCreateTransitGatewayConnectPeerTransitGatewayConnectPeer {
    return new EC2ResponsesCreateTransitGatewayConnectPeerTransitGatewayConnectPeer(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayConnectPeerTransitGatewayConnectPeer {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayConnectPeerRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayConnectPeer.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayConnectPeer.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayConnectPeerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.TransitGatewayConnectPeerId'),
        outputPath: 'TransitGatewayConnectPeer.TransitGatewayConnectPeerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.TransitGatewayConnectPeerId', props);
    return resource.getResponseField('TransitGatewayConnectPeer.TransitGatewayConnectPeerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.State'),
        outputPath: 'TransitGatewayConnectPeer.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.State', props);
    return resource.getResponseField('TransitGatewayConnectPeer.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.CreationTime'),
        outputPath: 'TransitGatewayConnectPeer.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.CreationTime', props);
    return resource.getResponseField('TransitGatewayConnectPeer.CreationTime') as unknown as string;
  }

  public get connectPeerConfiguration(): EC2ResponsesCreateTransitGatewayConnectPeerTransitGatewayConnectPeerConnectPeerConfiguration {
    return new EC2ResponsesCreateTransitGatewayConnectPeerTransitGatewayConnectPeerConnectPeerConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.Tags'),
        outputPath: 'TransitGatewayConnectPeer.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.Tags', props);
    return resource.getResponseField('TransitGatewayConnectPeer.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTransitGatewayConnectPeerTransitGatewayConnectPeerConnectPeerConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayConnectPeerRequest) {
  }

  public get transitGatewayAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.TransitGatewayAddress'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.TransitGatewayAddress',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.TransitGatewayAddress', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.TransitGatewayAddress') as unknown as string;
  }

  public get peerAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.PeerAddress'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.PeerAddress',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.PeerAddress', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.PeerAddress') as unknown as string;
  }

  public get insideCidrBlocks(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.InsideCidrBlocks'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.InsideCidrBlocks',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.InsideCidrBlocks', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.InsideCidrBlocks') as unknown as string[];
  }

  public get protocol(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.Protocol'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.Protocol',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.Protocol', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.Protocol') as unknown as string;
  }

  public get bgpConfigurations(): shapes.Ec2TransitGatewayAttachmentBgpConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.BgpConfigurations'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.BgpConfigurations',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          TransitGatewayAddress: this.__input.transitGatewayAddress,
          PeerAddress: this.__input.peerAddress,
          BgpOptions: {
            PeerAsn: this.__input.bgpOptions?.peerAsn,
          },
          InsideCidrBlocks: this.__input.insideCidrBlocks,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.BgpConfigurations', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.BgpConfigurations') as unknown as shapes.Ec2TransitGatewayAttachmentBgpConfiguration[];
  }

}

export class EC2ResponsesCreateTransitGatewayMulticastDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayMulticastDomainRequest) {
  }

  public get transitGatewayMulticastDomain(): EC2ResponsesCreateTransitGatewayMulticastDomainTransitGatewayMulticastDomain {
    return new EC2ResponsesCreateTransitGatewayMulticastDomainTransitGatewayMulticastDomain(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayMulticastDomainTransitGatewayMulticastDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayMulticastDomainRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayId'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayId') as unknown as string;
  }

  public get transitGatewayMulticastDomainArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainArn'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayMulticastDomainArn',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainArn', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayMulticastDomainArn') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.OwnerId'),
        outputPath: 'TransitGatewayMulticastDomain.OwnerId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.OwnerId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.OwnerId') as unknown as string;
  }

  public get options(): EC2ResponsesCreateTransitGatewayMulticastDomainTransitGatewayMulticastDomainOptions {
    return new EC2ResponsesCreateTransitGatewayMulticastDomainTransitGatewayMulticastDomainOptions(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.State'),
        outputPath: 'TransitGatewayMulticastDomain.State',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.State', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.CreationTime'),
        outputPath: 'TransitGatewayMulticastDomain.CreationTime',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.CreationTime', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Tags'),
        outputPath: 'TransitGatewayMulticastDomain.Tags',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Tags', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTransitGatewayMulticastDomainTransitGatewayMulticastDomainOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayMulticastDomainRequest) {
  }

  public get igmpv2Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.Igmpv2Support'),
        outputPath: 'TransitGatewayMulticastDomain.Options.Igmpv2Support',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.Igmpv2Support', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Options.Igmpv2Support') as unknown as string;
  }

  public get staticSourcesSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.StaticSourcesSupport'),
        outputPath: 'TransitGatewayMulticastDomain.Options.StaticSourcesSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.StaticSourcesSupport', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Options.StaticSourcesSupport') as unknown as string;
  }

  public get autoAcceptSharedAssociations(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.AutoAcceptSharedAssociations'),
        outputPath: 'TransitGatewayMulticastDomain.Options.AutoAcceptSharedAssociations',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Options: {
            Igmpv2Support: this.__input.options?.igmpv2Support,
            StaticSourcesSupport: this.__input.options?.staticSourcesSupport,
            AutoAcceptSharedAssociations: this.__input.options?.autoAcceptSharedAssociations,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.AutoAcceptSharedAssociations', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Options.AutoAcceptSharedAssociations') as unknown as string;
  }

}

export class EC2ResponsesCreateTransitGatewayPeeringAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayPeeringAttachment(): EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {
    return new EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPeeringAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get requesterTgwInfo(): EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {
    return new EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo(this.__scope, this.__resources, this.__input);
  }

  public get accepterTgwInfo(): EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {
    return new EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo(this.__scope, this.__resources, this.__input);
  }

  public get status(): EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {
    return new EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State'),
        outputPath: 'TransitGatewayPeeringAttachment.State',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime'),
        outputPath: 'TransitGatewayPeeringAttachment.CreationTime',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags'),
        outputPath: 'TransitGatewayPeeringAttachment.Tags',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.Region',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.Region',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesCreateTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayPeeringAttachmentRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Code',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Message',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          PeerTransitGatewayId: this.__input.peerTransitGatewayId,
          PeerAccountId: this.__input.peerAccountId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Message') as unknown as string;
  }

}

export class EC2ResponsesCreateTransitGatewayPrefixListReference {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayPrefixListReference(): EC2ResponsesCreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {
    return new EC2ResponsesCreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayRouteTableId') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListId') as unknown as string;
  }

  public get prefixListOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListOwnerId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State'),
        outputPath: 'TransitGatewayPrefixListReference.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.State') as unknown as string;
  }

  public get blackhole(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole'),
        outputPath: 'TransitGatewayPrefixListReference.Blackhole',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.Blackhole') as unknown as boolean;
  }

  public get transitGatewayAttachment(): EC2ResponsesCreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {
    return new EC2ResponsesCreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId') as unknown as string;
  }

}

export class EC2ResponsesCreateTransitGatewayRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayRouteRequest) {
  }

  public get route(): EC2ResponsesCreateTransitGatewayRouteRoute {
    return new EC2ResponsesCreateTransitGatewayRouteRoute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayRouteRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayRouteRequest) {
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.PrefixListId'),
        outputPath: 'Route.PrefixListId',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRoute.Route.PrefixListId', props);
    return resource.getResponseField('Route.PrefixListId') as unknown as string;
  }

  public get transitGatewayAttachments(): shapes.Ec2TransitGatewayRouteAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.TransitGatewayAttachments'),
        outputPath: 'Route.TransitGatewayAttachments',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRoute.Route.TransitGatewayAttachments', props);
    return resource.getResponseField('Route.TransitGatewayAttachments') as unknown as shapes.Ec2TransitGatewayRouteAttachment[];
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

}

export class EC2ResponsesCreateTransitGatewayRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayRouteTableRequest) {
  }

  public get transitGatewayRouteTable(): EC2ResponsesCreateTransitGatewayRouteTableTransitGatewayRouteTable {
    return new EC2ResponsesCreateTransitGatewayRouteTableTransitGatewayRouteTable(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayRouteTableTransitGatewayRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayRouteTableRequest) {
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayRouteTable.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayRouteTable.TransitGatewayRouteTableId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayId'),
        outputPath: 'TransitGatewayRouteTable.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayRouteTable.TransitGatewayId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.State'),
        outputPath: 'TransitGatewayRouteTable.State',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.State', props);
    return resource.getResponseField('TransitGatewayRouteTable.State') as unknown as string;
  }

  public get defaultAssociationRouteTable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultAssociationRouteTable'),
        outputPath: 'TransitGatewayRouteTable.DefaultAssociationRouteTable',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultAssociationRouteTable', props);
    return resource.getResponseField('TransitGatewayRouteTable.DefaultAssociationRouteTable') as unknown as boolean;
  }

  public get defaultPropagationRouteTable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultPropagationRouteTable'),
        outputPath: 'TransitGatewayRouteTable.DefaultPropagationRouteTable',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultPropagationRouteTable', props);
    return resource.getResponseField('TransitGatewayRouteTable.DefaultPropagationRouteTable') as unknown as boolean;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.CreationTime'),
        outputPath: 'TransitGatewayRouteTable.CreationTime',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.CreationTime', props);
    return resource.getResponseField('TransitGatewayRouteTable.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayRouteTable.TransitGatewayRouteTable.Tags'),
        outputPath: 'TransitGatewayRouteTable.Tags',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayRouteTable.TransitGatewayRouteTable.Tags', props);
    return resource.getResponseField('TransitGatewayRouteTable.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayVpcAttachment(): EC2ResponsesCreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2ResponsesCreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesCreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2ResponsesCreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateTransitGatewayVpcAttachmentRequest) {
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          VpcId: this.__input.vpcId,
          SubnetIds: this.__input.subnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          TagSpecifications: this.__input.tagSpecifications,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2ResponsesCreateVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVolumeRequest) {
  }

  public get attachments(): shapes.Ec2VolumeAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Attachments'),
        outputPath: 'Attachments',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.Attachments', props);
    return resource.getResponseField('Attachments') as unknown as shapes.Ec2VolumeAttachment[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.AvailabilityZone'),
        outputPath: 'AvailabilityZone',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.AvailabilityZone', props);
    return resource.getResponseField('AvailabilityZone') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.CreateTime'),
        outputPath: 'CreateTime',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.CreateTime', props);
    return resource.getResponseField('CreateTime') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Encrypted'),
        outputPath: 'Encrypted',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.Encrypted', props);
    return resource.getResponseField('Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get outpostArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.OutpostArn'),
        outputPath: 'OutpostArn',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.OutpostArn', props);
    return resource.getResponseField('OutpostArn') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Size'),
        outputPath: 'Size',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.Size', props);
    return resource.getResponseField('Size') as unknown as number;
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.SnapshotId'),
        outputPath: 'SnapshotId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.SnapshotId', props);
    return resource.getResponseField('SnapshotId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.State'),
        outputPath: 'State',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Iops'),
        outputPath: 'Iops',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.Iops', props);
    return resource.getResponseField('Iops') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Tags'),
        outputPath: 'Tags',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.VolumeType'),
        outputPath: 'VolumeType',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.VolumeType', props);
    return resource.getResponseField('VolumeType') as unknown as string;
  }

  public get fastRestored(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.FastRestored'),
        outputPath: 'FastRestored',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.FastRestored', props);
    return resource.getResponseField('FastRestored') as unknown as boolean;
  }

  public get multiAttachEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.MultiAttachEnabled'),
        outputPath: 'MultiAttachEnabled',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.MultiAttachEnabled', props);
    return resource.getResponseField('MultiAttachEnabled') as unknown as boolean;
  }

  public get throughput(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVolume.Throughput'),
        outputPath: 'Throughput',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Encrypted: this.__input.encrypted,
          Iops: this.__input.iops,
          KmsKeyId: this.__input.kmsKeyId,
          OutpostArn: this.__input.outpostArn,
          Size: this.__input.size,
          SnapshotId: this.__input.snapshotId,
          VolumeType: this.__input.volumeType,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
          Throughput: this.__input.throughput,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVolume.Throughput', props);
    return resource.getResponseField('Throughput') as unknown as number;
  }

}

export class EC2ResponsesCreateVpc {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcRequest) {
  }

  public get vpc(): EC2ResponsesCreateVpcVpc {
    return new EC2ResponsesCreateVpcVpc(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateVpcVpc {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcRequest) {
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.CidrBlock'),
        outputPath: 'Vpc.CidrBlock',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.CidrBlock', props);
    return resource.getResponseField('Vpc.CidrBlock') as unknown as string;
  }

  public get dhcpOptionsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.DhcpOptionsId'),
        outputPath: 'Vpc.DhcpOptionsId',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.DhcpOptionsId', props);
    return resource.getResponseField('Vpc.DhcpOptionsId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.State'),
        outputPath: 'Vpc.State',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.State', props);
    return resource.getResponseField('Vpc.State') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.VpcId'),
        outputPath: 'Vpc.VpcId',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.VpcId', props);
    return resource.getResponseField('Vpc.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.OwnerId'),
        outputPath: 'Vpc.OwnerId',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.OwnerId', props);
    return resource.getResponseField('Vpc.OwnerId') as unknown as string;
  }

  public get instanceTenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.InstanceTenancy'),
        outputPath: 'Vpc.InstanceTenancy',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.InstanceTenancy', props);
    return resource.getResponseField('Vpc.InstanceTenancy') as unknown as string;
  }

  public get ipv6CidrBlockAssociationSet(): shapes.Ec2VpcIpv6CidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.Ipv6CidrBlockAssociationSet'),
        outputPath: 'Vpc.Ipv6CidrBlockAssociationSet',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.Ipv6CidrBlockAssociationSet', props);
    return resource.getResponseField('Vpc.Ipv6CidrBlockAssociationSet') as unknown as shapes.Ec2VpcIpv6CidrBlockAssociation[];
  }

  public get cidrBlockAssociationSet(): shapes.Ec2VpcCidrBlockAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.CidrBlockAssociationSet'),
        outputPath: 'Vpc.CidrBlockAssociationSet',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.CidrBlockAssociationSet', props);
    return resource.getResponseField('Vpc.CidrBlockAssociationSet') as unknown as shapes.Ec2VpcCidrBlockAssociation[];
  }

  public get isDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.IsDefault'),
        outputPath: 'Vpc.IsDefault',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.IsDefault', props);
    return resource.getResponseField('Vpc.IsDefault') as unknown as boolean;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpc.Vpc.Tags'),
        outputPath: 'Vpc.Tags',
        parameters: {
          CidrBlock: this.__input.cidrBlock,
          AmazonProvidedIpv6CidrBlock: this.__input.amazonProvidedIpv6CidrBlock,
          Ipv6Pool: this.__input.ipv6Pool,
          Ipv6CidrBlock: this.__input.ipv6CidrBlock,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          Ipv6CidrBlockNetworkBorderGroup: this.__input.ipv6CidrBlockNetworkBorderGroup,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpc.Vpc.Tags', props);
    return resource.getResponseField('Vpc.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateVpcEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcEndpointRequest) {
  }

  public get vpcEndpoint(): EC2ResponsesCreateVpcEndpointVpcEndpoint {
    return new EC2ResponsesCreateVpcEndpointVpcEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcEndpointVpcEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcEndpointRequest) {
  }

  public get vpcEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.VpcEndpointId'),
        outputPath: 'VpcEndpoint.VpcEndpointId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.VpcEndpointId', props);
    return resource.getResponseField('VpcEndpoint.VpcEndpointId') as unknown as string;
  }

  public get vpcEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.VpcEndpointType'),
        outputPath: 'VpcEndpoint.VpcEndpointType',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.VpcEndpointType', props);
    return resource.getResponseField('VpcEndpoint.VpcEndpointType') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.VpcId'),
        outputPath: 'VpcEndpoint.VpcId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.VpcId', props);
    return resource.getResponseField('VpcEndpoint.VpcId') as unknown as string;
  }

  public get serviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.ServiceName'),
        outputPath: 'VpcEndpoint.ServiceName',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.ServiceName', props);
    return resource.getResponseField('VpcEndpoint.ServiceName') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.State'),
        outputPath: 'VpcEndpoint.State',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.State', props);
    return resource.getResponseField('VpcEndpoint.State') as unknown as string;
  }

  public get policyDocument(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.PolicyDocument'),
        outputPath: 'VpcEndpoint.PolicyDocument',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.PolicyDocument', props);
    return resource.getResponseField('VpcEndpoint.PolicyDocument') as unknown as string;
  }

  public get routeTableIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.RouteTableIds'),
        outputPath: 'VpcEndpoint.RouteTableIds',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.RouteTableIds', props);
    return resource.getResponseField('VpcEndpoint.RouteTableIds') as unknown as string[];
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.SubnetIds'),
        outputPath: 'VpcEndpoint.SubnetIds',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.SubnetIds', props);
    return resource.getResponseField('VpcEndpoint.SubnetIds') as unknown as string[];
  }

  public get groups(): shapes.Ec2SecurityGroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.Groups'),
        outputPath: 'VpcEndpoint.Groups',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.Groups', props);
    return resource.getResponseField('VpcEndpoint.Groups') as unknown as shapes.Ec2SecurityGroupIdentifier[];
  }

  public get privateDnsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.PrivateDnsEnabled'),
        outputPath: 'VpcEndpoint.PrivateDnsEnabled',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.PrivateDnsEnabled', props);
    return resource.getResponseField('VpcEndpoint.PrivateDnsEnabled') as unknown as boolean;
  }

  public get requesterManaged(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.RequesterManaged'),
        outputPath: 'VpcEndpoint.RequesterManaged',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.RequesterManaged', props);
    return resource.getResponseField('VpcEndpoint.RequesterManaged') as unknown as boolean;
  }

  public get networkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.NetworkInterfaceIds'),
        outputPath: 'VpcEndpoint.NetworkInterfaceIds',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.NetworkInterfaceIds', props);
    return resource.getResponseField('VpcEndpoint.NetworkInterfaceIds') as unknown as string[];
  }

  public get dnsEntries(): shapes.Ec2DnsEntry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.DnsEntries'),
        outputPath: 'VpcEndpoint.DnsEntries',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.DnsEntries', props);
    return resource.getResponseField('VpcEndpoint.DnsEntries') as unknown as shapes.Ec2DnsEntry[];
  }

  public get creationTimestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.CreationTimestamp'),
        outputPath: 'VpcEndpoint.CreationTimestamp',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.CreationTimestamp', props);
    return resource.getResponseField('VpcEndpoint.CreationTimestamp') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.Tags'),
        outputPath: 'VpcEndpoint.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.Tags', props);
    return resource.getResponseField('VpcEndpoint.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.OwnerId'),
        outputPath: 'VpcEndpoint.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.OwnerId', props);
    return resource.getResponseField('VpcEndpoint.OwnerId') as unknown as string;
  }

  public get lastError(): EC2ResponsesCreateVpcEndpointVpcEndpointLastError {
    return new EC2ResponsesCreateVpcEndpointVpcEndpointLastError(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateVpcEndpointVpcEndpointLastError {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcEndpointRequest) {
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.LastError.Message'),
        outputPath: 'VpcEndpoint.LastError.Message',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.LastError.Message', props);
    return resource.getResponseField('VpcEndpoint.LastError.Message') as unknown as string;
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpoint.VpcEndpoint.LastError.Code'),
        outputPath: 'VpcEndpoint.LastError.Code',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointType: this.__input.vpcEndpointType,
          VpcId: this.__input.vpcId,
          ServiceName: this.__input.serviceName,
          PolicyDocument: this.__input.policyDocument,
          RouteTableIds: this.__input.routeTableIds,
          SubnetIds: this.__input.subnetIds,
          SecurityGroupIds: this.__input.securityGroupIds,
          ClientToken: this.__input.clientToken,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpoint.VpcEndpoint.LastError.Code', props);
    return resource.getResponseField('VpcEndpoint.LastError.Code') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcEndpointConnectionNotification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcEndpointConnectionNotificationRequest) {
  }

  public get connectionNotification(): EC2ResponsesCreateVpcEndpointConnectionNotificationConnectionNotification {
    return new EC2ResponsesCreateVpcEndpointConnectionNotificationConnectionNotification(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointId: this.__input.vpcEndpointId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointConnectionNotification.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcEndpointConnectionNotificationConnectionNotification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcEndpointConnectionNotificationRequest) {
  }

  public get connectionNotificationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationId'),
        outputPath: 'ConnectionNotification.ConnectionNotificationId',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointId: this.__input.vpcEndpointId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationId', props);
    return resource.getResponseField('ConnectionNotification.ConnectionNotificationId') as unknown as string;
  }

  public get serviceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ServiceId'),
        outputPath: 'ConnectionNotification.ServiceId',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointId: this.__input.vpcEndpointId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ServiceId', props);
    return resource.getResponseField('ConnectionNotification.ServiceId') as unknown as string;
  }

  public get vpcEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.VpcEndpointId'),
        outputPath: 'ConnectionNotification.VpcEndpointId',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointId: this.__input.vpcEndpointId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.VpcEndpointId', props);
    return resource.getResponseField('ConnectionNotification.VpcEndpointId') as unknown as string;
  }

  public get connectionNotificationType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationType'),
        outputPath: 'ConnectionNotification.ConnectionNotificationType',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointId: this.__input.vpcEndpointId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationType', props);
    return resource.getResponseField('ConnectionNotification.ConnectionNotificationType') as unknown as string;
  }

  public get connectionNotificationArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationArn'),
        outputPath: 'ConnectionNotification.ConnectionNotificationArn',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointId: this.__input.vpcEndpointId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationArn', props);
    return resource.getResponseField('ConnectionNotification.ConnectionNotificationArn') as unknown as string;
  }

  public get connectionEvents(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionEvents'),
        outputPath: 'ConnectionNotification.ConnectionEvents',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointId: this.__input.vpcEndpointId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionEvents', props);
    return resource.getResponseField('ConnectionNotification.ConnectionEvents') as unknown as string[];
  }

  public get connectionNotificationState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationState'),
        outputPath: 'ConnectionNotification.ConnectionNotificationState',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointId: this.__input.vpcEndpointId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointConnectionNotification.ConnectionNotification.ConnectionNotificationState', props);
    return resource.getResponseField('ConnectionNotification.ConnectionNotificationState') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcEndpointServiceConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcEndpointServiceConfigurationRequest) {
  }

  public get serviceConfiguration(): EC2ResponsesCreateVpcEndpointServiceConfigurationServiceConfiguration {
    return new EC2ResponsesCreateVpcEndpointServiceConfigurationServiceConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcEndpointServiceConfigurationServiceConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcEndpointServiceConfigurationRequest) {
  }

  public get serviceType(): shapes.Ec2ServiceTypeDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceType'),
        outputPath: 'ServiceConfiguration.ServiceType',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceType', props);
    return resource.getResponseField('ServiceConfiguration.ServiceType') as unknown as shapes.Ec2ServiceTypeDetail[];
  }

  public get serviceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceId'),
        outputPath: 'ServiceConfiguration.ServiceId',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceId', props);
    return resource.getResponseField('ServiceConfiguration.ServiceId') as unknown as string;
  }

  public get serviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceName'),
        outputPath: 'ServiceConfiguration.ServiceName',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceName', props);
    return resource.getResponseField('ServiceConfiguration.ServiceName') as unknown as string;
  }

  public get serviceState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceState'),
        outputPath: 'ServiceConfiguration.ServiceState',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ServiceState', props);
    return resource.getResponseField('ServiceConfiguration.ServiceState') as unknown as string;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.AvailabilityZones'),
        outputPath: 'ServiceConfiguration.AvailabilityZones',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.AvailabilityZones', props);
    return resource.getResponseField('ServiceConfiguration.AvailabilityZones') as unknown as string[];
  }

  public get acceptanceRequired(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.AcceptanceRequired'),
        outputPath: 'ServiceConfiguration.AcceptanceRequired',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.AcceptanceRequired', props);
    return resource.getResponseField('ServiceConfiguration.AcceptanceRequired') as unknown as boolean;
  }

  public get managesVpcEndpoints(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ManagesVpcEndpoints'),
        outputPath: 'ServiceConfiguration.ManagesVpcEndpoints',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.ManagesVpcEndpoints', props);
    return resource.getResponseField('ServiceConfiguration.ManagesVpcEndpoints') as unknown as boolean;
  }

  public get networkLoadBalancerArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.NetworkLoadBalancerArns'),
        outputPath: 'ServiceConfiguration.NetworkLoadBalancerArns',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.NetworkLoadBalancerArns', props);
    return resource.getResponseField('ServiceConfiguration.NetworkLoadBalancerArns') as unknown as string[];
  }

  public get gatewayLoadBalancerArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.GatewayLoadBalancerArns'),
        outputPath: 'ServiceConfiguration.GatewayLoadBalancerArns',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.GatewayLoadBalancerArns', props);
    return resource.getResponseField('ServiceConfiguration.GatewayLoadBalancerArns') as unknown as string[];
  }

  public get baseEndpointDnsNames(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.BaseEndpointDnsNames'),
        outputPath: 'ServiceConfiguration.BaseEndpointDnsNames',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.BaseEndpointDnsNames', props);
    return resource.getResponseField('ServiceConfiguration.BaseEndpointDnsNames') as unknown as string[];
  }

  public get privateDnsName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsName'),
        outputPath: 'ServiceConfiguration.PrivateDnsName',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsName', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsName') as unknown as string;
  }

  public get privateDnsNameConfiguration(): EC2ResponsesCreateVpcEndpointServiceConfigurationServiceConfigurationPrivateDnsNameConfiguration {
    return new EC2ResponsesCreateVpcEndpointServiceConfigurationServiceConfigurationPrivateDnsNameConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.Tags'),
        outputPath: 'ServiceConfiguration.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.Tags', props);
    return resource.getResponseField('ServiceConfiguration.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesCreateVpcEndpointServiceConfigurationServiceConfigurationPrivateDnsNameConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcEndpointServiceConfigurationRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.State'),
        outputPath: 'ServiceConfiguration.PrivateDnsNameConfiguration.State',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.State', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsNameConfiguration.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Type'),
        outputPath: 'ServiceConfiguration.PrivateDnsNameConfiguration.Type',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Type', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsNameConfiguration.Type') as unknown as string;
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Value'),
        outputPath: 'ServiceConfiguration.PrivateDnsNameConfiguration.Value',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Value', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsNameConfiguration.Value') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Name'),
        outputPath: 'ServiceConfiguration.PrivateDnsNameConfiguration.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          AcceptanceRequired: this.__input.acceptanceRequired,
          PrivateDnsName: this.__input.privateDnsName,
          NetworkLoadBalancerArns: this.__input.networkLoadBalancerArns,
          GatewayLoadBalancerArns: this.__input.gatewayLoadBalancerArns,
          ClientToken: this.__input.clientToken,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcEndpointServiceConfiguration.ServiceConfiguration.PrivateDnsNameConfiguration.Name', props);
    return resource.getResponseField('ServiceConfiguration.PrivateDnsNameConfiguration.Name') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcPeeringConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
  }

  public get vpcPeeringConnection(): EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnection {
    return new EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnection(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
  }

  public get accepterVpcInfo(): EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo {
    return new EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo(this.__scope, this.__resources, this.__input);
  }

  public get expirationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.ExpirationTime'),
        outputPath: 'VpcPeeringConnection.ExpirationTime',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.ExpirationTime', props);
    return resource.getResponseField('VpcPeeringConnection.ExpirationTime') as unknown as string;
  }

  public get requesterVpcInfo(): EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo {
    return new EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo(this.__scope, this.__resources, this.__input);
  }

  public get status(): EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionStatus {
    return new EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionStatus(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.Tags'),
        outputPath: 'VpcPeeringConnection.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.Tags', props);
    return resource.getResponseField('VpcPeeringConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vpcPeeringConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.VpcPeeringConnectionId'),
        outputPath: 'VpcPeeringConnection.VpcPeeringConnectionId',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.VpcPeeringConnectionId', props);
    return resource.getResponseField('VpcPeeringConnection.VpcPeeringConnectionId') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlock'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.CidrBlock',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlock', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockSet(): shapes.Ec2Ipv6CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.Ipv6CidrBlockSet') as unknown as shapes.Ec2Ipv6CidrBlock[];
  }

  public get cidrBlockSet(): shapes.Ec2CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.CidrBlockSet') as unknown as shapes.Ec2CidrBlock[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.OwnerId'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.OwnerId', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.OwnerId') as unknown as string;
  }

  public get peeringOptions(): EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions {
    return new EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.VpcId'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.VpcId',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.VpcId', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.VpcId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Region'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.Region',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.Region', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionAccepterVpcInfoPeeringOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('VpcPeeringConnection.AccepterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlock'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.CidrBlock',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlock', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockSet(): shapes.Ec2Ipv6CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.Ipv6CidrBlockSet') as unknown as shapes.Ec2Ipv6CidrBlock[];
  }

  public get cidrBlockSet(): shapes.Ec2CidrBlock[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.CidrBlockSet') as unknown as shapes.Ec2CidrBlock[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.OwnerId'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.OwnerId', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.OwnerId') as unknown as string;
  }

  public get peeringOptions(): EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions {
    return new EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.VpcId'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.VpcId',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.VpcId', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.VpcId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Region'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.Region',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.Region', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionRequesterVpcInfoPeeringOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('VpcPeeringConnection.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2ResponsesCreateVpcPeeringConnectionVpcPeeringConnectionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpcPeeringConnectionRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.Status.Code'),
        outputPath: 'VpcPeeringConnection.Status.Code',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.Status.Code', props);
    return resource.getResponseField('VpcPeeringConnection.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpcPeeringConnection.VpcPeeringConnection.Status.Message'),
        outputPath: 'VpcPeeringConnection.Status.Message',
        parameters: {
          DryRun: this.__input.dryRun,
          PeerOwnerId: this.__input.peerOwnerId,
          PeerVpcId: this.__input.peerVpcId,
          VpcId: this.__input.vpcId,
          PeerRegion: this.__input.peerRegion,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpcPeeringConnection.VpcPeeringConnection.Status.Message', props);
    return resource.getResponseField('VpcPeeringConnection.Status.Message') as unknown as string;
  }

}

export class EC2ResponsesCreateVpnConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpnConnectionRequest) {
  }

  public get vpnConnection(): EC2ResponsesCreateVpnConnectionVpnConnection {
    return new EC2ResponsesCreateVpnConnectionVpnConnection(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateVpnConnectionVpnConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpnConnectionRequest) {
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ResponsesCreateVpnConnectionVpnConnectionOptions {
    return new EC2ResponsesCreateVpnConnectionVpnConnectionOptions(this.__scope, this.__resources, this.__input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ResponsesCreateVpnConnectionVpnConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpnConnectionRequest) {
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnConnection.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          CustomerGatewayId: this.__input.customerGatewayId,
          Type: this.__input.type,
          VpnGatewayId: this.__input.vpnGatewayId,
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
          Options: {
            EnableAcceleration: this.__input.options?.enableAcceleration,
            StaticRoutesOnly: this.__input.options?.staticRoutesOnly,
            TunnelInsideIpVersion: this.__input.options?.tunnelInsideIpVersion,
            TunnelOptions: this.__input.options?.tunnelOptions,
            LocalIpv4NetworkCidr: this.__input.options?.localIpv4NetworkCidr,
            RemoteIpv4NetworkCidr: this.__input.options?.remoteIpv4NetworkCidr,
            LocalIpv6NetworkCidr: this.__input.options?.localIpv6NetworkCidr,
            RemoteIpv6NetworkCidr: this.__input.options?.remoteIpv6NetworkCidr,
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnConnection.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2ResponsesCreateVpnGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpnGatewayRequest) {
  }

  public get vpnGateway(): EC2ResponsesCreateVpnGatewayVpnGateway {
    return new EC2ResponsesCreateVpnGatewayVpnGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesCreateVpnGatewayVpnGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2CreateVpnGatewayRequest) {
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.AvailabilityZone'),
        outputPath: 'VpnGateway.AvailabilityZone',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          AmazonSideAsn: this.__input.amazonSideAsn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnGateway.VpnGateway.AvailabilityZone', props);
    return resource.getResponseField('VpnGateway.AvailabilityZone') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.State'),
        outputPath: 'VpnGateway.State',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          AmazonSideAsn: this.__input.amazonSideAsn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnGateway.VpnGateway.State', props);
    return resource.getResponseField('VpnGateway.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.Type'),
        outputPath: 'VpnGateway.Type',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          AmazonSideAsn: this.__input.amazonSideAsn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnGateway.VpnGateway.Type', props);
    return resource.getResponseField('VpnGateway.Type') as unknown as string;
  }

  public get vpcAttachments(): shapes.Ec2VpcAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.VpcAttachments'),
        outputPath: 'VpnGateway.VpcAttachments',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          AmazonSideAsn: this.__input.amazonSideAsn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnGateway.VpnGateway.VpcAttachments', props);
    return resource.getResponseField('VpnGateway.VpcAttachments') as unknown as shapes.Ec2VpcAttachment[];
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.VpnGatewayId'),
        outputPath: 'VpnGateway.VpnGatewayId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          AmazonSideAsn: this.__input.amazonSideAsn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnGateway.VpnGateway.VpnGatewayId', props);
    return resource.getResponseField('VpnGateway.VpnGatewayId') as unknown as string;
  }

  public get amazonSideAsn(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.AmazonSideAsn'),
        outputPath: 'VpnGateway.AmazonSideAsn',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          AmazonSideAsn: this.__input.amazonSideAsn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnGateway.VpnGateway.AmazonSideAsn', props);
    return resource.getResponseField('VpnGateway.AmazonSideAsn') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createVpnGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.CreateVpnGateway.VpnGateway.Tags'),
        outputPath: 'VpnGateway.Tags',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Type: this.__input.type,
          TagSpecifications: this.__input.tagSpecifications,
          AmazonSideAsn: this.__input.amazonSideAsn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateVpnGateway.VpnGateway.Tags', props);
    return resource.getResponseField('VpnGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteCarrierGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteCarrierGatewayRequest) {
  }

  public get carrierGateway(): EC2ResponsesDeleteCarrierGatewayCarrierGateway {
    return new EC2ResponsesDeleteCarrierGatewayCarrierGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteCarrierGatewayCarrierGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteCarrierGatewayRequest) {
  }

  public get carrierGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.CarrierGatewayId'),
        outputPath: 'CarrierGateway.CarrierGatewayId',
        parameters: {
          CarrierGatewayId: this.__input.carrierGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCarrierGateway.CarrierGateway.CarrierGatewayId', props);
    return resource.getResponseField('CarrierGateway.CarrierGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.VpcId'),
        outputPath: 'CarrierGateway.VpcId',
        parameters: {
          CarrierGatewayId: this.__input.carrierGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCarrierGateway.CarrierGateway.VpcId', props);
    return resource.getResponseField('CarrierGateway.VpcId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.State'),
        outputPath: 'CarrierGateway.State',
        parameters: {
          CarrierGatewayId: this.__input.carrierGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCarrierGateway.CarrierGateway.State', props);
    return resource.getResponseField('CarrierGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.OwnerId'),
        outputPath: 'CarrierGateway.OwnerId',
        parameters: {
          CarrierGatewayId: this.__input.carrierGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCarrierGateway.CarrierGateway.OwnerId', props);
    return resource.getResponseField('CarrierGateway.OwnerId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCarrierGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteCarrierGateway.CarrierGateway.Tags'),
        outputPath: 'CarrierGateway.Tags',
        parameters: {
          CarrierGatewayId: this.__input.carrierGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCarrierGateway.CarrierGateway.Tags', props);
    return resource.getResponseField('CarrierGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteClientVpnEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteClientVpnEndpointRequest) {
  }

  public get status(): EC2ResponsesDeleteClientVpnEndpointStatus {
    return new EC2ResponsesDeleteClientVpnEndpointStatus(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteClientVpnEndpointStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteClientVpnEndpointRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteClientVpnEndpoint.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClientVpnEndpoint.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteClientVpnEndpoint.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClientVpnEndpoint.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesDeleteClientVpnRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteClientVpnRouteRequest) {
  }

  public get status(): EC2ResponsesDeleteClientVpnRouteStatus {
    return new EC2ResponsesDeleteClientVpnRouteStatus(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteClientVpnRouteStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteClientVpnRouteRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClientVpnRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteClientVpnRoute.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          TargetVpcSubnetId: this.__input.targetVpcSubnetId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClientVpnRoute.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteClientVpnRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteClientVpnRoute.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          TargetVpcSubnetId: this.__input.targetVpcSubnetId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteClientVpnRoute.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesDeleteEgressOnlyInternetGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteEgressOnlyInternetGatewayRequest) {
  }

  public get returnCode(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEgressOnlyInternetGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteEgressOnlyInternetGateway.ReturnCode'),
        outputPath: 'ReturnCode',
        parameters: {
          DryRun: this.__input.dryRun,
          EgressOnlyInternetGatewayId: this.__input.egressOnlyInternetGatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEgressOnlyInternetGateway.ReturnCode', props);
    return resource.getResponseField('ReturnCode') as unknown as boolean;
  }

}

export class EC2ResponsesDeleteFleets {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteFleetsRequest) {
  }

  public get successfulFleetDeletions(): shapes.Ec2DeleteFleetSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFleets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteFleets.SuccessfulFleetDeletions'),
        outputPath: 'SuccessfulFleetDeletions',
        parameters: {
          DryRun: this.__input.dryRun,
          FleetIds: this.__input.fleetIds,
          TerminateInstances: this.__input.terminateInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteFleets.SuccessfulFleetDeletions', props);
    return resource.getResponseField('SuccessfulFleetDeletions') as unknown as shapes.Ec2DeleteFleetSuccessItem[];
  }

  public get unsuccessfulFleetDeletions(): shapes.Ec2DeleteFleetErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFleets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteFleets.UnsuccessfulFleetDeletions'),
        outputPath: 'UnsuccessfulFleetDeletions',
        parameters: {
          DryRun: this.__input.dryRun,
          FleetIds: this.__input.fleetIds,
          TerminateInstances: this.__input.terminateInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteFleets.UnsuccessfulFleetDeletions', props);
    return resource.getResponseField('UnsuccessfulFleetDeletions') as unknown as shapes.Ec2DeleteFleetErrorItem[];
  }

}

export class EC2ResponsesDeleteFlowLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteFlowLogsRequest) {
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteFlowLogs.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.__input.dryRun,
          FlowLogIds: this.__input.flowLogIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteFlowLogs.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesDeleteFpgaImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteFpgaImageRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFpgaImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteFpgaImage.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteFpgaImage.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesDeleteInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteInstanceEventWindowRequest) {
  }

  public get instanceEventWindowState(): EC2ResponsesDeleteInstanceEventWindowInstanceEventWindowState {
    return new EC2ResponsesDeleteInstanceEventWindowInstanceEventWindowState(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteInstanceEventWindowInstanceEventWindowState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteInstanceEventWindowRequest) {
  }

  public get instanceEventWindowId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteInstanceEventWindow.InstanceEventWindowState.InstanceEventWindowId'),
        outputPath: 'InstanceEventWindowState.InstanceEventWindowId',
        parameters: {
          DryRun: this.__input.dryRun,
          ForceDelete: this.__input.forceDelete,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstanceEventWindow.InstanceEventWindowState.InstanceEventWindowId', props);
    return resource.getResponseField('InstanceEventWindowState.InstanceEventWindowId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteInstanceEventWindow.InstanceEventWindowState.State'),
        outputPath: 'InstanceEventWindowState.State',
        parameters: {
          DryRun: this.__input.dryRun,
          ForceDelete: this.__input.forceDelete,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstanceEventWindow.InstanceEventWindowState.State', props);
    return resource.getResponseField('InstanceEventWindowState.State') as unknown as string;
  }

}

export class EC2ResponsesDeleteLaunchTemplate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteLaunchTemplateRequest) {
  }

  public get launchTemplate(): EC2ResponsesDeleteLaunchTemplateLaunchTemplate {
    return new EC2ResponsesDeleteLaunchTemplateLaunchTemplate(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteLaunchTemplateLaunchTemplate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteLaunchTemplateRequest) {
  }

  public get launchTemplateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.LaunchTemplateId'),
        outputPath: 'LaunchTemplate.LaunchTemplateId',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplate.LaunchTemplate.LaunchTemplateId', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateId') as unknown as string;
  }

  public get launchTemplateName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.LaunchTemplateName'),
        outputPath: 'LaunchTemplate.LaunchTemplateName',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplate.LaunchTemplate.LaunchTemplateName', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateName') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.CreateTime'),
        outputPath: 'LaunchTemplate.CreateTime',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplate.LaunchTemplate.CreateTime', props);
    return resource.getResponseField('LaunchTemplate.CreateTime') as unknown as string;
  }

  public get createdBy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.CreatedBy'),
        outputPath: 'LaunchTemplate.CreatedBy',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplate.LaunchTemplate.CreatedBy', props);
    return resource.getResponseField('LaunchTemplate.CreatedBy') as unknown as string;
  }

  public get defaultVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.DefaultVersionNumber'),
        outputPath: 'LaunchTemplate.DefaultVersionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplate.LaunchTemplate.DefaultVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.DefaultVersionNumber') as unknown as number;
  }

  public get latestVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.LatestVersionNumber'),
        outputPath: 'LaunchTemplate.LatestVersionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplate.LaunchTemplate.LatestVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.LatestVersionNumber') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplate.LaunchTemplate.Tags'),
        outputPath: 'LaunchTemplate.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplate.LaunchTemplate.Tags', props);
    return resource.getResponseField('LaunchTemplate.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteLaunchTemplateVersions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteLaunchTemplateVersionsRequest) {
  }

  public get successfullyDeletedLaunchTemplateVersions(): shapes.Ec2DeleteLaunchTemplateVersionsResponseSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplateVersions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplateVersions.SuccessfullyDeletedLaunchTemplateVersions'),
        outputPath: 'SuccessfullyDeletedLaunchTemplateVersions',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          Versions: this.__input.versions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplateVersions.SuccessfullyDeletedLaunchTemplateVersions', props);
    return resource.getResponseField('SuccessfullyDeletedLaunchTemplateVersions') as unknown as shapes.Ec2DeleteLaunchTemplateVersionsResponseSuccessItem[];
  }

  public get unsuccessfullyDeletedLaunchTemplateVersions(): shapes.Ec2DeleteLaunchTemplateVersionsResponseErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLaunchTemplateVersions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLaunchTemplateVersions.UnsuccessfullyDeletedLaunchTemplateVersions'),
        outputPath: 'UnsuccessfullyDeletedLaunchTemplateVersions',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          Versions: this.__input.versions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLaunchTemplateVersions.UnsuccessfullyDeletedLaunchTemplateVersions', props);
    return resource.getResponseField('UnsuccessfullyDeletedLaunchTemplateVersions') as unknown as shapes.Ec2DeleteLaunchTemplateVersionsResponseErrorItem[];
  }

}

export class EC2ResponsesDeleteLocalGatewayRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteLocalGatewayRouteRequest) {
  }

  public get route(): EC2ResponsesDeleteLocalGatewayRouteRoute {
    return new EC2ResponsesDeleteLocalGatewayRouteRoute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteLocalGatewayRouteRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteLocalGatewayRouteRequest) {
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get localGatewayVirtualInterfaceGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.LocalGatewayVirtualInterfaceGroupId'),
        outputPath: 'Route.LocalGatewayVirtualInterfaceGroupId',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRoute.Route.LocalGatewayVirtualInterfaceGroupId', props);
    return resource.getResponseField('Route.LocalGatewayVirtualInterfaceGroupId') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.LocalGatewayRouteTableId'),
        outputPath: 'Route.LocalGatewayRouteTableId',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRoute.Route.LocalGatewayRouteTableId', props);
    return resource.getResponseField('Route.LocalGatewayRouteTableId') as unknown as string;
  }

  public get localGatewayRouteTableArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.LocalGatewayRouteTableArn'),
        outputPath: 'Route.LocalGatewayRouteTableArn',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRoute.Route.LocalGatewayRouteTableArn', props);
    return resource.getResponseField('Route.LocalGatewayRouteTableArn') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRoute.Route.OwnerId'),
        outputPath: 'Route.OwnerId',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRoute.Route.OwnerId', props);
    return resource.getResponseField('Route.OwnerId') as unknown as string;
  }

}

export class EC2ResponsesDeleteLocalGatewayRouteTableVpcAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest) {
  }

  public get localGatewayRouteTableVpcAssociation(): EC2ResponsesDeleteLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation {
    return new EC2ResponsesDeleteLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteLocalGatewayRouteTableVpcAssociationLocalGatewayRouteTableVpcAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest) {
  }

  public get localGatewayRouteTableVpcAssociationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.__input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociationId') as unknown as string;
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.__input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableId') as unknown as string;
  }

  public get localGatewayRouteTableArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.__input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableArn') as unknown as string;
  }

  public get localGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.LocalGatewayId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.__input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.LocalGatewayId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.LocalGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.VpcId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.VpcId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.__input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.VpcId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.VpcId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.OwnerId'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.OwnerId',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.__input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.OwnerId', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.OwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.State'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.State',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.__input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.State', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.State') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteLocalGatewayRouteTableVpcAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.Tags'),
        outputPath: 'LocalGatewayRouteTableVpcAssociation.Tags',
        parameters: {
          LocalGatewayRouteTableVpcAssociationId: this.__input.localGatewayRouteTableVpcAssociationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteLocalGatewayRouteTableVpcAssociation.LocalGatewayRouteTableVpcAssociation.Tags', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociation.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteManagedPrefixList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteManagedPrefixListRequest) {
  }

  public get prefixList(): EC2ResponsesDeleteManagedPrefixListPrefixList {
    return new EC2ResponsesDeleteManagedPrefixListPrefixList(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteManagedPrefixListPrefixList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteManagedPrefixListRequest) {
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.PrefixListId'),
        outputPath: 'PrefixList.PrefixListId',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.PrefixListId', props);
    return resource.getResponseField('PrefixList.PrefixListId') as unknown as string;
  }

  public get addressFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.AddressFamily'),
        outputPath: 'PrefixList.AddressFamily',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.AddressFamily', props);
    return resource.getResponseField('PrefixList.AddressFamily') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.State'),
        outputPath: 'PrefixList.State',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.State', props);
    return resource.getResponseField('PrefixList.State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.StateMessage'),
        outputPath: 'PrefixList.StateMessage',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.StateMessage', props);
    return resource.getResponseField('PrefixList.StateMessage') as unknown as string;
  }

  public get prefixListArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.PrefixListArn'),
        outputPath: 'PrefixList.PrefixListArn',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.PrefixListArn', props);
    return resource.getResponseField('PrefixList.PrefixListArn') as unknown as string;
  }

  public get prefixListName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.PrefixListName'),
        outputPath: 'PrefixList.PrefixListName',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.PrefixListName', props);
    return resource.getResponseField('PrefixList.PrefixListName') as unknown as string;
  }

  public get maxEntries(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.MaxEntries'),
        outputPath: 'PrefixList.MaxEntries',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.MaxEntries', props);
    return resource.getResponseField('PrefixList.MaxEntries') as unknown as number;
  }

  public get version(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.Version'),
        outputPath: 'PrefixList.Version',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.Version', props);
    return resource.getResponseField('PrefixList.Version') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.Tags'),
        outputPath: 'PrefixList.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.Tags', props);
    return resource.getResponseField('PrefixList.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteManagedPrefixList.PrefixList.OwnerId'),
        outputPath: 'PrefixList.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteManagedPrefixList.PrefixList.OwnerId', props);
    return resource.getResponseField('PrefixList.OwnerId') as unknown as string;
  }

}

export class EC2ResponsesDeleteNatGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteNatGatewayRequest) {
  }

  public get natGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNatGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNatGateway.NatGatewayId'),
        outputPath: 'NatGatewayId',
        parameters: {
          DryRun: this.__input.dryRun,
          NatGatewayId: this.__input.natGatewayId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteNatGateway.NatGatewayId', props);
    return resource.getResponseField('NatGatewayId') as unknown as string;
  }

}

export class EC2ResponsesDeleteNetworkInsightsAnalysis {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteNetworkInsightsAnalysisRequest) {
  }

  public get networkInsightsAnalysisId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkInsightsAnalysis.NetworkInsightsAnalysisId'),
        outputPath: 'NetworkInsightsAnalysisId',
        parameters: {
          DryRun: this.__input.dryRun,
          NetworkInsightsAnalysisId: this.__input.networkInsightsAnalysisId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteNetworkInsightsAnalysis.NetworkInsightsAnalysisId', props);
    return resource.getResponseField('NetworkInsightsAnalysisId') as unknown as string;
  }

}

export class EC2ResponsesDeleteNetworkInsightsPath {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteNetworkInsightsPathRequest) {
  }

  public get networkInsightsPathId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkInsightsPath',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkInsightsPath.NetworkInsightsPathId'),
        outputPath: 'NetworkInsightsPathId',
        parameters: {
          DryRun: this.__input.dryRun,
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteNetworkInsightsPath.NetworkInsightsPathId', props);
    return resource.getResponseField('NetworkInsightsPathId') as unknown as string;
  }

}

export class EC2ResponsesDeleteNetworkInterfacePermission {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteNetworkInterfacePermissionRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteNetworkInterfacePermission',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteNetworkInterfacePermission.Return'),
        outputPath: 'Return',
        parameters: {
          NetworkInterfacePermissionId: this.__input.networkInterfacePermissionId,
          Force: this.__input.force,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteNetworkInterfacePermission.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesDeleteQueuedReservedInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteQueuedReservedInstancesRequest) {
  }

  public get successfulQueuedPurchaseDeletions(): shapes.Ec2SuccessfulQueuedPurchaseDeletion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteQueuedReservedInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteQueuedReservedInstances.SuccessfulQueuedPurchaseDeletions'),
        outputPath: 'SuccessfulQueuedPurchaseDeletions',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstancesIds: this.__input.reservedInstancesIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteQueuedReservedInstances.SuccessfulQueuedPurchaseDeletions', props);
    return resource.getResponseField('SuccessfulQueuedPurchaseDeletions') as unknown as shapes.Ec2SuccessfulQueuedPurchaseDeletion[];
  }

  public get failedQueuedPurchaseDeletions(): shapes.Ec2FailedQueuedPurchaseDeletion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteQueuedReservedInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteQueuedReservedInstances.FailedQueuedPurchaseDeletions'),
        outputPath: 'FailedQueuedPurchaseDeletions',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstancesIds: this.__input.reservedInstancesIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteQueuedReservedInstances.FailedQueuedPurchaseDeletions', props);
    return resource.getResponseField('FailedQueuedPurchaseDeletions') as unknown as shapes.Ec2FailedQueuedPurchaseDeletion[];
  }

}

export class EC2ResponsesDeleteSubnetCidrReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteSubnetCidrReservationRequest) {
  }

  public get deletedSubnetCidrReservation(): EC2ResponsesDeleteSubnetCidrReservationDeletedSubnetCidrReservation {
    return new EC2ResponsesDeleteSubnetCidrReservationDeletedSubnetCidrReservation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteSubnetCidrReservationDeletedSubnetCidrReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteSubnetCidrReservationRequest) {
  }

  public get subnetCidrReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.SubnetCidrReservationId'),
        outputPath: 'DeletedSubnetCidrReservation.SubnetCidrReservationId',
        parameters: {
          SubnetCidrReservationId: this.__input.subnetCidrReservationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.SubnetCidrReservationId', props);
    return resource.getResponseField('DeletedSubnetCidrReservation.SubnetCidrReservationId') as unknown as string;
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.SubnetId'),
        outputPath: 'DeletedSubnetCidrReservation.SubnetId',
        parameters: {
          SubnetCidrReservationId: this.__input.subnetCidrReservationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.SubnetId', props);
    return resource.getResponseField('DeletedSubnetCidrReservation.SubnetId') as unknown as string;
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.Cidr'),
        outputPath: 'DeletedSubnetCidrReservation.Cidr',
        parameters: {
          SubnetCidrReservationId: this.__input.subnetCidrReservationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.Cidr', props);
    return resource.getResponseField('DeletedSubnetCidrReservation.Cidr') as unknown as string;
  }

  public get reservationType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.ReservationType'),
        outputPath: 'DeletedSubnetCidrReservation.ReservationType',
        parameters: {
          SubnetCidrReservationId: this.__input.subnetCidrReservationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.ReservationType', props);
    return resource.getResponseField('DeletedSubnetCidrReservation.ReservationType') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.OwnerId'),
        outputPath: 'DeletedSubnetCidrReservation.OwnerId',
        parameters: {
          SubnetCidrReservationId: this.__input.subnetCidrReservationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.OwnerId', props);
    return resource.getResponseField('DeletedSubnetCidrReservation.OwnerId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.Description'),
        outputPath: 'DeletedSubnetCidrReservation.Description',
        parameters: {
          SubnetCidrReservationId: this.__input.subnetCidrReservationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.Description', props);
    return resource.getResponseField('DeletedSubnetCidrReservation.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSubnetCidrReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.Tags'),
        outputPath: 'DeletedSubnetCidrReservation.Tags',
        parameters: {
          SubnetCidrReservationId: this.__input.subnetCidrReservationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteSubnetCidrReservation.DeletedSubnetCidrReservation.Tags', props);
    return resource.getResponseField('DeletedSubnetCidrReservation.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteTrafficMirrorFilter {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTrafficMirrorFilterRequest) {
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTrafficMirrorFilter',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTrafficMirrorFilter.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTrafficMirrorFilter.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilterId') as unknown as string;
  }

}

export class EC2ResponsesDeleteTrafficMirrorFilterRule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTrafficMirrorFilterRuleRequest) {
  }

  public get trafficMirrorFilterRuleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTrafficMirrorFilterRule.TrafficMirrorFilterRuleId'),
        outputPath: 'TrafficMirrorFilterRuleId',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTrafficMirrorFilterRule.TrafficMirrorFilterRuleId', props);
    return resource.getResponseField('TrafficMirrorFilterRuleId') as unknown as string;
  }

}

export class EC2ResponsesDeleteTrafficMirrorSession {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTrafficMirrorSessionRequest) {
  }

  public get trafficMirrorSessionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTrafficMirrorSession.TrafficMirrorSessionId'),
        outputPath: 'TrafficMirrorSessionId',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTrafficMirrorSession.TrafficMirrorSessionId', props);
    return resource.getResponseField('TrafficMirrorSessionId') as unknown as string;
  }

}

export class EC2ResponsesDeleteTrafficMirrorTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTrafficMirrorTargetRequest) {
  }

  public get trafficMirrorTargetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTrafficMirrorTarget',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTrafficMirrorTarget.TrafficMirrorTargetId'),
        outputPath: 'TrafficMirrorTargetId',
        parameters: {
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTrafficMirrorTarget.TrafficMirrorTargetId', props);
    return resource.getResponseField('TrafficMirrorTargetId') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayRequest) {
  }

  public get transitGateway(): EC2ResponsesDeleteTransitGatewayTransitGateway {
    return new EC2ResponsesDeleteTransitGatewayTransitGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayTransitGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.TransitGatewayId'),
        outputPath: 'TransitGateway.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.TransitGatewayId', props);
    return resource.getResponseField('TransitGateway.TransitGatewayId') as unknown as string;
  }

  public get transitGatewayArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.TransitGatewayArn'),
        outputPath: 'TransitGateway.TransitGatewayArn',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.TransitGatewayArn', props);
    return resource.getResponseField('TransitGateway.TransitGatewayArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.State'),
        outputPath: 'TransitGateway.State',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.State', props);
    return resource.getResponseField('TransitGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.OwnerId'),
        outputPath: 'TransitGateway.OwnerId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.OwnerId', props);
    return resource.getResponseField('TransitGateway.OwnerId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Description'),
        outputPath: 'TransitGateway.Description',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Description', props);
    return resource.getResponseField('TransitGateway.Description') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.CreationTime'),
        outputPath: 'TransitGateway.CreationTime',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.CreationTime', props);
    return resource.getResponseField('TransitGateway.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesDeleteTransitGatewayTransitGatewayOptions {
    return new EC2ResponsesDeleteTransitGatewayTransitGatewayOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Tags'),
        outputPath: 'TransitGateway.Tags',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Tags', props);
    return resource.getResponseField('TransitGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteTransitGatewayTransitGatewayOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayRequest) {
  }

  public get amazonSideAsn(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.AmazonSideAsn'),
        outputPath: 'TransitGateway.Options.AmazonSideAsn',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.AmazonSideAsn', props);
    return resource.getResponseField('TransitGateway.Options.AmazonSideAsn') as unknown as number;
  }

  public get transitGatewayCidrBlocks(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.TransitGatewayCidrBlocks'),
        outputPath: 'TransitGateway.Options.TransitGatewayCidrBlocks',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.TransitGatewayCidrBlocks', props);
    return resource.getResponseField('TransitGateway.Options.TransitGatewayCidrBlocks') as unknown as string[];
  }

  public get autoAcceptSharedAttachments(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments'),
        outputPath: 'TransitGateway.Options.AutoAcceptSharedAttachments',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments', props);
    return resource.getResponseField('TransitGateway.Options.AutoAcceptSharedAttachments') as unknown as string;
  }

  public get defaultRouteTableAssociation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTableAssociation',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTableAssociation') as unknown as string;
  }

  public get associationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.AssociationDefaultRouteTableId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.AssociationDefaultRouteTableId') as unknown as string;
  }

  public get defaultRouteTablePropagation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTablePropagation',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTablePropagation') as unknown as string;
  }

  public get propagationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.PropagationDefaultRouteTableId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.PropagationDefaultRouteTableId') as unknown as string;
  }

  public get vpnEcmpSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.VpnEcmpSupport'),
        outputPath: 'TransitGateway.Options.VpnEcmpSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.VpnEcmpSupport', props);
    return resource.getResponseField('TransitGateway.Options.VpnEcmpSupport') as unknown as string;
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.DnsSupport'),
        outputPath: 'TransitGateway.Options.DnsSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.DnsSupport', props);
    return resource.getResponseField('TransitGateway.Options.DnsSupport') as unknown as string;
  }

  public get multicastSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGateway.TransitGateway.Options.MulticastSupport'),
        outputPath: 'TransitGateway.Options.MulticastSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGateway.TransitGateway.Options.MulticastSupport', props);
    return resource.getResponseField('TransitGateway.Options.MulticastSupport') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGatewayConnect {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayConnectRequest) {
  }

  public get transitGatewayConnect(): EC2ResponsesDeleteTransitGatewayConnectTransitGatewayConnect {
    return new EC2ResponsesDeleteTransitGatewayConnectTransitGatewayConnect(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayConnectTransitGatewayConnect {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayConnectRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnect.TransitGatewayConnect.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayConnect.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnect.TransitGatewayConnect.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayConnect.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transportTransitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnect.TransitGatewayConnect.TransportTransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayConnect.TransportTransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnect.TransitGatewayConnect.TransportTransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayConnect.TransportTransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnect.TransitGatewayConnect.TransitGatewayId'),
        outputPath: 'TransitGatewayConnect.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnect.TransitGatewayConnect.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayConnect.TransitGatewayId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnect.TransitGatewayConnect.State'),
        outputPath: 'TransitGatewayConnect.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnect.TransitGatewayConnect.State', props);
    return resource.getResponseField('TransitGatewayConnect.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnect.TransitGatewayConnect.CreationTime'),
        outputPath: 'TransitGatewayConnect.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnect.TransitGatewayConnect.CreationTime', props);
    return resource.getResponseField('TransitGatewayConnect.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesDeleteTransitGatewayConnectTransitGatewayConnectOptions {
    return new EC2ResponsesDeleteTransitGatewayConnectTransitGatewayConnectOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnect.TransitGatewayConnect.Tags'),
        outputPath: 'TransitGatewayConnect.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnect.TransitGatewayConnect.Tags', props);
    return resource.getResponseField('TransitGatewayConnect.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteTransitGatewayConnectTransitGatewayConnectOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayConnectRequest) {
  }

  public get protocol(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnect',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnect.TransitGatewayConnect.Options.Protocol'),
        outputPath: 'TransitGatewayConnect.Options.Protocol',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnect.TransitGatewayConnect.Options.Protocol', props);
    return resource.getResponseField('TransitGatewayConnect.Options.Protocol') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGatewayConnectPeer {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayConnectPeerRequest) {
  }

  public get transitGatewayConnectPeer(): EC2ResponsesDeleteTransitGatewayConnectPeerTransitGatewayConnectPeer {
    return new EC2ResponsesDeleteTransitGatewayConnectPeerTransitGatewayConnectPeer(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayConnectPeerTransitGatewayConnectPeer {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayConnectPeerRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayConnectPeer.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayConnectPeer.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayConnectPeerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.TransitGatewayConnectPeerId'),
        outputPath: 'TransitGatewayConnectPeer.TransitGatewayConnectPeerId',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.TransitGatewayConnectPeerId', props);
    return resource.getResponseField('TransitGatewayConnectPeer.TransitGatewayConnectPeerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.State'),
        outputPath: 'TransitGatewayConnectPeer.State',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.State', props);
    return resource.getResponseField('TransitGatewayConnectPeer.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.CreationTime'),
        outputPath: 'TransitGatewayConnectPeer.CreationTime',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.CreationTime', props);
    return resource.getResponseField('TransitGatewayConnectPeer.CreationTime') as unknown as string;
  }

  public get connectPeerConfiguration(): EC2ResponsesDeleteTransitGatewayConnectPeerTransitGatewayConnectPeerConnectPeerConfiguration {
    return new EC2ResponsesDeleteTransitGatewayConnectPeerTransitGatewayConnectPeerConnectPeerConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.Tags'),
        outputPath: 'TransitGatewayConnectPeer.Tags',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.Tags', props);
    return resource.getResponseField('TransitGatewayConnectPeer.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteTransitGatewayConnectPeerTransitGatewayConnectPeerConnectPeerConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayConnectPeerRequest) {
  }

  public get transitGatewayAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.TransitGatewayAddress'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.TransitGatewayAddress',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.TransitGatewayAddress', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.TransitGatewayAddress') as unknown as string;
  }

  public get peerAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.PeerAddress'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.PeerAddress',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.PeerAddress', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.PeerAddress') as unknown as string;
  }

  public get insideCidrBlocks(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.InsideCidrBlocks'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.InsideCidrBlocks',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.InsideCidrBlocks', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.InsideCidrBlocks') as unknown as string[];
  }

  public get protocol(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.Protocol'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.Protocol',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.Protocol', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.Protocol') as unknown as string;
  }

  public get bgpConfigurations(): shapes.Ec2TransitGatewayAttachmentBgpConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayConnectPeer',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.BgpConfigurations'),
        outputPath: 'TransitGatewayConnectPeer.ConnectPeerConfiguration.BgpConfigurations',
        parameters: {
          TransitGatewayConnectPeerId: this.__input.transitGatewayConnectPeerId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayConnectPeer.TransitGatewayConnectPeer.ConnectPeerConfiguration.BgpConfigurations', props);
    return resource.getResponseField('TransitGatewayConnectPeer.ConnectPeerConfiguration.BgpConfigurations') as unknown as shapes.Ec2TransitGatewayAttachmentBgpConfiguration[];
  }

}

export class EC2ResponsesDeleteTransitGatewayMulticastDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayMulticastDomainRequest) {
  }

  public get transitGatewayMulticastDomain(): EC2ResponsesDeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomain {
    return new EC2ResponsesDeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomain(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayMulticastDomainRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayId'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayId') as unknown as string;
  }

  public get transitGatewayMulticastDomainArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainArn'),
        outputPath: 'TransitGatewayMulticastDomain.TransitGatewayMulticastDomainArn',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainArn', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.TransitGatewayMulticastDomainArn') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.OwnerId'),
        outputPath: 'TransitGatewayMulticastDomain.OwnerId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.OwnerId', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.OwnerId') as unknown as string;
  }

  public get options(): EC2ResponsesDeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomainOptions {
    return new EC2ResponsesDeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomainOptions(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.State'),
        outputPath: 'TransitGatewayMulticastDomain.State',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.State', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.CreationTime'),
        outputPath: 'TransitGatewayMulticastDomain.CreationTime',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.CreationTime', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Tags'),
        outputPath: 'TransitGatewayMulticastDomain.Tags',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Tags', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteTransitGatewayMulticastDomainTransitGatewayMulticastDomainOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayMulticastDomainRequest) {
  }

  public get igmpv2Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.Igmpv2Support'),
        outputPath: 'TransitGatewayMulticastDomain.Options.Igmpv2Support',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.Igmpv2Support', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Options.Igmpv2Support') as unknown as string;
  }

  public get staticSourcesSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.StaticSourcesSupport'),
        outputPath: 'TransitGatewayMulticastDomain.Options.StaticSourcesSupport',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.StaticSourcesSupport', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Options.StaticSourcesSupport') as unknown as string;
  }

  public get autoAcceptSharedAssociations(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.AutoAcceptSharedAssociations'),
        outputPath: 'TransitGatewayMulticastDomain.Options.AutoAcceptSharedAssociations',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayMulticastDomain.TransitGatewayMulticastDomain.Options.AutoAcceptSharedAssociations', props);
    return resource.getResponseField('TransitGatewayMulticastDomain.Options.AutoAcceptSharedAssociations') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGatewayPeeringAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayPeeringAttachment(): EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {
    return new EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPeeringAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get requesterTgwInfo(): EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {
    return new EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo(this.__scope, this.__resources, this.__input);
  }

  public get accepterTgwInfo(): EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {
    return new EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo(this.__scope, this.__resources, this.__input);
  }

  public get status(): EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {
    return new EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State'),
        outputPath: 'TransitGatewayPeeringAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime'),
        outputPath: 'TransitGatewayPeeringAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags'),
        outputPath: 'TransitGatewayPeeringAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayPeeringAttachmentRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Code',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Message',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Message') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGatewayPrefixListReference {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayPrefixListReference(): EC2ResponsesDeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {
    return new EC2ResponsesDeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayRouteTableId') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListId') as unknown as string;
  }

  public get prefixListOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListOwnerId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State'),
        outputPath: 'TransitGatewayPrefixListReference.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.State') as unknown as string;
  }

  public get blackhole(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole'),
        outputPath: 'TransitGatewayPrefixListReference.Blackhole',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.Blackhole') as unknown as boolean;
  }

  public get transitGatewayAttachment(): EC2ResponsesDeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {
    return new EC2ResponsesDeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGatewayRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayRouteRequest) {
  }

  public get route(): EC2ResponsesDeleteTransitGatewayRouteRoute {
    return new EC2ResponsesDeleteTransitGatewayRouteRoute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayRouteRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayRouteRequest) {
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.PrefixListId'),
        outputPath: 'Route.PrefixListId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRoute.Route.PrefixListId', props);
    return resource.getResponseField('Route.PrefixListId') as unknown as string;
  }

  public get transitGatewayAttachments(): shapes.Ec2TransitGatewayRouteAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.TransitGatewayAttachments'),
        outputPath: 'Route.TransitGatewayAttachments',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRoute.Route.TransitGatewayAttachments', props);
    return resource.getResponseField('Route.TransitGatewayAttachments') as unknown as shapes.Ec2TransitGatewayRouteAttachment[];
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

}

export class EC2ResponsesDeleteTransitGatewayRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayRouteTableRequest) {
  }

  public get transitGatewayRouteTable(): EC2ResponsesDeleteTransitGatewayRouteTableTransitGatewayRouteTable {
    return new EC2ResponsesDeleteTransitGatewayRouteTableTransitGatewayRouteTable(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayRouteTableTransitGatewayRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayRouteTableRequest) {
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayRouteTable.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayRouteTable.TransitGatewayRouteTableId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayId'),
        outputPath: 'TransitGatewayRouteTable.TransitGatewayId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayRouteTable.TransitGatewayId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.State'),
        outputPath: 'TransitGatewayRouteTable.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.State', props);
    return resource.getResponseField('TransitGatewayRouteTable.State') as unknown as string;
  }

  public get defaultAssociationRouteTable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultAssociationRouteTable'),
        outputPath: 'TransitGatewayRouteTable.DefaultAssociationRouteTable',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultAssociationRouteTable', props);
    return resource.getResponseField('TransitGatewayRouteTable.DefaultAssociationRouteTable') as unknown as boolean;
  }

  public get defaultPropagationRouteTable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultPropagationRouteTable'),
        outputPath: 'TransitGatewayRouteTable.DefaultPropagationRouteTable',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.DefaultPropagationRouteTable', props);
    return resource.getResponseField('TransitGatewayRouteTable.DefaultPropagationRouteTable') as unknown as boolean;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.CreationTime'),
        outputPath: 'TransitGatewayRouteTable.CreationTime',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.CreationTime', props);
    return resource.getResponseField('TransitGatewayRouteTable.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.Tags'),
        outputPath: 'TransitGatewayRouteTable.Tags',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayRouteTable.TransitGatewayRouteTable.Tags', props);
    return resource.getResponseField('TransitGatewayRouteTable.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayVpcAttachment(): EC2ResponsesDeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2ResponsesDeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesDeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2ResponsesDeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDeleteTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteTransitGatewayVpcAttachmentRequest) {
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2ResponsesDeleteVpcEndpointConnectionNotifications {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteVpcEndpointConnectionNotificationsRequest) {
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpcEndpointConnectionNotifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpcEndpointConnectionNotifications.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.__input.dryRun,
          ConnectionNotificationIds: this.__input.connectionNotificationIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteVpcEndpointConnectionNotifications.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesDeleteVpcEndpointServiceConfigurations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteVpcEndpointServiceConfigurationsRequest) {
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpcEndpointServiceConfigurations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpcEndpointServiceConfigurations.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceIds: this.__input.serviceIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteVpcEndpointServiceConfigurations.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesDeleteVpcEndpoints {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteVpcEndpointsRequest) {
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpcEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpcEndpoints.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointIds: this.__input.vpcEndpointIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteVpcEndpoints.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesDeleteVpcPeeringConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeleteVpcPeeringConnectionRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeleteVpcPeeringConnection.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteVpcPeeringConnection.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesDeprovisionByoipCidr {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeprovisionByoipCidrRequest) {
  }

  public get byoipCidr(): EC2ResponsesDeprovisionByoipCidrByoipCidr {
    return new EC2ResponsesDeprovisionByoipCidrByoipCidr(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeprovisionByoipCidrByoipCidr {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeprovisionByoipCidrRequest) {
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deprovisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeprovisionByoipCidr.ByoipCidr.Cidr'),
        outputPath: 'ByoipCidr.Cidr',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeprovisionByoipCidr.ByoipCidr.Cidr', props);
    return resource.getResponseField('ByoipCidr.Cidr') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deprovisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeprovisionByoipCidr.ByoipCidr.Description'),
        outputPath: 'ByoipCidr.Description',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeprovisionByoipCidr.ByoipCidr.Description', props);
    return resource.getResponseField('ByoipCidr.Description') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deprovisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeprovisionByoipCidr.ByoipCidr.StatusMessage'),
        outputPath: 'ByoipCidr.StatusMessage',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeprovisionByoipCidr.ByoipCidr.StatusMessage', props);
    return resource.getResponseField('ByoipCidr.StatusMessage') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deprovisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeprovisionByoipCidr.ByoipCidr.State'),
        outputPath: 'ByoipCidr.State',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeprovisionByoipCidr.ByoipCidr.State', props);
    return resource.getResponseField('ByoipCidr.State') as unknown as string;
  }

}

export class EC2ResponsesDeregisterInstanceEventNotificationAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeregisterInstanceEventNotificationAttributesRequest) {
  }

  public get instanceTagAttribute(): EC2ResponsesDeregisterInstanceEventNotificationAttributesInstanceTagAttribute {
    return new EC2ResponsesDeregisterInstanceEventNotificationAttributesInstanceTagAttribute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeregisterInstanceEventNotificationAttributesInstanceTagAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeregisterInstanceEventNotificationAttributesRequest) {
  }

  public get instanceTagKeys(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys'),
        outputPath: 'InstanceTagAttribute.InstanceTagKeys',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceTagAttribute: {
            IncludeAllTagsOfInstance: this.__input.instanceTagAttribute?.includeAllTagsOfInstance,
            InstanceTagKeys: this.__input.instanceTagAttribute?.instanceTagKeys,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeregisterInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys', props);
    return resource.getResponseField('InstanceTagAttribute.InstanceTagKeys') as unknown as string[];
  }

  public get includeAllTagsOfInstance(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance'),
        outputPath: 'InstanceTagAttribute.IncludeAllTagsOfInstance',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceTagAttribute: {
            IncludeAllTagsOfInstance: this.__input.instanceTagAttribute?.includeAllTagsOfInstance,
            InstanceTagKeys: this.__input.instanceTagAttribute?.instanceTagKeys,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeregisterInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance', props);
    return resource.getResponseField('InstanceTagAttribute.IncludeAllTagsOfInstance') as unknown as boolean;
  }

}

export class EC2ResponsesDeregisterTransitGatewayMulticastGroupMembers {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeregisterTransitGatewayMulticastGroupMembersRequest) {
  }

  public get deregisteredMulticastGroupMembers(): EC2ResponsesDeregisterTransitGatewayMulticastGroupMembersDeregisteredMulticastGroupMembers {
    return new EC2ResponsesDeregisterTransitGatewayMulticastGroupMembersDeregisteredMulticastGroupMembers(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeregisterTransitGatewayMulticastGroupMembersDeregisteredMulticastGroupMembers {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeregisterTransitGatewayMulticastGroupMembersRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.TransitGatewayMulticastDomainId'),
        outputPath: 'DeregisteredMulticastGroupMembers.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('DeregisteredMulticastGroupMembers.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get deregisteredNetworkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.DeregisteredNetworkInterfaceIds'),
        outputPath: 'DeregisteredMulticastGroupMembers.DeregisteredNetworkInterfaceIds',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.DeregisteredNetworkInterfaceIds', props);
    return resource.getResponseField('DeregisteredMulticastGroupMembers.DeregisteredNetworkInterfaceIds') as unknown as string[];
  }

  public get groupIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.GroupIpAddress'),
        outputPath: 'DeregisteredMulticastGroupMembers.GroupIpAddress',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeregisterTransitGatewayMulticastGroupMembers.DeregisteredMulticastGroupMembers.GroupIpAddress', props);
    return resource.getResponseField('DeregisteredMulticastGroupMembers.GroupIpAddress') as unknown as string;
  }

}

export class EC2ResponsesDeregisterTransitGatewayMulticastGroupSources {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest) {
  }

  public get deregisteredMulticastGroupSources(): EC2ResponsesDeregisterTransitGatewayMulticastGroupSourcesDeregisteredMulticastGroupSources {
    return new EC2ResponsesDeregisterTransitGatewayMulticastGroupSourcesDeregisteredMulticastGroupSources(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDeregisterTransitGatewayMulticastGroupSourcesDeregisteredMulticastGroupSources {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.TransitGatewayMulticastDomainId'),
        outputPath: 'DeregisteredMulticastGroupSources.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('DeregisteredMulticastGroupSources.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get deregisteredNetworkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.DeregisteredNetworkInterfaceIds'),
        outputPath: 'DeregisteredMulticastGroupSources.DeregisteredNetworkInterfaceIds',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.DeregisteredNetworkInterfaceIds', props);
    return resource.getResponseField('DeregisteredMulticastGroupSources.DeregisteredNetworkInterfaceIds') as unknown as string[];
  }

  public get groupIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.GroupIpAddress'),
        outputPath: 'DeregisteredMulticastGroupSources.GroupIpAddress',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeregisterTransitGatewayMulticastGroupSources.DeregisteredMulticastGroupSources.GroupIpAddress', props);
    return resource.getResponseField('DeregisteredMulticastGroupSources.GroupIpAddress') as unknown as string;
  }

}

export class EC2ResponsesDescribeAccountAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeAccountAttributesRequest) {
  }

  public get accountAttributes(): shapes.Ec2AccountAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAccountAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAccountAttributes.AccountAttributes'),
        outputPath: 'AccountAttributes',
        parameters: {
          AttributeNames: this.__input.attributeNames,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAccountAttributes.AccountAttributes', props);
    return resource.getResponseField('AccountAttributes') as unknown as shapes.Ec2AccountAttribute[];
  }

}

export class EC2ResponsesDescribeAddresses {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeAddressesRequest) {
  }

  public get addresses(): shapes.Ec2Address[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAddresses.Addresses'),
        outputPath: 'Addresses',
        parameters: {
          Filters: this.__input.filters,
          PublicIps: this.__input.publicIps,
          AllocationIds: this.__input.allocationIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAddresses.Addresses', props);
    return resource.getResponseField('Addresses') as unknown as shapes.Ec2Address[];
  }

}

export class EC2ResponsesDescribeAddressesAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeAddressesAttributeRequest) {
  }

  public get addresses(): shapes.Ec2AddressAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAddressesAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAddressesAttribute.Addresses'),
        outputPath: 'Addresses',
        parameters: {
          AllocationIds: this.__input.allocationIds,
          Attribute: this.__input.attribute,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAddressesAttribute.Addresses', props);
    return resource.getResponseField('Addresses') as unknown as shapes.Ec2AddressAttribute[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAddressesAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAddressesAttribute.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          AllocationIds: this.__input.allocationIds,
          Attribute: this.__input.attribute,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAddressesAttribute.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeAggregateIdFormat {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeAggregateIdFormatRequest) {
  }

  public get useLongIdsAggregated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAggregateIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAggregateIdFormat.UseLongIdsAggregated'),
        outputPath: 'UseLongIdsAggregated',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAggregateIdFormat.UseLongIdsAggregated', props);
    return resource.getResponseField('UseLongIdsAggregated') as unknown as boolean;
  }

  public get statuses(): shapes.Ec2IdFormat[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAggregateIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAggregateIdFormat.Statuses'),
        outputPath: 'Statuses',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAggregateIdFormat.Statuses', props);
    return resource.getResponseField('Statuses') as unknown as shapes.Ec2IdFormat[];
  }

}

export class EC2ResponsesDescribeAvailabilityZones {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeAvailabilityZonesRequest) {
  }

  public get availabilityZones(): shapes.Ec2AvailabilityZone[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAvailabilityZones',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeAvailabilityZones.AvailabilityZones'),
        outputPath: 'AvailabilityZones',
        parameters: {
          Filters: this.__input.filters,
          ZoneNames: this.__input.zoneNames,
          ZoneIds: this.__input.zoneIds,
          AllAvailabilityZones: this.__input.allAvailabilityZones,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAvailabilityZones.AvailabilityZones', props);
    return resource.getResponseField('AvailabilityZones') as unknown as shapes.Ec2AvailabilityZone[];
  }

}

export class EC2ResponsesDescribeBundleTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeBundleTasksRequest) {
  }

  public get bundleTasks(): shapes.Ec2BundleTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeBundleTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeBundleTasks.BundleTasks'),
        outputPath: 'BundleTasks',
        parameters: {
          BundleIds: this.__input.bundleIds,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeBundleTasks.BundleTasks', props);
    return resource.getResponseField('BundleTasks') as unknown as shapes.Ec2BundleTask[];
  }

}

export class EC2ResponsesDescribeByoipCidrs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeByoipCidrsRequest) {
  }

  public get byoipCidrs(): shapes.Ec2ByoipCidr[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeByoipCidrs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeByoipCidrs.ByoipCidrs'),
        outputPath: 'ByoipCidrs',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeByoipCidrs.ByoipCidrs', props);
    return resource.getResponseField('ByoipCidrs') as unknown as shapes.Ec2ByoipCidr[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeByoipCidrs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeByoipCidrs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeByoipCidrs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeCapacityReservations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeCapacityReservationsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCapacityReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCapacityReservations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          CapacityReservationIds: this.__input.capacityReservationIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCapacityReservations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get capacityReservations(): shapes.Ec2CapacityReservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCapacityReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCapacityReservations.CapacityReservations'),
        outputPath: 'CapacityReservations',
        parameters: {
          CapacityReservationIds: this.__input.capacityReservationIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCapacityReservations.CapacityReservations', props);
    return resource.getResponseField('CapacityReservations') as unknown as shapes.Ec2CapacityReservation[];
  }

}

export class EC2ResponsesDescribeCarrierGateways {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeCarrierGatewaysRequest) {
  }

  public get carrierGateways(): shapes.Ec2CarrierGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCarrierGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCarrierGateways.CarrierGateways'),
        outputPath: 'CarrierGateways',
        parameters: {
          CarrierGatewayIds: this.__input.carrierGatewayIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCarrierGateways.CarrierGateways', props);
    return resource.getResponseField('CarrierGateways') as unknown as shapes.Ec2CarrierGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCarrierGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCarrierGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          CarrierGatewayIds: this.__input.carrierGatewayIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCarrierGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeClassicLinkInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeClassicLinkInstancesRequest) {
  }

  public get instances(): shapes.Ec2ClassicLinkInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClassicLinkInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClassicLinkInstances.Instances'),
        outputPath: 'Instances',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          InstanceIds: this.__input.instanceIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClassicLinkInstances.Instances', props);
    return resource.getResponseField('Instances') as unknown as shapes.Ec2ClassicLinkInstance[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClassicLinkInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClassicLinkInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          InstanceIds: this.__input.instanceIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClassicLinkInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeClientVpnAuthorizationRules {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeClientVpnAuthorizationRulesRequest) {
  }

  public get authorizationRules(): shapes.Ec2AuthorizationRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnAuthorizationRules',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnAuthorizationRules.AuthorizationRules'),
        outputPath: 'AuthorizationRules',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnAuthorizationRules.AuthorizationRules', props);
    return resource.getResponseField('AuthorizationRules') as unknown as shapes.Ec2AuthorizationRule[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnAuthorizationRules',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnAuthorizationRules.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnAuthorizationRules.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeClientVpnConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeClientVpnConnectionsRequest) {
  }

  public get connections(): shapes.Ec2ClientVpnConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnConnections.Connections'),
        outputPath: 'Connections',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnConnections.Connections', props);
    return resource.getResponseField('Connections') as unknown as shapes.Ec2ClientVpnConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeClientVpnEndpoints {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeClientVpnEndpointsRequest) {
  }

  public get clientVpnEndpoints(): shapes.Ec2ClientVpnEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnEndpoints.ClientVpnEndpoints'),
        outputPath: 'ClientVpnEndpoints',
        parameters: {
          ClientVpnEndpointIds: this.__input.clientVpnEndpointIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnEndpoints.ClientVpnEndpoints', props);
    return resource.getResponseField('ClientVpnEndpoints') as unknown as shapes.Ec2ClientVpnEndpoint[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnEndpoints.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointIds: this.__input.clientVpnEndpointIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnEndpoints.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeClientVpnRoutes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeClientVpnRoutesRequest) {
  }

  public get routes(): shapes.Ec2ClientVpnRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnRoutes.Routes'),
        outputPath: 'Routes',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnRoutes.Routes', props);
    return resource.getResponseField('Routes') as unknown as shapes.Ec2ClientVpnRoute[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnRoutes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnRoutes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeClientVpnTargetNetworks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeClientVpnTargetNetworksRequest) {
  }

  public get clientVpnTargetNetworks(): shapes.Ec2TargetNetwork[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnTargetNetworks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnTargetNetworks.ClientVpnTargetNetworks'),
        outputPath: 'ClientVpnTargetNetworks',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          AssociationIds: this.__input.associationIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnTargetNetworks.ClientVpnTargetNetworks', props);
    return resource.getResponseField('ClientVpnTargetNetworks') as unknown as shapes.Ec2TargetNetwork[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeClientVpnTargetNetworks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeClientVpnTargetNetworks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          AssociationIds: this.__input.associationIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeClientVpnTargetNetworks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeCoipPools {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeCoipPoolsRequest) {
  }

  public get coipPools(): shapes.Ec2CoipPool[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCoipPools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCoipPools.CoipPools'),
        outputPath: 'CoipPools',
        parameters: {
          PoolIds: this.__input.poolIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCoipPools.CoipPools', props);
    return resource.getResponseField('CoipPools') as unknown as shapes.Ec2CoipPool[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCoipPools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCoipPools.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PoolIds: this.__input.poolIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCoipPools.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeConversionTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeConversionTasksRequest) {
  }

  public get conversionTasks(): shapes.Ec2ConversionTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeConversionTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeConversionTasks.ConversionTasks'),
        outputPath: 'ConversionTasks',
        parameters: {
          ConversionTaskIds: this.__input.conversionTaskIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeConversionTasks.ConversionTasks', props);
    return resource.getResponseField('ConversionTasks') as unknown as shapes.Ec2ConversionTask[];
  }

}

export class EC2ResponsesDescribeCustomerGateways {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeCustomerGatewaysRequest) {
  }

  public get customerGateways(): shapes.Ec2CustomerGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCustomerGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeCustomerGateways.CustomerGateways'),
        outputPath: 'CustomerGateways',
        parameters: {
          CustomerGatewayIds: this.__input.customerGatewayIds,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCustomerGateways.CustomerGateways', props);
    return resource.getResponseField('CustomerGateways') as unknown as shapes.Ec2CustomerGateway[];
  }

}

export class EC2ResponsesDescribeDhcpOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeDhcpOptionsRequest) {
  }

  public get dhcpOptions(): shapes.Ec2DhcpOptions[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeDhcpOptions.DhcpOptions'),
        outputPath: 'DhcpOptions',
        parameters: {
          DhcpOptionsIds: this.__input.dhcpOptionsIds,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDhcpOptions.DhcpOptions', props);
    return resource.getResponseField('DhcpOptions') as unknown as shapes.Ec2DhcpOptions[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDhcpOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeDhcpOptions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DhcpOptionsIds: this.__input.dhcpOptionsIds,
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDhcpOptions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeEgressOnlyInternetGateways {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeEgressOnlyInternetGatewaysRequest) {
  }

  public get egressOnlyInternetGateways(): shapes.Ec2EgressOnlyInternetGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEgressOnlyInternetGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeEgressOnlyInternetGateways.EgressOnlyInternetGateways'),
        outputPath: 'EgressOnlyInternetGateways',
        parameters: {
          DryRun: this.__input.dryRun,
          EgressOnlyInternetGatewayIds: this.__input.egressOnlyInternetGatewayIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEgressOnlyInternetGateways.EgressOnlyInternetGateways', props);
    return resource.getResponseField('EgressOnlyInternetGateways') as unknown as shapes.Ec2EgressOnlyInternetGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEgressOnlyInternetGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeEgressOnlyInternetGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          EgressOnlyInternetGatewayIds: this.__input.egressOnlyInternetGatewayIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEgressOnlyInternetGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeElasticGpus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeElasticGpusRequest) {
  }

  public get elasticGpuSet(): shapes.Ec2ElasticGpus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticGpus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeElasticGpus.ElasticGpuSet'),
        outputPath: 'ElasticGpuSet',
        parameters: {
          ElasticGpuIds: this.__input.elasticGpuIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticGpus.ElasticGpuSet', props);
    return resource.getResponseField('ElasticGpuSet') as unknown as shapes.Ec2ElasticGpus[];
  }

  public get maxResults(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticGpus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeElasticGpus.MaxResults'),
        outputPath: 'MaxResults',
        parameters: {
          ElasticGpuIds: this.__input.elasticGpuIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticGpus.MaxResults', props);
    return resource.getResponseField('MaxResults') as unknown as number;
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticGpus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeElasticGpus.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ElasticGpuIds: this.__input.elasticGpuIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticGpus.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeExportImageTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeExportImageTasksRequest) {
  }

  public get exportImageTasks(): shapes.Ec2ExportImageTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeExportImageTasks.ExportImageTasks'),
        outputPath: 'ExportImageTasks',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          ExportImageTaskIds: this.__input.exportImageTaskIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeExportImageTasks.ExportImageTasks', props);
    return resource.getResponseField('ExportImageTasks') as unknown as shapes.Ec2ExportImageTask[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeExportImageTasks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          ExportImageTaskIds: this.__input.exportImageTaskIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeExportImageTasks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeExportTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeExportTasksRequest) {
  }

  public get exportTasks(): shapes.Ec2ExportTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeExportTasks.ExportTasks'),
        outputPath: 'ExportTasks',
        parameters: {
          ExportTaskIds: this.__input.exportTaskIds,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeExportTasks.ExportTasks', props);
    return resource.getResponseField('ExportTasks') as unknown as shapes.Ec2ExportTask[];
  }

}

export class EC2ResponsesDescribeFastSnapshotRestores {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeFastSnapshotRestoresRequest) {
  }

  public get fastSnapshotRestores(): shapes.Ec2DescribeFastSnapshotRestoreSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFastSnapshotRestores.FastSnapshotRestores'),
        outputPath: 'FastSnapshotRestores',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFastSnapshotRestores.FastSnapshotRestores', props);
    return resource.getResponseField('FastSnapshotRestores') as unknown as shapes.Ec2DescribeFastSnapshotRestoreSuccessItem[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFastSnapshotRestores.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFastSnapshotRestores.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeFleetHistory {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeFleetHistoryRequest) {
  }

  public get historyRecords(): shapes.Ec2HistoryRecordEntry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.HistoryRecords'),
        outputPath: 'HistoryRecords',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetId: this.__input.fleetId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleetHistory.HistoryRecords', props);
    return resource.getResponseField('HistoryRecords') as unknown as shapes.Ec2HistoryRecordEntry[];
  }

  public get lastEvaluatedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.LastEvaluatedTime'),
        outputPath: 'LastEvaluatedTime',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetId: this.__input.fleetId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleetHistory.LastEvaluatedTime', props);
    return resource.getResponseField('LastEvaluatedTime') as unknown as string;
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetId: this.__input.fleetId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleetHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get fleetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.FleetId'),
        outputPath: 'FleetId',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetId: this.__input.fleetId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleetHistory.FleetId', props);
    return resource.getResponseField('FleetId') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetHistory.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetId: this.__input.fleetId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleetHistory.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

}

export class EC2ResponsesDescribeFleetInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeFleetInstancesRequest) {
  }

  public get activeInstances(): shapes.Ec2ActiveInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetInstances.ActiveInstances'),
        outputPath: 'ActiveInstances',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetId: this.__input.fleetId,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleetInstances.ActiveInstances', props);
    return resource.getResponseField('ActiveInstances') as unknown as shapes.Ec2ActiveInstance[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetId: this.__input.fleetId,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleetInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get fleetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleetInstances.FleetId'),
        outputPath: 'FleetId',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetId: this.__input.fleetId,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleetInstances.FleetId', props);
    return resource.getResponseField('FleetId') as unknown as string;
  }

}

export class EC2ResponsesDescribeFleets {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeFleetsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleets.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetIds: this.__input.fleetIds,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleets.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get fleets(): shapes.Ec2FleetData[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFleets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFleets.Fleets'),
        outputPath: 'Fleets',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          FleetIds: this.__input.fleetIds,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFleets.Fleets', props);
    return resource.getResponseField('Fleets') as unknown as shapes.Ec2FleetData[];
  }

}

export class EC2ResponsesDescribeFlowLogs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeFlowLogsRequest) {
  }

  public get flowLogs(): shapes.Ec2FlowLog[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFlowLogs.FlowLogs'),
        outputPath: 'FlowLogs',
        parameters: {
          DryRun: this.__input.dryRun,
          Filter: this.__input.filter,
          FlowLogIds: this.__input.flowLogIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFlowLogs.FlowLogs', props);
    return resource.getResponseField('FlowLogs') as unknown as shapes.Ec2FlowLog[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFlowLogs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFlowLogs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filter: this.__input.filter,
          FlowLogIds: this.__input.flowLogIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFlowLogs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeFpgaImageAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeFpgaImageAttributeRequest) {
  }

  public get fpgaImageAttribute(): EC2ResponsesDescribeFpgaImageAttributeFpgaImageAttribute {
    return new EC2ResponsesDescribeFpgaImageAttributeFpgaImageAttribute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDescribeFpgaImageAttributeFpgaImageAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeFpgaImageAttributeRequest) {
  }

  public get fpgaImageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.FpgaImageId'),
        outputPath: 'FpgaImageAttribute.FpgaImageId',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFpgaImageAttribute.FpgaImageAttribute.FpgaImageId', props);
    return resource.getResponseField('FpgaImageAttribute.FpgaImageId') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.Name'),
        outputPath: 'FpgaImageAttribute.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFpgaImageAttribute.FpgaImageAttribute.Name', props);
    return resource.getResponseField('FpgaImageAttribute.Name') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.Description'),
        outputPath: 'FpgaImageAttribute.Description',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFpgaImageAttribute.FpgaImageAttribute.Description', props);
    return resource.getResponseField('FpgaImageAttribute.Description') as unknown as string;
  }

  public get loadPermissions(): shapes.Ec2LoadPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.LoadPermissions'),
        outputPath: 'FpgaImageAttribute.LoadPermissions',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFpgaImageAttribute.FpgaImageAttribute.LoadPermissions', props);
    return resource.getResponseField('FpgaImageAttribute.LoadPermissions') as unknown as shapes.Ec2LoadPermission[];
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImageAttribute.FpgaImageAttribute.ProductCodes'),
        outputPath: 'FpgaImageAttribute.ProductCodes',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFpgaImageAttribute.FpgaImageAttribute.ProductCodes', props);
    return resource.getResponseField('FpgaImageAttribute.ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

}

export class EC2ResponsesDescribeFpgaImages {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeFpgaImagesRequest) {
  }

  public get fpgaImages(): shapes.Ec2FpgaImage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImages',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImages.FpgaImages'),
        outputPath: 'FpgaImages',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageIds: this.__input.fpgaImageIds,
          Owners: this.__input.owners,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFpgaImages.FpgaImages', props);
    return resource.getResponseField('FpgaImages') as unknown as shapes.Ec2FpgaImage[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeFpgaImages',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeFpgaImages.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageIds: this.__input.fpgaImageIds,
          Owners: this.__input.owners,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeFpgaImages.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeHostReservationOfferings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeHostReservationOfferingsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHostReservationOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHostReservationOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filter: this.__input.filter,
          MaxDuration: this.__input.maxDuration,
          MaxResults: this.__input.maxResults,
          MinDuration: this.__input.minDuration,
          NextToken: this.__input.nextToken,
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHostReservationOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get offeringSet(): shapes.Ec2HostOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHostReservationOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHostReservationOfferings.OfferingSet'),
        outputPath: 'OfferingSet',
        parameters: {
          Filter: this.__input.filter,
          MaxDuration: this.__input.maxDuration,
          MaxResults: this.__input.maxResults,
          MinDuration: this.__input.minDuration,
          NextToken: this.__input.nextToken,
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHostReservationOfferings.OfferingSet', props);
    return resource.getResponseField('OfferingSet') as unknown as shapes.Ec2HostOffering[];
  }

}

export class EC2ResponsesDescribeHostReservations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeHostReservationsRequest) {
  }

  public get hostReservationSet(): shapes.Ec2HostReservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHostReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHostReservations.HostReservationSet'),
        outputPath: 'HostReservationSet',
        parameters: {
          Filter: this.__input.filter,
          HostReservationIdSet: this.__input.hostReservationIdSet,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHostReservations.HostReservationSet', props);
    return resource.getResponseField('HostReservationSet') as unknown as shapes.Ec2HostReservation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHostReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHostReservations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filter: this.__input.filter,
          HostReservationIdSet: this.__input.hostReservationIdSet,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHostReservations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeHosts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeHostsRequest) {
  }

  public get hosts(): shapes.Ec2Host[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHosts.Hosts'),
        outputPath: 'Hosts',
        parameters: {
          Filter: this.__input.filter,
          HostIds: this.__input.hostIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHosts.Hosts', props);
    return resource.getResponseField('Hosts') as unknown as shapes.Ec2Host[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeHosts.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filter: this.__input.filter,
          HostIds: this.__input.hostIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeHosts.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeIamInstanceProfileAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeIamInstanceProfileAssociationsRequest) {
  }

  public get iamInstanceProfileAssociations(): shapes.Ec2IamInstanceProfileAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIamInstanceProfileAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIamInstanceProfileAssociations.IamInstanceProfileAssociations'),
        outputPath: 'IamInstanceProfileAssociations',
        parameters: {
          AssociationIds: this.__input.associationIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeIamInstanceProfileAssociations.IamInstanceProfileAssociations', props);
    return resource.getResponseField('IamInstanceProfileAssociations') as unknown as shapes.Ec2IamInstanceProfileAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIamInstanceProfileAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIamInstanceProfileAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          AssociationIds: this.__input.associationIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeIamInstanceProfileAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeIdFormat {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeIdFormatRequest) {
  }

  public get statuses(): shapes.Ec2IdFormat[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIdFormat.Statuses'),
        outputPath: 'Statuses',
        parameters: {
          Resource: this.__input.resource,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeIdFormat.Statuses', props);
    return resource.getResponseField('Statuses') as unknown as shapes.Ec2IdFormat[];
  }

}

export class EC2ResponsesDescribeIdentityIdFormat {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeIdentityIdFormatRequest) {
  }

  public get statuses(): shapes.Ec2IdFormat[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIdentityIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIdentityIdFormat.Statuses'),
        outputPath: 'Statuses',
        parameters: {
          PrincipalArn: this.__input.principalArn,
          Resource: this.__input.resource,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeIdentityIdFormat.Statuses', props);
    return resource.getResponseField('Statuses') as unknown as shapes.Ec2IdFormat[];
  }

}

export class EC2ResponsesDescribeImageAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImageAttributeRequest) {
  }

  public get blockDeviceMappings(): shapes.Ec2BlockDeviceMapping[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.BlockDeviceMappings'),
        outputPath: 'BlockDeviceMappings',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.BlockDeviceMappings', props);
    return resource.getResponseField('BlockDeviceMappings') as unknown as shapes.Ec2BlockDeviceMapping[];
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

  public get launchPermissions(): shapes.Ec2LaunchPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.LaunchPermissions'),
        outputPath: 'LaunchPermissions',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.LaunchPermissions', props);
    return resource.getResponseField('LaunchPermissions') as unknown as shapes.Ec2LaunchPermission[];
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.ProductCodes'),
        outputPath: 'ProductCodes',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.ProductCodes', props);
    return resource.getResponseField('ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

  public get description(): EC2ResponsesDescribeImageAttributeDescription {
    return new EC2ResponsesDescribeImageAttributeDescription(this.__scope, this.__resources, this.__input);
  }

  public get kernelId(): EC2ResponsesDescribeImageAttributeKernelId {
    return new EC2ResponsesDescribeImageAttributeKernelId(this.__scope, this.__resources, this.__input);
  }

  public get ramdiskId(): EC2ResponsesDescribeImageAttributeRamdiskId {
    return new EC2ResponsesDescribeImageAttributeRamdiskId(this.__scope, this.__resources, this.__input);
  }

  public get sriovNetSupport(): EC2ResponsesDescribeImageAttributeSriovNetSupport {
    return new EC2ResponsesDescribeImageAttributeSriovNetSupport(this.__scope, this.__resources, this.__input);
  }

  public get bootMode(): EC2ResponsesDescribeImageAttributeBootMode {
    return new EC2ResponsesDescribeImageAttributeBootMode(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDescribeImageAttributeDescription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImageAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.Description.Value'),
        outputPath: 'Description.Value',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.Description.Value', props);
    return resource.getResponseField('Description.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeImageAttributeKernelId {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImageAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.KernelId.Value'),
        outputPath: 'KernelId.Value',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.KernelId.Value', props);
    return resource.getResponseField('KernelId.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeImageAttributeRamdiskId {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImageAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.RamdiskId.Value'),
        outputPath: 'RamdiskId.Value',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.RamdiskId.Value', props);
    return resource.getResponseField('RamdiskId.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeImageAttributeSriovNetSupport {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImageAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.SriovNetSupport.Value'),
        outputPath: 'SriovNetSupport.Value',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.SriovNetSupport.Value', props);
    return resource.getResponseField('SriovNetSupport.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeImageAttributeBootMode {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImageAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImageAttribute.BootMode.Value'),
        outputPath: 'BootMode.Value',
        parameters: {
          Attribute: this.__input.attribute,
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImageAttribute.BootMode.Value', props);
    return resource.getResponseField('BootMode.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeImages {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImagesRequest) {
  }

  public get images(): shapes.Ec2Image[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImages',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImages.Images'),
        outputPath: 'Images',
        parameters: {
          ExecutableUsers: this.__input.executableUsers,
          Filters: this.__input.filters,
          ImageIds: this.__input.imageIds,
          Owners: this.__input.owners,
          IncludeDeprecated: this.__input.includeDeprecated,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImages.Images', props);
    return resource.getResponseField('Images') as unknown as shapes.Ec2Image[];
  }

}

export class EC2ResponsesDescribeImportImageTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImportImageTasksRequest) {
  }

  public get importImageTasks(): shapes.Ec2ImportImageTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImportImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImportImageTasks.ImportImageTasks'),
        outputPath: 'ImportImageTasks',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          ImportTaskIds: this.__input.importTaskIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImportImageTasks.ImportImageTasks', props);
    return resource.getResponseField('ImportImageTasks') as unknown as shapes.Ec2ImportImageTask[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImportImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImportImageTasks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          ImportTaskIds: this.__input.importTaskIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImportImageTasks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeImportSnapshotTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeImportSnapshotTasksRequest) {
  }

  public get importSnapshotTasks(): shapes.Ec2ImportSnapshotTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImportSnapshotTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImportSnapshotTasks.ImportSnapshotTasks'),
        outputPath: 'ImportSnapshotTasks',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          ImportTaskIds: this.__input.importTaskIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImportSnapshotTasks.ImportSnapshotTasks', props);
    return resource.getResponseField('ImportSnapshotTasks') as unknown as shapes.Ec2ImportSnapshotTask[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeImportSnapshotTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeImportSnapshotTasks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          ImportTaskIds: this.__input.importTaskIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeImportSnapshotTasks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get groups(): shapes.Ec2GroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.Groups'),
        outputPath: 'Groups',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.Groups', props);
    return resource.getResponseField('Groups') as unknown as shapes.Ec2GroupIdentifier[];
  }

  public get blockDeviceMappings(): shapes.Ec2InstanceBlockDeviceMapping[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.BlockDeviceMappings'),
        outputPath: 'BlockDeviceMappings',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.BlockDeviceMappings', props);
    return resource.getResponseField('BlockDeviceMappings') as unknown as shapes.Ec2InstanceBlockDeviceMapping[];
  }

  public get disableApiTermination(): EC2ResponsesDescribeInstanceAttributeDisableApiTermination {
    return new EC2ResponsesDescribeInstanceAttributeDisableApiTermination(this.__scope, this.__resources, this.__input);
  }

  public get enaSupport(): EC2ResponsesDescribeInstanceAttributeEnaSupport {
    return new EC2ResponsesDescribeInstanceAttributeEnaSupport(this.__scope, this.__resources, this.__input);
  }

  public get enclaveOptions(): EC2ResponsesDescribeInstanceAttributeEnclaveOptions {
    return new EC2ResponsesDescribeInstanceAttributeEnclaveOptions(this.__scope, this.__resources, this.__input);
  }

  public get ebsOptimized(): EC2ResponsesDescribeInstanceAttributeEbsOptimized {
    return new EC2ResponsesDescribeInstanceAttributeEbsOptimized(this.__scope, this.__resources, this.__input);
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get instanceInitiatedShutdownBehavior(): EC2ResponsesDescribeInstanceAttributeInstanceInitiatedShutdownBehavior {
    return new EC2ResponsesDescribeInstanceAttributeInstanceInitiatedShutdownBehavior(this.__scope, this.__resources, this.__input);
  }

  public get instanceType(): EC2ResponsesDescribeInstanceAttributeInstanceType {
    return new EC2ResponsesDescribeInstanceAttributeInstanceType(this.__scope, this.__resources, this.__input);
  }

  public get kernelId(): EC2ResponsesDescribeInstanceAttributeKernelId {
    return new EC2ResponsesDescribeInstanceAttributeKernelId(this.__scope, this.__resources, this.__input);
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.ProductCodes'),
        outputPath: 'ProductCodes',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.ProductCodes', props);
    return resource.getResponseField('ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

  public get ramdiskId(): EC2ResponsesDescribeInstanceAttributeRamdiskId {
    return new EC2ResponsesDescribeInstanceAttributeRamdiskId(this.__scope, this.__resources, this.__input);
  }

  public get rootDeviceName(): EC2ResponsesDescribeInstanceAttributeRootDeviceName {
    return new EC2ResponsesDescribeInstanceAttributeRootDeviceName(this.__scope, this.__resources, this.__input);
  }

  public get sourceDestCheck(): EC2ResponsesDescribeInstanceAttributeSourceDestCheck {
    return new EC2ResponsesDescribeInstanceAttributeSourceDestCheck(this.__scope, this.__resources, this.__input);
  }

  public get sriovNetSupport(): EC2ResponsesDescribeInstanceAttributeSriovNetSupport {
    return new EC2ResponsesDescribeInstanceAttributeSriovNetSupport(this.__scope, this.__resources, this.__input);
  }

  public get userData(): EC2ResponsesDescribeInstanceAttributeUserData {
    return new EC2ResponsesDescribeInstanceAttributeUserData(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDescribeInstanceAttributeDisableApiTermination {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.DisableApiTermination.Value'),
        outputPath: 'DisableApiTermination.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.DisableApiTermination.Value', props);
    return resource.getResponseField('DisableApiTermination.Value') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeInstanceAttributeEnaSupport {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.EnaSupport.Value'),
        outputPath: 'EnaSupport.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.EnaSupport.Value', props);
    return resource.getResponseField('EnaSupport.Value') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeInstanceAttributeEnclaveOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.EnclaveOptions.Enabled'),
        outputPath: 'EnclaveOptions.Enabled',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.EnclaveOptions.Enabled', props);
    return resource.getResponseField('EnclaveOptions.Enabled') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeInstanceAttributeEbsOptimized {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.EbsOptimized.Value'),
        outputPath: 'EbsOptimized.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.EbsOptimized.Value', props);
    return resource.getResponseField('EbsOptimized.Value') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeInstanceAttributeInstanceInitiatedShutdownBehavior {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.InstanceInitiatedShutdownBehavior.Value'),
        outputPath: 'InstanceInitiatedShutdownBehavior.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.InstanceInitiatedShutdownBehavior.Value', props);
    return resource.getResponseField('InstanceInitiatedShutdownBehavior.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceAttributeInstanceType {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.InstanceType.Value'),
        outputPath: 'InstanceType.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.InstanceType.Value', props);
    return resource.getResponseField('InstanceType.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceAttributeKernelId {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.KernelId.Value'),
        outputPath: 'KernelId.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.KernelId.Value', props);
    return resource.getResponseField('KernelId.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceAttributeRamdiskId {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.RamdiskId.Value'),
        outputPath: 'RamdiskId.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.RamdiskId.Value', props);
    return resource.getResponseField('RamdiskId.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceAttributeRootDeviceName {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.RootDeviceName.Value'),
        outputPath: 'RootDeviceName.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.RootDeviceName.Value', props);
    return resource.getResponseField('RootDeviceName.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceAttributeSourceDestCheck {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.SourceDestCheck.Value'),
        outputPath: 'SourceDestCheck.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.SourceDestCheck.Value', props);
    return resource.getResponseField('SourceDestCheck.Value') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeInstanceAttributeSriovNetSupport {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.SriovNetSupport.Value'),
        outputPath: 'SriovNetSupport.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.SriovNetSupport.Value', props);
    return resource.getResponseField('SriovNetSupport.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceAttributeUserData {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceAttribute.UserData.Value'),
        outputPath: 'UserData.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceAttribute.UserData.Value', props);
    return resource.getResponseField('UserData.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceCreditSpecifications {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceCreditSpecificationsRequest) {
  }

  public get instanceCreditSpecifications(): shapes.Ec2InstanceCreditSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceCreditSpecifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceCreditSpecifications.InstanceCreditSpecifications'),
        outputPath: 'InstanceCreditSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          InstanceIds: this.__input.instanceIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceCreditSpecifications.InstanceCreditSpecifications', props);
    return resource.getResponseField('InstanceCreditSpecifications') as unknown as shapes.Ec2InstanceCreditSpecification[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceCreditSpecifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceCreditSpecifications.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          InstanceIds: this.__input.instanceIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceCreditSpecifications.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceEventNotificationAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceEventNotificationAttributesRequest) {
  }

  public get instanceTagAttribute(): EC2ResponsesDescribeInstanceEventNotificationAttributesInstanceTagAttribute {
    return new EC2ResponsesDescribeInstanceEventNotificationAttributesInstanceTagAttribute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDescribeInstanceEventNotificationAttributesInstanceTagAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceEventNotificationAttributesRequest) {
  }

  public get instanceTagKeys(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys'),
        outputPath: 'InstanceTagAttribute.InstanceTagKeys',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys', props);
    return resource.getResponseField('InstanceTagAttribute.InstanceTagKeys') as unknown as string[];
  }

  public get includeAllTagsOfInstance(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance'),
        outputPath: 'InstanceTagAttribute.IncludeAllTagsOfInstance',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance', props);
    return resource.getResponseField('InstanceTagAttribute.IncludeAllTagsOfInstance') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeInstanceEventWindows {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceEventWindowsRequest) {
  }

  public get instanceEventWindows(): shapes.Ec2InstanceEventWindow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceEventWindows',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceEventWindows.InstanceEventWindows'),
        outputPath: 'InstanceEventWindows',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowIds: this.__input.instanceEventWindowIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceEventWindows.InstanceEventWindows', props);
    return resource.getResponseField('InstanceEventWindows') as unknown as shapes.Ec2InstanceEventWindow[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceEventWindows',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceEventWindows.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowIds: this.__input.instanceEventWindowIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceEventWindows.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceStatusRequest) {
  }

  public get instanceStatuses(): shapes.Ec2InstanceStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceStatus.InstanceStatuses'),
        outputPath: 'InstanceStatuses',
        parameters: {
          Filters: this.__input.filters,
          InstanceIds: this.__input.instanceIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
          IncludeAllInstances: this.__input.includeAllInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceStatus.InstanceStatuses', props);
    return resource.getResponseField('InstanceStatuses') as unknown as shapes.Ec2InstanceStatus[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceStatus.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          InstanceIds: this.__input.instanceIds,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
          IncludeAllInstances: this.__input.includeAllInstances,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceStatus.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceTypeOfferings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceTypeOfferingsRequest) {
  }

  public get instanceTypeOfferings(): shapes.Ec2InstanceTypeOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceTypeOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceTypeOfferings.InstanceTypeOfferings'),
        outputPath: 'InstanceTypeOfferings',
        parameters: {
          DryRun: this.__input.dryRun,
          LocationType: this.__input.locationType,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceTypeOfferings.InstanceTypeOfferings', props);
    return resource.getResponseField('InstanceTypeOfferings') as unknown as shapes.Ec2InstanceTypeOffering[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceTypeOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceTypeOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          LocationType: this.__input.locationType,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceTypeOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstanceTypes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstanceTypesRequest) {
  }

  public get instanceTypes(): shapes.Ec2InstanceTypeInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceTypes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceTypes.InstanceTypes'),
        outputPath: 'InstanceTypes',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceTypes: this.__input.instanceTypes,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceTypes.InstanceTypes', props);
    return resource.getResponseField('InstanceTypes') as unknown as shapes.Ec2InstanceTypeInfo[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstanceTypes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstanceTypes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceTypes: this.__input.instanceTypes,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstanceTypes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInstancesRequest) {
  }

  public get reservations(): shapes.Ec2Reservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstances.Reservations'),
        outputPath: 'Reservations',
        parameters: {
          Filters: this.__input.filters,
          InstanceIds: this.__input.instanceIds,
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstances.Reservations', props);
    return resource.getResponseField('Reservations') as unknown as shapes.Ec2Reservation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          InstanceIds: this.__input.instanceIds,
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeInternetGateways {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeInternetGatewaysRequest) {
  }

  public get internetGateways(): shapes.Ec2InternetGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInternetGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInternetGateways.InternetGateways'),
        outputPath: 'InternetGateways',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          InternetGatewayIds: this.__input.internetGatewayIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInternetGateways.InternetGateways', props);
    return resource.getResponseField('InternetGateways') as unknown as shapes.Ec2InternetGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInternetGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeInternetGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          InternetGatewayIds: this.__input.internetGatewayIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInternetGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeIpv6Pools {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeIpv6PoolsRequest) {
  }

  public get ipv6Pools(): shapes.Ec2Ipv6Pool[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIpv6Pools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIpv6Pools.Ipv6Pools'),
        outputPath: 'Ipv6Pools',
        parameters: {
          PoolIds: this.__input.poolIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeIpv6Pools.Ipv6Pools', props);
    return resource.getResponseField('Ipv6Pools') as unknown as shapes.Ec2Ipv6Pool[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeIpv6Pools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeIpv6Pools.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PoolIds: this.__input.poolIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeIpv6Pools.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeKeyPairs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeKeyPairsRequest) {
  }

  public get keyPairs(): shapes.Ec2KeyPairInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeKeyPairs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeKeyPairs.KeyPairs'),
        outputPath: 'KeyPairs',
        parameters: {
          Filters: this.__input.filters,
          KeyNames: this.__input.keyNames,
          KeyPairIds: this.__input.keyPairIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeKeyPairs.KeyPairs', props);
    return resource.getResponseField('KeyPairs') as unknown as shapes.Ec2KeyPairInfo[];
  }

}

export class EC2ResponsesDescribeLaunchTemplateVersions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeLaunchTemplateVersionsRequest) {
  }

  public get launchTemplateVersions(): shapes.Ec2LaunchTemplateVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLaunchTemplateVersions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLaunchTemplateVersions.LaunchTemplateVersions'),
        outputPath: 'LaunchTemplateVersions',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          Versions: this.__input.versions,
          MinVersion: this.__input.minVersion,
          MaxVersion: this.__input.maxVersion,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLaunchTemplateVersions.LaunchTemplateVersions', props);
    return resource.getResponseField('LaunchTemplateVersions') as unknown as shapes.Ec2LaunchTemplateVersion[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLaunchTemplateVersions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLaunchTemplateVersions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          Versions: this.__input.versions,
          MinVersion: this.__input.minVersion,
          MaxVersion: this.__input.maxVersion,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLaunchTemplateVersions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeLaunchTemplates {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeLaunchTemplatesRequest) {
  }

  public get launchTemplates(): shapes.Ec2LaunchTemplate[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLaunchTemplates',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLaunchTemplates.LaunchTemplates'),
        outputPath: 'LaunchTemplates',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateIds: this.__input.launchTemplateIds,
          LaunchTemplateNames: this.__input.launchTemplateNames,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLaunchTemplates.LaunchTemplates', props);
    return resource.getResponseField('LaunchTemplates') as unknown as shapes.Ec2LaunchTemplate[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLaunchTemplates',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLaunchTemplates.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          LaunchTemplateIds: this.__input.launchTemplateIds,
          LaunchTemplateNames: this.__input.launchTemplateNames,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLaunchTemplates.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest) {
  }

  public get localGatewayRouteTableVirtualInterfaceGroupAssociations(): shapes.Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.LocalGatewayRouteTableVirtualInterfaceGroupAssociations'),
        outputPath: 'LocalGatewayRouteTableVirtualInterfaceGroupAssociations',
        parameters: {
          LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: this.__input.localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.LocalGatewayRouteTableVirtualInterfaceGroupAssociations', props);
    return resource.getResponseField('LocalGatewayRouteTableVirtualInterfaceGroupAssociations') as unknown as shapes.Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: this.__input.localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeLocalGatewayRouteTableVpcAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest) {
  }

  public get localGatewayRouteTableVpcAssociations(): shapes.Ec2LocalGatewayRouteTableVpcAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTableVpcAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTableVpcAssociations.LocalGatewayRouteTableVpcAssociations'),
        outputPath: 'LocalGatewayRouteTableVpcAssociations',
        parameters: {
          LocalGatewayRouteTableVpcAssociationIds: this.__input.localGatewayRouteTableVpcAssociationIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayRouteTableVpcAssociations.LocalGatewayRouteTableVpcAssociations', props);
    return resource.getResponseField('LocalGatewayRouteTableVpcAssociations') as unknown as shapes.Ec2LocalGatewayRouteTableVpcAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTableVpcAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTableVpcAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayRouteTableVpcAssociationIds: this.__input.localGatewayRouteTableVpcAssociationIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayRouteTableVpcAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeLocalGatewayRouteTables {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeLocalGatewayRouteTablesRequest) {
  }

  public get localGatewayRouteTables(): shapes.Ec2LocalGatewayRouteTable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTables.LocalGatewayRouteTables'),
        outputPath: 'LocalGatewayRouteTables',
        parameters: {
          LocalGatewayRouteTableIds: this.__input.localGatewayRouteTableIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayRouteTables.LocalGatewayRouteTables', props);
    return resource.getResponseField('LocalGatewayRouteTables') as unknown as shapes.Ec2LocalGatewayRouteTable[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayRouteTables.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayRouteTableIds: this.__input.localGatewayRouteTableIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayRouteTables.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeLocalGatewayVirtualInterfaceGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest) {
  }

  public get localGatewayVirtualInterfaceGroups(): shapes.Ec2LocalGatewayVirtualInterfaceGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayVirtualInterfaceGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayVirtualInterfaceGroups.LocalGatewayVirtualInterfaceGroups'),
        outputPath: 'LocalGatewayVirtualInterfaceGroups',
        parameters: {
          LocalGatewayVirtualInterfaceGroupIds: this.__input.localGatewayVirtualInterfaceGroupIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayVirtualInterfaceGroups.LocalGatewayVirtualInterfaceGroups', props);
    return resource.getResponseField('LocalGatewayVirtualInterfaceGroups') as unknown as shapes.Ec2LocalGatewayVirtualInterfaceGroup[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayVirtualInterfaceGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayVirtualInterfaceGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayVirtualInterfaceGroupIds: this.__input.localGatewayVirtualInterfaceGroupIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayVirtualInterfaceGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeLocalGatewayVirtualInterfaces {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeLocalGatewayVirtualInterfacesRequest) {
  }

  public get localGatewayVirtualInterfaces(): shapes.Ec2LocalGatewayVirtualInterface[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayVirtualInterfaces',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayVirtualInterfaces.LocalGatewayVirtualInterfaces'),
        outputPath: 'LocalGatewayVirtualInterfaces',
        parameters: {
          LocalGatewayVirtualInterfaceIds: this.__input.localGatewayVirtualInterfaceIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayVirtualInterfaces.LocalGatewayVirtualInterfaces', props);
    return resource.getResponseField('LocalGatewayVirtualInterfaces') as unknown as shapes.Ec2LocalGatewayVirtualInterface[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGatewayVirtualInterfaces',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGatewayVirtualInterfaces.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayVirtualInterfaceIds: this.__input.localGatewayVirtualInterfaceIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGatewayVirtualInterfaces.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeLocalGateways {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeLocalGatewaysRequest) {
  }

  public get localGateways(): shapes.Ec2LocalGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGateways.LocalGateways'),
        outputPath: 'LocalGateways',
        parameters: {
          LocalGatewayIds: this.__input.localGatewayIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGateways.LocalGateways', props);
    return resource.getResponseField('LocalGateways') as unknown as shapes.Ec2LocalGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeLocalGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeLocalGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayIds: this.__input.localGatewayIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeLocalGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeManagedPrefixLists {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeManagedPrefixListsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeManagedPrefixLists',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeManagedPrefixLists.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          PrefixListIds: this.__input.prefixListIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeManagedPrefixLists.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get prefixLists(): shapes.Ec2ManagedPrefixList[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeManagedPrefixLists',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeManagedPrefixLists.PrefixLists'),
        outputPath: 'PrefixLists',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          PrefixListIds: this.__input.prefixListIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeManagedPrefixLists.PrefixLists', props);
    return resource.getResponseField('PrefixLists') as unknown as shapes.Ec2ManagedPrefixList[];
  }

}

export class EC2ResponsesDescribeMovingAddresses {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeMovingAddressesRequest) {
  }

  public get movingAddressStatuses(): shapes.Ec2MovingAddressStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMovingAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeMovingAddresses.MovingAddressStatuses'),
        outputPath: 'MovingAddressStatuses',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          PublicIps: this.__input.publicIps,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMovingAddresses.MovingAddressStatuses', props);
    return resource.getResponseField('MovingAddressStatuses') as unknown as shapes.Ec2MovingAddressStatus[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMovingAddresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeMovingAddresses.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          PublicIps: this.__input.publicIps,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMovingAddresses.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeNatGateways {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNatGatewaysRequest) {
  }

  public get natGateways(): shapes.Ec2NatGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNatGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNatGateways.NatGateways'),
        outputPath: 'NatGateways',
        parameters: {
          DryRun: this.__input.dryRun,
          Filter: this.__input.filter,
          MaxResults: this.__input.maxResults,
          NatGatewayIds: this.__input.natGatewayIds,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNatGateways.NatGateways', props);
    return resource.getResponseField('NatGateways') as unknown as shapes.Ec2NatGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNatGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNatGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filter: this.__input.filter,
          MaxResults: this.__input.maxResults,
          NatGatewayIds: this.__input.natGatewayIds,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNatGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeNetworkAcls {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkAclsRequest) {
  }

  public get networkAcls(): shapes.Ec2NetworkAcl[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkAcls',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkAcls.NetworkAcls'),
        outputPath: 'NetworkAcls',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          NetworkAclIds: this.__input.networkAclIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkAcls.NetworkAcls', props);
    return resource.getResponseField('NetworkAcls') as unknown as shapes.Ec2NetworkAcl[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkAcls',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkAcls.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          NetworkAclIds: this.__input.networkAclIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkAcls.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeNetworkInsightsAnalyses {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkInsightsAnalysesRequest) {
  }

  public get networkInsightsAnalyses(): shapes.Ec2NetworkInsightsAnalysis[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInsightsAnalyses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInsightsAnalyses.NetworkInsightsAnalyses'),
        outputPath: 'NetworkInsightsAnalyses',
        parameters: {
          NetworkInsightsAnalysisIds: this.__input.networkInsightsAnalysisIds,
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          AnalysisStartTime: this.__input.analysisStartTime,
          AnalysisEndTime: this.__input.analysisEndTime,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInsightsAnalyses.NetworkInsightsAnalyses', props);
    return resource.getResponseField('NetworkInsightsAnalyses') as unknown as shapes.Ec2NetworkInsightsAnalysis[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInsightsAnalyses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInsightsAnalyses.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          NetworkInsightsAnalysisIds: this.__input.networkInsightsAnalysisIds,
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          AnalysisStartTime: this.__input.analysisStartTime,
          AnalysisEndTime: this.__input.analysisEndTime,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInsightsAnalyses.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeNetworkInsightsPaths {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkInsightsPathsRequest) {
  }

  public get networkInsightsPaths(): shapes.Ec2NetworkInsightsPath[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInsightsPaths',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInsightsPaths.NetworkInsightsPaths'),
        outputPath: 'NetworkInsightsPaths',
        parameters: {
          NetworkInsightsPathIds: this.__input.networkInsightsPathIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInsightsPaths.NetworkInsightsPaths', props);
    return resource.getResponseField('NetworkInsightsPaths') as unknown as shapes.Ec2NetworkInsightsPath[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInsightsPaths',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInsightsPaths.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          NetworkInsightsPathIds: this.__input.networkInsightsPathIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInsightsPaths.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeNetworkInterfaceAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest) {
  }

  public get attachment(): EC2ResponsesDescribeNetworkInterfaceAttributeAttachment {
    return new EC2ResponsesDescribeNetworkInterfaceAttributeAttachment(this.__scope, this.__resources, this.__input);
  }

  public get description(): EC2ResponsesDescribeNetworkInterfaceAttributeDescription {
    return new EC2ResponsesDescribeNetworkInterfaceAttributeDescription(this.__scope, this.__resources, this.__input);
  }

  public get groups(): shapes.Ec2GroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Groups'),
        outputPath: 'Groups',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Groups', props);
    return resource.getResponseField('Groups') as unknown as shapes.Ec2GroupIdentifier[];
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.NetworkInterfaceId'),
        outputPath: 'NetworkInterfaceId',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterfaceId') as unknown as string;
  }

  public get sourceDestCheck(): EC2ResponsesDescribeNetworkInterfaceAttributeSourceDestCheck {
    return new EC2ResponsesDescribeNetworkInterfaceAttributeSourceDestCheck(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDescribeNetworkInterfaceAttributeAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest) {
  }

  public get attachTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.AttachTime'),
        outputPath: 'Attachment.AttachTime',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Attachment.AttachTime', props);
    return resource.getResponseField('Attachment.AttachTime') as unknown as string;
  }

  public get attachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.AttachmentId'),
        outputPath: 'Attachment.AttachmentId',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Attachment.AttachmentId', props);
    return resource.getResponseField('Attachment.AttachmentId') as unknown as string;
  }

  public get deleteOnTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.DeleteOnTermination'),
        outputPath: 'Attachment.DeleteOnTermination',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Attachment.DeleteOnTermination', props);
    return resource.getResponseField('Attachment.DeleteOnTermination') as unknown as boolean;
  }

  public get deviceIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.DeviceIndex'),
        outputPath: 'Attachment.DeviceIndex',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Attachment.DeviceIndex', props);
    return resource.getResponseField('Attachment.DeviceIndex') as unknown as number;
  }

  public get networkCardIndex(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.NetworkCardIndex'),
        outputPath: 'Attachment.NetworkCardIndex',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Attachment.NetworkCardIndex', props);
    return resource.getResponseField('Attachment.NetworkCardIndex') as unknown as number;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.InstanceId'),
        outputPath: 'Attachment.InstanceId',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Attachment.InstanceId', props);
    return resource.getResponseField('Attachment.InstanceId') as unknown as string;
  }

  public get instanceOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.InstanceOwnerId'),
        outputPath: 'Attachment.InstanceOwnerId',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Attachment.InstanceOwnerId', props);
    return resource.getResponseField('Attachment.InstanceOwnerId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Attachment.Status'),
        outputPath: 'Attachment.Status',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Attachment.Status', props);
    return resource.getResponseField('Attachment.Status') as unknown as string;
  }

}

export class EC2ResponsesDescribeNetworkInterfaceAttributeDescription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.Description.Value'),
        outputPath: 'Description.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.Description.Value', props);
    return resource.getResponseField('Description.Value') as unknown as string;
  }

}

export class EC2ResponsesDescribeNetworkInterfaceAttributeSourceDestCheck {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkInterfaceAttributeRequest) {
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaceAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaceAttribute.SourceDestCheck.Value'),
        outputPath: 'SourceDestCheck.Value',
        parameters: {
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaceAttribute.SourceDestCheck.Value', props);
    return resource.getResponseField('SourceDestCheck.Value') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeNetworkInterfacePermissions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkInterfacePermissionsRequest) {
  }

  public get networkInterfacePermissions(): shapes.Ec2NetworkInterfacePermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfacePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfacePermissions.NetworkInterfacePermissions'),
        outputPath: 'NetworkInterfacePermissions',
        parameters: {
          NetworkInterfacePermissionIds: this.__input.networkInterfacePermissionIds,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfacePermissions.NetworkInterfacePermissions', props);
    return resource.getResponseField('NetworkInterfacePermissions') as unknown as shapes.Ec2NetworkInterfacePermission[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfacePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfacePermissions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          NetworkInterfacePermissionIds: this.__input.networkInterfacePermissionIds,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfacePermissions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeNetworkInterfaces {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeNetworkInterfacesRequest) {
  }

  public get networkInterfaces(): shapes.Ec2NetworkInterface[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaces',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaces.NetworkInterfaces'),
        outputPath: 'NetworkInterfaces',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaces.NetworkInterfaces', props);
    return resource.getResponseField('NetworkInterfaces') as unknown as shapes.Ec2NetworkInterface[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeNetworkInterfaces',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeNetworkInterfaces.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeNetworkInterfaces.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribePlacementGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribePlacementGroupsRequest) {
  }

  public get placementGroups(): shapes.Ec2PlacementGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePlacementGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePlacementGroups.PlacementGroups'),
        outputPath: 'PlacementGroups',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          GroupNames: this.__input.groupNames,
          GroupIds: this.__input.groupIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePlacementGroups.PlacementGroups', props);
    return resource.getResponseField('PlacementGroups') as unknown as shapes.Ec2PlacementGroup[];
  }

}

export class EC2ResponsesDescribePrefixLists {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribePrefixListsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePrefixLists',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePrefixLists.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          PrefixListIds: this.__input.prefixListIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePrefixLists.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get prefixLists(): shapes.Ec2PrefixList[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePrefixLists',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePrefixLists.PrefixLists'),
        outputPath: 'PrefixLists',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          PrefixListIds: this.__input.prefixListIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePrefixLists.PrefixLists', props);
    return resource.getResponseField('PrefixLists') as unknown as shapes.Ec2PrefixList[];
  }

}

export class EC2ResponsesDescribePrincipalIdFormat {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribePrincipalIdFormatRequest) {
  }

  public get principals(): shapes.Ec2PrincipalIdFormat[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePrincipalIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePrincipalIdFormat.Principals'),
        outputPath: 'Principals',
        parameters: {
          DryRun: this.__input.dryRun,
          Resources: this.__input.resources,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePrincipalIdFormat.Principals', props);
    return resource.getResponseField('Principals') as unknown as shapes.Ec2PrincipalIdFormat[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePrincipalIdFormat',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePrincipalIdFormat.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Resources: this.__input.resources,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePrincipalIdFormat.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribePublicIpv4Pools {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribePublicIpv4PoolsRequest) {
  }

  public get publicIpv4Pools(): shapes.Ec2PublicIpv4Pool[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePublicIpv4Pools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePublicIpv4Pools.PublicIpv4Pools'),
        outputPath: 'PublicIpv4Pools',
        parameters: {
          PoolIds: this.__input.poolIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePublicIpv4Pools.PublicIpv4Pools', props);
    return resource.getResponseField('PublicIpv4Pools') as unknown as shapes.Ec2PublicIpv4Pool[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePublicIpv4Pools',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribePublicIpv4Pools.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PoolIds: this.__input.poolIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePublicIpv4Pools.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeRegions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeRegionsRequest) {
  }

  public get regions(): shapes.Ec2Region[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeRegions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeRegions.Regions'),
        outputPath: 'Regions',
        parameters: {
          Filters: this.__input.filters,
          RegionNames: this.__input.regionNames,
          DryRun: this.__input.dryRun,
          AllRegions: this.__input.allRegions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeRegions.Regions', props);
    return resource.getResponseField('Regions') as unknown as shapes.Ec2Region[];
  }

}

export class EC2ResponsesDescribeReplaceRootVolumeTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeReplaceRootVolumeTasksRequest) {
  }

  public get replaceRootVolumeTasks(): shapes.Ec2ReplaceRootVolumeTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReplaceRootVolumeTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReplaceRootVolumeTasks.ReplaceRootVolumeTasks'),
        outputPath: 'ReplaceRootVolumeTasks',
        parameters: {
          ReplaceRootVolumeTaskIds: this.__input.replaceRootVolumeTaskIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReplaceRootVolumeTasks.ReplaceRootVolumeTasks', props);
    return resource.getResponseField('ReplaceRootVolumeTasks') as unknown as shapes.Ec2ReplaceRootVolumeTask[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReplaceRootVolumeTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReplaceRootVolumeTasks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ReplaceRootVolumeTaskIds: this.__input.replaceRootVolumeTaskIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReplaceRootVolumeTasks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeReservedInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeReservedInstancesRequest) {
  }

  public get reservedInstances(): shapes.Ec2ReservedInstances[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstances.ReservedInstances'),
        outputPath: 'ReservedInstances',
        parameters: {
          Filters: this.__input.filters,
          OfferingClass: this.__input.offeringClass,
          ReservedInstancesIds: this.__input.reservedInstancesIds,
          DryRun: this.__input.dryRun,
          OfferingType: this.__input.offeringType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedInstances.ReservedInstances', props);
    return resource.getResponseField('ReservedInstances') as unknown as shapes.Ec2ReservedInstances[];
  }

}

export class EC2ResponsesDescribeReservedInstancesListings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeReservedInstancesListingsRequest) {
  }

  public get reservedInstancesListings(): shapes.Ec2ReservedInstancesListing[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesListings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesListings.ReservedInstancesListings'),
        outputPath: 'ReservedInstancesListings',
        parameters: {
          Filters: this.__input.filters,
          ReservedInstancesId: this.__input.reservedInstancesId,
          ReservedInstancesListingId: this.__input.reservedInstancesListingId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedInstancesListings.ReservedInstancesListings', props);
    return resource.getResponseField('ReservedInstancesListings') as unknown as shapes.Ec2ReservedInstancesListing[];
  }

}

export class EC2ResponsesDescribeReservedInstancesModifications {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeReservedInstancesModificationsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesModifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesModifications.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          ReservedInstancesModificationIds: this.__input.reservedInstancesModificationIds,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedInstancesModifications.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get reservedInstancesModifications(): shapes.Ec2ReservedInstancesModification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesModifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesModifications.ReservedInstancesModifications'),
        outputPath: 'ReservedInstancesModifications',
        parameters: {
          Filters: this.__input.filters,
          ReservedInstancesModificationIds: this.__input.reservedInstancesModificationIds,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedInstancesModifications.ReservedInstancesModifications', props);
    return resource.getResponseField('ReservedInstancesModifications') as unknown as shapes.Ec2ReservedInstancesModification[];
  }

}

export class EC2ResponsesDescribeReservedInstancesOfferings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeReservedInstancesOfferingsRequest) {
  }

  public get reservedInstancesOfferings(): shapes.Ec2ReservedInstancesOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesOfferings.ReservedInstancesOfferings'),
        outputPath: 'ReservedInstancesOfferings',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Filters: this.__input.filters,
          IncludeMarketplace: this.__input.includeMarketplace,
          InstanceType: this.__input.instanceType,
          MaxDuration: this.__input.maxDuration,
          MaxInstanceCount: this.__input.maxInstanceCount,
          MinDuration: this.__input.minDuration,
          OfferingClass: this.__input.offeringClass,
          ProductDescription: this.__input.productDescription,
          ReservedInstancesOfferingIds: this.__input.reservedInstancesOfferingIds,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          OfferingType: this.__input.offeringType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedInstancesOfferings.ReservedInstancesOfferings', props);
    return resource.getResponseField('ReservedInstancesOfferings') as unknown as shapes.Ec2ReservedInstancesOffering[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedInstancesOfferings',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeReservedInstancesOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Filters: this.__input.filters,
          IncludeMarketplace: this.__input.includeMarketplace,
          InstanceType: this.__input.instanceType,
          MaxDuration: this.__input.maxDuration,
          MaxInstanceCount: this.__input.maxInstanceCount,
          MinDuration: this.__input.minDuration,
          OfferingClass: this.__input.offeringClass,
          ProductDescription: this.__input.productDescription,
          ReservedInstancesOfferingIds: this.__input.reservedInstancesOfferingIds,
          DryRun: this.__input.dryRun,
          InstanceTenancy: this.__input.instanceTenancy,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          OfferingType: this.__input.offeringType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedInstancesOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeRouteTables {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeRouteTablesRequest) {
  }

  public get routeTables(): shapes.Ec2RouteTable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeRouteTables.RouteTables'),
        outputPath: 'RouteTables',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          RouteTableIds: this.__input.routeTableIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeRouteTables.RouteTables', props);
    return resource.getResponseField('RouteTables') as unknown as shapes.Ec2RouteTable[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeRouteTables.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          RouteTableIds: this.__input.routeTableIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeRouteTables.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeScheduledInstanceAvailability {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeScheduledInstanceAvailabilityRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledInstanceAvailability',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeScheduledInstanceAvailability.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          FirstSlotStartTimeRange: {
            EarliestTime: this.__input.firstSlotStartTimeRange.earliestTime,
            LatestTime: this.__input.firstSlotStartTimeRange.latestTime,
          },
          MaxResults: this.__input.maxResults,
          MaxSlotDurationInHours: this.__input.maxSlotDurationInHours,
          MinSlotDurationInHours: this.__input.minSlotDurationInHours,
          NextToken: this.__input.nextToken,
          Recurrence: {
            Frequency: this.__input.recurrence.frequency,
            Interval: this.__input.recurrence.interval,
            OccurrenceDays: this.__input.recurrence.occurrenceDays,
            OccurrenceRelativeToEnd: this.__input.recurrence.occurrenceRelativeToEnd,
            OccurrenceUnit: this.__input.recurrence.occurrenceUnit,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeScheduledInstanceAvailability.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get scheduledInstanceAvailabilitySet(): shapes.Ec2ScheduledInstanceAvailability[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledInstanceAvailability',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeScheduledInstanceAvailability.ScheduledInstanceAvailabilitySet'),
        outputPath: 'ScheduledInstanceAvailabilitySet',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          FirstSlotStartTimeRange: {
            EarliestTime: this.__input.firstSlotStartTimeRange.earliestTime,
            LatestTime: this.__input.firstSlotStartTimeRange.latestTime,
          },
          MaxResults: this.__input.maxResults,
          MaxSlotDurationInHours: this.__input.maxSlotDurationInHours,
          MinSlotDurationInHours: this.__input.minSlotDurationInHours,
          NextToken: this.__input.nextToken,
          Recurrence: {
            Frequency: this.__input.recurrence.frequency,
            Interval: this.__input.recurrence.interval,
            OccurrenceDays: this.__input.recurrence.occurrenceDays,
            OccurrenceRelativeToEnd: this.__input.recurrence.occurrenceRelativeToEnd,
            OccurrenceUnit: this.__input.recurrence.occurrenceUnit,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeScheduledInstanceAvailability.ScheduledInstanceAvailabilitySet', props);
    return resource.getResponseField('ScheduledInstanceAvailabilitySet') as unknown as shapes.Ec2ScheduledInstanceAvailability[];
  }

}

export class EC2ResponsesDescribeScheduledInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeScheduledInstancesRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeScheduledInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          ScheduledInstanceIds: this.__input.scheduledInstanceIds,
          SlotStartTimeRange: {
            EarliestTime: this.__input.slotStartTimeRange?.earliestTime,
            LatestTime: this.__input.slotStartTimeRange?.latestTime,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeScheduledInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get scheduledInstanceSet(): shapes.Ec2ScheduledInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeScheduledInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeScheduledInstances.ScheduledInstanceSet'),
        outputPath: 'ScheduledInstanceSet',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          ScheduledInstanceIds: this.__input.scheduledInstanceIds,
          SlotStartTimeRange: {
            EarliestTime: this.__input.slotStartTimeRange?.earliestTime,
            LatestTime: this.__input.slotStartTimeRange?.latestTime,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeScheduledInstances.ScheduledInstanceSet', props);
    return resource.getResponseField('ScheduledInstanceSet') as unknown as shapes.Ec2ScheduledInstance[];
  }

}

export class EC2ResponsesDescribeSecurityGroupReferences {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSecurityGroupReferencesRequest) {
  }

  public get securityGroupReferenceSet(): shapes.Ec2SecurityGroupReference[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSecurityGroupReferences',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSecurityGroupReferences.SecurityGroupReferenceSet'),
        outputPath: 'SecurityGroupReferenceSet',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupId: this.__input.groupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSecurityGroupReferences.SecurityGroupReferenceSet', props);
    return resource.getResponseField('SecurityGroupReferenceSet') as unknown as shapes.Ec2SecurityGroupReference[];
  }

}

export class EC2ResponsesDescribeSecurityGroupRules {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSecurityGroupRulesRequest) {
  }

  public get securityGroupRules(): shapes.Ec2SecurityGroupRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSecurityGroupRules',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSecurityGroupRules.SecurityGroupRules'),
        outputPath: 'SecurityGroupRules',
        parameters: {
          Filters: this.__input.filters,
          SecurityGroupRuleIds: this.__input.securityGroupRuleIds,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSecurityGroupRules.SecurityGroupRules', props);
    return resource.getResponseField('SecurityGroupRules') as unknown as shapes.Ec2SecurityGroupRule[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSecurityGroupRules',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSecurityGroupRules.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          SecurityGroupRuleIds: this.__input.securityGroupRuleIds,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSecurityGroupRules.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeSecurityGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSecurityGroupsRequest) {
  }

  public get securityGroups(): shapes.Ec2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSecurityGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSecurityGroups.SecurityGroups'),
        outputPath: 'SecurityGroups',
        parameters: {
          Filters: this.__input.filters,
          GroupIds: this.__input.groupIds,
          GroupNames: this.__input.groupNames,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSecurityGroups.SecurityGroups', props);
    return resource.getResponseField('SecurityGroups') as unknown as shapes.Ec2SecurityGroup[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSecurityGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSecurityGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          GroupIds: this.__input.groupIds,
          GroupNames: this.__input.groupNames,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSecurityGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeSnapshotAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSnapshotAttributeRequest) {
  }

  public get createVolumePermissions(): shapes.Ec2CreateVolumePermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshotAttribute.CreateVolumePermissions'),
        outputPath: 'CreateVolumePermissions',
        parameters: {
          Attribute: this.__input.attribute,
          SnapshotId: this.__input.snapshotId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshotAttribute.CreateVolumePermissions', props);
    return resource.getResponseField('CreateVolumePermissions') as unknown as shapes.Ec2CreateVolumePermission[];
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshotAttribute.ProductCodes'),
        outputPath: 'ProductCodes',
        parameters: {
          Attribute: this.__input.attribute,
          SnapshotId: this.__input.snapshotId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshotAttribute.ProductCodes', props);
    return resource.getResponseField('ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshotAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshotAttribute.SnapshotId'),
        outputPath: 'SnapshotId',
        parameters: {
          Attribute: this.__input.attribute,
          SnapshotId: this.__input.snapshotId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshotAttribute.SnapshotId', props);
    return resource.getResponseField('SnapshotId') as unknown as string;
  }

}

export class EC2ResponsesDescribeSnapshots {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSnapshotsRequest) {
  }

  public get snapshots(): shapes.Ec2Snapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshots',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshots.Snapshots'),
        outputPath: 'Snapshots',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          OwnerIds: this.__input.ownerIds,
          RestorableByUserIds: this.__input.restorableByUserIds,
          SnapshotIds: this.__input.snapshotIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshots.Snapshots', props);
    return resource.getResponseField('Snapshots') as unknown as shapes.Ec2Snapshot[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSnapshots',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSnapshots.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          OwnerIds: this.__input.ownerIds,
          RestorableByUserIds: this.__input.restorableByUserIds,
          SnapshotIds: this.__input.snapshotIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSnapshots.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeSpotDatafeedSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSpotDatafeedSubscriptionRequest) {
  }

  public get spotDatafeedSubscription(): EC2ResponsesDescribeSpotDatafeedSubscriptionSpotDatafeedSubscription {
    return new EC2ResponsesDescribeSpotDatafeedSubscriptionSpotDatafeedSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDescribeSpotDatafeedSubscriptionSpotDatafeedSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSpotDatafeedSubscriptionRequest) {
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Bucket'),
        outputPath: 'SpotDatafeedSubscription.Bucket',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Bucket', props);
    return resource.getResponseField('SpotDatafeedSubscription.Bucket') as unknown as string;
  }

  public get fault(): EC2ResponsesDescribeSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault {
    return new EC2ResponsesDescribeSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault(this.__scope, this.__resources, this.__input);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.OwnerId'),
        outputPath: 'SpotDatafeedSubscription.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.OwnerId', props);
    return resource.getResponseField('SpotDatafeedSubscription.OwnerId') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Prefix'),
        outputPath: 'SpotDatafeedSubscription.Prefix',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Prefix', props);
    return resource.getResponseField('SpotDatafeedSubscription.Prefix') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.State'),
        outputPath: 'SpotDatafeedSubscription.State',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.State', props);
    return resource.getResponseField('SpotDatafeedSubscription.State') as unknown as string;
  }

}

export class EC2ResponsesDescribeSpotDatafeedSubscriptionSpotDatafeedSubscriptionFault {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSpotDatafeedSubscriptionRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Code'),
        outputPath: 'SpotDatafeedSubscription.Fault.Code',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Code', props);
    return resource.getResponseField('SpotDatafeedSubscription.Fault.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotDatafeedSubscription',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Message'),
        outputPath: 'SpotDatafeedSubscription.Fault.Message',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotDatafeedSubscription.SpotDatafeedSubscription.Fault.Message', props);
    return resource.getResponseField('SpotDatafeedSubscription.Fault.Message') as unknown as string;
  }

}

export class EC2ResponsesDescribeSpotFleetInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSpotFleetInstancesRequest) {
  }

  public get activeInstances(): shapes.Ec2ActiveInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetInstances.ActiveInstances'),
        outputPath: 'ActiveInstances',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetInstances.ActiveInstances', props);
    return resource.getResponseField('ActiveInstances') as unknown as shapes.Ec2ActiveInstance[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get spotFleetRequestId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetInstances.SpotFleetRequestId'),
        outputPath: 'SpotFleetRequestId',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetInstances.SpotFleetRequestId', props);
    return resource.getResponseField('SpotFleetRequestId') as unknown as string;
  }

}

export class EC2ResponsesDescribeSpotFleetRequestHistory {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSpotFleetRequestHistoryRequest) {
  }

  public get historyRecords(): shapes.Ec2HistoryRecord[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.HistoryRecords'),
        outputPath: 'HistoryRecords',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetRequestHistory.HistoryRecords', props);
    return resource.getResponseField('HistoryRecords') as unknown as shapes.Ec2HistoryRecord[];
  }

  public get lastEvaluatedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.LastEvaluatedTime'),
        outputPath: 'LastEvaluatedTime',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetRequestHistory.LastEvaluatedTime', props);
    return resource.getResponseField('LastEvaluatedTime') as unknown as string;
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetRequestHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get spotFleetRequestId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.SpotFleetRequestId'),
        outputPath: 'SpotFleetRequestId',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetRequestHistory.SpotFleetRequestId', props);
    return resource.getResponseField('SpotFleetRequestId') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequestHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequestHistory.StartTime'),
        outputPath: 'StartTime',
        parameters: {
          DryRun: this.__input.dryRun,
          EventType: this.__input.eventType,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetRequestHistory.StartTime', props);
    return resource.getResponseField('StartTime') as unknown as string;
  }

}

export class EC2ResponsesDescribeSpotFleetRequests {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSpotFleetRequestsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequests.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestIds: this.__input.spotFleetRequestIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetRequests.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get spotFleetRequestConfigs(): shapes.Ec2SpotFleetRequestConfig[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotFleetRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotFleetRequests.SpotFleetRequestConfigs'),
        outputPath: 'SpotFleetRequestConfigs',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          SpotFleetRequestIds: this.__input.spotFleetRequestIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotFleetRequests.SpotFleetRequestConfigs', props);
    return resource.getResponseField('SpotFleetRequestConfigs') as unknown as shapes.Ec2SpotFleetRequestConfig[];
  }

}

export class EC2ResponsesDescribeSpotInstanceRequests {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSpotInstanceRequestsRequest) {
  }

  public get spotInstanceRequests(): shapes.Ec2SpotInstanceRequest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotInstanceRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotInstanceRequests.SpotInstanceRequests'),
        outputPath: 'SpotInstanceRequests',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          SpotInstanceRequestIds: this.__input.spotInstanceRequestIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotInstanceRequests.SpotInstanceRequests', props);
    return resource.getResponseField('SpotInstanceRequests') as unknown as shapes.Ec2SpotInstanceRequest[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotInstanceRequests',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotInstanceRequests.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          SpotInstanceRequestIds: this.__input.spotInstanceRequestIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotInstanceRequests.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeSpotPriceHistory {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSpotPriceHistoryRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotPriceHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotPriceHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
          EndTime: this.__input.endTime,
          InstanceTypes: this.__input.instanceTypes,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          ProductDescriptions: this.__input.productDescriptions,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotPriceHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get spotPriceHistory(): shapes.Ec2SpotPrice[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSpotPriceHistory',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSpotPriceHistory.SpotPriceHistory'),
        outputPath: 'SpotPriceHistory',
        parameters: {
          Filters: this.__input.filters,
          AvailabilityZone: this.__input.availabilityZone,
          DryRun: this.__input.dryRun,
          EndTime: this.__input.endTime,
          InstanceTypes: this.__input.instanceTypes,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          ProductDescriptions: this.__input.productDescriptions,
          StartTime: this.__input.startTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSpotPriceHistory.SpotPriceHistory', props);
    return resource.getResponseField('SpotPriceHistory') as unknown as shapes.Ec2SpotPrice[];
  }

}

export class EC2ResponsesDescribeStaleSecurityGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeStaleSecurityGroupsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStaleSecurityGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeStaleSecurityGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          VpcId: this.__input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeStaleSecurityGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get staleSecurityGroupSet(): shapes.Ec2StaleSecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStaleSecurityGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeStaleSecurityGroups.StaleSecurityGroupSet'),
        outputPath: 'StaleSecurityGroupSet',
        parameters: {
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          VpcId: this.__input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeStaleSecurityGroups.StaleSecurityGroupSet', props);
    return resource.getResponseField('StaleSecurityGroupSet') as unknown as shapes.Ec2StaleSecurityGroup[];
  }

}

export class EC2ResponsesDescribeStoreImageTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeStoreImageTasksRequest) {
  }

  public get storeImageTaskResults(): shapes.Ec2StoreImageTaskResult[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStoreImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeStoreImageTasks.StoreImageTaskResults'),
        outputPath: 'StoreImageTaskResults',
        parameters: {
          ImageIds: this.__input.imageIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeStoreImageTasks.StoreImageTaskResults', props);
    return resource.getResponseField('StoreImageTaskResults') as unknown as shapes.Ec2StoreImageTaskResult[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeStoreImageTasks',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeStoreImageTasks.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ImageIds: this.__input.imageIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeStoreImageTasks.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeSubnets {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeSubnetsRequest) {
  }

  public get subnets(): shapes.Ec2Subnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSubnets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSubnets.Subnets'),
        outputPath: 'Subnets',
        parameters: {
          Filters: this.__input.filters,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSubnets.Subnets', props);
    return resource.getResponseField('Subnets') as unknown as shapes.Ec2Subnet[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSubnets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeSubnets.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSubnets.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTags {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTagsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTags',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTags.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTags.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get tags(): shapes.Ec2TagDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTags',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTags.Tags'),
        outputPath: 'Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTags.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2TagDescription[];
  }

}

export class EC2ResponsesDescribeTrafficMirrorFilters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTrafficMirrorFiltersRequest) {
  }

  public get trafficMirrorFilters(): shapes.Ec2TrafficMirrorFilter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorFilters',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorFilters.TrafficMirrorFilters'),
        outputPath: 'TrafficMirrorFilters',
        parameters: {
          TrafficMirrorFilterIds: this.__input.trafficMirrorFilterIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTrafficMirrorFilters.TrafficMirrorFilters', props);
    return resource.getResponseField('TrafficMirrorFilters') as unknown as shapes.Ec2TrafficMirrorFilter[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorFilters',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorFilters.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TrafficMirrorFilterIds: this.__input.trafficMirrorFilterIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTrafficMirrorFilters.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTrafficMirrorSessions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTrafficMirrorSessionsRequest) {
  }

  public get trafficMirrorSessions(): shapes.Ec2TrafficMirrorSession[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorSessions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorSessions.TrafficMirrorSessions'),
        outputPath: 'TrafficMirrorSessions',
        parameters: {
          TrafficMirrorSessionIds: this.__input.trafficMirrorSessionIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTrafficMirrorSessions.TrafficMirrorSessions', props);
    return resource.getResponseField('TrafficMirrorSessions') as unknown as shapes.Ec2TrafficMirrorSession[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorSessions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorSessions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TrafficMirrorSessionIds: this.__input.trafficMirrorSessionIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTrafficMirrorSessions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTrafficMirrorTargets {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTrafficMirrorTargetsRequest) {
  }

  public get trafficMirrorTargets(): shapes.Ec2TrafficMirrorTarget[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorTargets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorTargets.TrafficMirrorTargets'),
        outputPath: 'TrafficMirrorTargets',
        parameters: {
          TrafficMirrorTargetIds: this.__input.trafficMirrorTargetIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTrafficMirrorTargets.TrafficMirrorTargets', props);
    return resource.getResponseField('TrafficMirrorTargets') as unknown as shapes.Ec2TrafficMirrorTarget[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrafficMirrorTargets',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrafficMirrorTargets.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TrafficMirrorTargetIds: this.__input.trafficMirrorTargetIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTrafficMirrorTargets.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTransitGatewayAttachments {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTransitGatewayAttachmentsRequest) {
  }

  public get transitGatewayAttachments(): shapes.Ec2TransitGatewayAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayAttachments.TransitGatewayAttachments'),
        outputPath: 'TransitGatewayAttachments',
        parameters: {
          TransitGatewayAttachmentIds: this.__input.transitGatewayAttachmentIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayAttachments.TransitGatewayAttachments', props);
    return resource.getResponseField('TransitGatewayAttachments') as unknown as shapes.Ec2TransitGatewayAttachment[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayAttachments.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentIds: this.__input.transitGatewayAttachmentIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayAttachments.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTransitGatewayConnectPeers {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTransitGatewayConnectPeersRequest) {
  }

  public get transitGatewayConnectPeers(): shapes.Ec2TransitGatewayConnectPeer[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayConnectPeers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayConnectPeers.TransitGatewayConnectPeers'),
        outputPath: 'TransitGatewayConnectPeers',
        parameters: {
          TransitGatewayConnectPeerIds: this.__input.transitGatewayConnectPeerIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayConnectPeers.TransitGatewayConnectPeers', props);
    return resource.getResponseField('TransitGatewayConnectPeers') as unknown as shapes.Ec2TransitGatewayConnectPeer[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayConnectPeers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayConnectPeers.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayConnectPeerIds: this.__input.transitGatewayConnectPeerIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayConnectPeers.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTransitGatewayConnects {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTransitGatewayConnectsRequest) {
  }

  public get transitGatewayConnects(): shapes.Ec2TransitGatewayConnect[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayConnects',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayConnects.TransitGatewayConnects'),
        outputPath: 'TransitGatewayConnects',
        parameters: {
          TransitGatewayAttachmentIds: this.__input.transitGatewayAttachmentIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayConnects.TransitGatewayConnects', props);
    return resource.getResponseField('TransitGatewayConnects') as unknown as shapes.Ec2TransitGatewayConnect[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayConnects',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayConnects.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentIds: this.__input.transitGatewayAttachmentIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayConnects.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTransitGatewayMulticastDomains {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTransitGatewayMulticastDomainsRequest) {
  }

  public get transitGatewayMulticastDomains(): shapes.Ec2TransitGatewayMulticastDomain[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayMulticastDomains',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayMulticastDomains.TransitGatewayMulticastDomains'),
        outputPath: 'TransitGatewayMulticastDomains',
        parameters: {
          TransitGatewayMulticastDomainIds: this.__input.transitGatewayMulticastDomainIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayMulticastDomains.TransitGatewayMulticastDomains', props);
    return resource.getResponseField('TransitGatewayMulticastDomains') as unknown as shapes.Ec2TransitGatewayMulticastDomain[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayMulticastDomains',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayMulticastDomains.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayMulticastDomainIds: this.__input.transitGatewayMulticastDomainIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayMulticastDomains.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTransitGatewayPeeringAttachments {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTransitGatewayPeeringAttachmentsRequest) {
  }

  public get transitGatewayPeeringAttachments(): shapes.Ec2TransitGatewayPeeringAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayPeeringAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayPeeringAttachments.TransitGatewayPeeringAttachments'),
        outputPath: 'TransitGatewayPeeringAttachments',
        parameters: {
          TransitGatewayAttachmentIds: this.__input.transitGatewayAttachmentIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayPeeringAttachments.TransitGatewayPeeringAttachments', props);
    return resource.getResponseField('TransitGatewayPeeringAttachments') as unknown as shapes.Ec2TransitGatewayPeeringAttachment[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayPeeringAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayPeeringAttachments.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentIds: this.__input.transitGatewayAttachmentIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayPeeringAttachments.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTransitGatewayRouteTables {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTransitGatewayRouteTablesRequest) {
  }

  public get transitGatewayRouteTables(): shapes.Ec2TransitGatewayRouteTable[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayRouteTables.TransitGatewayRouteTables'),
        outputPath: 'TransitGatewayRouteTables',
        parameters: {
          TransitGatewayRouteTableIds: this.__input.transitGatewayRouteTableIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayRouteTables.TransitGatewayRouteTables', props);
    return resource.getResponseField('TransitGatewayRouteTables') as unknown as shapes.Ec2TransitGatewayRouteTable[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayRouteTables',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayRouteTables.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayRouteTableIds: this.__input.transitGatewayRouteTableIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayRouteTables.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTransitGatewayVpcAttachments {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTransitGatewayVpcAttachmentsRequest) {
  }

  public get transitGatewayVpcAttachments(): shapes.Ec2TransitGatewayVpcAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayVpcAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayVpcAttachments.TransitGatewayVpcAttachments'),
        outputPath: 'TransitGatewayVpcAttachments',
        parameters: {
          TransitGatewayAttachmentIds: this.__input.transitGatewayAttachmentIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayVpcAttachments.TransitGatewayVpcAttachments', props);
    return resource.getResponseField('TransitGatewayVpcAttachments') as unknown as shapes.Ec2TransitGatewayVpcAttachment[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGatewayVpcAttachments',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGatewayVpcAttachments.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentIds: this.__input.transitGatewayAttachmentIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGatewayVpcAttachments.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTransitGateways {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTransitGatewaysRequest) {
  }

  public get transitGateways(): shapes.Ec2TransitGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGateways.TransitGateways'),
        outputPath: 'TransitGateways',
        parameters: {
          TransitGatewayIds: this.__input.transitGatewayIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGateways.TransitGateways', props);
    return resource.getResponseField('TransitGateways') as unknown as shapes.Ec2TransitGateway[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTransitGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTransitGateways.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayIds: this.__input.transitGatewayIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTransitGateways.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeTrunkInterfaceAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeTrunkInterfaceAssociationsRequest) {
  }

  public get interfaceAssociations(): shapes.Ec2TrunkInterfaceAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrunkInterfaceAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrunkInterfaceAssociations.InterfaceAssociations'),
        outputPath: 'InterfaceAssociations',
        parameters: {
          AssociationIds: this.__input.associationIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTrunkInterfaceAssociations.InterfaceAssociations', props);
    return resource.getResponseField('InterfaceAssociations') as unknown as shapes.Ec2TrunkInterfaceAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeTrunkInterfaceAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeTrunkInterfaceAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          AssociationIds: this.__input.associationIds,
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeTrunkInterfaceAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVolumeAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVolumeAttributeRequest) {
  }

  public get autoEnableIo(): EC2ResponsesDescribeVolumeAttributeAutoEnableIo {
    return new EC2ResponsesDescribeVolumeAttributeAutoEnableIo(this.__scope, this.__resources, this.__input);
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeAttribute.ProductCodes'),
        outputPath: 'ProductCodes',
        parameters: {
          Attribute: this.__input.attribute,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumeAttribute.ProductCodes', props);
    return resource.getResponseField('ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeAttribute.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          Attribute: this.__input.attribute,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumeAttribute.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

}

export class EC2ResponsesDescribeVolumeAttributeAutoEnableIo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVolumeAttributeRequest) {
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeAttribute.AutoEnableIO.Value'),
        outputPath: 'AutoEnableIO.Value',
        parameters: {
          Attribute: this.__input.attribute,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumeAttribute.AutoEnableIO.Value', props);
    return resource.getResponseField('AutoEnableIO.Value') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeVolumeStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVolumeStatusRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeStatus.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          VolumeIds: this.__input.volumeIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumeStatus.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get volumeStatuses(): shapes.Ec2VolumeStatusItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumeStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumeStatus.VolumeStatuses'),
        outputPath: 'VolumeStatuses',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          VolumeIds: this.__input.volumeIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumeStatus.VolumeStatuses', props);
    return resource.getResponseField('VolumeStatuses') as unknown as shapes.Ec2VolumeStatusItem[];
  }

}

export class EC2ResponsesDescribeVolumes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVolumesRequest) {
  }

  public get volumes(): shapes.Ec2Volume[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumes.Volumes'),
        outputPath: 'Volumes',
        parameters: {
          Filters: this.__input.filters,
          VolumeIds: this.__input.volumeIds,
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumes.Volumes', props);
    return resource.getResponseField('Volumes') as unknown as shapes.Ec2Volume[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          VolumeIds: this.__input.volumeIds,
          DryRun: this.__input.dryRun,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVolumesModifications {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVolumesModificationsRequest) {
  }

  public get volumesModifications(): shapes.Ec2VolumeModification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumesModifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumesModifications.VolumesModifications'),
        outputPath: 'VolumesModifications',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeIds: this.__input.volumeIds,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumesModifications.VolumesModifications', props);
    return resource.getResponseField('VolumesModifications') as unknown as shapes.Ec2VolumeModification[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVolumesModifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVolumesModifications.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeIds: this.__input.volumeIds,
          Filters: this.__input.filters,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVolumesModifications.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpcAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcAttributeRequest) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcAttribute.VpcId'),
        outputPath: 'VpcId',
        parameters: {
          Attribute: this.__input.attribute,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcAttribute.VpcId', props);
    return resource.getResponseField('VpcId') as unknown as string;
  }

  public get enableDnsHostnames(): EC2ResponsesDescribeVpcAttributeEnableDnsHostnames {
    return new EC2ResponsesDescribeVpcAttributeEnableDnsHostnames(this.__scope, this.__resources, this.__input);
  }

  public get enableDnsSupport(): EC2ResponsesDescribeVpcAttributeEnableDnsSupport {
    return new EC2ResponsesDescribeVpcAttributeEnableDnsSupport(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDescribeVpcAttributeEnableDnsHostnames {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcAttributeRequest) {
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcAttribute.EnableDnsHostnames.Value'),
        outputPath: 'EnableDnsHostnames.Value',
        parameters: {
          Attribute: this.__input.attribute,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcAttribute.EnableDnsHostnames.Value', props);
    return resource.getResponseField('EnableDnsHostnames.Value') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeVpcAttributeEnableDnsSupport {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcAttributeRequest) {
  }

  public get value(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcAttribute.EnableDnsSupport.Value'),
        outputPath: 'EnableDnsSupport.Value',
        parameters: {
          Attribute: this.__input.attribute,
          VpcId: this.__input.vpcId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcAttribute.EnableDnsSupport.Value', props);
    return resource.getResponseField('EnableDnsSupport.Value') as unknown as boolean;
  }

}

export class EC2ResponsesDescribeVpcClassicLink {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcClassicLinkRequest) {
  }

  public get vpcs(): shapes.Ec2VpcClassicLink[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcClassicLink',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcClassicLink.Vpcs'),
        outputPath: 'Vpcs',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcClassicLink.Vpcs', props);
    return resource.getResponseField('Vpcs') as unknown as shapes.Ec2VpcClassicLink[];
  }

}

export class EC2ResponsesDescribeVpcClassicLinkDnsSupport {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcClassicLinkDnsSupportRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcClassicLinkDnsSupport',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcClassicLinkDnsSupport.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcClassicLinkDnsSupport.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get vpcs(): shapes.Ec2ClassicLinkDnsSupport[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcClassicLinkDnsSupport',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcClassicLinkDnsSupport.Vpcs'),
        outputPath: 'Vpcs',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          VpcIds: this.__input.vpcIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcClassicLinkDnsSupport.Vpcs', props);
    return resource.getResponseField('Vpcs') as unknown as shapes.Ec2ClassicLinkDnsSupport[];
  }

}

export class EC2ResponsesDescribeVpcEndpointConnectionNotifications {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcEndpointConnectionNotificationsRequest) {
  }

  public get connectionNotificationSet(): shapes.Ec2ConnectionNotification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointConnectionNotifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointConnectionNotifications.ConnectionNotificationSet'),
        outputPath: 'ConnectionNotificationSet',
        parameters: {
          DryRun: this.__input.dryRun,
          ConnectionNotificationId: this.__input.connectionNotificationId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointConnectionNotifications.ConnectionNotificationSet', props);
    return resource.getResponseField('ConnectionNotificationSet') as unknown as shapes.Ec2ConnectionNotification[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointConnectionNotifications',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointConnectionNotifications.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          ConnectionNotificationId: this.__input.connectionNotificationId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointConnectionNotifications.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpcEndpointConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcEndpointConnectionsRequest) {
  }

  public get vpcEndpointConnections(): shapes.Ec2VpcEndpointConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointConnections.VpcEndpointConnections'),
        outputPath: 'VpcEndpointConnections',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointConnections.VpcEndpointConnections', props);
    return resource.getResponseField('VpcEndpointConnections') as unknown as shapes.Ec2VpcEndpointConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpcEndpointServiceConfigurations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcEndpointServiceConfigurationsRequest) {
  }

  public get serviceConfigurations(): shapes.Ec2ServiceConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServiceConfigurations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServiceConfigurations.ServiceConfigurations'),
        outputPath: 'ServiceConfigurations',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceIds: this.__input.serviceIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointServiceConfigurations.ServiceConfigurations', props);
    return resource.getResponseField('ServiceConfigurations') as unknown as shapes.Ec2ServiceConfiguration[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServiceConfigurations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServiceConfigurations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceIds: this.__input.serviceIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointServiceConfigurations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpcEndpointServicePermissions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcEndpointServicePermissionsRequest) {
  }

  public get allowedPrincipals(): shapes.Ec2AllowedPrincipal[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServicePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServicePermissions.AllowedPrincipals'),
        outputPath: 'AllowedPrincipals',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointServicePermissions.AllowedPrincipals', props);
    return resource.getResponseField('AllowedPrincipals') as unknown as shapes.Ec2AllowedPrincipal[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServicePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServicePermissions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointServicePermissions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpcEndpointServices {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcEndpointServicesRequest) {
  }

  public get serviceNames(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServices.ServiceNames'),
        outputPath: 'ServiceNames',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceNames: this.__input.serviceNames,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointServices.ServiceNames', props);
    return resource.getResponseField('ServiceNames') as unknown as string[];
  }

  public get serviceDetails(): shapes.Ec2ServiceDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServices.ServiceDetails'),
        outputPath: 'ServiceDetails',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceNames: this.__input.serviceNames,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointServices.ServiceDetails', props);
    return resource.getResponseField('ServiceDetails') as unknown as shapes.Ec2ServiceDetail[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpointServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpointServices.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceNames: this.__input.serviceNames,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpointServices.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpcEndpoints {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcEndpointsRequest) {
  }

  public get vpcEndpoints(): shapes.Ec2VpcEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpoints.VpcEndpoints'),
        outputPath: 'VpcEndpoints',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointIds: this.__input.vpcEndpointIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpoints.VpcEndpoints', props);
    return resource.getResponseField('VpcEndpoints') as unknown as shapes.Ec2VpcEndpoint[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcEndpoints',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcEndpoints.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointIds: this.__input.vpcEndpointIds,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcEndpoints.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpcPeeringConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcPeeringConnectionsRequest) {
  }

  public get vpcPeeringConnections(): shapes.Ec2VpcPeeringConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcPeeringConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcPeeringConnections.VpcPeeringConnections'),
        outputPath: 'VpcPeeringConnections',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionIds: this.__input.vpcPeeringConnectionIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcPeeringConnections.VpcPeeringConnections', props);
    return resource.getResponseField('VpcPeeringConnections') as unknown as shapes.Ec2VpcPeeringConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcPeeringConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcPeeringConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionIds: this.__input.vpcPeeringConnectionIds,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcPeeringConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpcs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpcsRequest) {
  }

  public get vpcs(): shapes.Ec2Vpc[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcs.Vpcs'),
        outputPath: 'Vpcs',
        parameters: {
          Filters: this.__input.filters,
          VpcIds: this.__input.vpcIds,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcs.Vpcs', props);
    return resource.getResponseField('Vpcs') as unknown as shapes.Ec2Vpc[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpcs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpcs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          VpcIds: this.__input.vpcIds,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpcs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesDescribeVpnConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpnConnectionsRequest) {
  }

  public get vpnConnections(): shapes.Ec2VpnConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpnConnections.VpnConnections'),
        outputPath: 'VpnConnections',
        parameters: {
          Filters: this.__input.filters,
          VpnConnectionIds: this.__input.vpnConnectionIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpnConnections.VpnConnections', props);
    return resource.getResponseField('VpnConnections') as unknown as shapes.Ec2VpnConnection[];
  }

}

export class EC2ResponsesDescribeVpnGateways {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DescribeVpnGatewaysRequest) {
  }

  public get vpnGateways(): shapes.Ec2VpnGateway[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeVpnGateways',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DescribeVpnGateways.VpnGateways'),
        outputPath: 'VpnGateways',
        parameters: {
          Filters: this.__input.filters,
          VpnGatewayIds: this.__input.vpnGatewayIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeVpnGateways.VpnGateways', props);
    return resource.getResponseField('VpnGateways') as unknown as shapes.Ec2VpnGateway[];
  }

}

export class EC2ResponsesDetachClassicLinkVpc {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DetachClassicLinkVpcRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachClassicLinkVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachClassicLinkVpc.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          VpcId: this.__input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DetachClassicLinkVpc.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesDetachVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DetachVolumeRequest) {
  }

  public get attachTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.AttachTime'),
        outputPath: 'AttachTime',
        parameters: {
          Device: this.__input.device,
          Force: this.__input.force,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DetachVolume.AttachTime', props);
    return resource.getResponseField('AttachTime') as unknown as string;
  }

  public get device(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.Device'),
        outputPath: 'Device',
        parameters: {
          Device: this.__input.device,
          Force: this.__input.force,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DetachVolume.Device', props);
    return resource.getResponseField('Device') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          Device: this.__input.device,
          Force: this.__input.force,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DetachVolume.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.State'),
        outputPath: 'State',
        parameters: {
          Device: this.__input.device,
          Force: this.__input.force,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DetachVolume.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.VolumeId'),
        outputPath: 'VolumeId',
        parameters: {
          Device: this.__input.device,
          Force: this.__input.force,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DetachVolume.VolumeId', props);
    return resource.getResponseField('VolumeId') as unknown as string;
  }

  public get deleteOnTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'detachVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DetachVolume.DeleteOnTermination'),
        outputPath: 'DeleteOnTermination',
        parameters: {
          Device: this.__input.device,
          Force: this.__input.force,
          InstanceId: this.__input.instanceId,
          VolumeId: this.__input.volumeId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DetachVolume.DeleteOnTermination', props);
    return resource.getResponseField('DeleteOnTermination') as unknown as boolean;
  }

}

export class EC2ResponsesDisableEbsEncryptionByDefault {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisableEbsEncryptionByDefaultRequest) {
  }

  public get ebsEncryptionByDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableEbsEncryptionByDefault',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableEbsEncryptionByDefault.EbsEncryptionByDefault'),
        outputPath: 'EbsEncryptionByDefault',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableEbsEncryptionByDefault.EbsEncryptionByDefault', props);
    return resource.getResponseField('EbsEncryptionByDefault') as unknown as boolean;
  }

}

export class EC2ResponsesDisableFastSnapshotRestores {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisableFastSnapshotRestoresRequest) {
  }

  public get successful(): shapes.Ec2DisableFastSnapshotRestoreSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableFastSnapshotRestores.Successful'),
        outputPath: 'Successful',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          SourceSnapshotIds: this.__input.sourceSnapshotIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableFastSnapshotRestores.Successful', props);
    return resource.getResponseField('Successful') as unknown as shapes.Ec2DisableFastSnapshotRestoreSuccessItem[];
  }

  public get unsuccessful(): shapes.Ec2DisableFastSnapshotRestoreErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableFastSnapshotRestores.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          SourceSnapshotIds: this.__input.sourceSnapshotIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableFastSnapshotRestores.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2DisableFastSnapshotRestoreErrorItem[];
  }

}

export class EC2ResponsesDisableImageDeprecation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisableImageDeprecationRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableImageDeprecation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableImageDeprecation.Return'),
        outputPath: 'Return',
        parameters: {
          ImageId: this.__input.imageId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableImageDeprecation.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesDisableSerialConsoleAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisableSerialConsoleAccessRequest) {
  }

  public get serialConsoleAccessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableSerialConsoleAccess',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableSerialConsoleAccess.SerialConsoleAccessEnabled'),
        outputPath: 'SerialConsoleAccessEnabled',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableSerialConsoleAccess.SerialConsoleAccessEnabled', props);
    return resource.getResponseField('SerialConsoleAccessEnabled') as unknown as boolean;
  }

}

export class EC2ResponsesDisableTransitGatewayRouteTablePropagation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisableTransitGatewayRouteTablePropagationRequest) {
  }

  public get propagation(): EC2ResponsesDisableTransitGatewayRouteTablePropagationPropagation {
    return new EC2ResponsesDisableTransitGatewayRouteTablePropagationPropagation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDisableTransitGatewayRouteTablePropagationPropagation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisableTransitGatewayRouteTablePropagationRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayAttachmentId'),
        outputPath: 'Propagation.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Propagation.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.ResourceId'),
        outputPath: 'Propagation.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableTransitGatewayRouteTablePropagation.Propagation.ResourceId', props);
    return resource.getResponseField('Propagation.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.ResourceType'),
        outputPath: 'Propagation.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableTransitGatewayRouteTablePropagation.Propagation.ResourceType', props);
    return resource.getResponseField('Propagation.ResourceType') as unknown as string;
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayRouteTableId'),
        outputPath: 'Propagation.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayRouteTableId', props);
    return resource.getResponseField('Propagation.TransitGatewayRouteTableId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableTransitGatewayRouteTablePropagation.Propagation.State'),
        outputPath: 'Propagation.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableTransitGatewayRouteTablePropagation.Propagation.State', props);
    return resource.getResponseField('Propagation.State') as unknown as string;
  }

}

export class EC2ResponsesDisableVpcClassicLink {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisableVpcClassicLinkRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableVpcClassicLink',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableVpcClassicLink.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableVpcClassicLink.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesDisableVpcClassicLinkDnsSupport {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisableVpcClassicLinkDnsSupportRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disableVpcClassicLinkDnsSupport',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisableVpcClassicLinkDnsSupport.Return'),
        outputPath: 'Return',
        parameters: {
          VpcId: this.__input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisableVpcClassicLinkDnsSupport.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesDisassociateClientVpnTargetNetwork {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateClientVpnTargetNetworkRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateClientVpnTargetNetwork.AssociationId'),
        outputPath: 'AssociationId',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          AssociationId: this.__input.associationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateClientVpnTargetNetwork.AssociationId', props);
    return resource.getResponseField('AssociationId') as unknown as string;
  }

  public get status(): EC2ResponsesDisassociateClientVpnTargetNetworkStatus {
    return new EC2ResponsesDisassociateClientVpnTargetNetworkStatus(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDisassociateClientVpnTargetNetworkStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateClientVpnTargetNetworkRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateClientVpnTargetNetwork.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          AssociationId: this.__input.associationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateClientVpnTargetNetwork.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateClientVpnTargetNetwork',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateClientVpnTargetNetwork.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          AssociationId: this.__input.associationId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateClientVpnTargetNetwork.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesDisassociateEnclaveCertificateIamRole {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateEnclaveCertificateIamRoleRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateEnclaveCertificateIamRole',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateEnclaveCertificateIamRole.Return'),
        outputPath: 'Return',
        parameters: {
          CertificateArn: this.__input.certificateArn,
          RoleArn: this.__input.roleArn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateEnclaveCertificateIamRole.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesDisassociateIamInstanceProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateIamInstanceProfileRequest) {
  }

  public get iamInstanceProfileAssociation(): EC2ResponsesDisassociateIamInstanceProfileIamInstanceProfileAssociation {
    return new EC2ResponsesDisassociateIamInstanceProfileIamInstanceProfileAssociation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDisassociateIamInstanceProfileIamInstanceProfileAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateIamInstanceProfileRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.AssociationId'),
        outputPath: 'IamInstanceProfileAssociation.AssociationId',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.AssociationId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.AssociationId') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.InstanceId'),
        outputPath: 'IamInstanceProfileAssociation.InstanceId',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.InstanceId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.InstanceId') as unknown as string;
  }

  public get iamInstanceProfile(): EC2ResponsesDisassociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile {
    return new EC2ResponsesDisassociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.State'),
        outputPath: 'IamInstanceProfileAssociation.State',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.State', props);
    return resource.getResponseField('IamInstanceProfileAssociation.State') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.Timestamp'),
        outputPath: 'IamInstanceProfileAssociation.Timestamp',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.Timestamp', props);
    return resource.getResponseField('IamInstanceProfileAssociation.Timestamp') as unknown as string;
  }

}

export class EC2ResponsesDisassociateIamInstanceProfileIamInstanceProfileAssociationIamInstanceProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateIamInstanceProfileRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Arn'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Arn',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Arn', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateIamInstanceProfile',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Id'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Id',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateIamInstanceProfile.IamInstanceProfileAssociation.IamInstanceProfile.Id', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Id') as unknown as string;
  }

}

export class EC2ResponsesDisassociateInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateInstanceEventWindowRequest) {
  }

  public get instanceEventWindow(): EC2ResponsesDisassociateInstanceEventWindowInstanceEventWindow {
    return new EC2ResponsesDisassociateInstanceEventWindowInstanceEventWindow(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDisassociateInstanceEventWindowInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateInstanceEventWindowRequest) {
  }

  public get instanceEventWindowId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.InstanceEventWindowId'),
        outputPath: 'InstanceEventWindow.InstanceEventWindowId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.InstanceEventWindowId', props);
    return resource.getResponseField('InstanceEventWindow.InstanceEventWindowId') as unknown as string;
  }

  public get timeRanges(): shapes.Ec2InstanceEventWindowTimeRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.TimeRanges'),
        outputPath: 'InstanceEventWindow.TimeRanges',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.TimeRanges', props);
    return resource.getResponseField('InstanceEventWindow.TimeRanges') as unknown as shapes.Ec2InstanceEventWindowTimeRange[];
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.Name'),
        outputPath: 'InstanceEventWindow.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.Name', props);
    return resource.getResponseField('InstanceEventWindow.Name') as unknown as string;
  }

  public get cronExpression(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.CronExpression'),
        outputPath: 'InstanceEventWindow.CronExpression',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.CronExpression', props);
    return resource.getResponseField('InstanceEventWindow.CronExpression') as unknown as string;
  }

  public get associationTarget(): EC2ResponsesDisassociateInstanceEventWindowInstanceEventWindowAssociationTarget {
    return new EC2ResponsesDisassociateInstanceEventWindowInstanceEventWindowAssociationTarget(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.State'),
        outputPath: 'InstanceEventWindow.State',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.State', props);
    return resource.getResponseField('InstanceEventWindow.State') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.Tags'),
        outputPath: 'InstanceEventWindow.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.Tags', props);
    return resource.getResponseField('InstanceEventWindow.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesDisassociateInstanceEventWindowInstanceEventWindowAssociationTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateInstanceEventWindowRequest) {
  }

  public get instanceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.InstanceIds'),
        outputPath: 'InstanceEventWindow.AssociationTarget.InstanceIds',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.InstanceIds', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.InstanceIds') as unknown as string[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.Tags'),
        outputPath: 'InstanceEventWindow.AssociationTarget.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.Tags', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get dedicatedHostIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.DedicatedHostIds'),
        outputPath: 'InstanceEventWindow.AssociationTarget.DedicatedHostIds',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          AssociationTarget: {
            InstanceIds: this.__input.associationTarget.instanceIds,
            InstanceTags: this.__input.associationTarget.instanceTags,
            DedicatedHostIds: this.__input.associationTarget.dedicatedHostIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateInstanceEventWindow.InstanceEventWindow.AssociationTarget.DedicatedHostIds', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.DedicatedHostIds') as unknown as string[];
  }

}

export class EC2ResponsesDisassociateSubnetCidrBlock {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateSubnetCidrBlockRequest) {
  }

  public get ipv6CidrBlockAssociation(): EC2ResponsesDisassociateSubnetCidrBlockIpv6CidrBlockAssociation {
    return new EC2ResponsesDisassociateSubnetCidrBlockIpv6CidrBlockAssociation(this.__scope, this.__resources, this.__input);
  }

  public get subnetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.SubnetId'),
        outputPath: 'SubnetId',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateSubnetCidrBlock.SubnetId', props);
    return resource.getResponseField('SubnetId') as unknown as string;
  }

}

export class EC2ResponsesDisassociateSubnetCidrBlockIpv6CidrBlockAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateSubnetCidrBlockRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.AssociationId'),
        outputPath: 'Ipv6CidrBlockAssociation.AssociationId',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get ipv6CidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlock',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockState(): EC2ResponsesDisassociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {
    return new EC2ResponsesDisassociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDisassociateSubnetCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateSubnetCidrBlockRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateSubnetCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateSubnetCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesDisassociateTransitGatewayMulticastDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateTransitGatewayMulticastDomainRequest) {
  }

  public get associations(): EC2ResponsesDisassociateTransitGatewayMulticastDomainAssociations {
    return new EC2ResponsesDisassociateTransitGatewayMulticastDomainAssociations(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDisassociateTransitGatewayMulticastDomainAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateTransitGatewayMulticastDomainRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.TransitGatewayMulticastDomainId'),
        outputPath: 'Associations.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayMulticastDomain.Associations.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('Associations.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.TransitGatewayAttachmentId'),
        outputPath: 'Associations.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayMulticastDomain.Associations.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Associations.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.ResourceId'),
        outputPath: 'Associations.ResourceId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayMulticastDomain.Associations.ResourceId', props);
    return resource.getResponseField('Associations.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.ResourceType'),
        outputPath: 'Associations.ResourceType',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayMulticastDomain.Associations.ResourceType', props);
    return resource.getResponseField('Associations.ResourceType') as unknown as string;
  }

  public get resourceOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.ResourceOwnerId'),
        outputPath: 'Associations.ResourceOwnerId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayMulticastDomain.Associations.ResourceOwnerId', props);
    return resource.getResponseField('Associations.ResourceOwnerId') as unknown as string;
  }

  public get subnets(): shapes.Ec2SubnetAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayMulticastDomain',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayMulticastDomain.Associations.Subnets'),
        outputPath: 'Associations.Subnets',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayMulticastDomain.Associations.Subnets', props);
    return resource.getResponseField('Associations.Subnets') as unknown as shapes.Ec2SubnetAssociation[];
  }

}

export class EC2ResponsesDisassociateTransitGatewayRouteTable {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateTransitGatewayRouteTableRequest) {
  }

  public get association(): EC2ResponsesDisassociateTransitGatewayRouteTableAssociation {
    return new EC2ResponsesDisassociateTransitGatewayRouteTableAssociation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDisassociateTransitGatewayRouteTableAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateTransitGatewayRouteTableRequest) {
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.TransitGatewayRouteTableId'),
        outputPath: 'Association.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayRouteTable.Association.TransitGatewayRouteTableId', props);
    return resource.getResponseField('Association.TransitGatewayRouteTableId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.TransitGatewayAttachmentId'),
        outputPath: 'Association.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayRouteTable.Association.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Association.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.ResourceId'),
        outputPath: 'Association.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayRouteTable.Association.ResourceId', props);
    return resource.getResponseField('Association.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.ResourceType'),
        outputPath: 'Association.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayRouteTable.Association.ResourceType', props);
    return resource.getResponseField('Association.ResourceType') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTransitGatewayRouteTable',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTransitGatewayRouteTable.Association.State'),
        outputPath: 'Association.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTransitGatewayRouteTable.Association.State', props);
    return resource.getResponseField('Association.State') as unknown as string;
  }

}

export class EC2ResponsesDisassociateTrunkInterface {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateTrunkInterfaceRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTrunkInterface.Return'),
        outputPath: 'Return',
        parameters: {
          AssociationId: this.__input.associationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTrunkInterface.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateTrunkInterface',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateTrunkInterface.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          AssociationId: this.__input.associationId,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateTrunkInterface.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

}

export class EC2ResponsesDisassociateVpcCidrBlock {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
  }

  public get ipv6CidrBlockAssociation(): EC2ResponsesDisassociateVpcCidrBlockIpv6CidrBlockAssociation {
    return new EC2ResponsesDisassociateVpcCidrBlockIpv6CidrBlockAssociation(this.__scope, this.__resources, this.__input);
  }

  public get cidrBlockAssociation(): EC2ResponsesDisassociateVpcCidrBlockCidrBlockAssociation {
    return new EC2ResponsesDisassociateVpcCidrBlockCidrBlockAssociation(this.__scope, this.__resources, this.__input);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.VpcId'),
        outputPath: 'VpcId',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.VpcId', props);
    return resource.getResponseField('VpcId') as unknown as string;
  }

}

export class EC2ResponsesDisassociateVpcCidrBlockIpv6CidrBlockAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.AssociationId'),
        outputPath: 'Ipv6CidrBlockAssociation.AssociationId',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get ipv6CidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlock',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlock', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlock') as unknown as string;
  }

  public get ipv6CidrBlockState(): EC2ResponsesDisassociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {
    return new EC2ResponsesDisassociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState(this.__scope, this.__resources, this.__input);
  }

  public get networkBorderGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.NetworkBorderGroup'),
        outputPath: 'Ipv6CidrBlockAssociation.NetworkBorderGroup',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.NetworkBorderGroup', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.NetworkBorderGroup') as unknown as string;
  }

  public get ipv6Pool(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6Pool'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6Pool',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6Pool', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6Pool') as unknown as string;
  }

}

export class EC2ResponsesDisassociateVpcCidrBlockIpv6CidrBlockAssociationIpv6CidrBlockState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage'),
        outputPath: 'Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage', props);
    return resource.getResponseField('Ipv6CidrBlockAssociation.Ipv6CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesDisassociateVpcCidrBlockCidrBlockAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.CidrBlockAssociation.AssociationId'),
        outputPath: 'CidrBlockAssociation.AssociationId',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.CidrBlockAssociation.AssociationId', props);
    return resource.getResponseField('CidrBlockAssociation.AssociationId') as unknown as string;
  }

  public get cidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlock'),
        outputPath: 'CidrBlockAssociation.CidrBlock',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlock', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlock') as unknown as string;
  }

  public get cidrBlockState(): EC2ResponsesDisassociateVpcCidrBlockCidrBlockAssociationCidrBlockState {
    return new EC2ResponsesDisassociateVpcCidrBlockCidrBlockAssociationCidrBlockState(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesDisassociateVpcCidrBlockCidrBlockAssociationCidrBlockState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2DisassociateVpcCidrBlockRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.State'),
        outputPath: 'CidrBlockAssociation.CidrBlockState.State',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.State', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlockState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'disassociateVpcCidrBlock',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.StatusMessage'),
        outputPath: 'CidrBlockAssociation.CidrBlockState.StatusMessage',
        parameters: {
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DisassociateVpcCidrBlock.CidrBlockAssociation.CidrBlockState.StatusMessage', props);
    return resource.getResponseField('CidrBlockAssociation.CidrBlockState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesEnableEbsEncryptionByDefault {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2EnableEbsEncryptionByDefaultRequest) {
  }

  public get ebsEncryptionByDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableEbsEncryptionByDefault',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableEbsEncryptionByDefault.EbsEncryptionByDefault'),
        outputPath: 'EbsEncryptionByDefault',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableEbsEncryptionByDefault.EbsEncryptionByDefault', props);
    return resource.getResponseField('EbsEncryptionByDefault') as unknown as boolean;
  }

}

export class EC2ResponsesEnableFastSnapshotRestores {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2EnableFastSnapshotRestoresRequest) {
  }

  public get successful(): shapes.Ec2EnableFastSnapshotRestoreSuccessItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableFastSnapshotRestores.Successful'),
        outputPath: 'Successful',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          SourceSnapshotIds: this.__input.sourceSnapshotIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableFastSnapshotRestores.Successful', props);
    return resource.getResponseField('Successful') as unknown as shapes.Ec2EnableFastSnapshotRestoreSuccessItem[];
  }

  public get unsuccessful(): shapes.Ec2EnableFastSnapshotRestoreErrorItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableFastSnapshotRestores',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableFastSnapshotRestores.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          SourceSnapshotIds: this.__input.sourceSnapshotIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableFastSnapshotRestores.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2EnableFastSnapshotRestoreErrorItem[];
  }

}

export class EC2ResponsesEnableImageDeprecation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2EnableImageDeprecationRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableImageDeprecation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableImageDeprecation.Return'),
        outputPath: 'Return',
        parameters: {
          ImageId: this.__input.imageId,
          DeprecateAt: this.__input.deprecateAt,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableImageDeprecation.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesEnableSerialConsoleAccess {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2EnableSerialConsoleAccessRequest) {
  }

  public get serialConsoleAccessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableSerialConsoleAccess',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableSerialConsoleAccess.SerialConsoleAccessEnabled'),
        outputPath: 'SerialConsoleAccessEnabled',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableSerialConsoleAccess.SerialConsoleAccessEnabled', props);
    return resource.getResponseField('SerialConsoleAccessEnabled') as unknown as boolean;
  }

}

export class EC2ResponsesEnableTransitGatewayRouteTablePropagation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2EnableTransitGatewayRouteTablePropagationRequest) {
  }

  public get propagation(): EC2ResponsesEnableTransitGatewayRouteTablePropagationPropagation {
    return new EC2ResponsesEnableTransitGatewayRouteTablePropagationPropagation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesEnableTransitGatewayRouteTablePropagationPropagation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2EnableTransitGatewayRouteTablePropagationRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayAttachmentId'),
        outputPath: 'Propagation.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Propagation.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.ResourceId'),
        outputPath: 'Propagation.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableTransitGatewayRouteTablePropagation.Propagation.ResourceId', props);
    return resource.getResponseField('Propagation.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.ResourceType'),
        outputPath: 'Propagation.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableTransitGatewayRouteTablePropagation.Propagation.ResourceType', props);
    return resource.getResponseField('Propagation.ResourceType') as unknown as string;
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayRouteTableId'),
        outputPath: 'Propagation.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableTransitGatewayRouteTablePropagation.Propagation.TransitGatewayRouteTableId', props);
    return resource.getResponseField('Propagation.TransitGatewayRouteTableId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableTransitGatewayRouteTablePropagation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableTransitGatewayRouteTablePropagation.Propagation.State'),
        outputPath: 'Propagation.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableTransitGatewayRouteTablePropagation.Propagation.State', props);
    return resource.getResponseField('Propagation.State') as unknown as string;
  }

}

export class EC2ResponsesEnableVpcClassicLink {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2EnableVpcClassicLinkRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableVpcClassicLink',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableVpcClassicLink.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcId: this.__input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableVpcClassicLink.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesEnableVpcClassicLinkDnsSupport {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2EnableVpcClassicLinkDnsSupportRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'enableVpcClassicLinkDnsSupport',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.EnableVpcClassicLinkDnsSupport.Return'),
        outputPath: 'Return',
        parameters: {
          VpcId: this.__input.vpcId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'EnableVpcClassicLinkDnsSupport.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesExportClientVpnClientCertificateRevocationList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ExportClientVpnClientCertificateRevocationListRequest) {
  }

  public get certificateRevocationList(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportClientVpnClientCertificateRevocationList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportClientVpnClientCertificateRevocationList.CertificateRevocationList'),
        outputPath: 'CertificateRevocationList',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportClientVpnClientCertificateRevocationList.CertificateRevocationList', props);
    return resource.getResponseField('CertificateRevocationList') as unknown as string;
  }

  public get status(): EC2ResponsesExportClientVpnClientCertificateRevocationListStatus {
    return new EC2ResponsesExportClientVpnClientCertificateRevocationListStatus(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesExportClientVpnClientCertificateRevocationListStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ExportClientVpnClientCertificateRevocationListRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportClientVpnClientCertificateRevocationList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportClientVpnClientCertificateRevocationList.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportClientVpnClientCertificateRevocationList.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportClientVpnClientCertificateRevocationList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportClientVpnClientCertificateRevocationList.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportClientVpnClientCertificateRevocationList.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesExportClientVpnClientConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ExportClientVpnClientConfigurationRequest) {
  }

  public get clientConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportClientVpnClientConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportClientVpnClientConfiguration.ClientConfiguration'),
        outputPath: 'ClientConfiguration',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportClientVpnClientConfiguration.ClientConfiguration', props);
    return resource.getResponseField('ClientConfiguration') as unknown as string;
  }

}

export class EC2ResponsesExportImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ExportImageRequest) {
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.Description'),
        outputPath: 'Description',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get diskImageFormat(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.DiskImageFormat'),
        outputPath: 'DiskImageFormat',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.DiskImageFormat', props);
    return resource.getResponseField('DiskImageFormat') as unknown as string;
  }

  public get exportImageTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.ExportImageTaskId'),
        outputPath: 'ExportImageTaskId',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.ExportImageTaskId', props);
    return resource.getResponseField('ExportImageTaskId') as unknown as string;
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

  public get roleName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.RoleName'),
        outputPath: 'RoleName',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.RoleName', props);
    return resource.getResponseField('RoleName') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.Progress'),
        outputPath: 'Progress',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.Progress', props);
    return resource.getResponseField('Progress') as unknown as string;
  }

  public get s3ExportLocation(): EC2ResponsesExportImageS3ExportLocation {
    return new EC2ResponsesExportImageS3ExportLocation(this.__scope, this.__resources, this.__input);
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.Status'),
        outputPath: 'Status',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.StatusMessage'),
        outputPath: 'StatusMessage',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.StatusMessage', props);
    return resource.getResponseField('StatusMessage') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.Tags'),
        outputPath: 'Tags',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesExportImageS3ExportLocation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ExportImageRequest) {
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.S3ExportLocation.S3Bucket'),
        outputPath: 'S3ExportLocation.S3Bucket',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.S3ExportLocation.S3Bucket', props);
    return resource.getResponseField('S3ExportLocation.S3Bucket') as unknown as string;
  }

  public get s3Prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportImage.S3ExportLocation.S3Prefix'),
        outputPath: 'S3ExportLocation.S3Prefix',
        parameters: {
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskImageFormat: this.__input.diskImageFormat,
          DryRun: this.__input.dryRun,
          ImageId: this.__input.imageId,
          S3ExportLocation: {
            S3Bucket: this.__input.s3ExportLocation.s3Bucket,
            S3Prefix: this.__input.s3ExportLocation.s3Prefix,
          },
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportImage.S3ExportLocation.S3Prefix', props);
    return resource.getResponseField('S3ExportLocation.S3Prefix') as unknown as string;
  }

}

export class EC2ResponsesExportTransitGatewayRoutes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ExportTransitGatewayRoutesRequest) {
  }

  public get s3Location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'exportTransitGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ExportTransitGatewayRoutes.S3Location'),
        outputPath: 'S3Location',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          S3Bucket: this.__input.s3Bucket,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ExportTransitGatewayRoutes.S3Location', props);
    return resource.getResponseField('S3Location') as unknown as string;
  }

}

export class EC2ResponsesFetchAssociatedEnclaveCertificateIamRoles {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetAssociatedEnclaveCertificateIamRolesRequest) {
  }

  public get associatedRoles(): shapes.Ec2AssociatedRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getAssociatedEnclaveCertificateIamRoles',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetAssociatedEnclaveCertificateIamRoles.AssociatedRoles'),
        outputPath: 'AssociatedRoles',
        parameters: {
          CertificateArn: this.__input.certificateArn,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetAssociatedEnclaveCertificateIamRoles.AssociatedRoles', props);
    return resource.getResponseField('AssociatedRoles') as unknown as shapes.Ec2AssociatedRole[];
  }

}

export class EC2ResponsesFetchAssociatedIpv6PoolCidrs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetAssociatedIpv6PoolCidrsRequest) {
  }

  public get ipv6CidrAssociations(): shapes.Ec2Ipv6CidrAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getAssociatedIpv6PoolCidrs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetAssociatedIpv6PoolCidrs.Ipv6CidrAssociations'),
        outputPath: 'Ipv6CidrAssociations',
        parameters: {
          PoolId: this.__input.poolId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetAssociatedIpv6PoolCidrs.Ipv6CidrAssociations', props);
    return resource.getResponseField('Ipv6CidrAssociations') as unknown as shapes.Ec2Ipv6CidrAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getAssociatedIpv6PoolCidrs',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetAssociatedIpv6PoolCidrs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PoolId: this.__input.poolId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetAssociatedIpv6PoolCidrs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesFetchCapacityReservationUsage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetCapacityReservationUsageRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCapacityReservationUsage.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get capacityReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.CapacityReservationId'),
        outputPath: 'CapacityReservationId',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCapacityReservationUsage.CapacityReservationId', props);
    return resource.getResponseField('CapacityReservationId') as unknown as string;
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.InstanceType'),
        outputPath: 'InstanceType',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCapacityReservationUsage.InstanceType', props);
    return resource.getResponseField('InstanceType') as unknown as string;
  }

  public get totalInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.TotalInstanceCount'),
        outputPath: 'TotalInstanceCount',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCapacityReservationUsage.TotalInstanceCount', props);
    return resource.getResponseField('TotalInstanceCount') as unknown as number;
  }

  public get availableInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.AvailableInstanceCount'),
        outputPath: 'AvailableInstanceCount',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCapacityReservationUsage.AvailableInstanceCount', props);
    return resource.getResponseField('AvailableInstanceCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.State'),
        outputPath: 'State',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCapacityReservationUsage.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get instanceUsages(): shapes.Ec2InstanceUsage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCapacityReservationUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCapacityReservationUsage.InstanceUsages'),
        outputPath: 'InstanceUsages',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCapacityReservationUsage.InstanceUsages', props);
    return resource.getResponseField('InstanceUsages') as unknown as shapes.Ec2InstanceUsage[];
  }

}

export class EC2ResponsesFetchCoipPoolUsage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetCoipPoolUsageRequest) {
  }

  public get coipPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCoipPoolUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCoipPoolUsage.CoipPoolId'),
        outputPath: 'CoipPoolId',
        parameters: {
          PoolId: this.__input.poolId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCoipPoolUsage.CoipPoolId', props);
    return resource.getResponseField('CoipPoolId') as unknown as string;
  }

  public get coipAddressUsages(): shapes.Ec2CoipAddressUsage[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCoipPoolUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCoipPoolUsage.CoipAddressUsages'),
        outputPath: 'CoipAddressUsages',
        parameters: {
          PoolId: this.__input.poolId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCoipPoolUsage.CoipAddressUsages', props);
    return resource.getResponseField('CoipAddressUsages') as unknown as shapes.Ec2CoipAddressUsage[];
  }

  public get localGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCoipPoolUsage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetCoipPoolUsage.LocalGatewayRouteTableId'),
        outputPath: 'LocalGatewayRouteTableId',
        parameters: {
          PoolId: this.__input.poolId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCoipPoolUsage.LocalGatewayRouteTableId', props);
    return resource.getResponseField('LocalGatewayRouteTableId') as unknown as string;
  }

}

export class EC2ResponsesFetchConsoleOutput {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetConsoleOutputRequest) {
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleOutput',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleOutput.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          InstanceId: this.__input.instanceId,
          DryRun: this.__input.dryRun,
          Latest: this.__input.latest,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetConsoleOutput.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get output(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleOutput',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleOutput.Output'),
        outputPath: 'Output',
        parameters: {
          InstanceId: this.__input.instanceId,
          DryRun: this.__input.dryRun,
          Latest: this.__input.latest,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetConsoleOutput.Output', props);
    return resource.getResponseField('Output') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleOutput',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleOutput.Timestamp'),
        outputPath: 'Timestamp',
        parameters: {
          InstanceId: this.__input.instanceId,
          DryRun: this.__input.dryRun,
          Latest: this.__input.latest,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetConsoleOutput.Timestamp', props);
    return resource.getResponseField('Timestamp') as unknown as string;
  }

}

export class EC2ResponsesFetchConsoleScreenshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetConsoleScreenshotRequest) {
  }

  public get imageData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleScreenshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleScreenshot.ImageData'),
        outputPath: 'ImageData',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          WakeUp: this.__input.wakeUp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetConsoleScreenshot.ImageData', props);
    return resource.getResponseField('ImageData') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getConsoleScreenshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetConsoleScreenshot.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          WakeUp: this.__input.wakeUp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetConsoleScreenshot.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

}

export class EC2ResponsesFetchDefaultCreditSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetDefaultCreditSpecificationRequest) {
  }

  public get instanceFamilyCreditSpecification(): EC2ResponsesFetchDefaultCreditSpecificationInstanceFamilyCreditSpecification {
    return new EC2ResponsesFetchDefaultCreditSpecificationInstanceFamilyCreditSpecification(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesFetchDefaultCreditSpecificationInstanceFamilyCreditSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetDefaultCreditSpecificationRequest) {
  }

  public get instanceFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDefaultCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetDefaultCreditSpecification.InstanceFamilyCreditSpecification.InstanceFamily'),
        outputPath: 'InstanceFamilyCreditSpecification.InstanceFamily',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceFamily: this.__input.instanceFamily,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetDefaultCreditSpecification.InstanceFamilyCreditSpecification.InstanceFamily', props);
    return resource.getResponseField('InstanceFamilyCreditSpecification.InstanceFamily') as unknown as string;
  }

  public get cpuCredits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDefaultCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetDefaultCreditSpecification.InstanceFamilyCreditSpecification.CpuCredits'),
        outputPath: 'InstanceFamilyCreditSpecification.CpuCredits',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceFamily: this.__input.instanceFamily,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetDefaultCreditSpecification.InstanceFamilyCreditSpecification.CpuCredits', props);
    return resource.getResponseField('InstanceFamilyCreditSpecification.CpuCredits') as unknown as string;
  }

}

export class EC2ResponsesFetchEbsDefaultKmsKeyId {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetEbsDefaultKmsKeyIdRequest) {
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getEbsDefaultKmsKeyId',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetEbsDefaultKmsKeyId.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetEbsDefaultKmsKeyId.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

}

export class EC2ResponsesFetchEbsEncryptionByDefault {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetEbsEncryptionByDefaultRequest) {
  }

  public get ebsEncryptionByDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getEbsEncryptionByDefault',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetEbsEncryptionByDefault.EbsEncryptionByDefault'),
        outputPath: 'EbsEncryptionByDefault',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetEbsEncryptionByDefault.EbsEncryptionByDefault', props);
    return resource.getResponseField('EbsEncryptionByDefault') as unknown as boolean;
  }

}

export class EC2ResponsesFetchFlowLogsIntegrationTemplate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetFlowLogsIntegrationTemplateRequest) {
  }

  public get result(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFlowLogsIntegrationTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetFlowLogsIntegrationTemplate.Result'),
        outputPath: 'Result',
        parameters: {
          DryRun: this.__input.dryRun,
          FlowLogId: this.__input.flowLogId,
          ConfigDeliveryS3DestinationArn: this.__input.configDeliveryS3DestinationArn,
          IntegrateServices: {
            AthenaIntegrations: this.__input.integrateServices.athenaIntegrations,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetFlowLogsIntegrationTemplate.Result', props);
    return resource.getResponseField('Result') as unknown as string;
  }

}

export class EC2ResponsesFetchGroupsForCapacityReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetGroupsForCapacityReservationRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getGroupsForCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetGroupsForCapacityReservation.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetGroupsForCapacityReservation.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get capacityReservationGroups(): shapes.Ec2CapacityReservationGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getGroupsForCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetGroupsForCapacityReservation.CapacityReservationGroups'),
        outputPath: 'CapacityReservationGroups',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetGroupsForCapacityReservation.CapacityReservationGroups', props);
    return resource.getResponseField('CapacityReservationGroups') as unknown as shapes.Ec2CapacityReservationGroup[];
  }

}

export class EC2ResponsesFetchHostReservationPurchasePreview {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetHostReservationPurchasePreviewRequest) {
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getHostReservationPurchasePreview',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetHostReservationPurchasePreview.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          HostIdSet: this.__input.hostIdSet,
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetHostReservationPurchasePreview.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get purchase(): shapes.Ec2Purchase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getHostReservationPurchasePreview',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetHostReservationPurchasePreview.Purchase'),
        outputPath: 'Purchase',
        parameters: {
          HostIdSet: this.__input.hostIdSet,
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetHostReservationPurchasePreview.Purchase', props);
    return resource.getResponseField('Purchase') as unknown as shapes.Ec2Purchase[];
  }

  public get totalHourlyPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getHostReservationPurchasePreview',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetHostReservationPurchasePreview.TotalHourlyPrice'),
        outputPath: 'TotalHourlyPrice',
        parameters: {
          HostIdSet: this.__input.hostIdSet,
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetHostReservationPurchasePreview.TotalHourlyPrice', props);
    return resource.getResponseField('TotalHourlyPrice') as unknown as string;
  }

  public get totalUpfrontPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getHostReservationPurchasePreview',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetHostReservationPurchasePreview.TotalUpfrontPrice'),
        outputPath: 'TotalUpfrontPrice',
        parameters: {
          HostIdSet: this.__input.hostIdSet,
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetHostReservationPurchasePreview.TotalUpfrontPrice', props);
    return resource.getResponseField('TotalUpfrontPrice') as unknown as string;
  }

}

export class EC2ResponsesFetchLaunchTemplateData {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get launchTemplateData(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateData {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateData(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateData {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get kernelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.KernelId'),
        outputPath: 'LaunchTemplateData.KernelId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.KernelId', props);
    return resource.getResponseField('LaunchTemplateData.KernelId') as unknown as string;
  }

  public get ebsOptimized(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.EbsOptimized'),
        outputPath: 'LaunchTemplateData.EbsOptimized',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.EbsOptimized', props);
    return resource.getResponseField('LaunchTemplateData.EbsOptimized') as unknown as boolean;
  }

  public get iamInstanceProfile(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataIamInstanceProfile {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataIamInstanceProfile(this.__scope, this.__resources, this.__input);
  }

  public get blockDeviceMappings(): shapes.Ec2LaunchTemplateBlockDeviceMapping[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.BlockDeviceMappings'),
        outputPath: 'LaunchTemplateData.BlockDeviceMappings',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.BlockDeviceMappings', props);
    return resource.getResponseField('LaunchTemplateData.BlockDeviceMappings') as unknown as shapes.Ec2LaunchTemplateBlockDeviceMapping[];
  }

  public get networkInterfaces(): shapes.Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.NetworkInterfaces'),
        outputPath: 'LaunchTemplateData.NetworkInterfaces',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.NetworkInterfaces', props);
    return resource.getResponseField('LaunchTemplateData.NetworkInterfaces') as unknown as shapes.Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[];
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.ImageId'),
        outputPath: 'LaunchTemplateData.ImageId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.ImageId', props);
    return resource.getResponseField('LaunchTemplateData.ImageId') as unknown as string;
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceType'),
        outputPath: 'LaunchTemplateData.InstanceType',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.InstanceType', props);
    return resource.getResponseField('LaunchTemplateData.InstanceType') as unknown as string;
  }

  public get keyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.KeyName'),
        outputPath: 'LaunchTemplateData.KeyName',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.KeyName', props);
    return resource.getResponseField('LaunchTemplateData.KeyName') as unknown as string;
  }

  public get monitoring(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataMonitoring {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataMonitoring(this.__scope, this.__resources, this.__input);
  }

  public get placement(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataPlacement {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataPlacement(this.__scope, this.__resources, this.__input);
  }

  public get ramDiskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.RamDiskId'),
        outputPath: 'LaunchTemplateData.RamDiskId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.RamDiskId', props);
    return resource.getResponseField('LaunchTemplateData.RamDiskId') as unknown as string;
  }

  public get disableApiTermination(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.DisableApiTermination'),
        outputPath: 'LaunchTemplateData.DisableApiTermination',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.DisableApiTermination', props);
    return resource.getResponseField('LaunchTemplateData.DisableApiTermination') as unknown as boolean;
  }

  public get instanceInitiatedShutdownBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceInitiatedShutdownBehavior'),
        outputPath: 'LaunchTemplateData.InstanceInitiatedShutdownBehavior',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.InstanceInitiatedShutdownBehavior', props);
    return resource.getResponseField('LaunchTemplateData.InstanceInitiatedShutdownBehavior') as unknown as string;
  }

  public get userData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.UserData'),
        outputPath: 'LaunchTemplateData.UserData',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.UserData', props);
    return resource.getResponseField('LaunchTemplateData.UserData') as unknown as string;
  }

  public get tagSpecifications(): shapes.Ec2LaunchTemplateTagSpecification[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.TagSpecifications'),
        outputPath: 'LaunchTemplateData.TagSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.TagSpecifications', props);
    return resource.getResponseField('LaunchTemplateData.TagSpecifications') as unknown as shapes.Ec2LaunchTemplateTagSpecification[];
  }

  public get elasticGpuSpecifications(): shapes.Ec2ElasticGpuSpecificationResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.ElasticGpuSpecifications'),
        outputPath: 'LaunchTemplateData.ElasticGpuSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.ElasticGpuSpecifications', props);
    return resource.getResponseField('LaunchTemplateData.ElasticGpuSpecifications') as unknown as shapes.Ec2ElasticGpuSpecificationResponse[];
  }

  public get elasticInferenceAccelerators(): shapes.Ec2LaunchTemplateElasticInferenceAcceleratorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.ElasticInferenceAccelerators'),
        outputPath: 'LaunchTemplateData.ElasticInferenceAccelerators',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.ElasticInferenceAccelerators', props);
    return resource.getResponseField('LaunchTemplateData.ElasticInferenceAccelerators') as unknown as shapes.Ec2LaunchTemplateElasticInferenceAcceleratorResponse[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.SecurityGroupIds'),
        outputPath: 'LaunchTemplateData.SecurityGroupIds',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.SecurityGroupIds', props);
    return resource.getResponseField('LaunchTemplateData.SecurityGroupIds') as unknown as string[];
  }

  public get securityGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.SecurityGroups'),
        outputPath: 'LaunchTemplateData.SecurityGroups',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.SecurityGroups', props);
    return resource.getResponseField('LaunchTemplateData.SecurityGroups') as unknown as string[];
  }

  public get instanceMarketOptions(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptions {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptions(this.__scope, this.__resources, this.__input);
  }

  public get creditSpecification(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCreditSpecification {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCreditSpecification(this.__scope, this.__resources, this.__input);
  }

  public get cpuOptions(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCpuOptions {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCpuOptions(this.__scope, this.__resources, this.__input);
  }

  public get capacityReservationSpecification(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecification {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecification(this.__scope, this.__resources, this.__input);
  }

  public get licenseSpecifications(): shapes.Ec2LaunchTemplateLicenseConfiguration[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.LicenseSpecifications'),
        outputPath: 'LaunchTemplateData.LicenseSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.LicenseSpecifications', props);
    return resource.getResponseField('LaunchTemplateData.LicenseSpecifications') as unknown as shapes.Ec2LaunchTemplateLicenseConfiguration[];
  }

  public get hibernationOptions(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataHibernationOptions {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataHibernationOptions(this.__scope, this.__resources, this.__input);
  }

  public get metadataOptions(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataMetadataOptions {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataMetadataOptions(this.__scope, this.__resources, this.__input);
  }

  public get enclaveOptions(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataEnclaveOptions {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataEnclaveOptions(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataIamInstanceProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.IamInstanceProfile.Arn'),
        outputPath: 'LaunchTemplateData.IamInstanceProfile.Arn',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.IamInstanceProfile.Arn', props);
    return resource.getResponseField('LaunchTemplateData.IamInstanceProfile.Arn') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.IamInstanceProfile.Name'),
        outputPath: 'LaunchTemplateData.IamInstanceProfile.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.IamInstanceProfile.Name', props);
    return resource.getResponseField('LaunchTemplateData.IamInstanceProfile.Name') as unknown as string;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataMonitoring {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Monitoring.Enabled'),
        outputPath: 'LaunchTemplateData.Monitoring.Enabled',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Monitoring.Enabled', props);
    return resource.getResponseField('LaunchTemplateData.Monitoring.Enabled') as unknown as boolean;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataPlacement {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.AvailabilityZone'),
        outputPath: 'LaunchTemplateData.Placement.AvailabilityZone',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Placement.AvailabilityZone', props);
    return resource.getResponseField('LaunchTemplateData.Placement.AvailabilityZone') as unknown as string;
  }

  public get affinity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.Affinity'),
        outputPath: 'LaunchTemplateData.Placement.Affinity',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Placement.Affinity', props);
    return resource.getResponseField('LaunchTemplateData.Placement.Affinity') as unknown as string;
  }

  public get groupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.GroupName'),
        outputPath: 'LaunchTemplateData.Placement.GroupName',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Placement.GroupName', props);
    return resource.getResponseField('LaunchTemplateData.Placement.GroupName') as unknown as string;
  }

  public get hostId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.HostId'),
        outputPath: 'LaunchTemplateData.Placement.HostId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Placement.HostId', props);
    return resource.getResponseField('LaunchTemplateData.Placement.HostId') as unknown as string;
  }

  public get tenancy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.Tenancy'),
        outputPath: 'LaunchTemplateData.Placement.Tenancy',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Placement.Tenancy', props);
    return resource.getResponseField('LaunchTemplateData.Placement.Tenancy') as unknown as string;
  }

  public get spreadDomain(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.SpreadDomain'),
        outputPath: 'LaunchTemplateData.Placement.SpreadDomain',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Placement.SpreadDomain', props);
    return resource.getResponseField('LaunchTemplateData.Placement.SpreadDomain') as unknown as string;
  }

  public get hostResourceGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.HostResourceGroupArn'),
        outputPath: 'LaunchTemplateData.Placement.HostResourceGroupArn',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Placement.HostResourceGroupArn', props);
    return resource.getResponseField('LaunchTemplateData.Placement.HostResourceGroupArn') as unknown as string;
  }

  public get partitionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.Placement.PartitionNumber'),
        outputPath: 'LaunchTemplateData.Placement.PartitionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.Placement.PartitionNumber', props);
    return resource.getResponseField('LaunchTemplateData.Placement.PartitionNumber') as unknown as number;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get marketType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.MarketType'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.MarketType',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.MarketType', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.MarketType') as unknown as string;
  }

  public get spotOptions(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptionsSpotOptions {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptionsSpotOptions(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataInstanceMarketOptionsSpotOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get maxPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice') as unknown as string;
  }

  public get spotInstanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType') as unknown as string;
  }

  public get blockDurationMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes') as unknown as number;
  }

  public get validUntil(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil') as unknown as string;
  }

  public get instanceInterruptionBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior'),
        outputPath: 'LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior', props);
    return resource.getResponseField('LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior') as unknown as string;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCreditSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get cpuCredits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CreditSpecification.CpuCredits'),
        outputPath: 'LaunchTemplateData.CreditSpecification.CpuCredits',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.CreditSpecification.CpuCredits', props);
    return resource.getResponseField('LaunchTemplateData.CreditSpecification.CpuCredits') as unknown as string;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCpuOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get coreCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CpuOptions.CoreCount'),
        outputPath: 'LaunchTemplateData.CpuOptions.CoreCount',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.CpuOptions.CoreCount', props);
    return resource.getResponseField('LaunchTemplateData.CpuOptions.CoreCount') as unknown as number;
  }

  public get threadsPerCore(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CpuOptions.ThreadsPerCore'),
        outputPath: 'LaunchTemplateData.CpuOptions.ThreadsPerCore',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.CpuOptions.ThreadsPerCore', props);
    return resource.getResponseField('LaunchTemplateData.CpuOptions.ThreadsPerCore') as unknown as number;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get capacityReservationPreference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference'),
        outputPath: 'LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference', props);
    return resource.getResponseField('LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference') as unknown as string;
  }

  public get capacityReservationTarget(): EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget {
    return new EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get capacityReservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId'),
        outputPath: 'LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId', props);
    return resource.getResponseField('LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId') as unknown as string;
  }

  public get capacityReservationResourceGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn'),
        outputPath: 'LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn', props);
    return resource.getResponseField('LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn') as unknown as string;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataHibernationOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get configured(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.HibernationOptions.Configured'),
        outputPath: 'LaunchTemplateData.HibernationOptions.Configured',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.HibernationOptions.Configured', props);
    return resource.getResponseField('LaunchTemplateData.HibernationOptions.Configured') as unknown as boolean;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataMetadataOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.State'),
        outputPath: 'LaunchTemplateData.MetadataOptions.State',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.State', props);
    return resource.getResponseField('LaunchTemplateData.MetadataOptions.State') as unknown as string;
  }

  public get httpTokens(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpTokens'),
        outputPath: 'LaunchTemplateData.MetadataOptions.HttpTokens',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpTokens', props);
    return resource.getResponseField('LaunchTemplateData.MetadataOptions.HttpTokens') as unknown as string;
  }

  public get httpPutResponseHopLimit(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit'),
        outputPath: 'LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit', props);
    return resource.getResponseField('LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit') as unknown as number;
  }

  public get httpEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpEndpoint'),
        outputPath: 'LaunchTemplateData.MetadataOptions.HttpEndpoint',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.MetadataOptions.HttpEndpoint', props);
    return resource.getResponseField('LaunchTemplateData.MetadataOptions.HttpEndpoint') as unknown as string;
  }

}

export class EC2ResponsesFetchLaunchTemplateDataLaunchTemplateDataEnclaveOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetLaunchTemplateDataRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getLaunchTemplateData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetLaunchTemplateData.LaunchTemplateData.EnclaveOptions.Enabled'),
        outputPath: 'LaunchTemplateData.EnclaveOptions.Enabled',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetLaunchTemplateData.LaunchTemplateData.EnclaveOptions.Enabled', props);
    return resource.getResponseField('LaunchTemplateData.EnclaveOptions.Enabled') as unknown as boolean;
  }

}

export class EC2ResponsesFetchManagedPrefixListAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetManagedPrefixListAssociationsRequest) {
  }

  public get prefixListAssociations(): shapes.Ec2PrefixListAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getManagedPrefixListAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetManagedPrefixListAssociations.PrefixListAssociations'),
        outputPath: 'PrefixListAssociations',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetManagedPrefixListAssociations.PrefixListAssociations', props);
    return resource.getResponseField('PrefixListAssociations') as unknown as shapes.Ec2PrefixListAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getManagedPrefixListAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetManagedPrefixListAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetManagedPrefixListAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesFetchManagedPrefixListEntries {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetManagedPrefixListEntriesRequest) {
  }

  public get entries(): shapes.Ec2PrefixListEntry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getManagedPrefixListEntries',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetManagedPrefixListEntries.Entries'),
        outputPath: 'Entries',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          TargetVersion: this.__input.targetVersion,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetManagedPrefixListEntries.Entries', props);
    return resource.getResponseField('Entries') as unknown as shapes.Ec2PrefixListEntry[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getManagedPrefixListEntries',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetManagedPrefixListEntries.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          TargetVersion: this.__input.targetVersion,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetManagedPrefixListEntries.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesFetchPasswordData {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetPasswordDataRequest) {
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPasswordData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetPasswordData.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          InstanceId: this.__input.instanceId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetPasswordData.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get passwordData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPasswordData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetPasswordData.PasswordData'),
        outputPath: 'PasswordData',
        parameters: {
          InstanceId: this.__input.instanceId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetPasswordData.PasswordData', props);
    return resource.getResponseField('PasswordData') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPasswordData',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetPasswordData.Timestamp'),
        outputPath: 'Timestamp',
        parameters: {
          InstanceId: this.__input.instanceId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetPasswordData.Timestamp', props);
    return resource.getResponseField('Timestamp') as unknown as string;
  }

}

export class EC2ResponsesFetchReservedInstancesExchangeQuote {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetReservedInstancesExchangeQuoteRequest) {
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get isValidExchange(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.IsValidExchange'),
        outputPath: 'IsValidExchange',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.IsValidExchange', props);
    return resource.getResponseField('IsValidExchange') as unknown as boolean;
  }

  public get outputReservedInstancesWillExpireAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.OutputReservedInstancesWillExpireAt'),
        outputPath: 'OutputReservedInstancesWillExpireAt',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.OutputReservedInstancesWillExpireAt', props);
    return resource.getResponseField('OutputReservedInstancesWillExpireAt') as unknown as string;
  }

  public get paymentDue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.PaymentDue'),
        outputPath: 'PaymentDue',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.PaymentDue', props);
    return resource.getResponseField('PaymentDue') as unknown as string;
  }

  public get reservedInstanceValueRollup(): EC2ResponsesFetchReservedInstancesExchangeQuoteReservedInstanceValueRollup {
    return new EC2ResponsesFetchReservedInstancesExchangeQuoteReservedInstanceValueRollup(this.__scope, this.__resources, this.__input);
  }

  public get reservedInstanceValueSet(): shapes.Ec2ReservedInstanceReservationValue[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ReservedInstanceValueSet'),
        outputPath: 'ReservedInstanceValueSet',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.ReservedInstanceValueSet', props);
    return resource.getResponseField('ReservedInstanceValueSet') as unknown as shapes.Ec2ReservedInstanceReservationValue[];
  }

  public get targetConfigurationValueRollup(): EC2ResponsesFetchReservedInstancesExchangeQuoteTargetConfigurationValueRollup {
    return new EC2ResponsesFetchReservedInstancesExchangeQuoteTargetConfigurationValueRollup(this.__scope, this.__resources, this.__input);
  }

  public get targetConfigurationValueSet(): shapes.Ec2TargetReservationValue[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.TargetConfigurationValueSet'),
        outputPath: 'TargetConfigurationValueSet',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.TargetConfigurationValueSet', props);
    return resource.getResponseField('TargetConfigurationValueSet') as unknown as shapes.Ec2TargetReservationValue[];
  }

  public get validationFailureReason(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ValidationFailureReason'),
        outputPath: 'ValidationFailureReason',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.ValidationFailureReason', props);
    return resource.getResponseField('ValidationFailureReason') as unknown as string;
  }

}

export class EC2ResponsesFetchReservedInstancesExchangeQuoteReservedInstanceValueRollup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetReservedInstancesExchangeQuoteRequest) {
  }

  public get hourlyPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.HourlyPrice'),
        outputPath: 'ReservedInstanceValueRollup.HourlyPrice',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.HourlyPrice', props);
    return resource.getResponseField('ReservedInstanceValueRollup.HourlyPrice') as unknown as string;
  }

  public get remainingTotalValue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.RemainingTotalValue'),
        outputPath: 'ReservedInstanceValueRollup.RemainingTotalValue',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.RemainingTotalValue', props);
    return resource.getResponseField('ReservedInstanceValueRollup.RemainingTotalValue') as unknown as string;
  }

  public get remainingUpfrontValue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.RemainingUpfrontValue'),
        outputPath: 'ReservedInstanceValueRollup.RemainingUpfrontValue',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.ReservedInstanceValueRollup.RemainingUpfrontValue', props);
    return resource.getResponseField('ReservedInstanceValueRollup.RemainingUpfrontValue') as unknown as string;
  }

}

export class EC2ResponsesFetchReservedInstancesExchangeQuoteTargetConfigurationValueRollup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetReservedInstancesExchangeQuoteRequest) {
  }

  public get hourlyPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.HourlyPrice'),
        outputPath: 'TargetConfigurationValueRollup.HourlyPrice',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.HourlyPrice', props);
    return resource.getResponseField('TargetConfigurationValueRollup.HourlyPrice') as unknown as string;
  }

  public get remainingTotalValue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.RemainingTotalValue'),
        outputPath: 'TargetConfigurationValueRollup.RemainingTotalValue',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.RemainingTotalValue', props);
    return resource.getResponseField('TargetConfigurationValueRollup.RemainingTotalValue') as unknown as string;
  }

  public get remainingUpfrontValue(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getReservedInstancesExchangeQuote',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.RemainingUpfrontValue'),
        outputPath: 'TargetConfigurationValueRollup.RemainingUpfrontValue',
        parameters: {
          DryRun: this.__input.dryRun,
          ReservedInstanceIds: this.__input.reservedInstanceIds,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetReservedInstancesExchangeQuote.TargetConfigurationValueRollup.RemainingUpfrontValue', props);
    return resource.getResponseField('TargetConfigurationValueRollup.RemainingUpfrontValue') as unknown as string;
  }

}

export class EC2ResponsesFetchSerialConsoleAccessStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetSerialConsoleAccessStatusRequest) {
  }

  public get serialConsoleAccessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getSerialConsoleAccessStatus',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetSerialConsoleAccessStatus.SerialConsoleAccessEnabled'),
        outputPath: 'SerialConsoleAccessEnabled',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetSerialConsoleAccessStatus.SerialConsoleAccessEnabled', props);
    return resource.getResponseField('SerialConsoleAccessEnabled') as unknown as boolean;
  }

}

export class EC2ResponsesFetchSubnetCidrReservations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetSubnetCidrReservationsRequest) {
  }

  public get subnetIpv4CidrReservations(): shapes.Ec2SubnetCidrReservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getSubnetCidrReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetSubnetCidrReservations.SubnetIpv4CidrReservations'),
        outputPath: 'SubnetIpv4CidrReservations',
        parameters: {
          Filters: this.__input.filters,
          SubnetId: this.__input.subnetId,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetSubnetCidrReservations.SubnetIpv4CidrReservations', props);
    return resource.getResponseField('SubnetIpv4CidrReservations') as unknown as shapes.Ec2SubnetCidrReservation[];
  }

  public get subnetIpv6CidrReservations(): shapes.Ec2SubnetCidrReservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getSubnetCidrReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetSubnetCidrReservations.SubnetIpv6CidrReservations'),
        outputPath: 'SubnetIpv6CidrReservations',
        parameters: {
          Filters: this.__input.filters,
          SubnetId: this.__input.subnetId,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetSubnetCidrReservations.SubnetIpv6CidrReservations', props);
    return resource.getResponseField('SubnetIpv6CidrReservations') as unknown as shapes.Ec2SubnetCidrReservation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getSubnetCidrReservations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetSubnetCidrReservations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          SubnetId: this.__input.subnetId,
          DryRun: this.__input.dryRun,
          NextToken: this.__input.nextToken,
          MaxResults: this.__input.maxResults,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetSubnetCidrReservations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesFetchTransitGatewayAttachmentPropagations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetTransitGatewayAttachmentPropagationsRequest) {
  }

  public get transitGatewayAttachmentPropagations(): shapes.Ec2TransitGatewayAttachmentPropagation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayAttachmentPropagations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayAttachmentPropagations.TransitGatewayAttachmentPropagations'),
        outputPath: 'TransitGatewayAttachmentPropagations',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayAttachmentPropagations.TransitGatewayAttachmentPropagations', props);
    return resource.getResponseField('TransitGatewayAttachmentPropagations') as unknown as shapes.Ec2TransitGatewayAttachmentPropagation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayAttachmentPropagations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayAttachmentPropagations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayAttachmentPropagations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesFetchTransitGatewayMulticastDomainAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetTransitGatewayMulticastDomainAssociationsRequest) {
  }

  public get multicastDomainAssociations(): shapes.Ec2TransitGatewayMulticastDomainAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayMulticastDomainAssociations.MulticastDomainAssociations'),
        outputPath: 'MulticastDomainAssociations',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayMulticastDomainAssociations.MulticastDomainAssociations', props);
    return resource.getResponseField('MulticastDomainAssociations') as unknown as shapes.Ec2TransitGatewayMulticastDomainAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayMulticastDomainAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayMulticastDomainAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesFetchTransitGatewayPrefixListReferences {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetTransitGatewayPrefixListReferencesRequest) {
  }

  public get transitGatewayPrefixListReferences(): shapes.Ec2TransitGatewayPrefixListReference[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayPrefixListReferences',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayPrefixListReferences.TransitGatewayPrefixListReferences'),
        outputPath: 'TransitGatewayPrefixListReferences',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayPrefixListReferences.TransitGatewayPrefixListReferences', props);
    return resource.getResponseField('TransitGatewayPrefixListReferences') as unknown as shapes.Ec2TransitGatewayPrefixListReference[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayPrefixListReferences',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayPrefixListReferences.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayPrefixListReferences.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesFetchTransitGatewayRouteTableAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetTransitGatewayRouteTableAssociationsRequest) {
  }

  public get associations(): shapes.Ec2TransitGatewayRouteTableAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayRouteTableAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayRouteTableAssociations.Associations'),
        outputPath: 'Associations',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayRouteTableAssociations.Associations', props);
    return resource.getResponseField('Associations') as unknown as shapes.Ec2TransitGatewayRouteTableAssociation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayRouteTableAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayRouteTableAssociations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayRouteTableAssociations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesFetchTransitGatewayRouteTablePropagations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2GetTransitGatewayRouteTablePropagationsRequest) {
  }

  public get transitGatewayRouteTablePropagations(): shapes.Ec2TransitGatewayRouteTablePropagation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayRouteTablePropagations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayRouteTablePropagations.TransitGatewayRouteTablePropagations'),
        outputPath: 'TransitGatewayRouteTablePropagations',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayRouteTablePropagations.TransitGatewayRouteTablePropagations', props);
    return resource.getResponseField('TransitGatewayRouteTablePropagations') as unknown as shapes.Ec2TransitGatewayRouteTablePropagation[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getTransitGatewayRouteTablePropagations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.GetTransitGatewayRouteTablePropagations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetTransitGatewayRouteTablePropagations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesImportClientVpnClientCertificateRevocationList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportClientVpnClientCertificateRevocationListRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importClientVpnClientCertificateRevocationList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportClientVpnClientCertificateRevocationList.Return'),
        outputPath: 'Return',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          CertificateRevocationList: this.__input.certificateRevocationList,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportClientVpnClientCertificateRevocationList.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesImportImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportImageRequest) {
  }

  public get architecture(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Architecture'),
        outputPath: 'Architecture',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.Architecture', props);
    return resource.getResponseField('Architecture') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Description'),
        outputPath: 'Description',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Encrypted'),
        outputPath: 'Encrypted',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.Encrypted', props);
    return resource.getResponseField('Encrypted') as unknown as boolean;
  }

  public get hypervisor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Hypervisor'),
        outputPath: 'Hypervisor',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.Hypervisor', props);
    return resource.getResponseField('Hypervisor') as unknown as string;
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

  public get importTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.ImportTaskId'),
        outputPath: 'ImportTaskId',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.ImportTaskId', props);
    return resource.getResponseField('ImportTaskId') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get licenseType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.LicenseType'),
        outputPath: 'LicenseType',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.LicenseType', props);
    return resource.getResponseField('LicenseType') as unknown as string;
  }

  public get platform(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Platform'),
        outputPath: 'Platform',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.Platform', props);
    return resource.getResponseField('Platform') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Progress'),
        outputPath: 'Progress',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.Progress', props);
    return resource.getResponseField('Progress') as unknown as string;
  }

  public get snapshotDetails(): shapes.Ec2SnapshotDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.SnapshotDetails'),
        outputPath: 'SnapshotDetails',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.SnapshotDetails', props);
    return resource.getResponseField('SnapshotDetails') as unknown as shapes.Ec2SnapshotDetail[];
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Status'),
        outputPath: 'Status',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.StatusMessage'),
        outputPath: 'StatusMessage',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.StatusMessage', props);
    return resource.getResponseField('StatusMessage') as unknown as string;
  }

  public get licenseSpecifications(): shapes.Ec2ImportImageLicenseConfigurationResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.LicenseSpecifications'),
        outputPath: 'LicenseSpecifications',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.LicenseSpecifications', props);
    return resource.getResponseField('LicenseSpecifications') as unknown as shapes.Ec2ImportImageLicenseConfigurationResponse[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportImage.Tags'),
        outputPath: 'Tags',
        parameters: {
          Architecture: this.__input.architecture,
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainers: this.__input.diskContainers,
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          Hypervisor: this.__input.hypervisor,
          KmsKeyId: this.__input.kmsKeyId,
          LicenseType: this.__input.licenseType,
          Platform: this.__input.platform,
          RoleName: this.__input.roleName,
          LicenseSpecifications: this.__input.licenseSpecifications,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportImage.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesImportInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportInstanceRequest) {
  }

  public get conversionTask(): EC2ResponsesImportInstanceConversionTask {
    return new EC2ResponsesImportInstanceConversionTask(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesImportInstanceConversionTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportInstanceRequest) {
  }

  public get conversionTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ConversionTaskId'),
        outputPath: 'ConversionTask.ConversionTaskId',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ConversionTaskId', props);
    return resource.getResponseField('ConversionTask.ConversionTaskId') as unknown as string;
  }

  public get expirationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ExpirationTime'),
        outputPath: 'ConversionTask.ExpirationTime',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ExpirationTime', props);
    return resource.getResponseField('ConversionTask.ExpirationTime') as unknown as string;
  }

  public get importInstance(): EC2ResponsesImportInstanceConversionTaskImportInstance {
    return new EC2ResponsesImportInstanceConversionTaskImportInstance(this.__scope, this.__resources, this.__input);
  }

  public get importVolume(): EC2ResponsesImportInstanceConversionTaskImportVolume {
    return new EC2ResponsesImportInstanceConversionTaskImportVolume(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.State'),
        outputPath: 'ConversionTask.State',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.State', props);
    return resource.getResponseField('ConversionTask.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.StatusMessage'),
        outputPath: 'ConversionTask.StatusMessage',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.StatusMessage', props);
    return resource.getResponseField('ConversionTask.StatusMessage') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.Tags'),
        outputPath: 'ConversionTask.Tags',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.Tags', props);
    return resource.getResponseField('ConversionTask.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesImportInstanceConversionTaskImportInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportInstanceRequest) {
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportInstance.Description'),
        outputPath: 'ConversionTask.ImportInstance.Description',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportInstance.Description', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Description') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportInstance.InstanceId'),
        outputPath: 'ConversionTask.ImportInstance.InstanceId',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportInstance.InstanceId', props);
    return resource.getResponseField('ConversionTask.ImportInstance.InstanceId') as unknown as string;
  }

  public get platform(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportInstance.Platform'),
        outputPath: 'ConversionTask.ImportInstance.Platform',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportInstance.Platform', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Platform') as unknown as string;
  }

  public get volumes(): shapes.Ec2ImportInstanceVolumeDetailItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportInstance.Volumes'),
        outputPath: 'ConversionTask.ImportInstance.Volumes',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportInstance.Volumes', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Volumes') as unknown as shapes.Ec2ImportInstanceVolumeDetailItem[];
  }

}

export class EC2ResponsesImportInstanceConversionTaskImportVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportInstanceRequest) {
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.AvailabilityZone'),
        outputPath: 'ConversionTask.ImportVolume.AvailabilityZone',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.AvailabilityZone', props);
    return resource.getResponseField('ConversionTask.ImportVolume.AvailabilityZone') as unknown as string;
  }

  public get bytesConverted(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.BytesConverted'),
        outputPath: 'ConversionTask.ImportVolume.BytesConverted',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.BytesConverted', props);
    return resource.getResponseField('ConversionTask.ImportVolume.BytesConverted') as unknown as number;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Description'),
        outputPath: 'ConversionTask.ImportVolume.Description',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.Description', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Description') as unknown as string;
  }

  public get image(): EC2ResponsesImportInstanceConversionTaskImportVolumeImage {
    return new EC2ResponsesImportInstanceConversionTaskImportVolumeImage(this.__scope, this.__resources, this.__input);
  }

  public get volume(): EC2ResponsesImportInstanceConversionTaskImportVolumeVolume {
    return new EC2ResponsesImportInstanceConversionTaskImportVolumeVolume(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesImportInstanceConversionTaskImportVolumeImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportInstanceRequest) {
  }

  public get checksum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Image.Checksum'),
        outputPath: 'ConversionTask.ImportVolume.Image.Checksum',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.Image.Checksum', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Checksum') as unknown as string;
  }

  public get format(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Image.Format'),
        outputPath: 'ConversionTask.ImportVolume.Image.Format',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.Image.Format', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Format') as unknown as string;
  }

  public get importManifestUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Image.ImportManifestUrl'),
        outputPath: 'ConversionTask.ImportVolume.Image.ImportManifestUrl',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.Image.ImportManifestUrl', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.ImportManifestUrl') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Image.Size'),
        outputPath: 'ConversionTask.ImportVolume.Image.Size',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.Image.Size', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Size') as unknown as number;
  }

}

export class EC2ResponsesImportInstanceConversionTaskImportVolumeVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportInstanceRequest) {
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Volume.Id'),
        outputPath: 'ConversionTask.ImportVolume.Volume.Id',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.Volume.Id', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Volume.Id') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstance',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportInstance.ConversionTask.ImportVolume.Volume.Size'),
        outputPath: 'ConversionTask.ImportVolume.Volume.Size',
        parameters: {
          Description: this.__input.description,
          DiskImages: this.__input.diskImages,
          DryRun: this.__input.dryRun,
          LaunchSpecification: {
            AdditionalInfo: this.__input.launchSpecification?.additionalInfo,
            Architecture: this.__input.launchSpecification?.architecture,
            GroupIds: this.__input.launchSpecification?.groupIds,
            GroupNames: this.__input.launchSpecification?.groupNames,
            InstanceInitiatedShutdownBehavior: this.__input.launchSpecification?.instanceInitiatedShutdownBehavior,
            InstanceType: this.__input.launchSpecification?.instanceType,
            Monitoring: this.__input.launchSpecification?.monitoring,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              Affinity: this.__input.launchSpecification?.placement?.affinity,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              PartitionNumber: this.__input.launchSpecification?.placement?.partitionNumber,
              HostId: this.__input.launchSpecification?.placement?.hostId,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
              SpreadDomain: this.__input.launchSpecification?.placement?.spreadDomain,
              HostResourceGroupArn: this.__input.launchSpecification?.placement?.hostResourceGroupArn,
            },
            PrivateIpAddress: this.__input.launchSpecification?.privateIpAddress,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: {
              Data: this.__input.launchSpecification?.userData?.data,
            },
          },
          Platform: this.__input.platform,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstance.ConversionTask.ImportVolume.Volume.Size', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Volume.Size') as unknown as number;
  }

}

export class EC2ResponsesImportKeyPair {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportKeyPairRequest) {
  }

  public get keyFingerprint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportKeyPair.KeyFingerprint'),
        outputPath: 'KeyFingerprint',
        parameters: {
          DryRun: this.__input.dryRun,
          KeyName: this.__input.keyName,
          PublicKeyMaterial: {
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportKeyPair.KeyFingerprint', props);
    return resource.getResponseField('KeyFingerprint') as unknown as string;
  }

  public get keyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportKeyPair.KeyName'),
        outputPath: 'KeyName',
        parameters: {
          DryRun: this.__input.dryRun,
          KeyName: this.__input.keyName,
          PublicKeyMaterial: {
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportKeyPair.KeyName', props);
    return resource.getResponseField('KeyName') as unknown as string;
  }

  public get keyPairId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportKeyPair.KeyPairId'),
        outputPath: 'KeyPairId',
        parameters: {
          DryRun: this.__input.dryRun,
          KeyName: this.__input.keyName,
          PublicKeyMaterial: {
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportKeyPair.KeyPairId', props);
    return resource.getResponseField('KeyPairId') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importKeyPair',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportKeyPair.Tags'),
        outputPath: 'Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          KeyName: this.__input.keyName,
          PublicKeyMaterial: {
          },
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportKeyPair.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesImportSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportSnapshotRequest) {
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.Description'),
        outputPath: 'Description',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.Description', props);
    return resource.getResponseField('Description') as unknown as string;
  }

  public get importTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.ImportTaskId'),
        outputPath: 'ImportTaskId',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.ImportTaskId', props);
    return resource.getResponseField('ImportTaskId') as unknown as string;
  }

  public get snapshotTaskDetail(): EC2ResponsesImportSnapshotSnapshotTaskDetail {
    return new EC2ResponsesImportSnapshotSnapshotTaskDetail(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.Tags'),
        outputPath: 'Tags',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.Tags', props);
    return resource.getResponseField('Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesImportSnapshotSnapshotTaskDetail {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportSnapshotRequest) {
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Description'),
        outputPath: 'SnapshotTaskDetail.Description',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.Description', props);
    return resource.getResponseField('SnapshotTaskDetail.Description') as unknown as string;
  }

  public get diskImageSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.DiskImageSize'),
        outputPath: 'SnapshotTaskDetail.DiskImageSize',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.DiskImageSize', props);
    return resource.getResponseField('SnapshotTaskDetail.DiskImageSize') as unknown as number;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Encrypted'),
        outputPath: 'SnapshotTaskDetail.Encrypted',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.Encrypted', props);
    return resource.getResponseField('SnapshotTaskDetail.Encrypted') as unknown as boolean;
  }

  public get format(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Format'),
        outputPath: 'SnapshotTaskDetail.Format',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.Format', props);
    return resource.getResponseField('SnapshotTaskDetail.Format') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.KmsKeyId'),
        outputPath: 'SnapshotTaskDetail.KmsKeyId',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.KmsKeyId', props);
    return resource.getResponseField('SnapshotTaskDetail.KmsKeyId') as unknown as string;
  }

  public get progress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Progress'),
        outputPath: 'SnapshotTaskDetail.Progress',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.Progress', props);
    return resource.getResponseField('SnapshotTaskDetail.Progress') as unknown as string;
  }

  public get snapshotId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.SnapshotId'),
        outputPath: 'SnapshotTaskDetail.SnapshotId',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.SnapshotId', props);
    return resource.getResponseField('SnapshotTaskDetail.SnapshotId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Status'),
        outputPath: 'SnapshotTaskDetail.Status',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.Status', props);
    return resource.getResponseField('SnapshotTaskDetail.Status') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.StatusMessage'),
        outputPath: 'SnapshotTaskDetail.StatusMessage',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.StatusMessage', props);
    return resource.getResponseField('SnapshotTaskDetail.StatusMessage') as unknown as string;
  }

  public get url(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.Url'),
        outputPath: 'SnapshotTaskDetail.Url',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.Url', props);
    return resource.getResponseField('SnapshotTaskDetail.Url') as unknown as string;
  }

  public get userBucket(): EC2ResponsesImportSnapshotSnapshotTaskDetailUserBucket {
    return new EC2ResponsesImportSnapshotSnapshotTaskDetailUserBucket(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesImportSnapshotSnapshotTaskDetailUserBucket {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportSnapshotRequest) {
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.UserBucket.S3Bucket'),
        outputPath: 'SnapshotTaskDetail.UserBucket.S3Bucket',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.UserBucket.S3Bucket', props);
    return resource.getResponseField('SnapshotTaskDetail.UserBucket.S3Bucket') as unknown as string;
  }

  public get s3Key(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importSnapshot',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportSnapshot.SnapshotTaskDetail.UserBucket.S3Key'),
        outputPath: 'SnapshotTaskDetail.UserBucket.S3Key',
        parameters: {
          ClientData: {
            Comment: this.__input.clientData?.comment,
            UploadEnd: this.__input.clientData?.uploadEnd,
            UploadSize: this.__input.clientData?.uploadSize,
            UploadStart: this.__input.clientData?.uploadStart,
          },
          ClientToken: this.__input.clientToken,
          Description: this.__input.description,
          DiskContainer: {
            Description: this.__input.diskContainer?.description,
            Format: this.__input.diskContainer?.format,
            Url: this.__input.diskContainer?.url,
            UserBucket: {
              S3Bucket: this.__input.diskContainer?.userBucket?.s3Bucket,
              S3Key: this.__input.diskContainer?.userBucket?.s3Key,
            },
          },
          DryRun: this.__input.dryRun,
          Encrypted: this.__input.encrypted,
          KmsKeyId: this.__input.kmsKeyId,
          RoleName: this.__input.roleName,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportSnapshot.SnapshotTaskDetail.UserBucket.S3Key', props);
    return resource.getResponseField('SnapshotTaskDetail.UserBucket.S3Key') as unknown as string;
  }

}

export class EC2ResponsesImportVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportVolumeRequest) {
  }

  public get conversionTask(): EC2ResponsesImportVolumeConversionTask {
    return new EC2ResponsesImportVolumeConversionTask(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesImportVolumeConversionTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportVolumeRequest) {
  }

  public get conversionTaskId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ConversionTaskId'),
        outputPath: 'ConversionTask.ConversionTaskId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ConversionTaskId', props);
    return resource.getResponseField('ConversionTask.ConversionTaskId') as unknown as string;
  }

  public get expirationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ExpirationTime'),
        outputPath: 'ConversionTask.ExpirationTime',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ExpirationTime', props);
    return resource.getResponseField('ConversionTask.ExpirationTime') as unknown as string;
  }

  public get importInstance(): EC2ResponsesImportVolumeConversionTaskImportInstance {
    return new EC2ResponsesImportVolumeConversionTaskImportInstance(this.__scope, this.__resources, this.__input);
  }

  public get importVolume(): EC2ResponsesImportVolumeConversionTaskImportVolume {
    return new EC2ResponsesImportVolumeConversionTaskImportVolume(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.State'),
        outputPath: 'ConversionTask.State',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.State', props);
    return resource.getResponseField('ConversionTask.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.StatusMessage'),
        outputPath: 'ConversionTask.StatusMessage',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.StatusMessage', props);
    return resource.getResponseField('ConversionTask.StatusMessage') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.Tags'),
        outputPath: 'ConversionTask.Tags',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.Tags', props);
    return resource.getResponseField('ConversionTask.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesImportVolumeConversionTaskImportInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportVolumeRequest) {
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportInstance.Description'),
        outputPath: 'ConversionTask.ImportInstance.Description',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportInstance.Description', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Description') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportInstance.InstanceId'),
        outputPath: 'ConversionTask.ImportInstance.InstanceId',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportInstance.InstanceId', props);
    return resource.getResponseField('ConversionTask.ImportInstance.InstanceId') as unknown as string;
  }

  public get platform(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportInstance.Platform'),
        outputPath: 'ConversionTask.ImportInstance.Platform',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportInstance.Platform', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Platform') as unknown as string;
  }

  public get volumes(): shapes.Ec2ImportInstanceVolumeDetailItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportInstance.Volumes'),
        outputPath: 'ConversionTask.ImportInstance.Volumes',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportInstance.Volumes', props);
    return resource.getResponseField('ConversionTask.ImportInstance.Volumes') as unknown as shapes.Ec2ImportInstanceVolumeDetailItem[];
  }

}

export class EC2ResponsesImportVolumeConversionTaskImportVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportVolumeRequest) {
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.AvailabilityZone'),
        outputPath: 'ConversionTask.ImportVolume.AvailabilityZone',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.AvailabilityZone', props);
    return resource.getResponseField('ConversionTask.ImportVolume.AvailabilityZone') as unknown as string;
  }

  public get bytesConverted(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.BytesConverted'),
        outputPath: 'ConversionTask.ImportVolume.BytesConverted',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.BytesConverted', props);
    return resource.getResponseField('ConversionTask.ImportVolume.BytesConverted') as unknown as number;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Description'),
        outputPath: 'ConversionTask.ImportVolume.Description',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.Description', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Description') as unknown as string;
  }

  public get image(): EC2ResponsesImportVolumeConversionTaskImportVolumeImage {
    return new EC2ResponsesImportVolumeConversionTaskImportVolumeImage(this.__scope, this.__resources, this.__input);
  }

  public get volume(): EC2ResponsesImportVolumeConversionTaskImportVolumeVolume {
    return new EC2ResponsesImportVolumeConversionTaskImportVolumeVolume(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesImportVolumeConversionTaskImportVolumeImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportVolumeRequest) {
  }

  public get checksum(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Image.Checksum'),
        outputPath: 'ConversionTask.ImportVolume.Image.Checksum',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.Image.Checksum', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Checksum') as unknown as string;
  }

  public get format(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Image.Format'),
        outputPath: 'ConversionTask.ImportVolume.Image.Format',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.Image.Format', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Format') as unknown as string;
  }

  public get importManifestUrl(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Image.ImportManifestUrl'),
        outputPath: 'ConversionTask.ImportVolume.Image.ImportManifestUrl',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.Image.ImportManifestUrl', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.ImportManifestUrl') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Image.Size'),
        outputPath: 'ConversionTask.ImportVolume.Image.Size',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.Image.Size', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Image.Size') as unknown as number;
  }

}

export class EC2ResponsesImportVolumeConversionTaskImportVolumeVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ImportVolumeRequest) {
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Volume.Id'),
        outputPath: 'ConversionTask.ImportVolume.Volume.Id',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.Volume.Id', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Volume.Id') as unknown as string;
  }

  public get size(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ImportVolume.ConversionTask.ImportVolume.Volume.Size'),
        outputPath: 'ConversionTask.ImportVolume.Volume.Size',
        parameters: {
          AvailabilityZone: this.__input.availabilityZone,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          Image: {
            Bytes: this.__input.image.bytes,
            Format: this.__input.image.format,
            ImportManifestUrl: this.__input.image.importManifestUrl,
          },
          Volume: {
            Size: this.__input.volume.size,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportVolume.ConversionTask.ImportVolume.Volume.Size', props);
    return resource.getResponseField('ConversionTask.ImportVolume.Volume.Size') as unknown as number;
  }

}

export class EC2ResponsesModifyAddressAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyAddressAttributeRequest) {
  }

  public get address(): EC2ResponsesModifyAddressAttributeAddress {
    return new EC2ResponsesModifyAddressAttributeAddress(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyAddressAttributeAddress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyAddressAttributeRequest) {
  }

  public get publicIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyAddressAttribute.Address.PublicIp'),
        outputPath: 'Address.PublicIp',
        parameters: {
          AllocationId: this.__input.allocationId,
          DomainName: this.__input.domainName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAddressAttribute.Address.PublicIp', props);
    return resource.getResponseField('Address.PublicIp') as unknown as string;
  }

  public get allocationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyAddressAttribute.Address.AllocationId'),
        outputPath: 'Address.AllocationId',
        parameters: {
          AllocationId: this.__input.allocationId,
          DomainName: this.__input.domainName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAddressAttribute.Address.AllocationId', props);
    return resource.getResponseField('Address.AllocationId') as unknown as string;
  }

  public get ptrRecord(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyAddressAttribute.Address.PtrRecord'),
        outputPath: 'Address.PtrRecord',
        parameters: {
          AllocationId: this.__input.allocationId,
          DomainName: this.__input.domainName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAddressAttribute.Address.PtrRecord', props);
    return resource.getResponseField('Address.PtrRecord') as unknown as string;
  }

  public get ptrRecordUpdate(): EC2ResponsesModifyAddressAttributeAddressPtrRecordUpdate {
    return new EC2ResponsesModifyAddressAttributeAddressPtrRecordUpdate(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyAddressAttributeAddressPtrRecordUpdate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyAddressAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyAddressAttribute.Address.PtrRecordUpdate.Value'),
        outputPath: 'Address.PtrRecordUpdate.Value',
        parameters: {
          AllocationId: this.__input.allocationId,
          DomainName: this.__input.domainName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAddressAttribute.Address.PtrRecordUpdate.Value', props);
    return resource.getResponseField('Address.PtrRecordUpdate.Value') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyAddressAttribute.Address.PtrRecordUpdate.Status'),
        outputPath: 'Address.PtrRecordUpdate.Status',
        parameters: {
          AllocationId: this.__input.allocationId,
          DomainName: this.__input.domainName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAddressAttribute.Address.PtrRecordUpdate.Status', props);
    return resource.getResponseField('Address.PtrRecordUpdate.Status') as unknown as string;
  }

  public get reason(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyAddressAttribute.Address.PtrRecordUpdate.Reason'),
        outputPath: 'Address.PtrRecordUpdate.Reason',
        parameters: {
          AllocationId: this.__input.allocationId,
          DomainName: this.__input.domainName,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAddressAttribute.Address.PtrRecordUpdate.Reason', props);
    return resource.getResponseField('Address.PtrRecordUpdate.Reason') as unknown as string;
  }

}

export class EC2ResponsesModifyAvailabilityZoneGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyAvailabilityZoneGroupRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyAvailabilityZoneGroup',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyAvailabilityZoneGroup.Return'),
        outputPath: 'Return',
        parameters: {
          GroupName: this.__input.groupName,
          OptInStatus: this.__input.optInStatus,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyAvailabilityZoneGroup.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyCapacityReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyCapacityReservationRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCapacityReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyCapacityReservation.Return'),
        outputPath: 'Return',
        parameters: {
          CapacityReservationId: this.__input.capacityReservationId,
          InstanceCount: this.__input.instanceCount,
          EndDate: this.__input.endDate,
          EndDateType: this.__input.endDateType,
          Accept: this.__input.accept,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCapacityReservation.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyClientVpnEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyClientVpnEndpointRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyClientVpnEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyClientVpnEndpoint.Return'),
        outputPath: 'Return',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          ServerCertificateArn: this.__input.serverCertificateArn,
          ConnectionLogOptions: {
            Enabled: this.__input.connectionLogOptions?.enabled,
            CloudwatchLogGroup: this.__input.connectionLogOptions?.cloudwatchLogGroup,
            CloudwatchLogStream: this.__input.connectionLogOptions?.cloudwatchLogStream,
          },
          DnsServers: {
            CustomDnsServers: this.__input.dnsServers?.customDnsServers,
            Enabled: this.__input.dnsServers?.enabled,
          },
          VpnPort: this.__input.vpnPort,
          Description: this.__input.description,
          SplitTunnel: this.__input.splitTunnel,
          DryRun: this.__input.dryRun,
          SecurityGroupIds: this.__input.securityGroupIds,
          VpcId: this.__input.vpcId,
          SelfServicePortal: this.__input.selfServicePortal,
          ClientConnectOptions: {
            Enabled: this.__input.clientConnectOptions?.enabled,
            LambdaFunctionArn: this.__input.clientConnectOptions?.lambdaFunctionArn,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyClientVpnEndpoint.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyDefaultCreditSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyDefaultCreditSpecificationRequest) {
  }

  public get instanceFamilyCreditSpecification(): EC2ResponsesModifyDefaultCreditSpecificationInstanceFamilyCreditSpecification {
    return new EC2ResponsesModifyDefaultCreditSpecificationInstanceFamilyCreditSpecification(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyDefaultCreditSpecificationInstanceFamilyCreditSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyDefaultCreditSpecificationRequest) {
  }

  public get instanceFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDefaultCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyDefaultCreditSpecification.InstanceFamilyCreditSpecification.InstanceFamily'),
        outputPath: 'InstanceFamilyCreditSpecification.InstanceFamily',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceFamily: this.__input.instanceFamily,
          CpuCredits: this.__input.cpuCredits,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDefaultCreditSpecification.InstanceFamilyCreditSpecification.InstanceFamily', props);
    return resource.getResponseField('InstanceFamilyCreditSpecification.InstanceFamily') as unknown as string;
  }

  public get cpuCredits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDefaultCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyDefaultCreditSpecification.InstanceFamilyCreditSpecification.CpuCredits'),
        outputPath: 'InstanceFamilyCreditSpecification.CpuCredits',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceFamily: this.__input.instanceFamily,
          CpuCredits: this.__input.cpuCredits,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDefaultCreditSpecification.InstanceFamilyCreditSpecification.CpuCredits', props);
    return resource.getResponseField('InstanceFamilyCreditSpecification.CpuCredits') as unknown as string;
  }

}

export class EC2ResponsesModifyEbsDefaultKmsKeyId {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyEbsDefaultKmsKeyIdRequest) {
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEbsDefaultKmsKeyId',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyEbsDefaultKmsKeyId.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          KmsKeyId: this.__input.kmsKeyId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEbsDefaultKmsKeyId.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

}

export class EC2ResponsesModifyFleet {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyFleetRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFleet.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          ExcessCapacityTerminationPolicy: this.__input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.__input.launchTemplateConfigs,
          FleetId: this.__input.fleetId,
          TargetCapacitySpecification: {
            TotalTargetCapacity: this.__input.targetCapacitySpecification?.totalTargetCapacity,
            OnDemandTargetCapacity: this.__input.targetCapacitySpecification?.onDemandTargetCapacity,
            SpotTargetCapacity: this.__input.targetCapacitySpecification?.spotTargetCapacity,
            DefaultTargetCapacityType: this.__input.targetCapacitySpecification?.defaultTargetCapacityType,
          },
          Context: this.__input.context,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyFleet.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyFpgaImageAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyFpgaImageAttributeRequest) {
  }

  public get fpgaImageAttribute(): EC2ResponsesModifyFpgaImageAttributeFpgaImageAttribute {
    return new EC2ResponsesModifyFpgaImageAttributeFpgaImageAttribute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyFpgaImageAttributeFpgaImageAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyFpgaImageAttributeRequest) {
  }

  public get fpgaImageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.FpgaImageId'),
        outputPath: 'FpgaImageAttribute.FpgaImageId',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
          OperationType: this.__input.operationType,
          UserIds: this.__input.userIds,
          UserGroups: this.__input.userGroups,
          ProductCodes: this.__input.productCodes,
          LoadPermission: {
            Add: this.__input.loadPermission?.add,
            Remove: this.__input.loadPermission?.remove,
          },
          Description: this.__input.description,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyFpgaImageAttribute.FpgaImageAttribute.FpgaImageId', props);
    return resource.getResponseField('FpgaImageAttribute.FpgaImageId') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.Name'),
        outputPath: 'FpgaImageAttribute.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
          OperationType: this.__input.operationType,
          UserIds: this.__input.userIds,
          UserGroups: this.__input.userGroups,
          ProductCodes: this.__input.productCodes,
          LoadPermission: {
            Add: this.__input.loadPermission?.add,
            Remove: this.__input.loadPermission?.remove,
          },
          Description: this.__input.description,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyFpgaImageAttribute.FpgaImageAttribute.Name', props);
    return resource.getResponseField('FpgaImageAttribute.Name') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.Description'),
        outputPath: 'FpgaImageAttribute.Description',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
          OperationType: this.__input.operationType,
          UserIds: this.__input.userIds,
          UserGroups: this.__input.userGroups,
          ProductCodes: this.__input.productCodes,
          LoadPermission: {
            Add: this.__input.loadPermission?.add,
            Remove: this.__input.loadPermission?.remove,
          },
          Description: this.__input.description,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyFpgaImageAttribute.FpgaImageAttribute.Description', props);
    return resource.getResponseField('FpgaImageAttribute.Description') as unknown as string;
  }

  public get loadPermissions(): shapes.Ec2LoadPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.LoadPermissions'),
        outputPath: 'FpgaImageAttribute.LoadPermissions',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
          OperationType: this.__input.operationType,
          UserIds: this.__input.userIds,
          UserGroups: this.__input.userGroups,
          ProductCodes: this.__input.productCodes,
          LoadPermission: {
            Add: this.__input.loadPermission?.add,
            Remove: this.__input.loadPermission?.remove,
          },
          Description: this.__input.description,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyFpgaImageAttribute.FpgaImageAttribute.LoadPermissions', props);
    return resource.getResponseField('FpgaImageAttribute.LoadPermissions') as unknown as shapes.Ec2LoadPermission[];
  }

  public get productCodes(): shapes.Ec2ProductCode[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyFpgaImageAttribute.FpgaImageAttribute.ProductCodes'),
        outputPath: 'FpgaImageAttribute.ProductCodes',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
          OperationType: this.__input.operationType,
          UserIds: this.__input.userIds,
          UserGroups: this.__input.userGroups,
          ProductCodes: this.__input.productCodes,
          LoadPermission: {
            Add: this.__input.loadPermission?.add,
            Remove: this.__input.loadPermission?.remove,
          },
          Description: this.__input.description,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyFpgaImageAttribute.FpgaImageAttribute.ProductCodes', props);
    return resource.getResponseField('FpgaImageAttribute.ProductCodes') as unknown as shapes.Ec2ProductCode[];
  }

}

export class EC2ResponsesModifyHosts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyHostsRequest) {
  }

  public get successful(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyHosts.Successful'),
        outputPath: 'Successful',
        parameters: {
          AutoPlacement: this.__input.autoPlacement,
          HostIds: this.__input.hostIds,
          HostRecovery: this.__input.hostRecovery,
          InstanceType: this.__input.instanceType,
          InstanceFamily: this.__input.instanceFamily,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyHosts.Successful', props);
    return resource.getResponseField('Successful') as unknown as string[];
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyHosts.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          AutoPlacement: this.__input.autoPlacement,
          HostIds: this.__input.hostIds,
          HostRecovery: this.__input.hostRecovery,
          InstanceType: this.__input.instanceType,
          InstanceFamily: this.__input.instanceFamily,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyHosts.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesModifyInstanceCapacityReservationAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceCapacityReservationAttributesRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceCapacityReservationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceCapacityReservationAttributes.Return'),
        outputPath: 'Return',
        parameters: {
          InstanceId: this.__input.instanceId,
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.__input.capacityReservationSpecification.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.__input.capacityReservationSpecification.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.__input.capacityReservationSpecification.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceCapacityReservationAttributes.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyInstanceCreditSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceCreditSpecificationRequest) {
  }

  public get successfulInstanceCreditSpecifications(): shapes.Ec2SuccessfulInstanceCreditSpecificationItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceCreditSpecification.SuccessfulInstanceCreditSpecifications'),
        outputPath: 'SuccessfulInstanceCreditSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          InstanceCreditSpecifications: this.__input.instanceCreditSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceCreditSpecification.SuccessfulInstanceCreditSpecifications', props);
    return resource.getResponseField('SuccessfulInstanceCreditSpecifications') as unknown as shapes.Ec2SuccessfulInstanceCreditSpecificationItem[];
  }

  public get unsuccessfulInstanceCreditSpecifications(): shapes.Ec2UnsuccessfulInstanceCreditSpecificationItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceCreditSpecification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceCreditSpecification.UnsuccessfulInstanceCreditSpecifications'),
        outputPath: 'UnsuccessfulInstanceCreditSpecifications',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          InstanceCreditSpecifications: this.__input.instanceCreditSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceCreditSpecification.UnsuccessfulInstanceCreditSpecifications', props);
    return resource.getResponseField('UnsuccessfulInstanceCreditSpecifications') as unknown as shapes.Ec2UnsuccessfulInstanceCreditSpecificationItem[];
  }

}

export class EC2ResponsesModifyInstanceEventStartTime {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceEventStartTimeRequest) {
  }

  public get event(): EC2ResponsesModifyInstanceEventStartTimeEvent {
    return new EC2ResponsesModifyInstanceEventStartTimeEvent(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyInstanceEventStartTimeEvent {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceEventStartTimeRequest) {
  }

  public get instanceEventId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.InstanceEventId'),
        outputPath: 'Event.InstanceEventId',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          InstanceEventId: this.__input.instanceEventId,
          NotBefore: this.__input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventStartTime.Event.InstanceEventId', props);
    return resource.getResponseField('Event.InstanceEventId') as unknown as string;
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.Code'),
        outputPath: 'Event.Code',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          InstanceEventId: this.__input.instanceEventId,
          NotBefore: this.__input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventStartTime.Event.Code', props);
    return resource.getResponseField('Event.Code') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.Description'),
        outputPath: 'Event.Description',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          InstanceEventId: this.__input.instanceEventId,
          NotBefore: this.__input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventStartTime.Event.Description', props);
    return resource.getResponseField('Event.Description') as unknown as string;
  }

  public get notAfter(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.NotAfter'),
        outputPath: 'Event.NotAfter',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          InstanceEventId: this.__input.instanceEventId,
          NotBefore: this.__input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventStartTime.Event.NotAfter', props);
    return resource.getResponseField('Event.NotAfter') as unknown as string;
  }

  public get notBefore(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.NotBefore'),
        outputPath: 'Event.NotBefore',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          InstanceEventId: this.__input.instanceEventId,
          NotBefore: this.__input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventStartTime.Event.NotBefore', props);
    return resource.getResponseField('Event.NotBefore') as unknown as string;
  }

  public get notBeforeDeadline(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventStartTime',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventStartTime.Event.NotBeforeDeadline'),
        outputPath: 'Event.NotBeforeDeadline',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceId: this.__input.instanceId,
          InstanceEventId: this.__input.instanceEventId,
          NotBefore: this.__input.notBefore,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventStartTime.Event.NotBeforeDeadline', props);
    return resource.getResponseField('Event.NotBeforeDeadline') as unknown as string;
  }

}

export class EC2ResponsesModifyInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceEventWindowRequest) {
  }

  public get instanceEventWindow(): EC2ResponsesModifyInstanceEventWindowInstanceEventWindow {
    return new EC2ResponsesModifyInstanceEventWindowInstanceEventWindow(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyInstanceEventWindowInstanceEventWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceEventWindowRequest) {
  }

  public get instanceEventWindowId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.InstanceEventWindowId'),
        outputPath: 'InstanceEventWindow.InstanceEventWindowId',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.InstanceEventWindowId', props);
    return resource.getResponseField('InstanceEventWindow.InstanceEventWindowId') as unknown as string;
  }

  public get timeRanges(): shapes.Ec2InstanceEventWindowTimeRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.TimeRanges'),
        outputPath: 'InstanceEventWindow.TimeRanges',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.TimeRanges', props);
    return resource.getResponseField('InstanceEventWindow.TimeRanges') as unknown as shapes.Ec2InstanceEventWindowTimeRange[];
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.Name'),
        outputPath: 'InstanceEventWindow.Name',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.Name', props);
    return resource.getResponseField('InstanceEventWindow.Name') as unknown as string;
  }

  public get cronExpression(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.CronExpression'),
        outputPath: 'InstanceEventWindow.CronExpression',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.CronExpression', props);
    return resource.getResponseField('InstanceEventWindow.CronExpression') as unknown as string;
  }

  public get associationTarget(): EC2ResponsesModifyInstanceEventWindowInstanceEventWindowAssociationTarget {
    return new EC2ResponsesModifyInstanceEventWindowInstanceEventWindowAssociationTarget(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.State'),
        outputPath: 'InstanceEventWindow.State',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.State', props);
    return resource.getResponseField('InstanceEventWindow.State') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.Tags'),
        outputPath: 'InstanceEventWindow.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.Tags', props);
    return resource.getResponseField('InstanceEventWindow.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesModifyInstanceEventWindowInstanceEventWindowAssociationTarget {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceEventWindowRequest) {
  }

  public get instanceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.AssociationTarget.InstanceIds'),
        outputPath: 'InstanceEventWindow.AssociationTarget.InstanceIds',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.AssociationTarget.InstanceIds', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.InstanceIds') as unknown as string[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.AssociationTarget.Tags'),
        outputPath: 'InstanceEventWindow.AssociationTarget.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.AssociationTarget.Tags', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get dedicatedHostIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceEventWindow',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceEventWindow.InstanceEventWindow.AssociationTarget.DedicatedHostIds'),
        outputPath: 'InstanceEventWindow.AssociationTarget.DedicatedHostIds',
        parameters: {
          DryRun: this.__input.dryRun,
          Name: this.__input.name,
          InstanceEventWindowId: this.__input.instanceEventWindowId,
          TimeRanges: this.__input.timeRanges,
          CronExpression: this.__input.cronExpression,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceEventWindow.InstanceEventWindow.AssociationTarget.DedicatedHostIds', props);
    return resource.getResponseField('InstanceEventWindow.AssociationTarget.DedicatedHostIds') as unknown as string[];
  }

}

export class EC2ResponsesModifyInstanceMetadataOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceMetadataOptionsRequest) {
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceId'),
        outputPath: 'InstanceId',
        parameters: {
          InstanceId: this.__input.instanceId,
          HttpTokens: this.__input.httpTokens,
          HttpPutResponseHopLimit: this.__input.httpPutResponseHopLimit,
          HttpEndpoint: this.__input.httpEndpoint,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceMetadataOptions.InstanceId', props);
    return resource.getResponseField('InstanceId') as unknown as string;
  }

  public get instanceMetadataOptions(): EC2ResponsesModifyInstanceMetadataOptionsInstanceMetadataOptions {
    return new EC2ResponsesModifyInstanceMetadataOptionsInstanceMetadataOptions(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyInstanceMetadataOptionsInstanceMetadataOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstanceMetadataOptionsRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceMetadataOptions.State'),
        outputPath: 'InstanceMetadataOptions.State',
        parameters: {
          InstanceId: this.__input.instanceId,
          HttpTokens: this.__input.httpTokens,
          HttpPutResponseHopLimit: this.__input.httpPutResponseHopLimit,
          HttpEndpoint: this.__input.httpEndpoint,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceMetadataOptions.InstanceMetadataOptions.State', props);
    return resource.getResponseField('InstanceMetadataOptions.State') as unknown as string;
  }

  public get httpTokens(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpTokens'),
        outputPath: 'InstanceMetadataOptions.HttpTokens',
        parameters: {
          InstanceId: this.__input.instanceId,
          HttpTokens: this.__input.httpTokens,
          HttpPutResponseHopLimit: this.__input.httpPutResponseHopLimit,
          HttpEndpoint: this.__input.httpEndpoint,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpTokens', props);
    return resource.getResponseField('InstanceMetadataOptions.HttpTokens') as unknown as string;
  }

  public get httpPutResponseHopLimit(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpPutResponseHopLimit'),
        outputPath: 'InstanceMetadataOptions.HttpPutResponseHopLimit',
        parameters: {
          InstanceId: this.__input.instanceId,
          HttpTokens: this.__input.httpTokens,
          HttpPutResponseHopLimit: this.__input.httpPutResponseHopLimit,
          HttpEndpoint: this.__input.httpEndpoint,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpPutResponseHopLimit', props);
    return resource.getResponseField('InstanceMetadataOptions.HttpPutResponseHopLimit') as unknown as number;
  }

  public get httpEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstanceMetadataOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpEndpoint'),
        outputPath: 'InstanceMetadataOptions.HttpEndpoint',
        parameters: {
          InstanceId: this.__input.instanceId,
          HttpTokens: this.__input.httpTokens,
          HttpPutResponseHopLimit: this.__input.httpPutResponseHopLimit,
          HttpEndpoint: this.__input.httpEndpoint,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstanceMetadataOptions.InstanceMetadataOptions.HttpEndpoint', props);
    return resource.getResponseField('InstanceMetadataOptions.HttpEndpoint') as unknown as string;
  }

}

export class EC2ResponsesModifyInstancePlacement {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyInstancePlacementRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyInstancePlacement',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyInstancePlacement.Return'),
        outputPath: 'Return',
        parameters: {
          Affinity: this.__input.affinity,
          GroupName: this.__input.groupName,
          HostId: this.__input.hostId,
          InstanceId: this.__input.instanceId,
          Tenancy: this.__input.tenancy,
          PartitionNumber: this.__input.partitionNumber,
          HostResourceGroupArn: this.__input.hostResourceGroupArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyInstancePlacement.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyLaunchTemplate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyLaunchTemplateRequest) {
  }

  public get launchTemplate(): EC2ResponsesModifyLaunchTemplateLaunchTemplate {
    return new EC2ResponsesModifyLaunchTemplateLaunchTemplate(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyLaunchTemplateLaunchTemplate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyLaunchTemplateRequest) {
  }

  public get launchTemplateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.LaunchTemplateId'),
        outputPath: 'LaunchTemplate.LaunchTemplateId',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          DefaultVersion: this.__input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyLaunchTemplate.LaunchTemplate.LaunchTemplateId', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateId') as unknown as string;
  }

  public get launchTemplateName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.LaunchTemplateName'),
        outputPath: 'LaunchTemplate.LaunchTemplateName',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          DefaultVersion: this.__input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyLaunchTemplate.LaunchTemplate.LaunchTemplateName', props);
    return resource.getResponseField('LaunchTemplate.LaunchTemplateName') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.CreateTime'),
        outputPath: 'LaunchTemplate.CreateTime',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          DefaultVersion: this.__input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyLaunchTemplate.LaunchTemplate.CreateTime', props);
    return resource.getResponseField('LaunchTemplate.CreateTime') as unknown as string;
  }

  public get createdBy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.CreatedBy'),
        outputPath: 'LaunchTemplate.CreatedBy',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          DefaultVersion: this.__input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyLaunchTemplate.LaunchTemplate.CreatedBy', props);
    return resource.getResponseField('LaunchTemplate.CreatedBy') as unknown as string;
  }

  public get defaultVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.DefaultVersionNumber'),
        outputPath: 'LaunchTemplate.DefaultVersionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          DefaultVersion: this.__input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyLaunchTemplate.LaunchTemplate.DefaultVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.DefaultVersionNumber') as unknown as number;
  }

  public get latestVersionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.LatestVersionNumber'),
        outputPath: 'LaunchTemplate.LatestVersionNumber',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          DefaultVersion: this.__input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyLaunchTemplate.LaunchTemplate.LatestVersionNumber', props);
    return resource.getResponseField('LaunchTemplate.LatestVersionNumber') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyLaunchTemplate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyLaunchTemplate.LaunchTemplate.Tags'),
        outputPath: 'LaunchTemplate.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          ClientToken: this.__input.clientToken,
          LaunchTemplateId: this.__input.launchTemplateId,
          LaunchTemplateName: this.__input.launchTemplateName,
          DefaultVersion: this.__input.defaultVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyLaunchTemplate.LaunchTemplate.Tags', props);
    return resource.getResponseField('LaunchTemplate.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesModifyManagedPrefixList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyManagedPrefixListRequest) {
  }

  public get prefixList(): EC2ResponsesModifyManagedPrefixListPrefixList {
    return new EC2ResponsesModifyManagedPrefixListPrefixList(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyManagedPrefixListPrefixList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyManagedPrefixListRequest) {
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.PrefixListId'),
        outputPath: 'PrefixList.PrefixListId',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.PrefixListId', props);
    return resource.getResponseField('PrefixList.PrefixListId') as unknown as string;
  }

  public get addressFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.AddressFamily'),
        outputPath: 'PrefixList.AddressFamily',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.AddressFamily', props);
    return resource.getResponseField('PrefixList.AddressFamily') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.State'),
        outputPath: 'PrefixList.State',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.State', props);
    return resource.getResponseField('PrefixList.State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.StateMessage'),
        outputPath: 'PrefixList.StateMessage',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.StateMessage', props);
    return resource.getResponseField('PrefixList.StateMessage') as unknown as string;
  }

  public get prefixListArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.PrefixListArn'),
        outputPath: 'PrefixList.PrefixListArn',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.PrefixListArn', props);
    return resource.getResponseField('PrefixList.PrefixListArn') as unknown as string;
  }

  public get prefixListName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.PrefixListName'),
        outputPath: 'PrefixList.PrefixListName',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.PrefixListName', props);
    return resource.getResponseField('PrefixList.PrefixListName') as unknown as string;
  }

  public get maxEntries(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.MaxEntries'),
        outputPath: 'PrefixList.MaxEntries',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.MaxEntries', props);
    return resource.getResponseField('PrefixList.MaxEntries') as unknown as number;
  }

  public get version(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.Version'),
        outputPath: 'PrefixList.Version',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.Version', props);
    return resource.getResponseField('PrefixList.Version') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.Tags'),
        outputPath: 'PrefixList.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.Tags', props);
    return resource.getResponseField('PrefixList.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyManagedPrefixList',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyManagedPrefixList.PrefixList.OwnerId'),
        outputPath: 'PrefixList.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          CurrentVersion: this.__input.currentVersion,
          PrefixListName: this.__input.prefixListName,
          AddEntries: this.__input.addEntries,
          RemoveEntries: this.__input.removeEntries,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyManagedPrefixList.PrefixList.OwnerId', props);
    return resource.getResponseField('PrefixList.OwnerId') as unknown as string;
  }

}

export class EC2ResponsesModifyReservedInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyReservedInstancesRequest) {
  }

  public get reservedInstancesModificationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyReservedInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyReservedInstances.ReservedInstancesModificationId'),
        outputPath: 'ReservedInstancesModificationId',
        parameters: {
          ReservedInstancesIds: this.__input.reservedInstancesIds,
          ClientToken: this.__input.clientToken,
          TargetConfigurations: this.__input.targetConfigurations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyReservedInstances.ReservedInstancesModificationId', props);
    return resource.getResponseField('ReservedInstancesModificationId') as unknown as string;
  }

}

export class EC2ResponsesModifySecurityGroupRules {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifySecurityGroupRulesRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySecurityGroupRules',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifySecurityGroupRules.Return'),
        outputPath: 'Return',
        parameters: {
          GroupId: this.__input.groupId,
          SecurityGroupRules: this.__input.securityGroupRules,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySecurityGroupRules.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifySpotFleetRequest {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifySpotFleetRequestRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifySpotFleetRequest',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifySpotFleetRequest.Return'),
        outputPath: 'Return',
        parameters: {
          ExcessCapacityTerminationPolicy: this.__input.excessCapacityTerminationPolicy,
          LaunchTemplateConfigs: this.__input.launchTemplateConfigs,
          SpotFleetRequestId: this.__input.spotFleetRequestId,
          TargetCapacity: this.__input.targetCapacity,
          OnDemandTargetCapacity: this.__input.onDemandTargetCapacity,
          Context: this.__input.context,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifySpotFleetRequest.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyTrafficMirrorFilterNetworkServices {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTrafficMirrorFilterNetworkServicesRequest) {
  }

  public get trafficMirrorFilter(): EC2ResponsesModifyTrafficMirrorFilterNetworkServicesTrafficMirrorFilter {
    return new EC2ResponsesModifyTrafficMirrorFilterNetworkServicesTrafficMirrorFilter(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyTrafficMirrorFilterNetworkServicesTrafficMirrorFilter {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTrafficMirrorFilterNetworkServicesRequest) {
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilter.TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          AddNetworkServices: this.__input.addNetworkServices,
          RemoveNetworkServices: this.__input.removeNetworkServices,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilter.TrafficMirrorFilterId') as unknown as string;
  }

  public get ingressFilterRules(): shapes.Ec2TrafficMirrorFilterRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.IngressFilterRules'),
        outputPath: 'TrafficMirrorFilter.IngressFilterRules',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          AddNetworkServices: this.__input.addNetworkServices,
          RemoveNetworkServices: this.__input.removeNetworkServices,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.IngressFilterRules', props);
    return resource.getResponseField('TrafficMirrorFilter.IngressFilterRules') as unknown as shapes.Ec2TrafficMirrorFilterRule[];
  }

  public get egressFilterRules(): shapes.Ec2TrafficMirrorFilterRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.EgressFilterRules'),
        outputPath: 'TrafficMirrorFilter.EgressFilterRules',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          AddNetworkServices: this.__input.addNetworkServices,
          RemoveNetworkServices: this.__input.removeNetworkServices,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.EgressFilterRules', props);
    return resource.getResponseField('TrafficMirrorFilter.EgressFilterRules') as unknown as shapes.Ec2TrafficMirrorFilterRule[];
  }

  public get networkServices(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.NetworkServices'),
        outputPath: 'TrafficMirrorFilter.NetworkServices',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          AddNetworkServices: this.__input.addNetworkServices,
          RemoveNetworkServices: this.__input.removeNetworkServices,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.NetworkServices', props);
    return resource.getResponseField('TrafficMirrorFilter.NetworkServices') as unknown as string[];
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.Description'),
        outputPath: 'TrafficMirrorFilter.Description',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          AddNetworkServices: this.__input.addNetworkServices,
          RemoveNetworkServices: this.__input.removeNetworkServices,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.Description', props);
    return resource.getResponseField('TrafficMirrorFilter.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterNetworkServices',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.Tags'),
        outputPath: 'TrafficMirrorFilter.Tags',
        parameters: {
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          AddNetworkServices: this.__input.addNetworkServices,
          RemoveNetworkServices: this.__input.removeNetworkServices,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterNetworkServices.TrafficMirrorFilter.Tags', props);
    return resource.getResponseField('TrafficMirrorFilter.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesModifyTrafficMirrorFilterRule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest) {
  }

  public get trafficMirrorFilterRule(): EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRule {
    return new EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRule(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest) {
  }

  public get trafficMirrorFilterRuleId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId'),
        outputPath: 'TrafficMirrorFilterRule.TrafficMirrorFilterRuleId',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficMirrorFilterRuleId') as unknown as string;
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorFilterRule.TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficMirrorFilterId') as unknown as string;
  }

  public get trafficDirection(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficDirection'),
        outputPath: 'TrafficMirrorFilterRule.TrafficDirection',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.TrafficDirection', props);
    return resource.getResponseField('TrafficMirrorFilterRule.TrafficDirection') as unknown as string;
  }

  public get ruleNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleNumber'),
        outputPath: 'TrafficMirrorFilterRule.RuleNumber',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleNumber', props);
    return resource.getResponseField('TrafficMirrorFilterRule.RuleNumber') as unknown as number;
  }

  public get ruleAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleAction'),
        outputPath: 'TrafficMirrorFilterRule.RuleAction',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.RuleAction', props);
    return resource.getResponseField('TrafficMirrorFilterRule.RuleAction') as unknown as string;
  }

  public get protocol(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.Protocol'),
        outputPath: 'TrafficMirrorFilterRule.Protocol',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.Protocol', props);
    return resource.getResponseField('TrafficMirrorFilterRule.Protocol') as unknown as number;
  }

  public get destinationPortRange(): EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange {
    return new EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange(this.__scope, this.__resources, this.__input);
  }

  public get sourcePortRange(): EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange {
    return new EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange(this.__scope, this.__resources, this.__input);
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationCidrBlock'),
        outputPath: 'TrafficMirrorFilterRule.DestinationCidrBlock',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationCidrBlock', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationCidrBlock') as unknown as string;
  }

  public get sourceCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourceCidrBlock'),
        outputPath: 'TrafficMirrorFilterRule.SourceCidrBlock',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourceCidrBlock', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourceCidrBlock') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.Description'),
        outputPath: 'TrafficMirrorFilterRule.Description',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.Description', props);
    return resource.getResponseField('TrafficMirrorFilterRule.Description') as unknown as string;
  }

}

export class EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleDestinationPortRange {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest) {
  }

  public get fromPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.FromPort'),
        outputPath: 'TrafficMirrorFilterRule.DestinationPortRange.FromPort',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.FromPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationPortRange.FromPort') as unknown as number;
  }

  public get toPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.ToPort'),
        outputPath: 'TrafficMirrorFilterRule.DestinationPortRange.ToPort',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.DestinationPortRange.ToPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.DestinationPortRange.ToPort') as unknown as number;
  }

}

export class EC2ResponsesModifyTrafficMirrorFilterRuleTrafficMirrorFilterRuleSourcePortRange {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTrafficMirrorFilterRuleRequest) {
  }

  public get fromPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.FromPort'),
        outputPath: 'TrafficMirrorFilterRule.SourcePortRange.FromPort',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.FromPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourcePortRange.FromPort') as unknown as number;
  }

  public get toPort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorFilterRule',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.ToPort'),
        outputPath: 'TrafficMirrorFilterRule.SourcePortRange.ToPort',
        parameters: {
          TrafficMirrorFilterRuleId: this.__input.trafficMirrorFilterRuleId,
          TrafficDirection: this.__input.trafficDirection,
          RuleNumber: this.__input.ruleNumber,
          RuleAction: this.__input.ruleAction,
          DestinationPortRange: {
            FromPort: this.__input.destinationPortRange?.fromPort,
            ToPort: this.__input.destinationPortRange?.toPort,
          },
          SourcePortRange: {
            FromPort: this.__input.sourcePortRange?.fromPort,
            ToPort: this.__input.sourcePortRange?.toPort,
          },
          Protocol: this.__input.protocol,
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          SourceCidrBlock: this.__input.sourceCidrBlock,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorFilterRule.TrafficMirrorFilterRule.SourcePortRange.ToPort', props);
    return resource.getResponseField('TrafficMirrorFilterRule.SourcePortRange.ToPort') as unknown as number;
  }

}

export class EC2ResponsesModifyTrafficMirrorSession {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTrafficMirrorSessionRequest) {
  }

  public get trafficMirrorSession(): EC2ResponsesModifyTrafficMirrorSessionTrafficMirrorSession {
    return new EC2ResponsesModifyTrafficMirrorSessionTrafficMirrorSession(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyTrafficMirrorSessionTrafficMirrorSession {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTrafficMirrorSessionRequest) {
  }

  public get trafficMirrorSessionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorSessionId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorSessionId',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorSessionId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorSessionId') as unknown as string;
  }

  public get trafficMirrorTargetId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorTargetId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorTargetId',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorTargetId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorTargetId') as unknown as string;
  }

  public get trafficMirrorFilterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorFilterId'),
        outputPath: 'TrafficMirrorSession.TrafficMirrorFilterId',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.TrafficMirrorFilterId', props);
    return resource.getResponseField('TrafficMirrorSession.TrafficMirrorFilterId') as unknown as string;
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.NetworkInterfaceId'),
        outputPath: 'TrafficMirrorSession.NetworkInterfaceId',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.NetworkInterfaceId', props);
    return resource.getResponseField('TrafficMirrorSession.NetworkInterfaceId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.OwnerId'),
        outputPath: 'TrafficMirrorSession.OwnerId',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.OwnerId', props);
    return resource.getResponseField('TrafficMirrorSession.OwnerId') as unknown as string;
  }

  public get packetLength(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.PacketLength'),
        outputPath: 'TrafficMirrorSession.PacketLength',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.PacketLength', props);
    return resource.getResponseField('TrafficMirrorSession.PacketLength') as unknown as number;
  }

  public get sessionNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.SessionNumber'),
        outputPath: 'TrafficMirrorSession.SessionNumber',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.SessionNumber', props);
    return resource.getResponseField('TrafficMirrorSession.SessionNumber') as unknown as number;
  }

  public get virtualNetworkId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.VirtualNetworkId'),
        outputPath: 'TrafficMirrorSession.VirtualNetworkId',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.VirtualNetworkId', props);
    return resource.getResponseField('TrafficMirrorSession.VirtualNetworkId') as unknown as number;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.Description'),
        outputPath: 'TrafficMirrorSession.Description',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.Description', props);
    return resource.getResponseField('TrafficMirrorSession.Description') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTrafficMirrorSession',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTrafficMirrorSession.TrafficMirrorSession.Tags'),
        outputPath: 'TrafficMirrorSession.Tags',
        parameters: {
          TrafficMirrorSessionId: this.__input.trafficMirrorSessionId,
          TrafficMirrorTargetId: this.__input.trafficMirrorTargetId,
          TrafficMirrorFilterId: this.__input.trafficMirrorFilterId,
          PacketLength: this.__input.packetLength,
          SessionNumber: this.__input.sessionNumber,
          VirtualNetworkId: this.__input.virtualNetworkId,
          Description: this.__input.description,
          RemoveFields: this.__input.removeFields,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTrafficMirrorSession.TrafficMirrorSession.Tags', props);
    return resource.getResponseField('TrafficMirrorSession.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesModifyTransitGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayRequest) {
  }

  public get transitGateway(): EC2ResponsesModifyTransitGatewayTransitGateway {
    return new EC2ResponsesModifyTransitGatewayTransitGateway(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyTransitGatewayTransitGateway {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.TransitGatewayId'),
        outputPath: 'TransitGateway.TransitGatewayId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.TransitGatewayId', props);
    return resource.getResponseField('TransitGateway.TransitGatewayId') as unknown as string;
  }

  public get transitGatewayArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.TransitGatewayArn'),
        outputPath: 'TransitGateway.TransitGatewayArn',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.TransitGatewayArn', props);
    return resource.getResponseField('TransitGateway.TransitGatewayArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.State'),
        outputPath: 'TransitGateway.State',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.State', props);
    return resource.getResponseField('TransitGateway.State') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.OwnerId'),
        outputPath: 'TransitGateway.OwnerId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.OwnerId', props);
    return resource.getResponseField('TransitGateway.OwnerId') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Description'),
        outputPath: 'TransitGateway.Description',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Description', props);
    return resource.getResponseField('TransitGateway.Description') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.CreationTime'),
        outputPath: 'TransitGateway.CreationTime',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.CreationTime', props);
    return resource.getResponseField('TransitGateway.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesModifyTransitGatewayTransitGatewayOptions {
    return new EC2ResponsesModifyTransitGatewayTransitGatewayOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Tags'),
        outputPath: 'TransitGateway.Tags',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Tags', props);
    return resource.getResponseField('TransitGateway.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesModifyTransitGatewayTransitGatewayOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayRequest) {
  }

  public get amazonSideAsn(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.AmazonSideAsn'),
        outputPath: 'TransitGateway.Options.AmazonSideAsn',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.AmazonSideAsn', props);
    return resource.getResponseField('TransitGateway.Options.AmazonSideAsn') as unknown as number;
  }

  public get transitGatewayCidrBlocks(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.TransitGatewayCidrBlocks'),
        outputPath: 'TransitGateway.Options.TransitGatewayCidrBlocks',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.TransitGatewayCidrBlocks', props);
    return resource.getResponseField('TransitGateway.Options.TransitGatewayCidrBlocks') as unknown as string[];
  }

  public get autoAcceptSharedAttachments(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments'),
        outputPath: 'TransitGateway.Options.AutoAcceptSharedAttachments',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.AutoAcceptSharedAttachments', props);
    return resource.getResponseField('TransitGateway.Options.AutoAcceptSharedAttachments') as unknown as string;
  }

  public get defaultRouteTableAssociation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTableAssociation',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.DefaultRouteTableAssociation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTableAssociation') as unknown as string;
  }

  public get associationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.AssociationDefaultRouteTableId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.AssociationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.AssociationDefaultRouteTableId') as unknown as string;
  }

  public get defaultRouteTablePropagation(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation'),
        outputPath: 'TransitGateway.Options.DefaultRouteTablePropagation',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.DefaultRouteTablePropagation', props);
    return resource.getResponseField('TransitGateway.Options.DefaultRouteTablePropagation') as unknown as string;
  }

  public get propagationDefaultRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId'),
        outputPath: 'TransitGateway.Options.PropagationDefaultRouteTableId',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.PropagationDefaultRouteTableId', props);
    return resource.getResponseField('TransitGateway.Options.PropagationDefaultRouteTableId') as unknown as string;
  }

  public get vpnEcmpSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.VpnEcmpSupport'),
        outputPath: 'TransitGateway.Options.VpnEcmpSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.VpnEcmpSupport', props);
    return resource.getResponseField('TransitGateway.Options.VpnEcmpSupport') as unknown as string;
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.DnsSupport'),
        outputPath: 'TransitGateway.Options.DnsSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.DnsSupport', props);
    return resource.getResponseField('TransitGateway.Options.DnsSupport') as unknown as string;
  }

  public get multicastSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGateway',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGateway.TransitGateway.Options.MulticastSupport'),
        outputPath: 'TransitGateway.Options.MulticastSupport',
        parameters: {
          TransitGatewayId: this.__input.transitGatewayId,
          Description: this.__input.description,
          Options: {
            AddTransitGatewayCidrBlocks: this.__input.options?.addTransitGatewayCidrBlocks,
            RemoveTransitGatewayCidrBlocks: this.__input.options?.removeTransitGatewayCidrBlocks,
            VpnEcmpSupport: this.__input.options?.vpnEcmpSupport,
            DnsSupport: this.__input.options?.dnsSupport,
            AutoAcceptSharedAttachments: this.__input.options?.autoAcceptSharedAttachments,
            DefaultRouteTableAssociation: this.__input.options?.defaultRouteTableAssociation,
            AssociationDefaultRouteTableId: this.__input.options?.associationDefaultRouteTableId,
            DefaultRouteTablePropagation: this.__input.options?.defaultRouteTablePropagation,
            PropagationDefaultRouteTableId: this.__input.options?.propagationDefaultRouteTableId,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGateway.TransitGateway.Options.MulticastSupport', props);
    return resource.getResponseField('TransitGateway.Options.MulticastSupport') as unknown as string;
  }

}

export class EC2ResponsesModifyTransitGatewayPrefixListReference {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayPrefixListReference(): EC2ResponsesModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {
    return new EC2ResponsesModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReference {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayRouteTableId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayRouteTableId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayRouteTableId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayRouteTableId') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListId') as unknown as string;
  }

  public get prefixListOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId'),
        outputPath: 'TransitGatewayPrefixListReference.PrefixListOwnerId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.PrefixListOwnerId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.PrefixListOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State'),
        outputPath: 'TransitGatewayPrefixListReference.State',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.State', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.State') as unknown as string;
  }

  public get blackhole(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole'),
        outputPath: 'TransitGatewayPrefixListReference.Blackhole',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.Blackhole', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.Blackhole') as unknown as boolean;
  }

  public get transitGatewayAttachment(): EC2ResponsesModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {
    return new EC2ResponsesModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyTransitGatewayPrefixListReferenceTransitGatewayPrefixListReferenceTransitGatewayAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayPrefixListReferenceRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceType') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayPrefixListReference',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId'),
        outputPath: 'TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          PrefixListId: this.__input.prefixListId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayPrefixListReference.TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId', props);
    return resource.getResponseField('TransitGatewayPrefixListReference.TransitGatewayAttachment.ResourceId') as unknown as string;
  }

}

export class EC2ResponsesModifyTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayVpcAttachment(): EC2ResponsesModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2ResponsesModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2ResponsesModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesModifyTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyTransitGatewayVpcAttachmentRequest) {
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          Options: {
            DnsSupport: this.__input.options?.dnsSupport,
            Ipv6Support: this.__input.options?.ipv6Support,
            ApplianceModeSupport: this.__input.options?.applianceModeSupport,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2ResponsesModifyVolume {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVolumeRequest) {
  }

  public get volumeModification(): EC2ResponsesModifyVolumeVolumeModification {
    return new EC2ResponsesModifyVolumeVolumeModification(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyVolumeVolumeModification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVolumeRequest) {
  }

  public get volumeId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.VolumeId'),
        outputPath: 'VolumeModification.VolumeId',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.VolumeId', props);
    return resource.getResponseField('VolumeModification.VolumeId') as unknown as string;
  }

  public get modificationState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.ModificationState'),
        outputPath: 'VolumeModification.ModificationState',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.ModificationState', props);
    return resource.getResponseField('VolumeModification.ModificationState') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.StatusMessage'),
        outputPath: 'VolumeModification.StatusMessage',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.StatusMessage', props);
    return resource.getResponseField('VolumeModification.StatusMessage') as unknown as string;
  }

  public get targetSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.TargetSize'),
        outputPath: 'VolumeModification.TargetSize',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.TargetSize', props);
    return resource.getResponseField('VolumeModification.TargetSize') as unknown as number;
  }

  public get targetIops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.TargetIops'),
        outputPath: 'VolumeModification.TargetIops',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.TargetIops', props);
    return resource.getResponseField('VolumeModification.TargetIops') as unknown as number;
  }

  public get targetVolumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.TargetVolumeType'),
        outputPath: 'VolumeModification.TargetVolumeType',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.TargetVolumeType', props);
    return resource.getResponseField('VolumeModification.TargetVolumeType') as unknown as string;
  }

  public get targetThroughput(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.TargetThroughput'),
        outputPath: 'VolumeModification.TargetThroughput',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.TargetThroughput', props);
    return resource.getResponseField('VolumeModification.TargetThroughput') as unknown as number;
  }

  public get targetMultiAttachEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.TargetMultiAttachEnabled'),
        outputPath: 'VolumeModification.TargetMultiAttachEnabled',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.TargetMultiAttachEnabled', props);
    return resource.getResponseField('VolumeModification.TargetMultiAttachEnabled') as unknown as boolean;
  }

  public get originalSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.OriginalSize'),
        outputPath: 'VolumeModification.OriginalSize',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.OriginalSize', props);
    return resource.getResponseField('VolumeModification.OriginalSize') as unknown as number;
  }

  public get originalIops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.OriginalIops'),
        outputPath: 'VolumeModification.OriginalIops',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.OriginalIops', props);
    return resource.getResponseField('VolumeModification.OriginalIops') as unknown as number;
  }

  public get originalVolumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.OriginalVolumeType'),
        outputPath: 'VolumeModification.OriginalVolumeType',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.OriginalVolumeType', props);
    return resource.getResponseField('VolumeModification.OriginalVolumeType') as unknown as string;
  }

  public get originalThroughput(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.OriginalThroughput'),
        outputPath: 'VolumeModification.OriginalThroughput',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.OriginalThroughput', props);
    return resource.getResponseField('VolumeModification.OriginalThroughput') as unknown as number;
  }

  public get originalMultiAttachEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.OriginalMultiAttachEnabled'),
        outputPath: 'VolumeModification.OriginalMultiAttachEnabled',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.OriginalMultiAttachEnabled', props);
    return resource.getResponseField('VolumeModification.OriginalMultiAttachEnabled') as unknown as boolean;
  }

  public get progress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.Progress'),
        outputPath: 'VolumeModification.Progress',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.Progress', props);
    return resource.getResponseField('VolumeModification.Progress') as unknown as number;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.StartTime'),
        outputPath: 'VolumeModification.StartTime',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.StartTime', props);
    return resource.getResponseField('VolumeModification.StartTime') as unknown as string;
  }

  public get endTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVolume',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVolume.VolumeModification.EndTime'),
        outputPath: 'VolumeModification.EndTime',
        parameters: {
          DryRun: this.__input.dryRun,
          VolumeId: this.__input.volumeId,
          Size: this.__input.size,
          VolumeType: this.__input.volumeType,
          Iops: this.__input.iops,
          Throughput: this.__input.throughput,
          MultiAttachEnabled: this.__input.multiAttachEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVolume.VolumeModification.EndTime', props);
    return resource.getResponseField('VolumeModification.EndTime') as unknown as string;
  }

}

export class EC2ResponsesModifyVpcEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpcEndpointRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcEndpoint',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcEndpoint.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcEndpointId: this.__input.vpcEndpointId,
          ResetPolicy: this.__input.resetPolicy,
          PolicyDocument: this.__input.policyDocument,
          AddRouteTableIds: this.__input.addRouteTableIds,
          RemoveRouteTableIds: this.__input.removeRouteTableIds,
          AddSubnetIds: this.__input.addSubnetIds,
          RemoveSubnetIds: this.__input.removeSubnetIds,
          AddSecurityGroupIds: this.__input.addSecurityGroupIds,
          RemoveSecurityGroupIds: this.__input.removeSecurityGroupIds,
          PrivateDnsEnabled: this.__input.privateDnsEnabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcEndpoint.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyVpcEndpointConnectionNotification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpcEndpointConnectionNotificationRequest) {
  }

  public get returnValue(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcEndpointConnectionNotification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcEndpointConnectionNotification.ReturnValue'),
        outputPath: 'ReturnValue',
        parameters: {
          DryRun: this.__input.dryRun,
          ConnectionNotificationId: this.__input.connectionNotificationId,
          ConnectionNotificationArn: this.__input.connectionNotificationArn,
          ConnectionEvents: this.__input.connectionEvents,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcEndpointConnectionNotification.ReturnValue', props);
    return resource.getResponseField('ReturnValue') as unknown as boolean;
  }

}

export class EC2ResponsesModifyVpcEndpointServiceConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpcEndpointServiceConfigurationRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcEndpointServiceConfiguration',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcEndpointServiceConfiguration.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          PrivateDnsName: this.__input.privateDnsName,
          RemovePrivateDnsName: this.__input.removePrivateDnsName,
          AcceptanceRequired: this.__input.acceptanceRequired,
          AddNetworkLoadBalancerArns: this.__input.addNetworkLoadBalancerArns,
          RemoveNetworkLoadBalancerArns: this.__input.removeNetworkLoadBalancerArns,
          AddGatewayLoadBalancerArns: this.__input.addGatewayLoadBalancerArns,
          RemoveGatewayLoadBalancerArns: this.__input.removeGatewayLoadBalancerArns,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcEndpointServiceConfiguration.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesModifyVpcEndpointServicePermissions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpcEndpointServicePermissionsRequest) {
  }

  public get returnValue(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcEndpointServicePermissions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcEndpointServicePermissions.ReturnValue'),
        outputPath: 'ReturnValue',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          AddAllowedPrincipals: this.__input.addAllowedPrincipals,
          RemoveAllowedPrincipals: this.__input.removeAllowedPrincipals,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcEndpointServicePermissions.ReturnValue', props);
    return resource.getResponseField('ReturnValue') as unknown as boolean;
  }

}

export class EC2ResponsesModifyVpcPeeringConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpcPeeringConnectionOptionsRequest) {
  }

  public get accepterPeeringConnectionOptions(): EC2ResponsesModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions {
    return new EC2ResponsesModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions(this.__scope, this.__resources, this.__input);
  }

  public get requesterPeeringConnectionOptions(): EC2ResponsesModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions {
    return new EC2ResponsesModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpcPeeringConnectionOptionsRequest) {
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'AccepterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.__input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('AccepterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'AccepterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.__input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('AccepterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'AccepterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.__input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcPeeringConnectionOptions.AccepterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('AccepterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2ResponsesModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpcPeeringConnectionOptionsRequest) {
  }

  public get allowDnsResolutionFromRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc'),
        outputPath: 'RequesterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.__input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc', props);
    return resource.getResponseField('RequesterPeeringConnectionOptions.AllowDnsResolutionFromRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalClassicLinkToRemoteVpc(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc'),
        outputPath: 'RequesterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.__input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc', props);
    return resource.getResponseField('RequesterPeeringConnectionOptions.AllowEgressFromLocalClassicLinkToRemoteVpc') as unknown as boolean;
  }

  public get allowEgressFromLocalVpcToRemoteClassicLink(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcPeeringConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink'),
        outputPath: 'RequesterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink',
        parameters: {
          AccepterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.accepterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          DryRun: this.__input.dryRun,
          RequesterPeeringConnectionOptions: {
            AllowDnsResolutionFromRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowDnsResolutionFromRemoteVpc,
            AllowEgressFromLocalClassicLinkToRemoteVpc: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalClassicLinkToRemoteVpc,
            AllowEgressFromLocalVpcToRemoteClassicLink: this.__input.requesterPeeringConnectionOptions?.allowEgressFromLocalVpcToRemoteClassicLink,
          },
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcPeeringConnectionOptions.RequesterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink', props);
    return resource.getResponseField('RequesterPeeringConnectionOptions.AllowEgressFromLocalVpcToRemoteClassicLink') as unknown as boolean;
  }

}

export class EC2ResponsesModifyVpcTenancy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpcTenancyRequest) {
  }

  public get returnValue(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpcTenancy',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpcTenancy.ReturnValue'),
        outputPath: 'ReturnValue',
        parameters: {
          VpcId: this.__input.vpcId,
          InstanceTenancy: this.__input.instanceTenancy,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpcTenancy.ReturnValue', props);
    return resource.getResponseField('ReturnValue') as unknown as boolean;
  }

}

export class EC2ResponsesModifyVpnConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnConnectionRequest) {
  }

  public get vpnConnection(): EC2ResponsesModifyVpnConnectionVpnConnection {
    return new EC2ResponsesModifyVpnConnectionVpnConnection(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyVpnConnectionVpnConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnConnectionRequest) {
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ResponsesModifyVpnConnectionVpnConnectionOptions {
    return new EC2ResponsesModifyVpnConnectionVpnConnectionOptions(this.__scope, this.__resources, this.__input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ResponsesModifyVpnConnectionVpnConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnConnectionRequest) {
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnection.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          TransitGatewayId: this.__input.transitGatewayId,
          CustomerGatewayId: this.__input.customerGatewayId,
          VpnGatewayId: this.__input.vpnGatewayId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnection.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2ResponsesModifyVpnConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnConnectionOptionsRequest) {
  }

  public get vpnConnection(): EC2ResponsesModifyVpnConnectionOptionsVpnConnection {
    return new EC2ResponsesModifyVpnConnectionOptionsVpnConnection(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyVpnConnectionOptionsVpnConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnConnectionOptionsRequest) {
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ResponsesModifyVpnConnectionOptionsVpnConnectionOptions {
    return new EC2ResponsesModifyVpnConnectionOptionsVpnConnectionOptions(this.__scope, this.__resources, this.__input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ResponsesModifyVpnConnectionOptionsVpnConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnConnectionOptionsRequest) {
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnConnectionOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnConnectionOptions.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          LocalIpv4NetworkCidr: this.__input.localIpv4NetworkCidr,
          RemoteIpv4NetworkCidr: this.__input.remoteIpv4NetworkCidr,
          LocalIpv6NetworkCidr: this.__input.localIpv6NetworkCidr,
          RemoteIpv6NetworkCidr: this.__input.remoteIpv6NetworkCidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnConnectionOptions.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2ResponsesModifyVpnTunnelCertificate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnTunnelCertificateRequest) {
  }

  public get vpnConnection(): EC2ResponsesModifyVpnTunnelCertificateVpnConnection {
    return new EC2ResponsesModifyVpnTunnelCertificateVpnConnection(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyVpnTunnelCertificateVpnConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnTunnelCertificateRequest) {
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ResponsesModifyVpnTunnelCertificateVpnConnectionOptions {
    return new EC2ResponsesModifyVpnTunnelCertificateVpnConnectionOptions(this.__scope, this.__resources, this.__input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ResponsesModifyVpnTunnelCertificateVpnConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnTunnelCertificateRequest) {
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelCertificate',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelCertificate.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelCertificate.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2ResponsesModifyVpnTunnelOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnTunnelOptionsRequest) {
  }

  public get vpnConnection(): EC2ResponsesModifyVpnTunnelOptionsVpnConnection {
    return new EC2ResponsesModifyVpnTunnelOptionsVpnConnection(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesModifyVpnTunnelOptionsVpnConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnTunnelOptionsRequest) {
  }

  public get customerGatewayConfiguration(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.CustomerGatewayConfiguration'),
        outputPath: 'VpnConnection.CustomerGatewayConfiguration',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.CustomerGatewayConfiguration', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayConfiguration') as unknown as string;
  }

  public get customerGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.CustomerGatewayId'),
        outputPath: 'VpnConnection.CustomerGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.CustomerGatewayId', props);
    return resource.getResponseField('VpnConnection.CustomerGatewayId') as unknown as string;
  }

  public get category(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Category'),
        outputPath: 'VpnConnection.Category',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Category', props);
    return resource.getResponseField('VpnConnection.Category') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.State'),
        outputPath: 'VpnConnection.State',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.State', props);
    return resource.getResponseField('VpnConnection.State') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Type'),
        outputPath: 'VpnConnection.Type',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Type', props);
    return resource.getResponseField('VpnConnection.Type') as unknown as string;
  }

  public get vpnConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.VpnConnectionId'),
        outputPath: 'VpnConnection.VpnConnectionId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.VpnConnectionId', props);
    return resource.getResponseField('VpnConnection.VpnConnectionId') as unknown as string;
  }

  public get vpnGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.VpnGatewayId'),
        outputPath: 'VpnConnection.VpnGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.VpnGatewayId', props);
    return resource.getResponseField('VpnConnection.VpnGatewayId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.TransitGatewayId'),
        outputPath: 'VpnConnection.TransitGatewayId',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.TransitGatewayId', props);
    return resource.getResponseField('VpnConnection.TransitGatewayId') as unknown as string;
  }

  public get options(): EC2ResponsesModifyVpnTunnelOptionsVpnConnectionOptions {
    return new EC2ResponsesModifyVpnTunnelOptionsVpnConnectionOptions(this.__scope, this.__resources, this.__input);
  }

  public get routes(): shapes.Ec2VpnStaticRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Routes'),
        outputPath: 'VpnConnection.Routes',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Routes', props);
    return resource.getResponseField('VpnConnection.Routes') as unknown as shapes.Ec2VpnStaticRoute[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Tags'),
        outputPath: 'VpnConnection.Tags',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Tags', props);
    return resource.getResponseField('VpnConnection.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get vgwTelemetry(): shapes.Ec2VgwTelemetry[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.VgwTelemetry'),
        outputPath: 'VpnConnection.VgwTelemetry',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.VgwTelemetry', props);
    return resource.getResponseField('VpnConnection.VgwTelemetry') as unknown as shapes.Ec2VgwTelemetry[];
  }

}

export class EC2ResponsesModifyVpnTunnelOptionsVpnConnectionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ModifyVpnTunnelOptionsRequest) {
  }

  public get enableAcceleration(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.EnableAcceleration'),
        outputPath: 'VpnConnection.Options.EnableAcceleration',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Options.EnableAcceleration', props);
    return resource.getResponseField('VpnConnection.Options.EnableAcceleration') as unknown as boolean;
  }

  public get staticRoutesOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.StaticRoutesOnly'),
        outputPath: 'VpnConnection.Options.StaticRoutesOnly',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Options.StaticRoutesOnly', props);
    return resource.getResponseField('VpnConnection.Options.StaticRoutesOnly') as unknown as boolean;
  }

  public get localIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.LocalIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Options.LocalIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv4NetworkCidr') as unknown as string;
  }

  public get remoteIpv4NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.RemoteIpv4NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv4NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Options.RemoteIpv4NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv4NetworkCidr') as unknown as string;
  }

  public get localIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.LocalIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.LocalIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Options.LocalIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.LocalIpv6NetworkCidr') as unknown as string;
  }

  public get remoteIpv6NetworkCidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.RemoteIpv6NetworkCidr'),
        outputPath: 'VpnConnection.Options.RemoteIpv6NetworkCidr',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Options.RemoteIpv6NetworkCidr', props);
    return resource.getResponseField('VpnConnection.Options.RemoteIpv6NetworkCidr') as unknown as string;
  }

  public get tunnelInsideIpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.TunnelInsideIpVersion'),
        outputPath: 'VpnConnection.Options.TunnelInsideIpVersion',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Options.TunnelInsideIpVersion', props);
    return resource.getResponseField('VpnConnection.Options.TunnelInsideIpVersion') as unknown as string;
  }

  public get tunnelOptions(): shapes.Ec2TunnelOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyVpnTunnelOptions',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ModifyVpnTunnelOptions.VpnConnection.Options.TunnelOptions'),
        outputPath: 'VpnConnection.Options.TunnelOptions',
        parameters: {
          VpnConnectionId: this.__input.vpnConnectionId,
          VpnTunnelOutsideIpAddress: this.__input.vpnTunnelOutsideIpAddress,
          TunnelOptions: {
            TunnelInsideCidr: this.__input.tunnelOptions.tunnelInsideCidr,
            TunnelInsideIpv6Cidr: this.__input.tunnelOptions.tunnelInsideIpv6Cidr,
            PreSharedKey: this.__input.tunnelOptions.preSharedKey,
            Phase1LifetimeSeconds: this.__input.tunnelOptions.phase1LifetimeSeconds,
            Phase2LifetimeSeconds: this.__input.tunnelOptions.phase2LifetimeSeconds,
            RekeyMarginTimeSeconds: this.__input.tunnelOptions.rekeyMarginTimeSeconds,
            RekeyFuzzPercentage: this.__input.tunnelOptions.rekeyFuzzPercentage,
            ReplayWindowSize: this.__input.tunnelOptions.replayWindowSize,
            DPDTimeoutSeconds: this.__input.tunnelOptions.dpdTimeoutSeconds,
            DPDTimeoutAction: this.__input.tunnelOptions.dpdTimeoutAction,
            Phase1EncryptionAlgorithms: this.__input.tunnelOptions.phase1EncryptionAlgorithms,
            Phase2EncryptionAlgorithms: this.__input.tunnelOptions.phase2EncryptionAlgorithms,
            Phase1IntegrityAlgorithms: this.__input.tunnelOptions.phase1IntegrityAlgorithms,
            Phase2IntegrityAlgorithms: this.__input.tunnelOptions.phase2IntegrityAlgorithms,
            Phase1DHGroupNumbers: this.__input.tunnelOptions.phase1DhGroupNumbers,
            Phase2DHGroupNumbers: this.__input.tunnelOptions.phase2DhGroupNumbers,
            IKEVersions: this.__input.tunnelOptions.ikeVersions,
            StartupAction: this.__input.tunnelOptions.startupAction,
          },
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyVpnTunnelOptions.VpnConnection.Options.TunnelOptions', props);
    return resource.getResponseField('VpnConnection.Options.TunnelOptions') as unknown as shapes.Ec2TunnelOption[];
  }

}

export class EC2ResponsesMonitorInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2MonitorInstancesRequest) {
  }

  public get instanceMonitorings(): shapes.Ec2InstanceMonitoring[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'monitorInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.MonitorInstances.InstanceMonitorings'),
        outputPath: 'InstanceMonitorings',
        parameters: {
          InstanceIds: this.__input.instanceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'MonitorInstances.InstanceMonitorings', props);
    return resource.getResponseField('InstanceMonitorings') as unknown as shapes.Ec2InstanceMonitoring[];
  }

}

export class EC2ResponsesMoveAddressToVpc {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2MoveAddressToVpcRequest) {
  }

  public get allocationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'moveAddressToVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.MoveAddressToVpc.AllocationId'),
        outputPath: 'AllocationId',
        parameters: {
          DryRun: this.__input.dryRun,
          PublicIp: this.__input.publicIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'MoveAddressToVpc.AllocationId', props);
    return resource.getResponseField('AllocationId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'moveAddressToVpc',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.MoveAddressToVpc.Status'),
        outputPath: 'Status',
        parameters: {
          DryRun: this.__input.dryRun,
          PublicIp: this.__input.publicIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'MoveAddressToVpc.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class EC2ResponsesProvisionByoipCidr {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ProvisionByoipCidrRequest) {
  }

  public get byoipCidr(): EC2ResponsesProvisionByoipCidrByoipCidr {
    return new EC2ResponsesProvisionByoipCidrByoipCidr(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesProvisionByoipCidrByoipCidr {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ProvisionByoipCidrRequest) {
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'provisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ProvisionByoipCidr.ByoipCidr.Cidr'),
        outputPath: 'ByoipCidr.Cidr',
        parameters: {
          Cidr: this.__input.cidr,
          CidrAuthorizationContext: {
            Message: this.__input.cidrAuthorizationContext?.message,
            Signature: this.__input.cidrAuthorizationContext?.signature,
          },
          PubliclyAdvertisable: this.__input.publiclyAdvertisable,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          PoolTagSpecifications: this.__input.poolTagSpecifications,
          MultiRegion: this.__input.multiRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ProvisionByoipCidr.ByoipCidr.Cidr', props);
    return resource.getResponseField('ByoipCidr.Cidr') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'provisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ProvisionByoipCidr.ByoipCidr.Description'),
        outputPath: 'ByoipCidr.Description',
        parameters: {
          Cidr: this.__input.cidr,
          CidrAuthorizationContext: {
            Message: this.__input.cidrAuthorizationContext?.message,
            Signature: this.__input.cidrAuthorizationContext?.signature,
          },
          PubliclyAdvertisable: this.__input.publiclyAdvertisable,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          PoolTagSpecifications: this.__input.poolTagSpecifications,
          MultiRegion: this.__input.multiRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ProvisionByoipCidr.ByoipCidr.Description', props);
    return resource.getResponseField('ByoipCidr.Description') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'provisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ProvisionByoipCidr.ByoipCidr.StatusMessage'),
        outputPath: 'ByoipCidr.StatusMessage',
        parameters: {
          Cidr: this.__input.cidr,
          CidrAuthorizationContext: {
            Message: this.__input.cidrAuthorizationContext?.message,
            Signature: this.__input.cidrAuthorizationContext?.signature,
          },
          PubliclyAdvertisable: this.__input.publiclyAdvertisable,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          PoolTagSpecifications: this.__input.poolTagSpecifications,
          MultiRegion: this.__input.multiRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ProvisionByoipCidr.ByoipCidr.StatusMessage', props);
    return resource.getResponseField('ByoipCidr.StatusMessage') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'provisionByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ProvisionByoipCidr.ByoipCidr.State'),
        outputPath: 'ByoipCidr.State',
        parameters: {
          Cidr: this.__input.cidr,
          CidrAuthorizationContext: {
            Message: this.__input.cidrAuthorizationContext?.message,
            Signature: this.__input.cidrAuthorizationContext?.signature,
          },
          PubliclyAdvertisable: this.__input.publiclyAdvertisable,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          PoolTagSpecifications: this.__input.poolTagSpecifications,
          MultiRegion: this.__input.multiRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ProvisionByoipCidr.ByoipCidr.State', props);
    return resource.getResponseField('ByoipCidr.State') as unknown as string;
  }

}

export class EC2ResponsesPurchaseHostReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2PurchaseHostReservationRequest) {
  }

  public get clientToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.ClientToken'),
        outputPath: 'ClientToken',
        parameters: {
          ClientToken: this.__input.clientToken,
          CurrencyCode: this.__input.currencyCode,
          HostIdSet: this.__input.hostIdSet,
          LimitPrice: this.__input.limitPrice,
          OfferingId: this.__input.offeringId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseHostReservation.ClientToken', props);
    return resource.getResponseField('ClientToken') as unknown as string;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          ClientToken: this.__input.clientToken,
          CurrencyCode: this.__input.currencyCode,
          HostIdSet: this.__input.hostIdSet,
          LimitPrice: this.__input.limitPrice,
          OfferingId: this.__input.offeringId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseHostReservation.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get purchase(): shapes.Ec2Purchase[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.Purchase'),
        outputPath: 'Purchase',
        parameters: {
          ClientToken: this.__input.clientToken,
          CurrencyCode: this.__input.currencyCode,
          HostIdSet: this.__input.hostIdSet,
          LimitPrice: this.__input.limitPrice,
          OfferingId: this.__input.offeringId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseHostReservation.Purchase', props);
    return resource.getResponseField('Purchase') as unknown as shapes.Ec2Purchase[];
  }

  public get totalHourlyPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.TotalHourlyPrice'),
        outputPath: 'TotalHourlyPrice',
        parameters: {
          ClientToken: this.__input.clientToken,
          CurrencyCode: this.__input.currencyCode,
          HostIdSet: this.__input.hostIdSet,
          LimitPrice: this.__input.limitPrice,
          OfferingId: this.__input.offeringId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseHostReservation.TotalHourlyPrice', props);
    return resource.getResponseField('TotalHourlyPrice') as unknown as string;
  }

  public get totalUpfrontPrice(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseHostReservation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseHostReservation.TotalUpfrontPrice'),
        outputPath: 'TotalUpfrontPrice',
        parameters: {
          ClientToken: this.__input.clientToken,
          CurrencyCode: this.__input.currencyCode,
          HostIdSet: this.__input.hostIdSet,
          LimitPrice: this.__input.limitPrice,
          OfferingId: this.__input.offeringId,
          TagSpecifications: this.__input.tagSpecifications,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseHostReservation.TotalUpfrontPrice', props);
    return resource.getResponseField('TotalUpfrontPrice') as unknown as string;
  }

}

export class EC2ResponsesPurchaseReservedInstancesOffering {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2PurchaseReservedInstancesOfferingRequest) {
  }

  public get reservedInstancesId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedInstancesOffering',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseReservedInstancesOffering.ReservedInstancesId'),
        outputPath: 'ReservedInstancesId',
        parameters: {
          InstanceCount: this.__input.instanceCount,
          ReservedInstancesOfferingId: this.__input.reservedInstancesOfferingId,
          DryRun: this.__input.dryRun,
          LimitPrice: {
            Amount: this.__input.limitPrice?.amount,
            CurrencyCode: this.__input.limitPrice?.currencyCode,
          },
          PurchaseTime: this.__input.purchaseTime,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedInstancesOffering.ReservedInstancesId', props);
    return resource.getResponseField('ReservedInstancesId') as unknown as string;
  }

}

export class EC2ResponsesPurchaseScheduledInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2PurchaseScheduledInstancesRequest) {
  }

  public get scheduledInstanceSet(): shapes.Ec2ScheduledInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseScheduledInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.PurchaseScheduledInstances.ScheduledInstanceSet'),
        outputPath: 'ScheduledInstanceSet',
        parameters: {
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          PurchaseRequests: this.__input.purchaseRequests,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseScheduledInstances.ScheduledInstanceSet', props);
    return resource.getResponseField('ScheduledInstanceSet') as unknown as shapes.Ec2ScheduledInstance[];
  }

}

export class EC2ResponsesRegisterImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RegisterImageRequest) {
  }

  public get imageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerImage',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterImage.ImageId'),
        outputPath: 'ImageId',
        parameters: {
          ImageLocation: this.__input.imageLocation,
          Architecture: this.__input.architecture,
          BlockDeviceMappings: this.__input.blockDeviceMappings,
          Description: this.__input.description,
          DryRun: this.__input.dryRun,
          EnaSupport: this.__input.enaSupport,
          KernelId: this.__input.kernelId,
          Name: this.__input.name,
          BillingProducts: this.__input.billingProducts,
          RamdiskId: this.__input.ramdiskId,
          RootDeviceName: this.__input.rootDeviceName,
          SriovNetSupport: this.__input.sriovNetSupport,
          VirtualizationType: this.__input.virtualizationType,
          BootMode: this.__input.bootMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterImage.ImageId', props);
    return resource.getResponseField('ImageId') as unknown as string;
  }

}

export class EC2ResponsesRegisterInstanceEventNotificationAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RegisterInstanceEventNotificationAttributesRequest) {
  }

  public get instanceTagAttribute(): EC2ResponsesRegisterInstanceEventNotificationAttributesInstanceTagAttribute {
    return new EC2ResponsesRegisterInstanceEventNotificationAttributesInstanceTagAttribute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesRegisterInstanceEventNotificationAttributesInstanceTagAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RegisterInstanceEventNotificationAttributesRequest) {
  }

  public get instanceTagKeys(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys'),
        outputPath: 'InstanceTagAttribute.InstanceTagKeys',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceTagAttribute: {
            IncludeAllTagsOfInstance: this.__input.instanceTagAttribute?.includeAllTagsOfInstance,
            InstanceTagKeys: this.__input.instanceTagAttribute?.instanceTagKeys,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterInstanceEventNotificationAttributes.InstanceTagAttribute.InstanceTagKeys', props);
    return resource.getResponseField('InstanceTagAttribute.InstanceTagKeys') as unknown as string[];
  }

  public get includeAllTagsOfInstance(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerInstanceEventNotificationAttributes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance'),
        outputPath: 'InstanceTagAttribute.IncludeAllTagsOfInstance',
        parameters: {
          DryRun: this.__input.dryRun,
          InstanceTagAttribute: {
            IncludeAllTagsOfInstance: this.__input.instanceTagAttribute?.includeAllTagsOfInstance,
            InstanceTagKeys: this.__input.instanceTagAttribute?.instanceTagKeys,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterInstanceEventNotificationAttributes.InstanceTagAttribute.IncludeAllTagsOfInstance', props);
    return resource.getResponseField('InstanceTagAttribute.IncludeAllTagsOfInstance') as unknown as boolean;
  }

}

export class EC2ResponsesRegisterTransitGatewayMulticastGroupMembers {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RegisterTransitGatewayMulticastGroupMembersRequest) {
  }

  public get registeredMulticastGroupMembers(): EC2ResponsesRegisterTransitGatewayMulticastGroupMembersRegisteredMulticastGroupMembers {
    return new EC2ResponsesRegisterTransitGatewayMulticastGroupMembersRegisteredMulticastGroupMembers(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesRegisterTransitGatewayMulticastGroupMembersRegisteredMulticastGroupMembers {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RegisterTransitGatewayMulticastGroupMembersRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.TransitGatewayMulticastDomainId'),
        outputPath: 'RegisteredMulticastGroupMembers.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('RegisteredMulticastGroupMembers.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get registeredNetworkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.RegisteredNetworkInterfaceIds'),
        outputPath: 'RegisteredMulticastGroupMembers.RegisteredNetworkInterfaceIds',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.RegisteredNetworkInterfaceIds', props);
    return resource.getResponseField('RegisteredMulticastGroupMembers.RegisteredNetworkInterfaceIds') as unknown as string[];
  }

  public get groupIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupMembers',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.GroupIpAddress'),
        outputPath: 'RegisteredMulticastGroupMembers.GroupIpAddress',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterTransitGatewayMulticastGroupMembers.RegisteredMulticastGroupMembers.GroupIpAddress', props);
    return resource.getResponseField('RegisteredMulticastGroupMembers.GroupIpAddress') as unknown as string;
  }

}

export class EC2ResponsesRegisterTransitGatewayMulticastGroupSources {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RegisterTransitGatewayMulticastGroupSourcesRequest) {
  }

  public get registeredMulticastGroupSources(): EC2ResponsesRegisterTransitGatewayMulticastGroupSourcesRegisteredMulticastGroupSources {
    return new EC2ResponsesRegisterTransitGatewayMulticastGroupSourcesRegisteredMulticastGroupSources(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesRegisterTransitGatewayMulticastGroupSourcesRegisteredMulticastGroupSources {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RegisterTransitGatewayMulticastGroupSourcesRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.TransitGatewayMulticastDomainId'),
        outputPath: 'RegisteredMulticastGroupSources.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('RegisteredMulticastGroupSources.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get registeredNetworkInterfaceIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.RegisteredNetworkInterfaceIds'),
        outputPath: 'RegisteredMulticastGroupSources.RegisteredNetworkInterfaceIds',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.RegisteredNetworkInterfaceIds', props);
    return resource.getResponseField('RegisteredMulticastGroupSources.RegisteredNetworkInterfaceIds') as unknown as string[];
  }

  public get groupIpAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerTransitGatewayMulticastGroupSources',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.GroupIpAddress'),
        outputPath: 'RegisteredMulticastGroupSources.GroupIpAddress',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          GroupIpAddress: this.__input.groupIpAddress,
          NetworkInterfaceIds: this.__input.networkInterfaceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterTransitGatewayMulticastGroupSources.RegisteredMulticastGroupSources.GroupIpAddress', props);
    return resource.getResponseField('RegisteredMulticastGroupSources.GroupIpAddress') as unknown as string;
  }

}

export class EC2ResponsesRejectTransitGatewayMulticastDomainAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayMulticastDomainAssociationsRequest) {
  }

  public get associations(): EC2ResponsesRejectTransitGatewayMulticastDomainAssociationsAssociations {
    return new EC2ResponsesRejectTransitGatewayMulticastDomainAssociationsAssociations(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesRejectTransitGatewayMulticastDomainAssociationsAssociations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayMulticastDomainAssociationsRequest) {
  }

  public get transitGatewayMulticastDomainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayMulticastDomainAssociations.Associations.TransitGatewayMulticastDomainId'),
        outputPath: 'Associations.TransitGatewayMulticastDomainId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayMulticastDomainAssociations.Associations.TransitGatewayMulticastDomainId', props);
    return resource.getResponseField('Associations.TransitGatewayMulticastDomainId') as unknown as string;
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayMulticastDomainAssociations.Associations.TransitGatewayAttachmentId'),
        outputPath: 'Associations.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayMulticastDomainAssociations.Associations.TransitGatewayAttachmentId', props);
    return resource.getResponseField('Associations.TransitGatewayAttachmentId') as unknown as string;
  }

  public get resourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayMulticastDomainAssociations.Associations.ResourceId'),
        outputPath: 'Associations.ResourceId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayMulticastDomainAssociations.Associations.ResourceId', props);
    return resource.getResponseField('Associations.ResourceId') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayMulticastDomainAssociations.Associations.ResourceType'),
        outputPath: 'Associations.ResourceType',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayMulticastDomainAssociations.Associations.ResourceType', props);
    return resource.getResponseField('Associations.ResourceType') as unknown as string;
  }

  public get resourceOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayMulticastDomainAssociations.Associations.ResourceOwnerId'),
        outputPath: 'Associations.ResourceOwnerId',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayMulticastDomainAssociations.Associations.ResourceOwnerId', props);
    return resource.getResponseField('Associations.ResourceOwnerId') as unknown as string;
  }

  public get subnets(): shapes.Ec2SubnetAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayMulticastDomainAssociations',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayMulticastDomainAssociations.Associations.Subnets'),
        outputPath: 'Associations.Subnets',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          SubnetIds: this.__input.subnetIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayMulticastDomainAssociations.Associations.Subnets', props);
    return resource.getResponseField('Associations.Subnets') as unknown as shapes.Ec2SubnetAssociation[];
  }

}

export class EC2ResponsesRejectTransitGatewayPeeringAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayPeeringAttachment(): EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {
    return new EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayPeeringAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get requesterTgwInfo(): EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {
    return new EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo(this.__scope, this.__resources, this.__input);
  }

  public get accepterTgwInfo(): EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {
    return new EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo(this.__scope, this.__resources, this.__input);
  }

  public get status(): EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {
    return new EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State'),
        outputPath: 'TransitGatewayPeeringAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.State', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.State') as unknown as string;
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime'),
        outputPath: 'TransitGatewayPeeringAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.CreationTime') as unknown as string;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags'),
        outputPath: 'TransitGatewayPeeringAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentRequesterTgwInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.RequesterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.RequesterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.RequesterTgwInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentAccepterTgwInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.TransitGatewayId') as unknown as string;
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.OwnerId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region'),
        outputPath: 'TransitGatewayPeeringAttachment.AccepterTgwInfo.Region',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.AccepterTgwInfo.Region', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.AccepterTgwInfo.Region') as unknown as string;
  }

}

export class EC2ResponsesRejectTransitGatewayPeeringAttachmentTransitGatewayPeeringAttachmentStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayPeeringAttachmentRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Code',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Code', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayPeeringAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message'),
        outputPath: 'TransitGatewayPeeringAttachment.Status.Message',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayPeeringAttachment.TransitGatewayPeeringAttachment.Status.Message', props);
    return resource.getResponseField('TransitGatewayPeeringAttachment.Status.Message') as unknown as string;
  }

}

export class EC2ResponsesRejectTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayVpcAttachment(): EC2ResponsesRejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {
    return new EC2ResponsesRejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachment(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesRejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachment {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayVpcAttachmentRequest) {
  }

  public get transitGatewayAttachmentId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayAttachmentId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayAttachmentId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayAttachmentId') as unknown as string;
  }

  public get transitGatewayId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId'),
        outputPath: 'TransitGatewayVpcAttachment.TransitGatewayId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.TransitGatewayId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.TransitGatewayId') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcId') as unknown as string;
  }

  public get vpcOwnerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId'),
        outputPath: 'TransitGatewayVpcAttachment.VpcOwnerId',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.VpcOwnerId', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.VpcOwnerId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State'),
        outputPath: 'TransitGatewayVpcAttachment.State',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.State', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.State') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds'),
        outputPath: 'TransitGatewayVpcAttachment.SubnetIds',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.SubnetIds', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.SubnetIds') as unknown as string[];
  }

  public get creationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime'),
        outputPath: 'TransitGatewayVpcAttachment.CreationTime',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.CreationTime', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.CreationTime') as unknown as string;
  }

  public get options(): EC2ResponsesRejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {
    return new EC2ResponsesRejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions(this.__scope, this.__resources, this.__input);
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags'),
        outputPath: 'TransitGatewayVpcAttachment.Tags',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Tags', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesRejectTransitGatewayVpcAttachmentTransitGatewayVpcAttachmentOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectTransitGatewayVpcAttachmentRequest) {
  }

  public get dnsSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.DnsSupport',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.DnsSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.DnsSupport') as unknown as string;
  }

  public get ipv6Support(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support'),
        outputPath: 'TransitGatewayVpcAttachment.Options.Ipv6Support',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.Ipv6Support', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.Ipv6Support') as unknown as string;
  }

  public get applianceModeSupport(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectTransitGatewayVpcAttachment',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport'),
        outputPath: 'TransitGatewayVpcAttachment.Options.ApplianceModeSupport',
        parameters: {
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectTransitGatewayVpcAttachment.TransitGatewayVpcAttachment.Options.ApplianceModeSupport', props);
    return resource.getResponseField('TransitGatewayVpcAttachment.Options.ApplianceModeSupport') as unknown as string;
  }

}

export class EC2ResponsesRejectVpcEndpointConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectVpcEndpointConnectionsRequest) {
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectVpcEndpointConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectVpcEndpointConnections.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
          VpcEndpointIds: this.__input.vpcEndpointIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectVpcEndpointConnections.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesRejectVpcPeeringConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RejectVpcPeeringConnectionRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectVpcPeeringConnection',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RejectVpcPeeringConnection.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          VpcPeeringConnectionId: this.__input.vpcPeeringConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectVpcPeeringConnection.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesReleaseHosts {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReleaseHostsRequest) {
  }

  public get successful(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'releaseHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReleaseHosts.Successful'),
        outputPath: 'Successful',
        parameters: {
          HostIds: this.__input.hostIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReleaseHosts.Successful', props);
    return resource.getResponseField('Successful') as unknown as string[];
  }

  public get unsuccessful(): shapes.Ec2UnsuccessfulItem[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'releaseHosts',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReleaseHosts.Unsuccessful'),
        outputPath: 'Unsuccessful',
        parameters: {
          HostIds: this.__input.hostIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReleaseHosts.Unsuccessful', props);
    return resource.getResponseField('Unsuccessful') as unknown as shapes.Ec2UnsuccessfulItem[];
  }

}

export class EC2ResponsesReplaceIamInstanceProfileAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReplaceIamInstanceProfileAssociationRequest) {
  }

  public get iamInstanceProfileAssociation(): EC2ResponsesReplaceIamInstanceProfileAssociationIamInstanceProfileAssociation {
    return new EC2ResponsesReplaceIamInstanceProfileAssociationIamInstanceProfileAssociation(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesReplaceIamInstanceProfileAssociationIamInstanceProfileAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReplaceIamInstanceProfileAssociationRequest) {
  }

  public get associationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.AssociationId'),
        outputPath: 'IamInstanceProfileAssociation.AssociationId',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.AssociationId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.AssociationId') as unknown as string;
  }

  public get instanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.InstanceId'),
        outputPath: 'IamInstanceProfileAssociation.InstanceId',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.InstanceId', props);
    return resource.getResponseField('IamInstanceProfileAssociation.InstanceId') as unknown as string;
  }

  public get iamInstanceProfile(): EC2ResponsesReplaceIamInstanceProfileAssociationIamInstanceProfileAssociationIamInstanceProfile {
    return new EC2ResponsesReplaceIamInstanceProfileAssociationIamInstanceProfileAssociationIamInstanceProfile(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.State'),
        outputPath: 'IamInstanceProfileAssociation.State',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.State', props);
    return resource.getResponseField('IamInstanceProfileAssociation.State') as unknown as string;
  }

  public get timestamp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.Timestamp'),
        outputPath: 'IamInstanceProfileAssociation.Timestamp',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.Timestamp', props);
    return resource.getResponseField('IamInstanceProfileAssociation.Timestamp') as unknown as string;
  }

}

export class EC2ResponsesReplaceIamInstanceProfileAssociationIamInstanceProfileAssociationIamInstanceProfile {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReplaceIamInstanceProfileAssociationRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.IamInstanceProfile.Arn'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Arn',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.IamInstanceProfile.Arn', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceIamInstanceProfileAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.IamInstanceProfile.Id'),
        outputPath: 'IamInstanceProfileAssociation.IamInstanceProfile.Id',
        parameters: {
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile.arn,
            Name: this.__input.iamInstanceProfile.name,
          },
          AssociationId: this.__input.associationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceIamInstanceProfileAssociation.IamInstanceProfileAssociation.IamInstanceProfile.Id', props);
    return resource.getResponseField('IamInstanceProfileAssociation.IamInstanceProfile.Id') as unknown as string;
  }

}

export class EC2ResponsesReplaceNetworkAclAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReplaceNetworkAclAssociationRequest) {
  }

  public get newAssociationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceNetworkAclAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceNetworkAclAssociation.NewAssociationId'),
        outputPath: 'NewAssociationId',
        parameters: {
          AssociationId: this.__input.associationId,
          DryRun: this.__input.dryRun,
          NetworkAclId: this.__input.networkAclId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceNetworkAclAssociation.NewAssociationId', props);
    return resource.getResponseField('NewAssociationId') as unknown as string;
  }

}

export class EC2ResponsesReplaceRouteTableAssociation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReplaceRouteTableAssociationRequest) {
  }

  public get newAssociationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceRouteTableAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceRouteTableAssociation.NewAssociationId'),
        outputPath: 'NewAssociationId',
        parameters: {
          AssociationId: this.__input.associationId,
          DryRun: this.__input.dryRun,
          RouteTableId: this.__input.routeTableId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceRouteTableAssociation.NewAssociationId', props);
    return resource.getResponseField('NewAssociationId') as unknown as string;
  }

  public get associationState(): EC2ResponsesReplaceRouteTableAssociationAssociationState {
    return new EC2ResponsesReplaceRouteTableAssociationAssociationState(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesReplaceRouteTableAssociationAssociationState {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReplaceRouteTableAssociationRequest) {
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceRouteTableAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceRouteTableAssociation.AssociationState.State'),
        outputPath: 'AssociationState.State',
        parameters: {
          AssociationId: this.__input.associationId,
          DryRun: this.__input.dryRun,
          RouteTableId: this.__input.routeTableId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceRouteTableAssociation.AssociationState.State', props);
    return resource.getResponseField('AssociationState.State') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceRouteTableAssociation',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceRouteTableAssociation.AssociationState.StatusMessage'),
        outputPath: 'AssociationState.StatusMessage',
        parameters: {
          AssociationId: this.__input.associationId,
          DryRun: this.__input.dryRun,
          RouteTableId: this.__input.routeTableId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceRouteTableAssociation.AssociationState.StatusMessage', props);
    return resource.getResponseField('AssociationState.StatusMessage') as unknown as string;
  }

}

export class EC2ResponsesReplaceTransitGatewayRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReplaceTransitGatewayRouteRequest) {
  }

  public get route(): EC2ResponsesReplaceTransitGatewayRouteRoute {
    return new EC2ResponsesReplaceTransitGatewayRouteRoute(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesReplaceTransitGatewayRouteRoute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ReplaceTransitGatewayRouteRequest) {
  }

  public get destinationCidrBlock(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.DestinationCidrBlock'),
        outputPath: 'Route.DestinationCidrBlock',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceTransitGatewayRoute.Route.DestinationCidrBlock', props);
    return resource.getResponseField('Route.DestinationCidrBlock') as unknown as string;
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.PrefixListId'),
        outputPath: 'Route.PrefixListId',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceTransitGatewayRoute.Route.PrefixListId', props);
    return resource.getResponseField('Route.PrefixListId') as unknown as string;
  }

  public get transitGatewayAttachments(): shapes.Ec2TransitGatewayRouteAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.TransitGatewayAttachments'),
        outputPath: 'Route.TransitGatewayAttachments',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceTransitGatewayRoute.Route.TransitGatewayAttachments', props);
    return resource.getResponseField('Route.TransitGatewayAttachments') as unknown as shapes.Ec2TransitGatewayRouteAttachment[];
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.Type'),
        outputPath: 'Route.Type',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceTransitGatewayRoute.Route.Type', props);
    return resource.getResponseField('Route.Type') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'replaceTransitGatewayRoute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ReplaceTransitGatewayRoute.Route.State'),
        outputPath: 'Route.State',
        parameters: {
          DestinationCidrBlock: this.__input.destinationCidrBlock,
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          TransitGatewayAttachmentId: this.__input.transitGatewayAttachmentId,
          Blackhole: this.__input.blackhole,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ReplaceTransitGatewayRoute.Route.State', props);
    return resource.getResponseField('Route.State') as unknown as string;
  }

}

export class EC2ResponsesRequestSpotFleet {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RequestSpotFleetRequest) {
  }

  public get spotFleetRequestId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'requestSpotFleet',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RequestSpotFleet.SpotFleetRequestId'),
        outputPath: 'SpotFleetRequestId',
        parameters: {
          DryRun: this.__input.dryRun,
          SpotFleetRequestConfig: {
            AllocationStrategy: this.__input.spotFleetRequestConfig.allocationStrategy,
            OnDemandAllocationStrategy: this.__input.spotFleetRequestConfig.onDemandAllocationStrategy,
            SpotMaintenanceStrategies: {
              CapacityRebalance: {
                ReplacementStrategy: this.__input.spotFleetRequestConfig.spotMaintenanceStrategies?.capacityRebalance?.replacementStrategy,
              },
            },
            ClientToken: this.__input.spotFleetRequestConfig.clientToken,
            ExcessCapacityTerminationPolicy: this.__input.spotFleetRequestConfig.excessCapacityTerminationPolicy,
            FulfilledCapacity: this.__input.spotFleetRequestConfig.fulfilledCapacity,
            OnDemandFulfilledCapacity: this.__input.spotFleetRequestConfig.onDemandFulfilledCapacity,
            IamFleetRole: this.__input.spotFleetRequestConfig.iamFleetRole,
            LaunchSpecifications: this.__input.spotFleetRequestConfig.launchSpecifications,
            LaunchTemplateConfigs: this.__input.spotFleetRequestConfig.launchTemplateConfigs,
            SpotPrice: this.__input.spotFleetRequestConfig.spotPrice,
            TargetCapacity: this.__input.spotFleetRequestConfig.targetCapacity,
            OnDemandTargetCapacity: this.__input.spotFleetRequestConfig.onDemandTargetCapacity,
            OnDemandMaxTotalPrice: this.__input.spotFleetRequestConfig.onDemandMaxTotalPrice,
            SpotMaxTotalPrice: this.__input.spotFleetRequestConfig.spotMaxTotalPrice,
            TerminateInstancesWithExpiration: this.__input.spotFleetRequestConfig.terminateInstancesWithExpiration,
            Type: this.__input.spotFleetRequestConfig.type,
            ValidFrom: this.__input.spotFleetRequestConfig.validFrom,
            ValidUntil: this.__input.spotFleetRequestConfig.validUntil,
            ReplaceUnhealthyInstances: this.__input.spotFleetRequestConfig.replaceUnhealthyInstances,
            InstanceInterruptionBehavior: this.__input.spotFleetRequestConfig.instanceInterruptionBehavior,
            LoadBalancersConfig: {
              ClassicLoadBalancersConfig: {
                ClassicLoadBalancers: this.__input.spotFleetRequestConfig.loadBalancersConfig?.classicLoadBalancersConfig?.classicLoadBalancers,
              },
              TargetGroupsConfig: {
                TargetGroups: this.__input.spotFleetRequestConfig.loadBalancersConfig?.targetGroupsConfig?.targetGroups,
              },
            },
            InstancePoolsToUseCount: this.__input.spotFleetRequestConfig.instancePoolsToUseCount,
            Context: this.__input.spotFleetRequestConfig.context,
            TagSpecifications: this.__input.spotFleetRequestConfig.tagSpecifications,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RequestSpotFleet.SpotFleetRequestId', props);
    return resource.getResponseField('SpotFleetRequestId') as unknown as string;
  }

}

export class EC2ResponsesRequestSpotInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RequestSpotInstancesRequest) {
  }

  public get spotInstanceRequests(): shapes.Ec2SpotInstanceRequest[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'requestSpotInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RequestSpotInstances.SpotInstanceRequests'),
        outputPath: 'SpotInstanceRequests',
        parameters: {
          AvailabilityZoneGroup: this.__input.availabilityZoneGroup,
          BlockDurationMinutes: this.__input.blockDurationMinutes,
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          InstanceCount: this.__input.instanceCount,
          LaunchGroup: this.__input.launchGroup,
          LaunchSpecification: {
            SecurityGroupIds: this.__input.launchSpecification?.securityGroupIds,
            SecurityGroups: this.__input.launchSpecification?.securityGroups,
            AddressingType: this.__input.launchSpecification?.addressingType,
            BlockDeviceMappings: this.__input.launchSpecification?.blockDeviceMappings,
            EbsOptimized: this.__input.launchSpecification?.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchSpecification?.iamInstanceProfile?.arn,
              Name: this.__input.launchSpecification?.iamInstanceProfile?.name,
            },
            ImageId: this.__input.launchSpecification?.imageId,
            InstanceType: this.__input.launchSpecification?.instanceType,
            KernelId: this.__input.launchSpecification?.kernelId,
            KeyName: this.__input.launchSpecification?.keyName,
            Monitoring: {
              Enabled: this.__input.launchSpecification?.monitoring?.enabled,
            },
            NetworkInterfaces: this.__input.launchSpecification?.networkInterfaces,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification?.placement?.availabilityZone,
              GroupName: this.__input.launchSpecification?.placement?.groupName,
              Tenancy: this.__input.launchSpecification?.placement?.tenancy,
            },
            RamdiskId: this.__input.launchSpecification?.ramdiskId,
            SubnetId: this.__input.launchSpecification?.subnetId,
            UserData: this.__input.launchSpecification?.userData,
          },
          SpotPrice: this.__input.spotPrice,
          Type: this.__input.type,
          ValidFrom: this.__input.validFrom,
          ValidUntil: this.__input.validUntil,
          TagSpecifications: this.__input.tagSpecifications,
          InstanceInterruptionBehavior: this.__input.instanceInterruptionBehavior,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RequestSpotInstances.SpotInstanceRequests', props);
    return resource.getResponseField('SpotInstanceRequests') as unknown as shapes.Ec2SpotInstanceRequest[];
  }

}

export class EC2ResponsesResetAddressAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ResetAddressAttributeRequest) {
  }

  public get address(): EC2ResponsesResetAddressAttributeAddress {
    return new EC2ResponsesResetAddressAttributeAddress(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesResetAddressAttributeAddress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ResetAddressAttributeRequest) {
  }

  public get publicIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetAddressAttribute.Address.PublicIp'),
        outputPath: 'Address.PublicIp',
        parameters: {
          AllocationId: this.__input.allocationId,
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetAddressAttribute.Address.PublicIp', props);
    return resource.getResponseField('Address.PublicIp') as unknown as string;
  }

  public get allocationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetAddressAttribute.Address.AllocationId'),
        outputPath: 'Address.AllocationId',
        parameters: {
          AllocationId: this.__input.allocationId,
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetAddressAttribute.Address.AllocationId', props);
    return resource.getResponseField('Address.AllocationId') as unknown as string;
  }

  public get ptrRecord(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetAddressAttribute.Address.PtrRecord'),
        outputPath: 'Address.PtrRecord',
        parameters: {
          AllocationId: this.__input.allocationId,
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetAddressAttribute.Address.PtrRecord', props);
    return resource.getResponseField('Address.PtrRecord') as unknown as string;
  }

  public get ptrRecordUpdate(): EC2ResponsesResetAddressAttributeAddressPtrRecordUpdate {
    return new EC2ResponsesResetAddressAttributeAddressPtrRecordUpdate(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesResetAddressAttributeAddressPtrRecordUpdate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ResetAddressAttributeRequest) {
  }

  public get value(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetAddressAttribute.Address.PtrRecordUpdate.Value'),
        outputPath: 'Address.PtrRecordUpdate.Value',
        parameters: {
          AllocationId: this.__input.allocationId,
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetAddressAttribute.Address.PtrRecordUpdate.Value', props);
    return resource.getResponseField('Address.PtrRecordUpdate.Value') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetAddressAttribute.Address.PtrRecordUpdate.Status'),
        outputPath: 'Address.PtrRecordUpdate.Status',
        parameters: {
          AllocationId: this.__input.allocationId,
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetAddressAttribute.Address.PtrRecordUpdate.Status', props);
    return resource.getResponseField('Address.PtrRecordUpdate.Status') as unknown as string;
  }

  public get reason(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetAddressAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetAddressAttribute.Address.PtrRecordUpdate.Reason'),
        outputPath: 'Address.PtrRecordUpdate.Reason',
        parameters: {
          AllocationId: this.__input.allocationId,
          Attribute: this.__input.attribute,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetAddressAttribute.Address.PtrRecordUpdate.Reason', props);
    return resource.getResponseField('Address.PtrRecordUpdate.Reason') as unknown as string;
  }

}

export class EC2ResponsesResetEbsDefaultKmsKeyId {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ResetEbsDefaultKmsKeyIdRequest) {
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetEbsDefaultKmsKeyId',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetEbsDefaultKmsKeyId.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetEbsDefaultKmsKeyId.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

}

export class EC2ResponsesResetFpgaImageAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2ResetFpgaImageAttributeRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetFpgaImageAttribute',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.ResetFpgaImageAttribute.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          FpgaImageId: this.__input.fpgaImageId,
          Attribute: this.__input.attribute,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetFpgaImageAttribute.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesRestoreAddressToClassic {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RestoreAddressToClassicRequest) {
  }

  public get publicIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreAddressToClassic',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreAddressToClassic.PublicIp'),
        outputPath: 'PublicIp',
        parameters: {
          DryRun: this.__input.dryRun,
          PublicIp: this.__input.publicIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreAddressToClassic.PublicIp', props);
    return resource.getResponseField('PublicIp') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreAddressToClassic',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreAddressToClassic.Status'),
        outputPath: 'Status',
        parameters: {
          DryRun: this.__input.dryRun,
          PublicIp: this.__input.publicIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreAddressToClassic.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class EC2ResponsesRestoreManagedPrefixListVersion {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RestoreManagedPrefixListVersionRequest) {
  }

  public get prefixList(): EC2ResponsesRestoreManagedPrefixListVersionPrefixList {
    return new EC2ResponsesRestoreManagedPrefixListVersionPrefixList(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesRestoreManagedPrefixListVersionPrefixList {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RestoreManagedPrefixListVersionRequest) {
  }

  public get prefixListId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.PrefixListId'),
        outputPath: 'PrefixList.PrefixListId',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.PrefixListId', props);
    return resource.getResponseField('PrefixList.PrefixListId') as unknown as string;
  }

  public get addressFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.AddressFamily'),
        outputPath: 'PrefixList.AddressFamily',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.AddressFamily', props);
    return resource.getResponseField('PrefixList.AddressFamily') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.State'),
        outputPath: 'PrefixList.State',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.State', props);
    return resource.getResponseField('PrefixList.State') as unknown as string;
  }

  public get stateMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.StateMessage'),
        outputPath: 'PrefixList.StateMessage',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.StateMessage', props);
    return resource.getResponseField('PrefixList.StateMessage') as unknown as string;
  }

  public get prefixListArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.PrefixListArn'),
        outputPath: 'PrefixList.PrefixListArn',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.PrefixListArn', props);
    return resource.getResponseField('PrefixList.PrefixListArn') as unknown as string;
  }

  public get prefixListName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.PrefixListName'),
        outputPath: 'PrefixList.PrefixListName',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.PrefixListName', props);
    return resource.getResponseField('PrefixList.PrefixListName') as unknown as string;
  }

  public get maxEntries(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.MaxEntries'),
        outputPath: 'PrefixList.MaxEntries',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.MaxEntries', props);
    return resource.getResponseField('PrefixList.MaxEntries') as unknown as number;
  }

  public get version(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.Version'),
        outputPath: 'PrefixList.Version',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.Version', props);
    return resource.getResponseField('PrefixList.Version') as unknown as number;
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.Tags'),
        outputPath: 'PrefixList.Tags',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.Tags', props);
    return resource.getResponseField('PrefixList.Tags') as unknown as shapes.Ec2Tag[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreManagedPrefixListVersion',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RestoreManagedPrefixListVersion.PrefixList.OwnerId'),
        outputPath: 'PrefixList.OwnerId',
        parameters: {
          DryRun: this.__input.dryRun,
          PrefixListId: this.__input.prefixListId,
          PreviousVersion: this.__input.previousVersion,
          CurrentVersion: this.__input.currentVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreManagedPrefixListVersion.PrefixList.OwnerId', props);
    return resource.getResponseField('PrefixList.OwnerId') as unknown as string;
  }

}

export class EC2ResponsesRevokeClientVpnIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RevokeClientVpnIngressRequest) {
  }

  public get status(): EC2ResponsesRevokeClientVpnIngressStatus {
    return new EC2ResponsesRevokeClientVpnIngressStatus(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesRevokeClientVpnIngressStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RevokeClientVpnIngressRequest) {
  }

  public get code(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClientVpnIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeClientVpnIngress.Status.Code'),
        outputPath: 'Status.Code',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          TargetNetworkCidr: this.__input.targetNetworkCidr,
          AccessGroupId: this.__input.accessGroupId,
          RevokeAllGroups: this.__input.revokeAllGroups,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeClientVpnIngress.Status.Code', props);
    return resource.getResponseField('Status.Code') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeClientVpnIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeClientVpnIngress.Status.Message'),
        outputPath: 'Status.Message',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          TargetNetworkCidr: this.__input.targetNetworkCidr,
          AccessGroupId: this.__input.accessGroupId,
          RevokeAllGroups: this.__input.revokeAllGroups,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeClientVpnIngress.Status.Message', props);
    return resource.getResponseField('Status.Message') as unknown as string;
  }

}

export class EC2ResponsesRevokeSecurityGroupEgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RevokeSecurityGroupEgressRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSecurityGroupEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeSecurityGroupEgress.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupId: this.__input.groupId,
          IpPermissions: this.__input.ipPermissions,
          SecurityGroupRuleIds: this.__input.securityGroupRuleIds,
          CidrIp: this.__input.cidrIp,
          FromPort: this.__input.fromPort,
          IpProtocol: this.__input.ipProtocol,
          ToPort: this.__input.toPort,
          SourceSecurityGroupName: this.__input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.__input.sourceSecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSecurityGroupEgress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

  public get unknownIpPermissions(): shapes.Ec2IpPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSecurityGroupEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeSecurityGroupEgress.UnknownIpPermissions'),
        outputPath: 'UnknownIpPermissions',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupId: this.__input.groupId,
          IpPermissions: this.__input.ipPermissions,
          SecurityGroupRuleIds: this.__input.securityGroupRuleIds,
          CidrIp: this.__input.cidrIp,
          FromPort: this.__input.fromPort,
          IpProtocol: this.__input.ipProtocol,
          ToPort: this.__input.toPort,
          SourceSecurityGroupName: this.__input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.__input.sourceSecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSecurityGroupEgress.UnknownIpPermissions', props);
    return resource.getResponseField('UnknownIpPermissions') as unknown as shapes.Ec2IpPermission[];
  }

}

export class EC2ResponsesRevokeSecurityGroupIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RevokeSecurityGroupIngressRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSecurityGroupIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeSecurityGroupIngress.Return'),
        outputPath: 'Return',
        parameters: {
          CidrIp: this.__input.cidrIp,
          FromPort: this.__input.fromPort,
          GroupId: this.__input.groupId,
          GroupName: this.__input.groupName,
          IpPermissions: this.__input.ipPermissions,
          IpProtocol: this.__input.ipProtocol,
          SourceSecurityGroupName: this.__input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.__input.sourceSecurityGroupOwnerId,
          ToPort: this.__input.toPort,
          DryRun: this.__input.dryRun,
          SecurityGroupRuleIds: this.__input.securityGroupRuleIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSecurityGroupIngress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

  public get unknownIpPermissions(): shapes.Ec2IpPermission[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeSecurityGroupIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RevokeSecurityGroupIngress.UnknownIpPermissions'),
        outputPath: 'UnknownIpPermissions',
        parameters: {
          CidrIp: this.__input.cidrIp,
          FromPort: this.__input.fromPort,
          GroupId: this.__input.groupId,
          GroupName: this.__input.groupName,
          IpPermissions: this.__input.ipPermissions,
          IpProtocol: this.__input.ipProtocol,
          SourceSecurityGroupName: this.__input.sourceSecurityGroupName,
          SourceSecurityGroupOwnerId: this.__input.sourceSecurityGroupOwnerId,
          ToPort: this.__input.toPort,
          DryRun: this.__input.dryRun,
          SecurityGroupRuleIds: this.__input.securityGroupRuleIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeSecurityGroupIngress.UnknownIpPermissions', props);
    return resource.getResponseField('UnknownIpPermissions') as unknown as shapes.Ec2IpPermission[];
  }

}

export class EC2ResponsesRunInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RunInstancesRequest) {
  }

  public get groups(): shapes.Ec2GroupIdentifier[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.Groups'),
        outputPath: 'Groups',
        parameters: {
          BlockDeviceMappings: this.__input.blockDeviceMappings,
          ImageId: this.__input.imageId,
          InstanceType: this.__input.instanceType,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          KernelId: this.__input.kernelId,
          KeyName: this.__input.keyName,
          MaxCount: this.__input.maxCount,
          MinCount: this.__input.minCount,
          Monitoring: {
            Enabled: this.__input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.__input.placement?.availabilityZone,
            Affinity: this.__input.placement?.affinity,
            GroupName: this.__input.placement?.groupName,
            PartitionNumber: this.__input.placement?.partitionNumber,
            HostId: this.__input.placement?.hostId,
            Tenancy: this.__input.placement?.tenancy,
            SpreadDomain: this.__input.placement?.spreadDomain,
            HostResourceGroupArn: this.__input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.__input.ramdiskId,
          SecurityGroupIds: this.__input.securityGroupIds,
          SecurityGroups: this.__input.securityGroups,
          SubnetId: this.__input.subnetId,
          UserData: this.__input.userData,
          AdditionalInfo: this.__input.additionalInfo,
          ClientToken: this.__input.clientToken,
          DisableApiTermination: this.__input.disableApiTermination,
          DryRun: this.__input.dryRun,
          EbsOptimized: this.__input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile?.arn,
            Name: this.__input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.__input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.__input.networkInterfaces,
          PrivateIpAddress: this.__input.privateIpAddress,
          ElasticGpuSpecification: this.__input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.__input.elasticInferenceAccelerators,
          TagSpecifications: this.__input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.__input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.__input.launchTemplate?.launchTemplateName,
            Version: this.__input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.__input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.__input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.__input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.__input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.__input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.__input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.__input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.__input.cpuOptions?.coreCount,
            ThreadsPerCore: this.__input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.__input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.__input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.__input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.__input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.__input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.__input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.__input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RunInstances.Groups', props);
    return resource.getResponseField('Groups') as unknown as shapes.Ec2GroupIdentifier[];
  }

  public get instances(): shapes.Ec2Instance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.Instances'),
        outputPath: 'Instances',
        parameters: {
          BlockDeviceMappings: this.__input.blockDeviceMappings,
          ImageId: this.__input.imageId,
          InstanceType: this.__input.instanceType,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          KernelId: this.__input.kernelId,
          KeyName: this.__input.keyName,
          MaxCount: this.__input.maxCount,
          MinCount: this.__input.minCount,
          Monitoring: {
            Enabled: this.__input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.__input.placement?.availabilityZone,
            Affinity: this.__input.placement?.affinity,
            GroupName: this.__input.placement?.groupName,
            PartitionNumber: this.__input.placement?.partitionNumber,
            HostId: this.__input.placement?.hostId,
            Tenancy: this.__input.placement?.tenancy,
            SpreadDomain: this.__input.placement?.spreadDomain,
            HostResourceGroupArn: this.__input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.__input.ramdiskId,
          SecurityGroupIds: this.__input.securityGroupIds,
          SecurityGroups: this.__input.securityGroups,
          SubnetId: this.__input.subnetId,
          UserData: this.__input.userData,
          AdditionalInfo: this.__input.additionalInfo,
          ClientToken: this.__input.clientToken,
          DisableApiTermination: this.__input.disableApiTermination,
          DryRun: this.__input.dryRun,
          EbsOptimized: this.__input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile?.arn,
            Name: this.__input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.__input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.__input.networkInterfaces,
          PrivateIpAddress: this.__input.privateIpAddress,
          ElasticGpuSpecification: this.__input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.__input.elasticInferenceAccelerators,
          TagSpecifications: this.__input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.__input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.__input.launchTemplate?.launchTemplateName,
            Version: this.__input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.__input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.__input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.__input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.__input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.__input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.__input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.__input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.__input.cpuOptions?.coreCount,
            ThreadsPerCore: this.__input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.__input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.__input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.__input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.__input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.__input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.__input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.__input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RunInstances.Instances', props);
    return resource.getResponseField('Instances') as unknown as shapes.Ec2Instance[];
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.OwnerId'),
        outputPath: 'OwnerId',
        parameters: {
          BlockDeviceMappings: this.__input.blockDeviceMappings,
          ImageId: this.__input.imageId,
          InstanceType: this.__input.instanceType,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          KernelId: this.__input.kernelId,
          KeyName: this.__input.keyName,
          MaxCount: this.__input.maxCount,
          MinCount: this.__input.minCount,
          Monitoring: {
            Enabled: this.__input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.__input.placement?.availabilityZone,
            Affinity: this.__input.placement?.affinity,
            GroupName: this.__input.placement?.groupName,
            PartitionNumber: this.__input.placement?.partitionNumber,
            HostId: this.__input.placement?.hostId,
            Tenancy: this.__input.placement?.tenancy,
            SpreadDomain: this.__input.placement?.spreadDomain,
            HostResourceGroupArn: this.__input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.__input.ramdiskId,
          SecurityGroupIds: this.__input.securityGroupIds,
          SecurityGroups: this.__input.securityGroups,
          SubnetId: this.__input.subnetId,
          UserData: this.__input.userData,
          AdditionalInfo: this.__input.additionalInfo,
          ClientToken: this.__input.clientToken,
          DisableApiTermination: this.__input.disableApiTermination,
          DryRun: this.__input.dryRun,
          EbsOptimized: this.__input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile?.arn,
            Name: this.__input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.__input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.__input.networkInterfaces,
          PrivateIpAddress: this.__input.privateIpAddress,
          ElasticGpuSpecification: this.__input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.__input.elasticInferenceAccelerators,
          TagSpecifications: this.__input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.__input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.__input.launchTemplate?.launchTemplateName,
            Version: this.__input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.__input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.__input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.__input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.__input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.__input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.__input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.__input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.__input.cpuOptions?.coreCount,
            ThreadsPerCore: this.__input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.__input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.__input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.__input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.__input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.__input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.__input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.__input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RunInstances.OwnerId', props);
    return resource.getResponseField('OwnerId') as unknown as string;
  }

  public get requesterId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.RequesterId'),
        outputPath: 'RequesterId',
        parameters: {
          BlockDeviceMappings: this.__input.blockDeviceMappings,
          ImageId: this.__input.imageId,
          InstanceType: this.__input.instanceType,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          KernelId: this.__input.kernelId,
          KeyName: this.__input.keyName,
          MaxCount: this.__input.maxCount,
          MinCount: this.__input.minCount,
          Monitoring: {
            Enabled: this.__input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.__input.placement?.availabilityZone,
            Affinity: this.__input.placement?.affinity,
            GroupName: this.__input.placement?.groupName,
            PartitionNumber: this.__input.placement?.partitionNumber,
            HostId: this.__input.placement?.hostId,
            Tenancy: this.__input.placement?.tenancy,
            SpreadDomain: this.__input.placement?.spreadDomain,
            HostResourceGroupArn: this.__input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.__input.ramdiskId,
          SecurityGroupIds: this.__input.securityGroupIds,
          SecurityGroups: this.__input.securityGroups,
          SubnetId: this.__input.subnetId,
          UserData: this.__input.userData,
          AdditionalInfo: this.__input.additionalInfo,
          ClientToken: this.__input.clientToken,
          DisableApiTermination: this.__input.disableApiTermination,
          DryRun: this.__input.dryRun,
          EbsOptimized: this.__input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile?.arn,
            Name: this.__input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.__input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.__input.networkInterfaces,
          PrivateIpAddress: this.__input.privateIpAddress,
          ElasticGpuSpecification: this.__input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.__input.elasticInferenceAccelerators,
          TagSpecifications: this.__input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.__input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.__input.launchTemplate?.launchTemplateName,
            Version: this.__input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.__input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.__input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.__input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.__input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.__input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.__input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.__input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.__input.cpuOptions?.coreCount,
            ThreadsPerCore: this.__input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.__input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.__input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.__input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.__input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.__input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.__input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.__input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RunInstances.RequesterId', props);
    return resource.getResponseField('RequesterId') as unknown as string;
  }

  public get reservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunInstances.ReservationId'),
        outputPath: 'ReservationId',
        parameters: {
          BlockDeviceMappings: this.__input.blockDeviceMappings,
          ImageId: this.__input.imageId,
          InstanceType: this.__input.instanceType,
          Ipv6AddressCount: this.__input.ipv6AddressCount,
          Ipv6Addresses: this.__input.ipv6Addresses,
          KernelId: this.__input.kernelId,
          KeyName: this.__input.keyName,
          MaxCount: this.__input.maxCount,
          MinCount: this.__input.minCount,
          Monitoring: {
            Enabled: this.__input.monitoring?.enabled,
          },
          Placement: {
            AvailabilityZone: this.__input.placement?.availabilityZone,
            Affinity: this.__input.placement?.affinity,
            GroupName: this.__input.placement?.groupName,
            PartitionNumber: this.__input.placement?.partitionNumber,
            HostId: this.__input.placement?.hostId,
            Tenancy: this.__input.placement?.tenancy,
            SpreadDomain: this.__input.placement?.spreadDomain,
            HostResourceGroupArn: this.__input.placement?.hostResourceGroupArn,
          },
          RamdiskId: this.__input.ramdiskId,
          SecurityGroupIds: this.__input.securityGroupIds,
          SecurityGroups: this.__input.securityGroups,
          SubnetId: this.__input.subnetId,
          UserData: this.__input.userData,
          AdditionalInfo: this.__input.additionalInfo,
          ClientToken: this.__input.clientToken,
          DisableApiTermination: this.__input.disableApiTermination,
          DryRun: this.__input.dryRun,
          EbsOptimized: this.__input.ebsOptimized,
          IamInstanceProfile: {
            Arn: this.__input.iamInstanceProfile?.arn,
            Name: this.__input.iamInstanceProfile?.name,
          },
          InstanceInitiatedShutdownBehavior: this.__input.instanceInitiatedShutdownBehavior,
          NetworkInterfaces: this.__input.networkInterfaces,
          PrivateIpAddress: this.__input.privateIpAddress,
          ElasticGpuSpecification: this.__input.elasticGpuSpecification,
          ElasticInferenceAccelerators: this.__input.elasticInferenceAccelerators,
          TagSpecifications: this.__input.tagSpecifications,
          LaunchTemplate: {
            LaunchTemplateId: this.__input.launchTemplate?.launchTemplateId,
            LaunchTemplateName: this.__input.launchTemplate?.launchTemplateName,
            Version: this.__input.launchTemplate?.version,
          },
          InstanceMarketOptions: {
            MarketType: this.__input.instanceMarketOptions?.marketType,
            SpotOptions: {
              MaxPrice: this.__input.instanceMarketOptions?.spotOptions?.maxPrice,
              SpotInstanceType: this.__input.instanceMarketOptions?.spotOptions?.spotInstanceType,
              BlockDurationMinutes: this.__input.instanceMarketOptions?.spotOptions?.blockDurationMinutes,
              ValidUntil: this.__input.instanceMarketOptions?.spotOptions?.validUntil,
              InstanceInterruptionBehavior: this.__input.instanceMarketOptions?.spotOptions?.instanceInterruptionBehavior,
            },
          },
          CreditSpecification: {
            CpuCredits: this.__input.creditSpecification?.cpuCredits,
          },
          CpuOptions: {
            CoreCount: this.__input.cpuOptions?.coreCount,
            ThreadsPerCore: this.__input.cpuOptions?.threadsPerCore,
          },
          CapacityReservationSpecification: {
            CapacityReservationPreference: this.__input.capacityReservationSpecification?.capacityReservationPreference,
            CapacityReservationTarget: {
              CapacityReservationId: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationId,
              CapacityReservationResourceGroupArn: this.__input.capacityReservationSpecification?.capacityReservationTarget?.capacityReservationResourceGroupArn,
            },
          },
          HibernationOptions: {
            Configured: this.__input.hibernationOptions?.configured,
          },
          LicenseSpecifications: this.__input.licenseSpecifications,
          MetadataOptions: {
            HttpTokens: this.__input.metadataOptions?.httpTokens,
            HttpPutResponseHopLimit: this.__input.metadataOptions?.httpPutResponseHopLimit,
            HttpEndpoint: this.__input.metadataOptions?.httpEndpoint,
          },
          EnclaveOptions: {
            Enabled: this.__input.enclaveOptions?.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RunInstances.ReservationId', props);
    return resource.getResponseField('ReservationId') as unknown as string;
  }

}

export class EC2ResponsesRunScheduledInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2RunScheduledInstancesRequest) {
  }

  public get instanceIdSet(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'runScheduledInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.RunScheduledInstances.InstanceIdSet'),
        outputPath: 'InstanceIdSet',
        parameters: {
          ClientToken: this.__input.clientToken,
          DryRun: this.__input.dryRun,
          InstanceCount: this.__input.instanceCount,
          LaunchSpecification: {
            BlockDeviceMappings: this.__input.launchSpecification.blockDeviceMappings,
            EbsOptimized: this.__input.launchSpecification.ebsOptimized,
            IamInstanceProfile: {
              Arn: this.__input.launchSpecification.iamInstanceProfile?.arn,
              Name: this.__input.launchSpecification.iamInstanceProfile?.name,
            },
            ImageId: this.__input.launchSpecification.imageId,
            InstanceType: this.__input.launchSpecification.instanceType,
            KernelId: this.__input.launchSpecification.kernelId,
            KeyName: this.__input.launchSpecification.keyName,
            Monitoring: {
              Enabled: this.__input.launchSpecification.monitoring?.enabled,
            },
            NetworkInterfaces: this.__input.launchSpecification.networkInterfaces,
            Placement: {
              AvailabilityZone: this.__input.launchSpecification.placement?.availabilityZone,
              GroupName: this.__input.launchSpecification.placement?.groupName,
            },
            RamdiskId: this.__input.launchSpecification.ramdiskId,
            SecurityGroupIds: this.__input.launchSpecification.securityGroupIds,
            SubnetId: this.__input.launchSpecification.subnetId,
            UserData: this.__input.launchSpecification.userData,
          },
          ScheduledInstanceId: this.__input.scheduledInstanceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RunScheduledInstances.InstanceIdSet', props);
    return resource.getResponseField('InstanceIdSet') as unknown as string[];
  }

}

export class EC2ResponsesSearchLocalGatewayRoutes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2SearchLocalGatewayRoutesRequest) {
  }

  public get routes(): shapes.Ec2LocalGatewayRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchLocalGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchLocalGatewayRoutes.Routes'),
        outputPath: 'Routes',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'SearchLocalGatewayRoutes.Routes', props);
    return resource.getResponseField('Routes') as unknown as shapes.Ec2LocalGatewayRoute[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchLocalGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchLocalGatewayRoutes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          LocalGatewayRouteTableId: this.__input.localGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'SearchLocalGatewayRoutes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesSearchTransitGatewayMulticastGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2SearchTransitGatewayMulticastGroupsRequest) {
  }

  public get multicastGroups(): shapes.Ec2TransitGatewayMulticastGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchTransitGatewayMulticastGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchTransitGatewayMulticastGroups.MulticastGroups'),
        outputPath: 'MulticastGroups',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'SearchTransitGatewayMulticastGroups.MulticastGroups', props);
    return resource.getResponseField('MulticastGroups') as unknown as shapes.Ec2TransitGatewayMulticastGroup[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchTransitGatewayMulticastGroups',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchTransitGatewayMulticastGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          TransitGatewayMulticastDomainId: this.__input.transitGatewayMulticastDomainId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'SearchTransitGatewayMulticastGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class EC2ResponsesSearchTransitGatewayRoutes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2SearchTransitGatewayRoutesRequest) {
  }

  public get routes(): shapes.Ec2TransitGatewayRoute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchTransitGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchTransitGatewayRoutes.Routes'),
        outputPath: 'Routes',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'SearchTransitGatewayRoutes.Routes', props);
    return resource.getResponseField('Routes') as unknown as shapes.Ec2TransitGatewayRoute[];
  }

  public get additionalRoutesAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'searchTransitGatewayRoutes',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.SearchTransitGatewayRoutes.AdditionalRoutesAvailable'),
        outputPath: 'AdditionalRoutesAvailable',
        parameters: {
          TransitGatewayRouteTableId: this.__input.transitGatewayRouteTableId,
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'SearchTransitGatewayRoutes.AdditionalRoutesAvailable', props);
    return resource.getResponseField('AdditionalRoutesAvailable') as unknown as boolean;
  }

}

export class EC2ResponsesStartInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2StartInstancesRequest) {
  }

  public get startingInstances(): shapes.Ec2InstanceStateChange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartInstances.StartingInstances'),
        outputPath: 'StartingInstances',
        parameters: {
          InstanceIds: this.__input.instanceIds,
          AdditionalInfo: this.__input.additionalInfo,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartInstances.StartingInstances', props);
    return resource.getResponseField('StartingInstances') as unknown as shapes.Ec2InstanceStateChange[];
  }

}

export class EC2ResponsesStartNetworkInsightsAnalysis {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2StartNetworkInsightsAnalysisRequest) {
  }

  public get networkInsightsAnalysis(): EC2ResponsesStartNetworkInsightsAnalysisNetworkInsightsAnalysis {
    return new EC2ResponsesStartNetworkInsightsAnalysisNetworkInsightsAnalysis(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesStartNetworkInsightsAnalysisNetworkInsightsAnalysis {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2StartNetworkInsightsAnalysisRequest) {
  }

  public get networkInsightsAnalysisId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.NetworkInsightsAnalysisId'),
        outputPath: 'NetworkInsightsAnalysis.NetworkInsightsAnalysisId',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.NetworkInsightsAnalysisId', props);
    return resource.getResponseField('NetworkInsightsAnalysis.NetworkInsightsAnalysisId') as unknown as string;
  }

  public get networkInsightsAnalysisArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.NetworkInsightsAnalysisArn'),
        outputPath: 'NetworkInsightsAnalysis.NetworkInsightsAnalysisArn',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.NetworkInsightsAnalysisArn', props);
    return resource.getResponseField('NetworkInsightsAnalysis.NetworkInsightsAnalysisArn') as unknown as string;
  }

  public get networkInsightsPathId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.NetworkInsightsPathId'),
        outputPath: 'NetworkInsightsAnalysis.NetworkInsightsPathId',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.NetworkInsightsPathId', props);
    return resource.getResponseField('NetworkInsightsAnalysis.NetworkInsightsPathId') as unknown as string;
  }

  public get filterInArns(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.FilterInArns'),
        outputPath: 'NetworkInsightsAnalysis.FilterInArns',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.FilterInArns', props);
    return resource.getResponseField('NetworkInsightsAnalysis.FilterInArns') as unknown as string[];
  }

  public get startDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.StartDate'),
        outputPath: 'NetworkInsightsAnalysis.StartDate',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.StartDate', props);
    return resource.getResponseField('NetworkInsightsAnalysis.StartDate') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.Status'),
        outputPath: 'NetworkInsightsAnalysis.Status',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.Status', props);
    return resource.getResponseField('NetworkInsightsAnalysis.Status') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.StatusMessage'),
        outputPath: 'NetworkInsightsAnalysis.StatusMessage',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.StatusMessage', props);
    return resource.getResponseField('NetworkInsightsAnalysis.StatusMessage') as unknown as string;
  }

  public get networkPathFound(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.NetworkPathFound'),
        outputPath: 'NetworkInsightsAnalysis.NetworkPathFound',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.NetworkPathFound', props);
    return resource.getResponseField('NetworkInsightsAnalysis.NetworkPathFound') as unknown as boolean;
  }

  public get forwardPathComponents(): shapes.Ec2PathComponent[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.ForwardPathComponents'),
        outputPath: 'NetworkInsightsAnalysis.ForwardPathComponents',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.ForwardPathComponents', props);
    return resource.getResponseField('NetworkInsightsAnalysis.ForwardPathComponents') as unknown as shapes.Ec2PathComponent[];
  }

  public get returnPathComponents(): shapes.Ec2PathComponent[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.ReturnPathComponents'),
        outputPath: 'NetworkInsightsAnalysis.ReturnPathComponents',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.ReturnPathComponents', props);
    return resource.getResponseField('NetworkInsightsAnalysis.ReturnPathComponents') as unknown as shapes.Ec2PathComponent[];
  }

  public get explanations(): shapes.Ec2Explanation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.Explanations'),
        outputPath: 'NetworkInsightsAnalysis.Explanations',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.Explanations', props);
    return resource.getResponseField('NetworkInsightsAnalysis.Explanations') as unknown as shapes.Ec2Explanation[];
  }

  public get alternatePathHints(): shapes.Ec2AlternatePathHint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.AlternatePathHints'),
        outputPath: 'NetworkInsightsAnalysis.AlternatePathHints',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.AlternatePathHints', props);
    return resource.getResponseField('NetworkInsightsAnalysis.AlternatePathHints') as unknown as shapes.Ec2AlternatePathHint[];
  }

  public get tags(): shapes.Ec2Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startNetworkInsightsAnalysis',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.Tags'),
        outputPath: 'NetworkInsightsAnalysis.Tags',
        parameters: {
          NetworkInsightsPathId: this.__input.networkInsightsPathId,
          FilterInArns: this.__input.filterInArns,
          DryRun: this.__input.dryRun,
          TagSpecifications: this.__input.tagSpecifications,
          ClientToken: this.__input.clientToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartNetworkInsightsAnalysis.NetworkInsightsAnalysis.Tags', props);
    return resource.getResponseField('NetworkInsightsAnalysis.Tags') as unknown as shapes.Ec2Tag[];
  }

}

export class EC2ResponsesStartVpcEndpointServicePrivateDnsVerification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2StartVpcEndpointServicePrivateDnsVerificationRequest) {
  }

  public get returnValue(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startVpcEndpointServicePrivateDnsVerification',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StartVpcEndpointServicePrivateDnsVerification.ReturnValue'),
        outputPath: 'ReturnValue',
        parameters: {
          DryRun: this.__input.dryRun,
          ServiceId: this.__input.serviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartVpcEndpointServicePrivateDnsVerification.ReturnValue', props);
    return resource.getResponseField('ReturnValue') as unknown as boolean;
  }

}

export class EC2ResponsesStopInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2StopInstancesRequest) {
  }

  public get stoppingInstances(): shapes.Ec2InstanceStateChange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.StopInstances.StoppingInstances'),
        outputPath: 'StoppingInstances',
        parameters: {
          InstanceIds: this.__input.instanceIds,
          Hibernate: this.__input.hibernate,
          DryRun: this.__input.dryRun,
          Force: this.__input.force,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopInstances.StoppingInstances', props);
    return resource.getResponseField('StoppingInstances') as unknown as shapes.Ec2InstanceStateChange[];
  }

}

export class EC2ResponsesTerminateClientVpnConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2TerminateClientVpnConnectionsRequest) {
  }

  public get clientVpnEndpointId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'terminateClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.TerminateClientVpnConnections.ClientVpnEndpointId'),
        outputPath: 'ClientVpnEndpointId',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          ConnectionId: this.__input.connectionId,
          Username: this.__input.username,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'TerminateClientVpnConnections.ClientVpnEndpointId', props);
    return resource.getResponseField('ClientVpnEndpointId') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'terminateClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.TerminateClientVpnConnections.Username'),
        outputPath: 'Username',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          ConnectionId: this.__input.connectionId,
          Username: this.__input.username,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'TerminateClientVpnConnections.Username', props);
    return resource.getResponseField('Username') as unknown as string;
  }

  public get connectionStatuses(): shapes.Ec2TerminateConnectionStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'terminateClientVpnConnections',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.TerminateClientVpnConnections.ConnectionStatuses'),
        outputPath: 'ConnectionStatuses',
        parameters: {
          ClientVpnEndpointId: this.__input.clientVpnEndpointId,
          ConnectionId: this.__input.connectionId,
          Username: this.__input.username,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'TerminateClientVpnConnections.ConnectionStatuses', props);
    return resource.getResponseField('ConnectionStatuses') as unknown as shapes.Ec2TerminateConnectionStatus[];
  }

}

export class EC2ResponsesTerminateInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2TerminateInstancesRequest) {
  }

  public get terminatingInstances(): shapes.Ec2InstanceStateChange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'terminateInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.TerminateInstances.TerminatingInstances'),
        outputPath: 'TerminatingInstances',
        parameters: {
          InstanceIds: this.__input.instanceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'TerminateInstances.TerminatingInstances', props);
    return resource.getResponseField('TerminatingInstances') as unknown as shapes.Ec2InstanceStateChange[];
  }

}

export class EC2ResponsesUnassignIpv6Addresses {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2UnassignIpv6AddressesRequest) {
  }

  public get networkInterfaceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unassignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnassignIpv6Addresses.NetworkInterfaceId'),
        outputPath: 'NetworkInterfaceId',
        parameters: {
          Ipv6Addresses: this.__input.ipv6Addresses,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UnassignIpv6Addresses.NetworkInterfaceId', props);
    return resource.getResponseField('NetworkInterfaceId') as unknown as string;
  }

  public get unassignedIpv6Addresses(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unassignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnassignIpv6Addresses.UnassignedIpv6Addresses'),
        outputPath: 'UnassignedIpv6Addresses',
        parameters: {
          Ipv6Addresses: this.__input.ipv6Addresses,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UnassignIpv6Addresses.UnassignedIpv6Addresses', props);
    return resource.getResponseField('UnassignedIpv6Addresses') as unknown as string[];
  }

  public get unassignedIpv6Prefixes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unassignIpv6Addresses',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnassignIpv6Addresses.UnassignedIpv6Prefixes'),
        outputPath: 'UnassignedIpv6Prefixes',
        parameters: {
          Ipv6Addresses: this.__input.ipv6Addresses,
          Ipv6Prefixes: this.__input.ipv6Prefixes,
          NetworkInterfaceId: this.__input.networkInterfaceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UnassignIpv6Addresses.UnassignedIpv6Prefixes', props);
    return resource.getResponseField('UnassignedIpv6Prefixes') as unknown as string[];
  }

}

export class EC2ResponsesUnmonitorInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2UnmonitorInstancesRequest) {
  }

  public get instanceMonitorings(): shapes.Ec2InstanceMonitoring[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'unmonitorInstances',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UnmonitorInstances.InstanceMonitorings'),
        outputPath: 'InstanceMonitorings',
        parameters: {
          InstanceIds: this.__input.instanceIds,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UnmonitorInstances.InstanceMonitorings', props);
    return resource.getResponseField('InstanceMonitorings') as unknown as shapes.Ec2InstanceMonitoring[];
  }

}

export class EC2ResponsesUpdateSecurityGroupRuleDescriptionsEgress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateSecurityGroupRuleDescriptionsEgress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UpdateSecurityGroupRuleDescriptionsEgress.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupId: this.__input.groupId,
          GroupName: this.__input.groupName,
          IpPermissions: this.__input.ipPermissions,
          SecurityGroupRuleDescriptions: this.__input.securityGroupRuleDescriptions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateSecurityGroupRuleDescriptionsEgress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesUpdateSecurityGroupRuleDescriptionsIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest) {
  }

  public get return(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateSecurityGroupRuleDescriptionsIngress',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.UpdateSecurityGroupRuleDescriptionsIngress.Return'),
        outputPath: 'Return',
        parameters: {
          DryRun: this.__input.dryRun,
          GroupId: this.__input.groupId,
          GroupName: this.__input.groupName,
          IpPermissions: this.__input.ipPermissions,
          SecurityGroupRuleDescriptions: this.__input.securityGroupRuleDescriptions,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateSecurityGroupRuleDescriptionsIngress.Return', props);
    return resource.getResponseField('Return') as unknown as boolean;
  }

}

export class EC2ResponsesWithdrawByoipCidr {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2WithdrawByoipCidrRequest) {
  }

  public get byoipCidr(): EC2ResponsesWithdrawByoipCidrByoipCidr {
    return new EC2ResponsesWithdrawByoipCidrByoipCidr(this.__scope, this.__resources, this.__input);
  }

}

export class EC2ResponsesWithdrawByoipCidrByoipCidr {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.Ec2WithdrawByoipCidrRequest) {
  }

  public get cidr(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'withdrawByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.WithdrawByoipCidr.ByoipCidr.Cidr'),
        outputPath: 'ByoipCidr.Cidr',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'WithdrawByoipCidr.ByoipCidr.Cidr', props);
    return resource.getResponseField('ByoipCidr.Cidr') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'withdrawByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.WithdrawByoipCidr.ByoipCidr.Description'),
        outputPath: 'ByoipCidr.Description',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'WithdrawByoipCidr.ByoipCidr.Description', props);
    return resource.getResponseField('ByoipCidr.Description') as unknown as string;
  }

  public get statusMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'withdrawByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.WithdrawByoipCidr.ByoipCidr.StatusMessage'),
        outputPath: 'ByoipCidr.StatusMessage',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'WithdrawByoipCidr.ByoipCidr.StatusMessage', props);
    return resource.getResponseField('ByoipCidr.StatusMessage') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'withdrawByoipCidr',
        service: 'EC2',
        physicalResourceId: cr.PhysicalResourceId.of('EC2.WithdrawByoipCidr.ByoipCidr.State'),
        outputPath: 'ByoipCidr.State',
        parameters: {
          Cidr: this.__input.cidr,
          DryRun: this.__input.dryRun,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'WithdrawByoipCidr.ByoipCidr.State', props);
    return resource.getResponseField('ByoipCidr.State') as unknown as string;
  }

}

