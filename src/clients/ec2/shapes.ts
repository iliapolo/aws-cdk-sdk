/**
 * @schema Ec2AcceptReservedInstancesExchangeQuoteRequest
 */
export interface Ec2AcceptReservedInstancesExchangeQuoteRequest {
  /**
   * @schema Ec2AcceptReservedInstancesExchangeQuoteRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AcceptReservedInstancesExchangeQuoteRequest#ReservedInstanceIds
   */
  readonly reservedInstanceIds?: string[];

  /**
   * @schema Ec2AcceptReservedInstancesExchangeQuoteRequest#TargetConfigurations
   */
  readonly targetConfigurations?: Ec2TargetConfigurationRequest[];

}

/**
 * Converts an object of type 'Ec2AcceptReservedInstancesExchangeQuoteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptReservedInstancesExchangeQuoteRequest(obj: Ec2AcceptReservedInstancesExchangeQuoteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ReservedInstanceIds': obj.reservedInstanceIds?.map(y => y),
    'TargetConfigurations': obj.targetConfigurations?.map(y => toJson_Ec2TargetConfigurationRequest(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptReservedInstancesExchangeQuoteResult
 */
export interface Ec2AcceptReservedInstancesExchangeQuoteResult {
  /**
   * @schema Ec2AcceptReservedInstancesExchangeQuoteResult#ExchangeId
   */
  readonly exchangeId?: string;

}

/**
 * Converts an object of type 'Ec2AcceptReservedInstancesExchangeQuoteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptReservedInstancesExchangeQuoteResult(obj: Ec2AcceptReservedInstancesExchangeQuoteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExchangeId': obj.exchangeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest
 */
export interface Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest {
  /**
   * @schema Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest(obj: Ec2AcceptTransitGatewayMulticastDomainAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'SubnetIds': obj.subnetIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptTransitGatewayMulticastDomainAssociationsResult
 */
export interface Ec2AcceptTransitGatewayMulticastDomainAssociationsResult {
  /**
   * @schema Ec2AcceptTransitGatewayMulticastDomainAssociationsResult#Associations
   */
  readonly associations?: Ec2TransitGatewayMulticastDomainAssociations;

}

/**
 * Converts an object of type 'Ec2AcceptTransitGatewayMulticastDomainAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptTransitGatewayMulticastDomainAssociationsResult(obj: Ec2AcceptTransitGatewayMulticastDomainAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Associations': toJson_Ec2TransitGatewayMulticastDomainAssociations(obj.associations),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptTransitGatewayPeeringAttachmentRequest
 */
export interface Ec2AcceptTransitGatewayPeeringAttachmentRequest {
  /**
   * @schema Ec2AcceptTransitGatewayPeeringAttachmentRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2AcceptTransitGatewayPeeringAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AcceptTransitGatewayPeeringAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptTransitGatewayPeeringAttachmentRequest(obj: Ec2AcceptTransitGatewayPeeringAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptTransitGatewayPeeringAttachmentResult
 */
export interface Ec2AcceptTransitGatewayPeeringAttachmentResult {
  /**
   * @schema Ec2AcceptTransitGatewayPeeringAttachmentResult#TransitGatewayPeeringAttachment
   */
  readonly transitGatewayPeeringAttachment?: Ec2TransitGatewayPeeringAttachment;

}

/**
 * Converts an object of type 'Ec2AcceptTransitGatewayPeeringAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptTransitGatewayPeeringAttachmentResult(obj: Ec2AcceptTransitGatewayPeeringAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPeeringAttachment': toJson_Ec2TransitGatewayPeeringAttachment(obj.transitGatewayPeeringAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptTransitGatewayVpcAttachmentRequest
 */
export interface Ec2AcceptTransitGatewayVpcAttachmentRequest {
  /**
   * @schema Ec2AcceptTransitGatewayVpcAttachmentRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2AcceptTransitGatewayVpcAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AcceptTransitGatewayVpcAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptTransitGatewayVpcAttachmentRequest(obj: Ec2AcceptTransitGatewayVpcAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptTransitGatewayVpcAttachmentResult
 */
export interface Ec2AcceptTransitGatewayVpcAttachmentResult {
  /**
   * @schema Ec2AcceptTransitGatewayVpcAttachmentResult#TransitGatewayVpcAttachment
   */
  readonly transitGatewayVpcAttachment?: Ec2TransitGatewayVpcAttachment;

}

/**
 * Converts an object of type 'Ec2AcceptTransitGatewayVpcAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptTransitGatewayVpcAttachmentResult(obj: Ec2AcceptTransitGatewayVpcAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayVpcAttachment': toJson_Ec2TransitGatewayVpcAttachment(obj.transitGatewayVpcAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptVpcEndpointConnectionsRequest
 */
export interface Ec2AcceptVpcEndpointConnectionsRequest {
  /**
   * @schema Ec2AcceptVpcEndpointConnectionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AcceptVpcEndpointConnectionsRequest#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2AcceptVpcEndpointConnectionsRequest#VpcEndpointIds
   */
  readonly vpcEndpointIds?: string[];

}

/**
 * Converts an object of type 'Ec2AcceptVpcEndpointConnectionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptVpcEndpointConnectionsRequest(obj: Ec2AcceptVpcEndpointConnectionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceId': obj.serviceId,
    'VpcEndpointIds': obj.vpcEndpointIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptVpcEndpointConnectionsResult
 */
export interface Ec2AcceptVpcEndpointConnectionsResult {
  /**
   * @schema Ec2AcceptVpcEndpointConnectionsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2AcceptVpcEndpointConnectionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptVpcEndpointConnectionsResult(obj: Ec2AcceptVpcEndpointConnectionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptVpcPeeringConnectionRequest
 */
export interface Ec2AcceptVpcPeeringConnectionRequest {
  /**
   * @schema Ec2AcceptVpcPeeringConnectionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AcceptVpcPeeringConnectionRequest#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2AcceptVpcPeeringConnectionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptVpcPeeringConnectionRequest(obj: Ec2AcceptVpcPeeringConnectionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AcceptVpcPeeringConnectionResult
 */
export interface Ec2AcceptVpcPeeringConnectionResult {
  /**
   * @schema Ec2AcceptVpcPeeringConnectionResult#VpcPeeringConnection
   */
  readonly vpcPeeringConnection?: Ec2VpcPeeringConnection;

}

/**
 * Converts an object of type 'Ec2AcceptVpcPeeringConnectionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AcceptVpcPeeringConnectionResult(obj: Ec2AcceptVpcPeeringConnectionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcPeeringConnection': toJson_Ec2VpcPeeringConnection(obj.vpcPeeringConnection),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AdvertiseByoipCidrRequest
 */
export interface Ec2AdvertiseByoipCidrRequest {
  /**
   * @schema Ec2AdvertiseByoipCidrRequest#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2AdvertiseByoipCidrRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AdvertiseByoipCidrRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AdvertiseByoipCidrRequest(obj: Ec2AdvertiseByoipCidrRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AdvertiseByoipCidrResult
 */
export interface Ec2AdvertiseByoipCidrResult {
  /**
   * @schema Ec2AdvertiseByoipCidrResult#ByoipCidr
   */
  readonly byoipCidr?: Ec2ByoipCidr;

}

/**
 * Converts an object of type 'Ec2AdvertiseByoipCidrResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AdvertiseByoipCidrResult(obj: Ec2AdvertiseByoipCidrResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ByoipCidr': toJson_Ec2ByoipCidr(obj.byoipCidr),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AllocateAddressRequest
 */
export interface Ec2AllocateAddressRequest {
  /**
   * @schema Ec2AllocateAddressRequest#Domain
   */
  readonly domain?: string;

  /**
   * @schema Ec2AllocateAddressRequest#Address
   */
  readonly address?: string;

  /**
   * @schema Ec2AllocateAddressRequest#PublicIpv4Pool
   */
  readonly publicIpv4Pool?: string;

  /**
   * @schema Ec2AllocateAddressRequest#NetworkBorderGroup
   */
  readonly networkBorderGroup?: string;

  /**
   * @schema Ec2AllocateAddressRequest#CustomerOwnedIpv4Pool
   */
  readonly customerOwnedIpv4Pool?: string;

  /**
   * @schema Ec2AllocateAddressRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AllocateAddressRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2AllocateAddressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AllocateAddressRequest(obj: Ec2AllocateAddressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Domain': obj.domain,
    'Address': obj.address,
    'PublicIpv4Pool': obj.publicIpv4Pool,
    'NetworkBorderGroup': obj.networkBorderGroup,
    'CustomerOwnedIpv4Pool': obj.customerOwnedIpv4Pool,
    'DryRun': obj.dryRun,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AllocateAddressResult
 */
export interface Ec2AllocateAddressResult {
  /**
   * @schema Ec2AllocateAddressResult#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2AllocateAddressResult#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2AllocateAddressResult#PublicIpv4Pool
   */
  readonly publicIpv4Pool?: string;

  /**
   * @schema Ec2AllocateAddressResult#NetworkBorderGroup
   */
  readonly networkBorderGroup?: string;

  /**
   * @schema Ec2AllocateAddressResult#Domain
   */
  readonly domain?: string;

  /**
   * @schema Ec2AllocateAddressResult#CustomerOwnedIp
   */
  readonly customerOwnedIp?: string;

  /**
   * @schema Ec2AllocateAddressResult#CustomerOwnedIpv4Pool
   */
  readonly customerOwnedIpv4Pool?: string;

  /**
   * @schema Ec2AllocateAddressResult#CarrierIp
   */
  readonly carrierIp?: string;

}

/**
 * Converts an object of type 'Ec2AllocateAddressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AllocateAddressResult(obj: Ec2AllocateAddressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PublicIp': obj.publicIp,
    'AllocationId': obj.allocationId,
    'PublicIpv4Pool': obj.publicIpv4Pool,
    'NetworkBorderGroup': obj.networkBorderGroup,
    'Domain': obj.domain,
    'CustomerOwnedIp': obj.customerOwnedIp,
    'CustomerOwnedIpv4Pool': obj.customerOwnedIpv4Pool,
    'CarrierIp': obj.carrierIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AllocateHostsRequest
 */
export interface Ec2AllocateHostsRequest {
  /**
   * @schema Ec2AllocateHostsRequest#AutoPlacement
   */
  readonly autoPlacement?: string;

  /**
   * @schema Ec2AllocateHostsRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2AllocateHostsRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2AllocateHostsRequest#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2AllocateHostsRequest#InstanceFamily
   */
  readonly instanceFamily?: string;

  /**
   * @schema Ec2AllocateHostsRequest#Quantity
   */
  readonly quantity?: number;

  /**
   * @schema Ec2AllocateHostsRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2AllocateHostsRequest#HostRecovery
   */
  readonly hostRecovery?: string;

}

/**
 * Converts an object of type 'Ec2AllocateHostsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AllocateHostsRequest(obj: Ec2AllocateHostsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AutoPlacement': obj.autoPlacement,
    'AvailabilityZone': obj.availabilityZone,
    'ClientToken': obj.clientToken,
    'InstanceType': obj.instanceType,
    'InstanceFamily': obj.instanceFamily,
    'Quantity': obj.quantity,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'HostRecovery': obj.hostRecovery,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AllocateHostsResult
 */
export interface Ec2AllocateHostsResult {
  /**
   * @schema Ec2AllocateHostsResult#HostIds
   */
  readonly hostIds?: string[];

}

/**
 * Converts an object of type 'Ec2AllocateHostsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AllocateHostsResult(obj: Ec2AllocateHostsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HostIds': obj.hostIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest
 */
export interface Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest {
  /**
   * @schema Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest(obj: Ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'VpcId': obj.vpcId,
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ApplySecurityGroupsToClientVpnTargetNetworkResult
 */
export interface Ec2ApplySecurityGroupsToClientVpnTargetNetworkResult {
  /**
   * @schema Ec2ApplySecurityGroupsToClientVpnTargetNetworkResult#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

}

/**
 * Converts an object of type 'Ec2ApplySecurityGroupsToClientVpnTargetNetworkResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ApplySecurityGroupsToClientVpnTargetNetworkResult(obj: Ec2ApplySecurityGroupsToClientVpnTargetNetworkResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssignIpv6AddressesRequest
 */
export interface Ec2AssignIpv6AddressesRequest {
  /**
   * @schema Ec2AssignIpv6AddressesRequest#Ipv6AddressCount
   */
  readonly ipv6AddressCount?: number;

  /**
   * @schema Ec2AssignIpv6AddressesRequest#Ipv6Addresses
   */
  readonly ipv6Addresses?: string[];

  /**
   * @schema Ec2AssignIpv6AddressesRequest#Ipv6PrefixCount
   */
  readonly ipv6PrefixCount?: number;

  /**
   * @schema Ec2AssignIpv6AddressesRequest#Ipv6Prefixes
   */
  readonly ipv6Prefixes?: string[];

  /**
   * @schema Ec2AssignIpv6AddressesRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

}

/**
 * Converts an object of type 'Ec2AssignIpv6AddressesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssignIpv6AddressesRequest(obj: Ec2AssignIpv6AddressesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6AddressCount': obj.ipv6AddressCount,
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => y),
    'Ipv6PrefixCount': obj.ipv6PrefixCount,
    'Ipv6Prefixes': obj.ipv6Prefixes?.map(y => y),
    'NetworkInterfaceId': obj.networkInterfaceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssignIpv6AddressesResult
 */
export interface Ec2AssignIpv6AddressesResult {
  /**
   * @schema Ec2AssignIpv6AddressesResult#AssignedIpv6Addresses
   */
  readonly assignedIpv6Addresses?: string[];

  /**
   * @schema Ec2AssignIpv6AddressesResult#AssignedIpv6Prefixes
   */
  readonly assignedIpv6Prefixes?: string[];

  /**
   * @schema Ec2AssignIpv6AddressesResult#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

}

/**
 * Converts an object of type 'Ec2AssignIpv6AddressesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssignIpv6AddressesResult(obj: Ec2AssignIpv6AddressesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssignedIpv6Addresses': obj.assignedIpv6Addresses?.map(y => y),
    'AssignedIpv6Prefixes': obj.assignedIpv6Prefixes?.map(y => y),
    'NetworkInterfaceId': obj.networkInterfaceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssignPrivateIpAddressesRequest
 */
export interface Ec2AssignPrivateIpAddressesRequest {
  /**
   * @schema Ec2AssignPrivateIpAddressesRequest#AllowReassignment
   */
  readonly allowReassignment?: boolean;

  /**
   * @schema Ec2AssignPrivateIpAddressesRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2AssignPrivateIpAddressesRequest#PrivateIpAddresses
   */
  readonly privateIpAddresses?: string[];

  /**
   * @schema Ec2AssignPrivateIpAddressesRequest#SecondaryPrivateIpAddressCount
   */
  readonly secondaryPrivateIpAddressCount?: number;

  /**
   * @schema Ec2AssignPrivateIpAddressesRequest#Ipv4Prefixes
   */
  readonly ipv4Prefixes?: string[];

  /**
   * @schema Ec2AssignPrivateIpAddressesRequest#Ipv4PrefixCount
   */
  readonly ipv4PrefixCount?: number;

}

/**
 * Converts an object of type 'Ec2AssignPrivateIpAddressesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssignPrivateIpAddressesRequest(obj: Ec2AssignPrivateIpAddressesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllowReassignment': obj.allowReassignment,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'PrivateIpAddresses': obj.privateIpAddresses?.map(y => y),
    'SecondaryPrivateIpAddressCount': obj.secondaryPrivateIpAddressCount,
    'Ipv4Prefixes': obj.ipv4Prefixes?.map(y => y),
    'Ipv4PrefixCount': obj.ipv4PrefixCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssignPrivateIpAddressesResult
 */
export interface Ec2AssignPrivateIpAddressesResult {
  /**
   * @schema Ec2AssignPrivateIpAddressesResult#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2AssignPrivateIpAddressesResult#AssignedPrivateIpAddresses
   */
  readonly assignedPrivateIpAddresses?: Ec2AssignedPrivateIpAddress[];

  /**
   * @schema Ec2AssignPrivateIpAddressesResult#AssignedIpv4Prefixes
   */
  readonly assignedIpv4Prefixes?: Ec2Ipv4PrefixSpecification[];

}

/**
 * Converts an object of type 'Ec2AssignPrivateIpAddressesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssignPrivateIpAddressesResult(obj: Ec2AssignPrivateIpAddressesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfaceId': obj.networkInterfaceId,
    'AssignedPrivateIpAddresses': obj.assignedPrivateIpAddresses?.map(y => toJson_Ec2AssignedPrivateIpAddress(y)),
    'AssignedIpv4Prefixes': obj.assignedIpv4Prefixes?.map(y => toJson_Ec2Ipv4PrefixSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateAddressRequest
 */
export interface Ec2AssociateAddressRequest {
  /**
   * @schema Ec2AssociateAddressRequest#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2AssociateAddressRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2AssociateAddressRequest#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2AssociateAddressRequest#AllowReassociation
   */
  readonly allowReassociation?: boolean;

  /**
   * @schema Ec2AssociateAddressRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AssociateAddressRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2AssociateAddressRequest#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2AssociateAddressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateAddressRequest(obj: Ec2AssociateAddressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'InstanceId': obj.instanceId,
    'PublicIp': obj.publicIp,
    'AllowReassociation': obj.allowReassociation,
    'DryRun': obj.dryRun,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'PrivateIpAddress': obj.privateIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateAddressResult
 */
export interface Ec2AssociateAddressResult {
  /**
   * @schema Ec2AssociateAddressResult#AssociationId
   */
  readonly associationId?: string;

}

/**
 * Converts an object of type 'Ec2AssociateAddressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateAddressResult(obj: Ec2AssociateAddressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateClientVpnTargetNetworkRequest
 */
export interface Ec2AssociateClientVpnTargetNetworkRequest {
  /**
   * @schema Ec2AssociateClientVpnTargetNetworkRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2AssociateClientVpnTargetNetworkRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2AssociateClientVpnTargetNetworkRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2AssociateClientVpnTargetNetworkRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AssociateClientVpnTargetNetworkRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateClientVpnTargetNetworkRequest(obj: Ec2AssociateClientVpnTargetNetworkRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'SubnetId': obj.subnetId,
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateClientVpnTargetNetworkResult
 */
export interface Ec2AssociateClientVpnTargetNetworkResult {
  /**
   * @schema Ec2AssociateClientVpnTargetNetworkResult#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2AssociateClientVpnTargetNetworkResult#Status
   */
  readonly status?: Ec2AssociationStatus;

}

/**
 * Converts an object of type 'Ec2AssociateClientVpnTargetNetworkResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateClientVpnTargetNetworkResult(obj: Ec2AssociateClientVpnTargetNetworkResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'Status': toJson_Ec2AssociationStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateDhcpOptionsRequest
 */
export interface Ec2AssociateDhcpOptionsRequest {
  /**
   * @schema Ec2AssociateDhcpOptionsRequest#DhcpOptionsId
   */
  readonly dhcpOptionsId?: string;

  /**
   * @schema Ec2AssociateDhcpOptionsRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2AssociateDhcpOptionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AssociateDhcpOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateDhcpOptionsRequest(obj: Ec2AssociateDhcpOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DhcpOptionsId': obj.dhcpOptionsId,
    'VpcId': obj.vpcId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateEnclaveCertificateIamRoleRequest
 */
export interface Ec2AssociateEnclaveCertificateIamRoleRequest {
  /**
   * @schema Ec2AssociateEnclaveCertificateIamRoleRequest#CertificateArn
   */
  readonly certificateArn?: string;

  /**
   * @schema Ec2AssociateEnclaveCertificateIamRoleRequest#RoleArn
   */
  readonly roleArn?: string;

  /**
   * @schema Ec2AssociateEnclaveCertificateIamRoleRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AssociateEnclaveCertificateIamRoleRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateEnclaveCertificateIamRoleRequest(obj: Ec2AssociateEnclaveCertificateIamRoleRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CertificateArn': obj.certificateArn,
    'RoleArn': obj.roleArn,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateEnclaveCertificateIamRoleResult
 */
export interface Ec2AssociateEnclaveCertificateIamRoleResult {
  /**
   * @schema Ec2AssociateEnclaveCertificateIamRoleResult#CertificateS3BucketName
   */
  readonly certificateS3BucketName?: string;

  /**
   * @schema Ec2AssociateEnclaveCertificateIamRoleResult#CertificateS3ObjectKey
   */
  readonly certificateS3ObjectKey?: string;

  /**
   * @schema Ec2AssociateEnclaveCertificateIamRoleResult#EncryptionKmsKeyId
   */
  readonly encryptionKmsKeyId?: string;

}

/**
 * Converts an object of type 'Ec2AssociateEnclaveCertificateIamRoleResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateEnclaveCertificateIamRoleResult(obj: Ec2AssociateEnclaveCertificateIamRoleResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CertificateS3BucketName': obj.certificateS3BucketName,
    'CertificateS3ObjectKey': obj.certificateS3ObjectKey,
    'EncryptionKmsKeyId': obj.encryptionKmsKeyId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateIamInstanceProfileRequest
 */
export interface Ec2AssociateIamInstanceProfileRequest {
  /**
   * @schema Ec2AssociateIamInstanceProfileRequest#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2IamInstanceProfileSpecification;

  /**
   * @schema Ec2AssociateIamInstanceProfileRequest#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2AssociateIamInstanceProfileRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateIamInstanceProfileRequest(obj: Ec2AssociateIamInstanceProfileRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IamInstanceProfile': toJson_Ec2IamInstanceProfileSpecification(obj.iamInstanceProfile),
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateIamInstanceProfileResult
 */
export interface Ec2AssociateIamInstanceProfileResult {
  /**
   * @schema Ec2AssociateIamInstanceProfileResult#IamInstanceProfileAssociation
   */
  readonly iamInstanceProfileAssociation?: Ec2IamInstanceProfileAssociation;

}

/**
 * Converts an object of type 'Ec2AssociateIamInstanceProfileResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateIamInstanceProfileResult(obj: Ec2AssociateIamInstanceProfileResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IamInstanceProfileAssociation': toJson_Ec2IamInstanceProfileAssociation(obj.iamInstanceProfileAssociation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateInstanceEventWindowRequest
 */
export interface Ec2AssociateInstanceEventWindowRequest {
  /**
   * @schema Ec2AssociateInstanceEventWindowRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AssociateInstanceEventWindowRequest#InstanceEventWindowId
   */
  readonly instanceEventWindowId?: string;

  /**
   * @schema Ec2AssociateInstanceEventWindowRequest#AssociationTarget
   */
  readonly associationTarget?: Ec2InstanceEventWindowAssociationRequest;

}

/**
 * Converts an object of type 'Ec2AssociateInstanceEventWindowRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateInstanceEventWindowRequest(obj: Ec2AssociateInstanceEventWindowRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceEventWindowId': obj.instanceEventWindowId,
    'AssociationTarget': toJson_Ec2InstanceEventWindowAssociationRequest(obj.associationTarget),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateInstanceEventWindowResult
 */
export interface Ec2AssociateInstanceEventWindowResult {
  /**
   * @schema Ec2AssociateInstanceEventWindowResult#InstanceEventWindow
   */
  readonly instanceEventWindow?: Ec2InstanceEventWindow;

}

/**
 * Converts an object of type 'Ec2AssociateInstanceEventWindowResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateInstanceEventWindowResult(obj: Ec2AssociateInstanceEventWindowResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventWindow': toJson_Ec2InstanceEventWindow(obj.instanceEventWindow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateRouteTableRequest
 */
export interface Ec2AssociateRouteTableRequest {
  /**
   * @schema Ec2AssociateRouteTableRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AssociateRouteTableRequest#RouteTableId
   */
  readonly routeTableId?: string;

  /**
   * @schema Ec2AssociateRouteTableRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2AssociateRouteTableRequest#GatewayId
   */
  readonly gatewayId?: string;

}

/**
 * Converts an object of type 'Ec2AssociateRouteTableRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateRouteTableRequest(obj: Ec2AssociateRouteTableRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'RouteTableId': obj.routeTableId,
    'SubnetId': obj.subnetId,
    'GatewayId': obj.gatewayId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateRouteTableResult
 */
export interface Ec2AssociateRouteTableResult {
  /**
   * @schema Ec2AssociateRouteTableResult#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2AssociateRouteTableResult#AssociationState
   */
  readonly associationState?: Ec2RouteTableAssociationState;

}

/**
 * Converts an object of type 'Ec2AssociateRouteTableResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateRouteTableResult(obj: Ec2AssociateRouteTableResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'AssociationState': toJson_Ec2RouteTableAssociationState(obj.associationState),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateSubnetCidrBlockRequest
 */
export interface Ec2AssociateSubnetCidrBlockRequest {
  /**
   * @schema Ec2AssociateSubnetCidrBlockRequest#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

  /**
   * @schema Ec2AssociateSubnetCidrBlockRequest#SubnetId
   */
  readonly subnetId?: string;

}

/**
 * Converts an object of type 'Ec2AssociateSubnetCidrBlockRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateSubnetCidrBlockRequest(obj: Ec2AssociateSubnetCidrBlockRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
    'SubnetId': obj.subnetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateSubnetCidrBlockResult
 */
export interface Ec2AssociateSubnetCidrBlockResult {
  /**
   * @schema Ec2AssociateSubnetCidrBlockResult#Ipv6CidrBlockAssociation
   */
  readonly ipv6CidrBlockAssociation?: Ec2SubnetIpv6CidrBlockAssociation;

  /**
   * @schema Ec2AssociateSubnetCidrBlockResult#SubnetId
   */
  readonly subnetId?: string;

}

/**
 * Converts an object of type 'Ec2AssociateSubnetCidrBlockResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateSubnetCidrBlockResult(obj: Ec2AssociateSubnetCidrBlockResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6CidrBlockAssociation': toJson_Ec2SubnetIpv6CidrBlockAssociation(obj.ipv6CidrBlockAssociation),
    'SubnetId': obj.subnetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateTransitGatewayMulticastDomainRequest
 */
export interface Ec2AssociateTransitGatewayMulticastDomainRequest {
  /**
   * @schema Ec2AssociateTransitGatewayMulticastDomainRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2AssociateTransitGatewayMulticastDomainRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2AssociateTransitGatewayMulticastDomainRequest#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2AssociateTransitGatewayMulticastDomainRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AssociateTransitGatewayMulticastDomainRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateTransitGatewayMulticastDomainRequest(obj: Ec2AssociateTransitGatewayMulticastDomainRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'SubnetIds': obj.subnetIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateTransitGatewayMulticastDomainResult
 */
export interface Ec2AssociateTransitGatewayMulticastDomainResult {
  /**
   * @schema Ec2AssociateTransitGatewayMulticastDomainResult#Associations
   */
  readonly associations?: Ec2TransitGatewayMulticastDomainAssociations;

}

/**
 * Converts an object of type 'Ec2AssociateTransitGatewayMulticastDomainResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateTransitGatewayMulticastDomainResult(obj: Ec2AssociateTransitGatewayMulticastDomainResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Associations': toJson_Ec2TransitGatewayMulticastDomainAssociations(obj.associations),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateTransitGatewayRouteTableRequest
 */
export interface Ec2AssociateTransitGatewayRouteTableRequest {
  /**
   * @schema Ec2AssociateTransitGatewayRouteTableRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2AssociateTransitGatewayRouteTableRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2AssociateTransitGatewayRouteTableRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AssociateTransitGatewayRouteTableRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateTransitGatewayRouteTableRequest(obj: Ec2AssociateTransitGatewayRouteTableRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateTransitGatewayRouteTableResult
 */
export interface Ec2AssociateTransitGatewayRouteTableResult {
  /**
   * @schema Ec2AssociateTransitGatewayRouteTableResult#Association
   */
  readonly association?: Ec2TransitGatewayAssociation;

}

/**
 * Converts an object of type 'Ec2AssociateTransitGatewayRouteTableResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateTransitGatewayRouteTableResult(obj: Ec2AssociateTransitGatewayRouteTableResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Association': toJson_Ec2TransitGatewayAssociation(obj.association),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateTrunkInterfaceRequest
 */
export interface Ec2AssociateTrunkInterfaceRequest {
  /**
   * @schema Ec2AssociateTrunkInterfaceRequest#BranchInterfaceId
   */
  readonly branchInterfaceId?: string;

  /**
   * @schema Ec2AssociateTrunkInterfaceRequest#TrunkInterfaceId
   */
  readonly trunkInterfaceId?: string;

  /**
   * @schema Ec2AssociateTrunkInterfaceRequest#VlanId
   */
  readonly vlanId?: number;

  /**
   * @schema Ec2AssociateTrunkInterfaceRequest#GreKey
   */
  readonly greKey?: number;

  /**
   * @schema Ec2AssociateTrunkInterfaceRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2AssociateTrunkInterfaceRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AssociateTrunkInterfaceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateTrunkInterfaceRequest(obj: Ec2AssociateTrunkInterfaceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BranchInterfaceId': obj.branchInterfaceId,
    'TrunkInterfaceId': obj.trunkInterfaceId,
    'VlanId': obj.vlanId,
    'GreKey': obj.greKey,
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateTrunkInterfaceResult
 */
export interface Ec2AssociateTrunkInterfaceResult {
  /**
   * @schema Ec2AssociateTrunkInterfaceResult#InterfaceAssociation
   */
  readonly interfaceAssociation?: Ec2TrunkInterfaceAssociation;

  /**
   * @schema Ec2AssociateTrunkInterfaceResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2AssociateTrunkInterfaceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateTrunkInterfaceResult(obj: Ec2AssociateTrunkInterfaceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InterfaceAssociation': toJson_Ec2TrunkInterfaceAssociation(obj.interfaceAssociation),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateVpcCidrBlockRequest
 */
export interface Ec2AssociateVpcCidrBlockRequest {
  /**
   * @schema Ec2AssociateVpcCidrBlockRequest#AmazonProvidedIpv6CidrBlock
   */
  readonly amazonProvidedIpv6CidrBlock?: boolean;

  /**
   * @schema Ec2AssociateVpcCidrBlockRequest#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2AssociateVpcCidrBlockRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2AssociateVpcCidrBlockRequest#Ipv6CidrBlockNetworkBorderGroup
   */
  readonly ipv6CidrBlockNetworkBorderGroup?: string;

  /**
   * @schema Ec2AssociateVpcCidrBlockRequest#Ipv6Pool
   */
  readonly ipv6Pool?: string;

  /**
   * @schema Ec2AssociateVpcCidrBlockRequest#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

}

/**
 * Converts an object of type 'Ec2AssociateVpcCidrBlockRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateVpcCidrBlockRequest(obj: Ec2AssociateVpcCidrBlockRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AmazonProvidedIpv6CidrBlock': obj.amazonProvidedIpv6CidrBlock,
    'CidrBlock': obj.cidrBlock,
    'VpcId': obj.vpcId,
    'Ipv6CidrBlockNetworkBorderGroup': obj.ipv6CidrBlockNetworkBorderGroup,
    'Ipv6Pool': obj.ipv6Pool,
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociateVpcCidrBlockResult
 */
export interface Ec2AssociateVpcCidrBlockResult {
  /**
   * @schema Ec2AssociateVpcCidrBlockResult#Ipv6CidrBlockAssociation
   */
  readonly ipv6CidrBlockAssociation?: Ec2VpcIpv6CidrBlockAssociation;

  /**
   * @schema Ec2AssociateVpcCidrBlockResult#CidrBlockAssociation
   */
  readonly cidrBlockAssociation?: Ec2VpcCidrBlockAssociation;

  /**
   * @schema Ec2AssociateVpcCidrBlockResult#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2AssociateVpcCidrBlockResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociateVpcCidrBlockResult(obj: Ec2AssociateVpcCidrBlockResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6CidrBlockAssociation': toJson_Ec2VpcIpv6CidrBlockAssociation(obj.ipv6CidrBlockAssociation),
    'CidrBlockAssociation': toJson_Ec2VpcCidrBlockAssociation(obj.cidrBlockAssociation),
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttachClassicLinkVpcRequest
 */
export interface Ec2AttachClassicLinkVpcRequest {
  /**
   * @schema Ec2AttachClassicLinkVpcRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AttachClassicLinkVpcRequest#Groups
   */
  readonly groups?: string[];

  /**
   * @schema Ec2AttachClassicLinkVpcRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2AttachClassicLinkVpcRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2AttachClassicLinkVpcRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttachClassicLinkVpcRequest(obj: Ec2AttachClassicLinkVpcRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Groups': obj.groups?.map(y => y),
    'InstanceId': obj.instanceId,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttachClassicLinkVpcResult
 */
export interface Ec2AttachClassicLinkVpcResult {
  /**
   * @schema Ec2AttachClassicLinkVpcResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2AttachClassicLinkVpcResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttachClassicLinkVpcResult(obj: Ec2AttachClassicLinkVpcResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttachInternetGatewayRequest
 */
export interface Ec2AttachInternetGatewayRequest {
  /**
   * @schema Ec2AttachInternetGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AttachInternetGatewayRequest#InternetGatewayId
   */
  readonly internetGatewayId?: string;

  /**
   * @schema Ec2AttachInternetGatewayRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2AttachInternetGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttachInternetGatewayRequest(obj: Ec2AttachInternetGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InternetGatewayId': obj.internetGatewayId,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttachNetworkInterfaceRequest
 */
export interface Ec2AttachNetworkInterfaceRequest {
  /**
   * @schema Ec2AttachNetworkInterfaceRequest#DeviceIndex
   */
  readonly deviceIndex?: number;

  /**
   * @schema Ec2AttachNetworkInterfaceRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AttachNetworkInterfaceRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2AttachNetworkInterfaceRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2AttachNetworkInterfaceRequest#NetworkCardIndex
   */
  readonly networkCardIndex?: number;

}

/**
 * Converts an object of type 'Ec2AttachNetworkInterfaceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttachNetworkInterfaceRequest(obj: Ec2AttachNetworkInterfaceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeviceIndex': obj.deviceIndex,
    'DryRun': obj.dryRun,
    'InstanceId': obj.instanceId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'NetworkCardIndex': obj.networkCardIndex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttachNetworkInterfaceResult
 */
export interface Ec2AttachNetworkInterfaceResult {
  /**
   * @schema Ec2AttachNetworkInterfaceResult#AttachmentId
   */
  readonly attachmentId?: string;

  /**
   * @schema Ec2AttachNetworkInterfaceResult#NetworkCardIndex
   */
  readonly networkCardIndex?: number;

}

/**
 * Converts an object of type 'Ec2AttachNetworkInterfaceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttachNetworkInterfaceResult(obj: Ec2AttachNetworkInterfaceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttachmentId': obj.attachmentId,
    'NetworkCardIndex': obj.networkCardIndex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttachVolumeRequest
 */
export interface Ec2AttachVolumeRequest {
  /**
   * @schema Ec2AttachVolumeRequest#Device
   */
  readonly device?: string;

  /**
   * @schema Ec2AttachVolumeRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2AttachVolumeRequest#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2AttachVolumeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AttachVolumeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttachVolumeRequest(obj: Ec2AttachVolumeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Device': obj.device,
    'InstanceId': obj.instanceId,
    'VolumeId': obj.volumeId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeAttachment
 */
export interface Ec2VolumeAttachment {
  /**
   * @schema Ec2VolumeAttachment#AttachTime
   */
  readonly attachTime?: string;

  /**
   * @schema Ec2VolumeAttachment#Device
   */
  readonly device?: string;

  /**
   * @schema Ec2VolumeAttachment#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2VolumeAttachment#State
   */
  readonly state?: string;

  /**
   * @schema Ec2VolumeAttachment#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2VolumeAttachment#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

}

/**
 * Converts an object of type 'Ec2VolumeAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeAttachment(obj: Ec2VolumeAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttachTime': obj.attachTime,
    'Device': obj.device,
    'InstanceId': obj.instanceId,
    'State': obj.state,
    'VolumeId': obj.volumeId,
    'DeleteOnTermination': obj.deleteOnTermination,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttachVpnGatewayRequest
 */
export interface Ec2AttachVpnGatewayRequest {
  /**
   * @schema Ec2AttachVpnGatewayRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2AttachVpnGatewayRequest#VpnGatewayId
   */
  readonly vpnGatewayId?: string;

  /**
   * @schema Ec2AttachVpnGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AttachVpnGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttachVpnGatewayRequest(obj: Ec2AttachVpnGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcId': obj.vpcId,
    'VpnGatewayId': obj.vpnGatewayId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttachVpnGatewayResult
 */
export interface Ec2AttachVpnGatewayResult {
  /**
   * @schema Ec2AttachVpnGatewayResult#VpcAttachment
   */
  readonly vpcAttachment?: Ec2VpcAttachment;

}

/**
 * Converts an object of type 'Ec2AttachVpnGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttachVpnGatewayResult(obj: Ec2AttachVpnGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcAttachment': toJson_Ec2VpcAttachment(obj.vpcAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AuthorizeClientVpnIngressRequest
 */
export interface Ec2AuthorizeClientVpnIngressRequest {
  /**
   * @schema Ec2AuthorizeClientVpnIngressRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2AuthorizeClientVpnIngressRequest#TargetNetworkCidr
   */
  readonly targetNetworkCidr?: string;

  /**
   * @schema Ec2AuthorizeClientVpnIngressRequest#AccessGroupId
   */
  readonly accessGroupId?: string;

  /**
   * @schema Ec2AuthorizeClientVpnIngressRequest#AuthorizeAllGroups
   */
  readonly authorizeAllGroups?: boolean;

  /**
   * @schema Ec2AuthorizeClientVpnIngressRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2AuthorizeClientVpnIngressRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2AuthorizeClientVpnIngressRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2AuthorizeClientVpnIngressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AuthorizeClientVpnIngressRequest(obj: Ec2AuthorizeClientVpnIngressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'TargetNetworkCidr': obj.targetNetworkCidr,
    'AccessGroupId': obj.accessGroupId,
    'AuthorizeAllGroups': obj.authorizeAllGroups,
    'Description': obj.description,
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AuthorizeClientVpnIngressResult
 */
export interface Ec2AuthorizeClientVpnIngressResult {
  /**
   * @schema Ec2AuthorizeClientVpnIngressResult#Status
   */
  readonly status?: Ec2ClientVpnAuthorizationRuleStatus;

}

/**
 * Converts an object of type 'Ec2AuthorizeClientVpnIngressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AuthorizeClientVpnIngressResult(obj: Ec2AuthorizeClientVpnIngressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Status': toJson_Ec2ClientVpnAuthorizationRuleStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AuthorizeSecurityGroupEgressRequest
 */
export interface Ec2AuthorizeSecurityGroupEgressRequest {
  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#IpPermissions
   */
  readonly ipPermissions?: Ec2IpPermission[];

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#CidrIp
   */
  readonly cidrIp?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#IpProtocol
   */
  readonly ipProtocol?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#ToPort
   */
  readonly toPort?: number;

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#SourceSecurityGroupName
   */
  readonly sourceSecurityGroupName?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressRequest#SourceSecurityGroupOwnerId
   */
  readonly sourceSecurityGroupOwnerId?: string;

}

/**
 * Converts an object of type 'Ec2AuthorizeSecurityGroupEgressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AuthorizeSecurityGroupEgressRequest(obj: Ec2AuthorizeSecurityGroupEgressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'GroupId': obj.groupId,
    'IpPermissions': obj.ipPermissions?.map(y => toJson_Ec2IpPermission(y)),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'CidrIp': obj.cidrIp,
    'FromPort': obj.fromPort,
    'IpProtocol': obj.ipProtocol,
    'ToPort': obj.toPort,
    'SourceSecurityGroupName': obj.sourceSecurityGroupName,
    'SourceSecurityGroupOwnerId': obj.sourceSecurityGroupOwnerId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AuthorizeSecurityGroupEgressResult
 */
export interface Ec2AuthorizeSecurityGroupEgressResult {
  /**
   * @schema Ec2AuthorizeSecurityGroupEgressResult#Return
   */
  readonly return?: boolean;

  /**
   * @schema Ec2AuthorizeSecurityGroupEgressResult#SecurityGroupRules
   */
  readonly securityGroupRules?: Ec2SecurityGroupRule[];

}

/**
 * Converts an object of type 'Ec2AuthorizeSecurityGroupEgressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AuthorizeSecurityGroupEgressResult(obj: Ec2AuthorizeSecurityGroupEgressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
    'SecurityGroupRules': obj.securityGroupRules?.map(y => toJson_Ec2SecurityGroupRule(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AuthorizeSecurityGroupIngressRequest
 */
export interface Ec2AuthorizeSecurityGroupIngressRequest {
  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#CidrIp
   */
  readonly cidrIp?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#IpPermissions
   */
  readonly ipPermissions?: Ec2IpPermission[];

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#IpProtocol
   */
  readonly ipProtocol?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#SourceSecurityGroupName
   */
  readonly sourceSecurityGroupName?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#SourceSecurityGroupOwnerId
   */
  readonly sourceSecurityGroupOwnerId?: string;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#ToPort
   */
  readonly toPort?: number;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2AuthorizeSecurityGroupIngressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AuthorizeSecurityGroupIngressRequest(obj: Ec2AuthorizeSecurityGroupIngressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrIp': obj.cidrIp,
    'FromPort': obj.fromPort,
    'GroupId': obj.groupId,
    'GroupName': obj.groupName,
    'IpPermissions': obj.ipPermissions?.map(y => toJson_Ec2IpPermission(y)),
    'IpProtocol': obj.ipProtocol,
    'SourceSecurityGroupName': obj.sourceSecurityGroupName,
    'SourceSecurityGroupOwnerId': obj.sourceSecurityGroupOwnerId,
    'ToPort': obj.toPort,
    'DryRun': obj.dryRun,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AuthorizeSecurityGroupIngressResult
 */
export interface Ec2AuthorizeSecurityGroupIngressResult {
  /**
   * @schema Ec2AuthorizeSecurityGroupIngressResult#Return
   */
  readonly return?: boolean;

  /**
   * @schema Ec2AuthorizeSecurityGroupIngressResult#SecurityGroupRules
   */
  readonly securityGroupRules?: Ec2SecurityGroupRule[];

}

/**
 * Converts an object of type 'Ec2AuthorizeSecurityGroupIngressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AuthorizeSecurityGroupIngressResult(obj: Ec2AuthorizeSecurityGroupIngressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
    'SecurityGroupRules': obj.securityGroupRules?.map(y => toJson_Ec2SecurityGroupRule(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2BundleInstanceRequest
 */
export interface Ec2BundleInstanceRequest {
  /**
   * @schema Ec2BundleInstanceRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2BundleInstanceRequest#Storage
   */
  readonly storage?: Ec2Storage;

  /**
   * @schema Ec2BundleInstanceRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2BundleInstanceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2BundleInstanceRequest(obj: Ec2BundleInstanceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'Storage': toJson_Ec2Storage(obj.storage),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2BundleInstanceResult
 */
export interface Ec2BundleInstanceResult {
  /**
   * @schema Ec2BundleInstanceResult#BundleTask
   */
  readonly bundleTask?: Ec2BundleTask;

}

/**
 * Converts an object of type 'Ec2BundleInstanceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2BundleInstanceResult(obj: Ec2BundleInstanceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BundleTask': toJson_Ec2BundleTask(obj.bundleTask),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelBundleTaskRequest
 */
export interface Ec2CancelBundleTaskRequest {
  /**
   * @schema Ec2CancelBundleTaskRequest#BundleId
   */
  readonly bundleId?: string;

  /**
   * @schema Ec2CancelBundleTaskRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CancelBundleTaskRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelBundleTaskRequest(obj: Ec2CancelBundleTaskRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BundleId': obj.bundleId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelBundleTaskResult
 */
export interface Ec2CancelBundleTaskResult {
  /**
   * @schema Ec2CancelBundleTaskResult#BundleTask
   */
  readonly bundleTask?: Ec2BundleTask;

}

/**
 * Converts an object of type 'Ec2CancelBundleTaskResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelBundleTaskResult(obj: Ec2CancelBundleTaskResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BundleTask': toJson_Ec2BundleTask(obj.bundleTask),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelCapacityReservationRequest
 */
export interface Ec2CancelCapacityReservationRequest {
  /**
   * @schema Ec2CancelCapacityReservationRequest#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2CancelCapacityReservationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CancelCapacityReservationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelCapacityReservationRequest(obj: Ec2CancelCapacityReservationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationId': obj.capacityReservationId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelCapacityReservationResult
 */
export interface Ec2CancelCapacityReservationResult {
  /**
   * @schema Ec2CancelCapacityReservationResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2CancelCapacityReservationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelCapacityReservationResult(obj: Ec2CancelCapacityReservationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelConversionRequest
 */
export interface Ec2CancelConversionRequest {
  /**
   * @schema Ec2CancelConversionRequest#ConversionTaskId
   */
  readonly conversionTaskId?: string;

  /**
   * @schema Ec2CancelConversionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CancelConversionRequest#ReasonMessage
   */
  readonly reasonMessage?: string;

}

/**
 * Converts an object of type 'Ec2CancelConversionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelConversionRequest(obj: Ec2CancelConversionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConversionTaskId': obj.conversionTaskId,
    'DryRun': obj.dryRun,
    'ReasonMessage': obj.reasonMessage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelExportTaskRequest
 */
export interface Ec2CancelExportTaskRequest {
  /**
   * @schema Ec2CancelExportTaskRequest#ExportTaskId
   */
  readonly exportTaskId?: string;

}

/**
 * Converts an object of type 'Ec2CancelExportTaskRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelExportTaskRequest(obj: Ec2CancelExportTaskRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExportTaskId': obj.exportTaskId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelImportTaskRequest
 */
export interface Ec2CancelImportTaskRequest {
  /**
   * @schema Ec2CancelImportTaskRequest#CancelReason
   */
  readonly cancelReason?: string;

  /**
   * @schema Ec2CancelImportTaskRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CancelImportTaskRequest#ImportTaskId
   */
  readonly importTaskId?: string;

}

/**
 * Converts an object of type 'Ec2CancelImportTaskRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelImportTaskRequest(obj: Ec2CancelImportTaskRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CancelReason': obj.cancelReason,
    'DryRun': obj.dryRun,
    'ImportTaskId': obj.importTaskId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelImportTaskResult
 */
export interface Ec2CancelImportTaskResult {
  /**
   * @schema Ec2CancelImportTaskResult#ImportTaskId
   */
  readonly importTaskId?: string;

  /**
   * @schema Ec2CancelImportTaskResult#PreviousState
   */
  readonly previousState?: string;

  /**
   * @schema Ec2CancelImportTaskResult#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2CancelImportTaskResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelImportTaskResult(obj: Ec2CancelImportTaskResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImportTaskId': obj.importTaskId,
    'PreviousState': obj.previousState,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelReservedInstancesListingRequest
 */
export interface Ec2CancelReservedInstancesListingRequest {
  /**
   * @schema Ec2CancelReservedInstancesListingRequest#ReservedInstancesListingId
   */
  readonly reservedInstancesListingId?: string;

}

/**
 * Converts an object of type 'Ec2CancelReservedInstancesListingRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelReservedInstancesListingRequest(obj: Ec2CancelReservedInstancesListingRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesListingId': obj.reservedInstancesListingId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelReservedInstancesListingResult
 */
export interface Ec2CancelReservedInstancesListingResult {
  /**
   * @schema Ec2CancelReservedInstancesListingResult#ReservedInstancesListings
   */
  readonly reservedInstancesListings?: Ec2ReservedInstancesListing[];

}

/**
 * Converts an object of type 'Ec2CancelReservedInstancesListingResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelReservedInstancesListingResult(obj: Ec2CancelReservedInstancesListingResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesListings': obj.reservedInstancesListings?.map(y => toJson_Ec2ReservedInstancesListing(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelSpotFleetRequestsRequest
 */
export interface Ec2CancelSpotFleetRequestsRequest {
  /**
   * @schema Ec2CancelSpotFleetRequestsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CancelSpotFleetRequestsRequest#SpotFleetRequestIds
   */
  readonly spotFleetRequestIds?: string[];

  /**
   * @schema Ec2CancelSpotFleetRequestsRequest#TerminateInstances
   */
  readonly terminateInstances?: boolean;

}

/**
 * Converts an object of type 'Ec2CancelSpotFleetRequestsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelSpotFleetRequestsRequest(obj: Ec2CancelSpotFleetRequestsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'SpotFleetRequestIds': obj.spotFleetRequestIds?.map(y => y),
    'TerminateInstances': obj.terminateInstances,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelSpotFleetRequestsResponse
 */
export interface Ec2CancelSpotFleetRequestsResponse {
  /**
   * @schema Ec2CancelSpotFleetRequestsResponse#SuccessfulFleetRequests
   */
  readonly successfulFleetRequests?: Ec2CancelSpotFleetRequestsSuccessItem[];

  /**
   * @schema Ec2CancelSpotFleetRequestsResponse#UnsuccessfulFleetRequests
   */
  readonly unsuccessfulFleetRequests?: Ec2CancelSpotFleetRequestsErrorItem[];

}

/**
 * Converts an object of type 'Ec2CancelSpotFleetRequestsResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelSpotFleetRequestsResponse(obj: Ec2CancelSpotFleetRequestsResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SuccessfulFleetRequests': obj.successfulFleetRequests?.map(y => toJson_Ec2CancelSpotFleetRequestsSuccessItem(y)),
    'UnsuccessfulFleetRequests': obj.unsuccessfulFleetRequests?.map(y => toJson_Ec2CancelSpotFleetRequestsErrorItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelSpotInstanceRequestsRequest
 */
export interface Ec2CancelSpotInstanceRequestsRequest {
  /**
   * @schema Ec2CancelSpotInstanceRequestsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CancelSpotInstanceRequestsRequest#SpotInstanceRequestIds
   */
  readonly spotInstanceRequestIds?: string[];

}

/**
 * Converts an object of type 'Ec2CancelSpotInstanceRequestsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelSpotInstanceRequestsRequest(obj: Ec2CancelSpotInstanceRequestsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'SpotInstanceRequestIds': obj.spotInstanceRequestIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelSpotInstanceRequestsResult
 */
export interface Ec2CancelSpotInstanceRequestsResult {
  /**
   * @schema Ec2CancelSpotInstanceRequestsResult#CancelledSpotInstanceRequests
   */
  readonly cancelledSpotInstanceRequests?: Ec2CancelledSpotInstanceRequest[];

}

/**
 * Converts an object of type 'Ec2CancelSpotInstanceRequestsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelSpotInstanceRequestsResult(obj: Ec2CancelSpotInstanceRequestsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CancelledSpotInstanceRequests': obj.cancelledSpotInstanceRequests?.map(y => toJson_Ec2CancelledSpotInstanceRequest(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ConfirmProductInstanceRequest
 */
export interface Ec2ConfirmProductInstanceRequest {
  /**
   * @schema Ec2ConfirmProductInstanceRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ConfirmProductInstanceRequest#ProductCode
   */
  readonly productCode?: string;

  /**
   * @schema Ec2ConfirmProductInstanceRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ConfirmProductInstanceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ConfirmProductInstanceRequest(obj: Ec2ConfirmProductInstanceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'ProductCode': obj.productCode,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ConfirmProductInstanceResult
 */
export interface Ec2ConfirmProductInstanceResult {
  /**
   * @schema Ec2ConfirmProductInstanceResult#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2ConfirmProductInstanceResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ConfirmProductInstanceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ConfirmProductInstanceResult(obj: Ec2ConfirmProductInstanceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'OwnerId': obj.ownerId,
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CopyFpgaImageRequest
 */
export interface Ec2CopyFpgaImageRequest {
  /**
   * @schema Ec2CopyFpgaImageRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CopyFpgaImageRequest#SourceFpgaImageId
   */
  readonly sourceFpgaImageId?: string;

  /**
   * @schema Ec2CopyFpgaImageRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CopyFpgaImageRequest#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2CopyFpgaImageRequest#SourceRegion
   */
  readonly sourceRegion?: string;

  /**
   * @schema Ec2CopyFpgaImageRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CopyFpgaImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CopyFpgaImageRequest(obj: Ec2CopyFpgaImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'SourceFpgaImageId': obj.sourceFpgaImageId,
    'Description': obj.description,
    'Name': obj.name,
    'SourceRegion': obj.sourceRegion,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CopyFpgaImageResult
 */
export interface Ec2CopyFpgaImageResult {
  /**
   * @schema Ec2CopyFpgaImageResult#FpgaImageId
   */
  readonly fpgaImageId?: string;

}

/**
 * Converts an object of type 'Ec2CopyFpgaImageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CopyFpgaImageResult(obj: Ec2CopyFpgaImageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FpgaImageId': obj.fpgaImageId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CopyImageRequest
 */
export interface Ec2CopyImageRequest {
  /**
   * @schema Ec2CopyImageRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CopyImageRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CopyImageRequest#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2CopyImageRequest#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2CopyImageRequest#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2CopyImageRequest#SourceImageId
   */
  readonly sourceImageId?: string;

  /**
   * @schema Ec2CopyImageRequest#SourceRegion
   */
  readonly sourceRegion?: string;

  /**
   * @schema Ec2CopyImageRequest#DestinationOutpostArn
   */
  readonly destinationOutpostArn?: string;

  /**
   * @schema Ec2CopyImageRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CopyImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CopyImageRequest(obj: Ec2CopyImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'Description': obj.description,
    'Encrypted': obj.encrypted,
    'KmsKeyId': obj.kmsKeyId,
    'Name': obj.name,
    'SourceImageId': obj.sourceImageId,
    'SourceRegion': obj.sourceRegion,
    'DestinationOutpostArn': obj.destinationOutpostArn,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CopyImageResult
 */
export interface Ec2CopyImageResult {
  /**
   * @schema Ec2CopyImageResult#ImageId
   */
  readonly imageId?: string;

}

/**
 * Converts an object of type 'Ec2CopyImageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CopyImageResult(obj: Ec2CopyImageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageId': obj.imageId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CopySnapshotRequest
 */
export interface Ec2CopySnapshotRequest {
  /**
   * @schema Ec2CopySnapshotRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CopySnapshotRequest#DestinationOutpostArn
   */
  readonly destinationOutpostArn?: string;

  /**
   * @schema Ec2CopySnapshotRequest#DestinationRegion
   */
  readonly destinationRegion?: string;

  /**
   * @schema Ec2CopySnapshotRequest#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2CopySnapshotRequest#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2CopySnapshotRequest#PresignedUrl
   */
  readonly presignedUrl?: string;

  /**
   * @schema Ec2CopySnapshotRequest#SourceRegion
   */
  readonly sourceRegion?: string;

  /**
   * @schema Ec2CopySnapshotRequest#SourceSnapshotId
   */
  readonly sourceSnapshotId?: string;

  /**
   * @schema Ec2CopySnapshotRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CopySnapshotRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CopySnapshotRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CopySnapshotRequest(obj: Ec2CopySnapshotRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'DestinationOutpostArn': obj.destinationOutpostArn,
    'DestinationRegion': obj.destinationRegion,
    'Encrypted': obj.encrypted,
    'KmsKeyId': obj.kmsKeyId,
    'PresignedUrl': obj.presignedUrl,
    'SourceRegion': obj.sourceRegion,
    'SourceSnapshotId': obj.sourceSnapshotId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CopySnapshotResult
 */
export interface Ec2CopySnapshotResult {
  /**
   * @schema Ec2CopySnapshotResult#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2CopySnapshotResult#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2CopySnapshotResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CopySnapshotResult(obj: Ec2CopySnapshotResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SnapshotId': obj.snapshotId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateCapacityReservationRequest
 */
export interface Ec2CreateCapacityReservationRequest {
  /**
   * @schema Ec2CreateCapacityReservationRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#InstancePlatform
   */
  readonly instancePlatform?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#AvailabilityZoneId
   */
  readonly availabilityZoneId?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#Tenancy
   */
  readonly tenancy?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2CreateCapacityReservationRequest#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2CreateCapacityReservationRequest#EphemeralStorage
   */
  readonly ephemeralStorage?: boolean;

  /**
   * @schema Ec2CreateCapacityReservationRequest#EndDate
   */
  readonly endDate?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#EndDateType
   */
  readonly endDateType?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#InstanceMatchCriteria
   */
  readonly instanceMatchCriteria?: string;

  /**
   * @schema Ec2CreateCapacityReservationRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateCapacityReservationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateCapacityReservationRequest#OutpostArn
   */
  readonly outpostArn?: string;

}

/**
 * Converts an object of type 'Ec2CreateCapacityReservationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateCapacityReservationRequest(obj: Ec2CreateCapacityReservationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'InstanceType': obj.instanceType,
    'InstancePlatform': obj.instancePlatform,
    'AvailabilityZone': obj.availabilityZone,
    'AvailabilityZoneId': obj.availabilityZoneId,
    'Tenancy': obj.tenancy,
    'InstanceCount': obj.instanceCount,
    'EbsOptimized': obj.ebsOptimized,
    'EphemeralStorage': obj.ephemeralStorage,
    'EndDate': obj.endDate,
    'EndDateType': obj.endDateType,
    'InstanceMatchCriteria': obj.instanceMatchCriteria,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
    'OutpostArn': obj.outpostArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateCapacityReservationResult
 */
export interface Ec2CreateCapacityReservationResult {
  /**
   * @schema Ec2CreateCapacityReservationResult#CapacityReservation
   */
  readonly capacityReservation?: Ec2CapacityReservation;

}

/**
 * Converts an object of type 'Ec2CreateCapacityReservationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateCapacityReservationResult(obj: Ec2CreateCapacityReservationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservation': toJson_Ec2CapacityReservation(obj.capacityReservation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateCarrierGatewayRequest
 */
export interface Ec2CreateCarrierGatewayRequest {
  /**
   * @schema Ec2CreateCarrierGatewayRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateCarrierGatewayRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateCarrierGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateCarrierGatewayRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateCarrierGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateCarrierGatewayRequest(obj: Ec2CreateCarrierGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcId': obj.vpcId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateCarrierGatewayResult
 */
export interface Ec2CreateCarrierGatewayResult {
  /**
   * @schema Ec2CreateCarrierGatewayResult#CarrierGateway
   */
  readonly carrierGateway?: Ec2CarrierGateway;

}

/**
 * Converts an object of type 'Ec2CreateCarrierGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateCarrierGatewayResult(obj: Ec2CreateCarrierGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CarrierGateway': toJson_Ec2CarrierGateway(obj.carrierGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateClientVpnEndpointRequest
 */
export interface Ec2CreateClientVpnEndpointRequest {
  /**
   * @schema Ec2CreateClientVpnEndpointRequest#ClientCidrBlock
   */
  readonly clientCidrBlock?: string;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#ServerCertificateArn
   */
  readonly serverCertificateArn?: string;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#AuthenticationOptions
   */
  readonly authenticationOptions?: Ec2ClientVpnAuthenticationRequest[];

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#ConnectionLogOptions
   */
  readonly connectionLogOptions?: Ec2ConnectionLogOptions;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#DnsServers
   */
  readonly dnsServers?: string[];

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#TransportProtocol
   */
  readonly transportProtocol?: string;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#VpnPort
   */
  readonly vpnPort?: number;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#SplitTunnel
   */
  readonly splitTunnel?: boolean;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#SelfServicePortal
   */
  readonly selfServicePortal?: string;

  /**
   * @schema Ec2CreateClientVpnEndpointRequest#ClientConnectOptions
   */
  readonly clientConnectOptions?: Ec2ClientConnectOptions;

}

/**
 * Converts an object of type 'Ec2CreateClientVpnEndpointRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateClientVpnEndpointRequest(obj: Ec2CreateClientVpnEndpointRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientCidrBlock': obj.clientCidrBlock,
    'ServerCertificateArn': obj.serverCertificateArn,
    'AuthenticationOptions': obj.authenticationOptions?.map(y => toJson_Ec2ClientVpnAuthenticationRequest(y)),
    'ConnectionLogOptions': toJson_Ec2ConnectionLogOptions(obj.connectionLogOptions),
    'DnsServers': obj.dnsServers?.map(y => y),
    'TransportProtocol': obj.transportProtocol,
    'VpnPort': obj.vpnPort,
    'Description': obj.description,
    'SplitTunnel': obj.splitTunnel,
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'VpcId': obj.vpcId,
    'SelfServicePortal': obj.selfServicePortal,
    'ClientConnectOptions': toJson_Ec2ClientConnectOptions(obj.clientConnectOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateClientVpnEndpointResult
 */
export interface Ec2CreateClientVpnEndpointResult {
  /**
   * @schema Ec2CreateClientVpnEndpointResult#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2CreateClientVpnEndpointResult#Status
   */
  readonly status?: Ec2ClientVpnEndpointStatus;

  /**
   * @schema Ec2CreateClientVpnEndpointResult#DnsName
   */
  readonly dnsName?: string;

}

/**
 * Converts an object of type 'Ec2CreateClientVpnEndpointResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateClientVpnEndpointResult(obj: Ec2CreateClientVpnEndpointResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'Status': toJson_Ec2ClientVpnEndpointStatus(obj.status),
    'DnsName': obj.dnsName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateClientVpnRouteRequest
 */
export interface Ec2CreateClientVpnRouteRequest {
  /**
   * @schema Ec2CreateClientVpnRouteRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2CreateClientVpnRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2CreateClientVpnRouteRequest#TargetVpcSubnetId
   */
  readonly targetVpcSubnetId?: string;

  /**
   * @schema Ec2CreateClientVpnRouteRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateClientVpnRouteRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateClientVpnRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateClientVpnRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateClientVpnRouteRequest(obj: Ec2CreateClientVpnRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'TargetVpcSubnetId': obj.targetVpcSubnetId,
    'Description': obj.description,
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateClientVpnRouteResult
 */
export interface Ec2CreateClientVpnRouteResult {
  /**
   * @schema Ec2CreateClientVpnRouteResult#Status
   */
  readonly status?: Ec2ClientVpnRouteStatus;

}

/**
 * Converts an object of type 'Ec2CreateClientVpnRouteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateClientVpnRouteResult(obj: Ec2CreateClientVpnRouteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Status': toJson_Ec2ClientVpnRouteStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateCustomerGatewayRequest
 */
export interface Ec2CreateCustomerGatewayRequest {
  /**
   * @schema Ec2CreateCustomerGatewayRequest#BgpAsn
   */
  readonly bgpAsn?: number;

  /**
   * @schema Ec2CreateCustomerGatewayRequest#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2CreateCustomerGatewayRequest#CertificateArn
   */
  readonly certificateArn?: string;

  /**
   * @schema Ec2CreateCustomerGatewayRequest#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2CreateCustomerGatewayRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateCustomerGatewayRequest#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2CreateCustomerGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateCustomerGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateCustomerGatewayRequest(obj: Ec2CreateCustomerGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BgpAsn': obj.bgpAsn,
    'PublicIp': obj.publicIp,
    'CertificateArn': obj.certificateArn,
    'Type': obj.type,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DeviceName': obj.deviceName,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateCustomerGatewayResult
 */
export interface Ec2CreateCustomerGatewayResult {
  /**
   * @schema Ec2CreateCustomerGatewayResult#CustomerGateway
   */
  readonly customerGateway?: Ec2CustomerGateway;

}

/**
 * Converts an object of type 'Ec2CreateCustomerGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateCustomerGatewayResult(obj: Ec2CreateCustomerGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CustomerGateway': toJson_Ec2CustomerGateway(obj.customerGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateDefaultSubnetRequest
 */
export interface Ec2CreateDefaultSubnetRequest {
  /**
   * @schema Ec2CreateDefaultSubnetRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2CreateDefaultSubnetRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateDefaultSubnetRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateDefaultSubnetRequest(obj: Ec2CreateDefaultSubnetRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateDefaultSubnetResult
 */
export interface Ec2CreateDefaultSubnetResult {
  /**
   * @schema Ec2CreateDefaultSubnetResult#Subnet
   */
  readonly subnet?: Ec2Subnet;

}

/**
 * Converts an object of type 'Ec2CreateDefaultSubnetResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateDefaultSubnetResult(obj: Ec2CreateDefaultSubnetResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Subnet': toJson_Ec2Subnet(obj.subnet),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateDefaultVpcRequest
 */
export interface Ec2CreateDefaultVpcRequest {
  /**
   * @schema Ec2CreateDefaultVpcRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateDefaultVpcRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateDefaultVpcRequest(obj: Ec2CreateDefaultVpcRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateDefaultVpcResult
 */
export interface Ec2CreateDefaultVpcResult {
  /**
   * @schema Ec2CreateDefaultVpcResult#Vpc
   */
  readonly vpc?: Ec2Vpc;

}

/**
 * Converts an object of type 'Ec2CreateDefaultVpcResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateDefaultVpcResult(obj: Ec2CreateDefaultVpcResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Vpc': toJson_Ec2Vpc(obj.vpc),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateDhcpOptionsRequest
 */
export interface Ec2CreateDhcpOptionsRequest {
  /**
   * @schema Ec2CreateDhcpOptionsRequest#DhcpConfigurations
   */
  readonly dhcpConfigurations?: Ec2NewDhcpConfiguration[];

  /**
   * @schema Ec2CreateDhcpOptionsRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateDhcpOptionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateDhcpOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateDhcpOptionsRequest(obj: Ec2CreateDhcpOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DhcpConfigurations': obj.dhcpConfigurations?.map(y => toJson_Ec2NewDhcpConfiguration(y)),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateDhcpOptionsResult
 */
export interface Ec2CreateDhcpOptionsResult {
  /**
   * @schema Ec2CreateDhcpOptionsResult#DhcpOptions
   */
  readonly dhcpOptions?: Ec2DhcpOptions;

}

/**
 * Converts an object of type 'Ec2CreateDhcpOptionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateDhcpOptionsResult(obj: Ec2CreateDhcpOptionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DhcpOptions': toJson_Ec2DhcpOptions(obj.dhcpOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateEgressOnlyInternetGatewayRequest
 */
export interface Ec2CreateEgressOnlyInternetGatewayRequest {
  /**
   * @schema Ec2CreateEgressOnlyInternetGatewayRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateEgressOnlyInternetGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateEgressOnlyInternetGatewayRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateEgressOnlyInternetGatewayRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateEgressOnlyInternetGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateEgressOnlyInternetGatewayRequest(obj: Ec2CreateEgressOnlyInternetGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
    'VpcId': obj.vpcId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateEgressOnlyInternetGatewayResult
 */
export interface Ec2CreateEgressOnlyInternetGatewayResult {
  /**
   * @schema Ec2CreateEgressOnlyInternetGatewayResult#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateEgressOnlyInternetGatewayResult#EgressOnlyInternetGateway
   */
  readonly egressOnlyInternetGateway?: Ec2EgressOnlyInternetGateway;

}

/**
 * Converts an object of type 'Ec2CreateEgressOnlyInternetGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateEgressOnlyInternetGatewayResult(obj: Ec2CreateEgressOnlyInternetGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'EgressOnlyInternetGateway': toJson_Ec2EgressOnlyInternetGateway(obj.egressOnlyInternetGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateFleetRequest
 */
export interface Ec2CreateFleetRequest {
  /**
   * @schema Ec2CreateFleetRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateFleetRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateFleetRequest#SpotOptions
   */
  readonly spotOptions?: Ec2SpotOptionsRequest;

  /**
   * @schema Ec2CreateFleetRequest#OnDemandOptions
   */
  readonly onDemandOptions?: Ec2OnDemandOptionsRequest;

  /**
   * @schema Ec2CreateFleetRequest#ExcessCapacityTerminationPolicy
   */
  readonly excessCapacityTerminationPolicy?: string;

  /**
   * @schema Ec2CreateFleetRequest#LaunchTemplateConfigs
   */
  readonly launchTemplateConfigs?: Ec2FleetLaunchTemplateConfigRequest[];

  /**
   * @schema Ec2CreateFleetRequest#TargetCapacitySpecification
   */
  readonly targetCapacitySpecification?: Ec2TargetCapacitySpecificationRequest;

  /**
   * @schema Ec2CreateFleetRequest#TerminateInstancesWithExpiration
   */
  readonly terminateInstancesWithExpiration?: boolean;

  /**
   * @schema Ec2CreateFleetRequest#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2CreateFleetRequest#ValidFrom
   */
  readonly validFrom?: string;

  /**
   * @schema Ec2CreateFleetRequest#ValidUntil
   */
  readonly validUntil?: string;

  /**
   * @schema Ec2CreateFleetRequest#ReplaceUnhealthyInstances
   */
  readonly replaceUnhealthyInstances?: boolean;

  /**
   * @schema Ec2CreateFleetRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateFleetRequest#Context
   */
  readonly context?: string;

}

/**
 * Converts an object of type 'Ec2CreateFleetRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateFleetRequest(obj: Ec2CreateFleetRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
    'SpotOptions': toJson_Ec2SpotOptionsRequest(obj.spotOptions),
    'OnDemandOptions': toJson_Ec2OnDemandOptionsRequest(obj.onDemandOptions),
    'ExcessCapacityTerminationPolicy': obj.excessCapacityTerminationPolicy,
    'LaunchTemplateConfigs': obj.launchTemplateConfigs?.map(y => toJson_Ec2FleetLaunchTemplateConfigRequest(y)),
    'TargetCapacitySpecification': toJson_Ec2TargetCapacitySpecificationRequest(obj.targetCapacitySpecification),
    'TerminateInstancesWithExpiration': obj.terminateInstancesWithExpiration,
    'Type': obj.type,
    'ValidFrom': obj.validFrom,
    'ValidUntil': obj.validUntil,
    'ReplaceUnhealthyInstances': obj.replaceUnhealthyInstances,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'Context': obj.context,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateFleetResult
 */
export interface Ec2CreateFleetResult {
  /**
   * @schema Ec2CreateFleetResult#FleetId
   */
  readonly fleetId?: string;

  /**
   * @schema Ec2CreateFleetResult#Errors
   */
  readonly errors?: Ec2CreateFleetError[];

  /**
   * @schema Ec2CreateFleetResult#Instances
   */
  readonly instances?: Ec2CreateFleetInstance[];

}

/**
 * Converts an object of type 'Ec2CreateFleetResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateFleetResult(obj: Ec2CreateFleetResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FleetId': obj.fleetId,
    'Errors': obj.errors?.map(y => toJson_Ec2CreateFleetError(y)),
    'Instances': obj.instances?.map(y => toJson_Ec2CreateFleetInstance(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateFlowLogsRequest
 */
export interface Ec2CreateFlowLogsRequest {
  /**
   * @schema Ec2CreateFlowLogsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateFlowLogsRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateFlowLogsRequest#DeliverLogsPermissionArn
   */
  readonly deliverLogsPermissionArn?: string;

  /**
   * @schema Ec2CreateFlowLogsRequest#LogGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema Ec2CreateFlowLogsRequest#ResourceIds
   */
  readonly resourceIds?: string[];

  /**
   * @schema Ec2CreateFlowLogsRequest#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2CreateFlowLogsRequest#TrafficType
   */
  readonly trafficType?: string;

  /**
   * @schema Ec2CreateFlowLogsRequest#LogDestinationType
   */
  readonly logDestinationType?: string;

  /**
   * @schema Ec2CreateFlowLogsRequest#LogDestination
   */
  readonly logDestination?: string;

  /**
   * @schema Ec2CreateFlowLogsRequest#LogFormat
   */
  readonly logFormat?: string;

  /**
   * @schema Ec2CreateFlowLogsRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateFlowLogsRequest#MaxAggregationInterval
   */
  readonly maxAggregationInterval?: number;

}

/**
 * Converts an object of type 'Ec2CreateFlowLogsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateFlowLogsRequest(obj: Ec2CreateFlowLogsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
    'DeliverLogsPermissionArn': obj.deliverLogsPermissionArn,
    'LogGroupName': obj.logGroupName,
    'ResourceIds': obj.resourceIds?.map(y => y),
    'ResourceType': obj.resourceType,
    'TrafficType': obj.trafficType,
    'LogDestinationType': obj.logDestinationType,
    'LogDestination': obj.logDestination,
    'LogFormat': obj.logFormat,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'MaxAggregationInterval': obj.maxAggregationInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateFlowLogsResult
 */
export interface Ec2CreateFlowLogsResult {
  /**
   * @schema Ec2CreateFlowLogsResult#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateFlowLogsResult#FlowLogIds
   */
  readonly flowLogIds?: string[];

  /**
   * @schema Ec2CreateFlowLogsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2CreateFlowLogsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateFlowLogsResult(obj: Ec2CreateFlowLogsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'FlowLogIds': obj.flowLogIds?.map(y => y),
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateFpgaImageRequest
 */
export interface Ec2CreateFpgaImageRequest {
  /**
   * @schema Ec2CreateFpgaImageRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateFpgaImageRequest#InputStorageLocation
   */
  readonly inputStorageLocation?: Ec2StorageLocation;

  /**
   * @schema Ec2CreateFpgaImageRequest#LogsStorageLocation
   */
  readonly logsStorageLocation?: Ec2StorageLocation;

  /**
   * @schema Ec2CreateFpgaImageRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateFpgaImageRequest#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2CreateFpgaImageRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateFpgaImageRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateFpgaImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateFpgaImageRequest(obj: Ec2CreateFpgaImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InputStorageLocation': toJson_Ec2StorageLocation(obj.inputStorageLocation),
    'LogsStorageLocation': toJson_Ec2StorageLocation(obj.logsStorageLocation),
    'Description': obj.description,
    'Name': obj.name,
    'ClientToken': obj.clientToken,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateFpgaImageResult
 */
export interface Ec2CreateFpgaImageResult {
  /**
   * @schema Ec2CreateFpgaImageResult#FpgaImageId
   */
  readonly fpgaImageId?: string;

  /**
   * @schema Ec2CreateFpgaImageResult#FpgaImageGlobalId
   */
  readonly fpgaImageGlobalId?: string;

}

/**
 * Converts an object of type 'Ec2CreateFpgaImageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateFpgaImageResult(obj: Ec2CreateFpgaImageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FpgaImageId': obj.fpgaImageId,
    'FpgaImageGlobalId': obj.fpgaImageGlobalId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateImageRequest
 */
export interface Ec2CreateImageRequest {
  /**
   * @schema Ec2CreateImageRequest#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2BlockDeviceMapping[];

  /**
   * @schema Ec2CreateImageRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateImageRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateImageRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2CreateImageRequest#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2CreateImageRequest#NoReboot
   */
  readonly noReboot?: boolean;

  /**
   * @schema Ec2CreateImageRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateImageRequest(obj: Ec2CreateImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2BlockDeviceMapping(y)),
    'Description': obj.description,
    'DryRun': obj.dryRun,
    'InstanceId': obj.instanceId,
    'Name': obj.name,
    'NoReboot': obj.noReboot,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateImageResult
 */
export interface Ec2CreateImageResult {
  /**
   * @schema Ec2CreateImageResult#ImageId
   */
  readonly imageId?: string;

}

/**
 * Converts an object of type 'Ec2CreateImageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateImageResult(obj: Ec2CreateImageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageId': obj.imageId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateInstanceEventWindowRequest
 */
export interface Ec2CreateInstanceEventWindowRequest {
  /**
   * @schema Ec2CreateInstanceEventWindowRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateInstanceEventWindowRequest#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2CreateInstanceEventWindowRequest#TimeRanges
   */
  readonly timeRanges?: Ec2InstanceEventWindowTimeRangeRequest[];

  /**
   * @schema Ec2CreateInstanceEventWindowRequest#CronExpression
   */
  readonly cronExpression?: string;

  /**
   * @schema Ec2CreateInstanceEventWindowRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateInstanceEventWindowRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateInstanceEventWindowRequest(obj: Ec2CreateInstanceEventWindowRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Name': obj.name,
    'TimeRanges': obj.timeRanges?.map(y => toJson_Ec2InstanceEventWindowTimeRangeRequest(y)),
    'CronExpression': obj.cronExpression,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateInstanceEventWindowResult
 */
export interface Ec2CreateInstanceEventWindowResult {
  /**
   * @schema Ec2CreateInstanceEventWindowResult#InstanceEventWindow
   */
  readonly instanceEventWindow?: Ec2InstanceEventWindow;

}

/**
 * Converts an object of type 'Ec2CreateInstanceEventWindowResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateInstanceEventWindowResult(obj: Ec2CreateInstanceEventWindowResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventWindow': toJson_Ec2InstanceEventWindow(obj.instanceEventWindow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateInstanceExportTaskRequest
 */
export interface Ec2CreateInstanceExportTaskRequest {
  /**
   * @schema Ec2CreateInstanceExportTaskRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateInstanceExportTaskRequest#ExportToS3Task
   */
  readonly exportToS3Task?: Ec2ExportToS3TaskSpecification;

  /**
   * @schema Ec2CreateInstanceExportTaskRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2CreateInstanceExportTaskRequest#TargetEnvironment
   */
  readonly targetEnvironment?: string;

  /**
   * @schema Ec2CreateInstanceExportTaskRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateInstanceExportTaskRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateInstanceExportTaskRequest(obj: Ec2CreateInstanceExportTaskRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'ExportToS3Task': toJson_Ec2ExportToS3TaskSpecification(obj.exportToS3Task),
    'InstanceId': obj.instanceId,
    'TargetEnvironment': obj.targetEnvironment,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateInstanceExportTaskResult
 */
export interface Ec2CreateInstanceExportTaskResult {
  /**
   * @schema Ec2CreateInstanceExportTaskResult#ExportTask
   */
  readonly exportTask?: Ec2ExportTask;

}

/**
 * Converts an object of type 'Ec2CreateInstanceExportTaskResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateInstanceExportTaskResult(obj: Ec2CreateInstanceExportTaskResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExportTask': toJson_Ec2ExportTask(obj.exportTask),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateInternetGatewayRequest
 */
export interface Ec2CreateInternetGatewayRequest {
  /**
   * @schema Ec2CreateInternetGatewayRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateInternetGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateInternetGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateInternetGatewayRequest(obj: Ec2CreateInternetGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateInternetGatewayResult
 */
export interface Ec2CreateInternetGatewayResult {
  /**
   * @schema Ec2CreateInternetGatewayResult#InternetGateway
   */
  readonly internetGateway?: Ec2InternetGateway;

}

/**
 * Converts an object of type 'Ec2CreateInternetGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateInternetGatewayResult(obj: Ec2CreateInternetGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InternetGateway': toJson_Ec2InternetGateway(obj.internetGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateKeyPairRequest
 */
export interface Ec2CreateKeyPairRequest {
  /**
   * @schema Ec2CreateKeyPairRequest#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2CreateKeyPairRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateKeyPairRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateKeyPairRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateKeyPairRequest(obj: Ec2CreateKeyPairRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KeyName': obj.keyName,
    'DryRun': obj.dryRun,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2KeyPair
 */
export interface Ec2KeyPair {
  /**
   * @schema Ec2KeyPair#KeyFingerprint
   */
  readonly keyFingerprint?: string;

  /**
   * @schema Ec2KeyPair#KeyMaterial
   */
  readonly keyMaterial?: string;

  /**
   * @schema Ec2KeyPair#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2KeyPair#KeyPairId
   */
  readonly keyPairId?: string;

  /**
   * @schema Ec2KeyPair#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2KeyPair' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2KeyPair(obj: Ec2KeyPair | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KeyFingerprint': obj.keyFingerprint,
    'KeyMaterial': obj.keyMaterial,
    'KeyName': obj.keyName,
    'KeyPairId': obj.keyPairId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateLaunchTemplateRequest
 */
export interface Ec2CreateLaunchTemplateRequest {
  /**
   * @schema Ec2CreateLaunchTemplateRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateLaunchTemplateRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateLaunchTemplateRequest#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2CreateLaunchTemplateRequest#VersionDescription
   */
  readonly versionDescription?: string;

  /**
   * @schema Ec2CreateLaunchTemplateRequest#LaunchTemplateData
   */
  readonly launchTemplateData?: Ec2RequestLaunchTemplateData;

  /**
   * @schema Ec2CreateLaunchTemplateRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateLaunchTemplateRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateLaunchTemplateRequest(obj: Ec2CreateLaunchTemplateRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
    'LaunchTemplateName': obj.launchTemplateName,
    'VersionDescription': obj.versionDescription,
    'LaunchTemplateData': toJson_Ec2RequestLaunchTemplateData(obj.launchTemplateData),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateLaunchTemplateResult
 */
export interface Ec2CreateLaunchTemplateResult {
  /**
   * @schema Ec2CreateLaunchTemplateResult#LaunchTemplate
   */
  readonly launchTemplate?: Ec2LaunchTemplate;

  /**
   * @schema Ec2CreateLaunchTemplateResult#Warning
   */
  readonly warning?: Ec2ValidationWarning;

}

/**
 * Converts an object of type 'Ec2CreateLaunchTemplateResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateLaunchTemplateResult(obj: Ec2CreateLaunchTemplateResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplate': toJson_Ec2LaunchTemplate(obj.launchTemplate),
    'Warning': toJson_Ec2ValidationWarning(obj.warning),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateLaunchTemplateVersionRequest
 */
export interface Ec2CreateLaunchTemplateVersionRequest {
  /**
   * @schema Ec2CreateLaunchTemplateVersionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateLaunchTemplateVersionRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateLaunchTemplateVersionRequest#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2CreateLaunchTemplateVersionRequest#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2CreateLaunchTemplateVersionRequest#SourceVersion
   */
  readonly sourceVersion?: string;

  /**
   * @schema Ec2CreateLaunchTemplateVersionRequest#VersionDescription
   */
  readonly versionDescription?: string;

  /**
   * @schema Ec2CreateLaunchTemplateVersionRequest#LaunchTemplateData
   */
  readonly launchTemplateData?: Ec2RequestLaunchTemplateData;

}

/**
 * Converts an object of type 'Ec2CreateLaunchTemplateVersionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateLaunchTemplateVersionRequest(obj: Ec2CreateLaunchTemplateVersionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'SourceVersion': obj.sourceVersion,
    'VersionDescription': obj.versionDescription,
    'LaunchTemplateData': toJson_Ec2RequestLaunchTemplateData(obj.launchTemplateData),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateLaunchTemplateVersionResult
 */
export interface Ec2CreateLaunchTemplateVersionResult {
  /**
   * @schema Ec2CreateLaunchTemplateVersionResult#LaunchTemplateVersion
   */
  readonly launchTemplateVersion?: Ec2LaunchTemplateVersion;

  /**
   * @schema Ec2CreateLaunchTemplateVersionResult#Warning
   */
  readonly warning?: Ec2ValidationWarning;

}

/**
 * Converts an object of type 'Ec2CreateLaunchTemplateVersionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateLaunchTemplateVersionResult(obj: Ec2CreateLaunchTemplateVersionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateVersion': toJson_Ec2LaunchTemplateVersion(obj.launchTemplateVersion),
    'Warning': toJson_Ec2ValidationWarning(obj.warning),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateLocalGatewayRouteRequest
 */
export interface Ec2CreateLocalGatewayRouteRequest {
  /**
   * @schema Ec2CreateLocalGatewayRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2CreateLocalGatewayRouteRequest#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2CreateLocalGatewayRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateLocalGatewayRouteRequest#LocalGatewayVirtualInterfaceGroupId
   */
  readonly localGatewayVirtualInterfaceGroupId?: string;

}

/**
 * Converts an object of type 'Ec2CreateLocalGatewayRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateLocalGatewayRouteRequest(obj: Ec2CreateLocalGatewayRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'DryRun': obj.dryRun,
    'LocalGatewayVirtualInterfaceGroupId': obj.localGatewayVirtualInterfaceGroupId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateLocalGatewayRouteResult
 */
export interface Ec2CreateLocalGatewayRouteResult {
  /**
   * @schema Ec2CreateLocalGatewayRouteResult#Route
   */
  readonly route?: Ec2LocalGatewayRoute;

}

/**
 * Converts an object of type 'Ec2CreateLocalGatewayRouteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateLocalGatewayRouteResult(obj: Ec2CreateLocalGatewayRouteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Route': toJson_Ec2LocalGatewayRoute(obj.route),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateLocalGatewayRouteTableVpcAssociationRequest
 */
export interface Ec2CreateLocalGatewayRouteTableVpcAssociationRequest {
  /**
   * @schema Ec2CreateLocalGatewayRouteTableVpcAssociationRequest#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2CreateLocalGatewayRouteTableVpcAssociationRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateLocalGatewayRouteTableVpcAssociationRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateLocalGatewayRouteTableVpcAssociationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateLocalGatewayRouteTableVpcAssociationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateLocalGatewayRouteTableVpcAssociationRequest(obj: Ec2CreateLocalGatewayRouteTableVpcAssociationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'VpcId': obj.vpcId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateLocalGatewayRouteTableVpcAssociationResult
 */
export interface Ec2CreateLocalGatewayRouteTableVpcAssociationResult {
  /**
   * @schema Ec2CreateLocalGatewayRouteTableVpcAssociationResult#LocalGatewayRouteTableVpcAssociation
   */
  readonly localGatewayRouteTableVpcAssociation?: Ec2LocalGatewayRouteTableVpcAssociation;

}

/**
 * Converts an object of type 'Ec2CreateLocalGatewayRouteTableVpcAssociationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateLocalGatewayRouteTableVpcAssociationResult(obj: Ec2CreateLocalGatewayRouteTableVpcAssociationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVpcAssociation': toJson_Ec2LocalGatewayRouteTableVpcAssociation(obj.localGatewayRouteTableVpcAssociation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateManagedPrefixListRequest
 */
export interface Ec2CreateManagedPrefixListRequest {
  /**
   * @schema Ec2CreateManagedPrefixListRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateManagedPrefixListRequest#PrefixListName
   */
  readonly prefixListName?: string;

  /**
   * @schema Ec2CreateManagedPrefixListRequest#Entries
   */
  readonly entries?: Ec2AddPrefixListEntry[];

  /**
   * @schema Ec2CreateManagedPrefixListRequest#MaxEntries
   */
  readonly maxEntries?: number;

  /**
   * @schema Ec2CreateManagedPrefixListRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateManagedPrefixListRequest#AddressFamily
   */
  readonly addressFamily?: string;

  /**
   * @schema Ec2CreateManagedPrefixListRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateManagedPrefixListRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateManagedPrefixListRequest(obj: Ec2CreateManagedPrefixListRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PrefixListName': obj.prefixListName,
    'Entries': obj.entries?.map(y => toJson_Ec2AddPrefixListEntry(y)),
    'MaxEntries': obj.maxEntries,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'AddressFamily': obj.addressFamily,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateManagedPrefixListResult
 */
export interface Ec2CreateManagedPrefixListResult {
  /**
   * @schema Ec2CreateManagedPrefixListResult#PrefixList
   */
  readonly prefixList?: Ec2ManagedPrefixList;

}

/**
 * Converts an object of type 'Ec2CreateManagedPrefixListResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateManagedPrefixListResult(obj: Ec2CreateManagedPrefixListResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrefixList': toJson_Ec2ManagedPrefixList(obj.prefixList),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNatGatewayRequest
 */
export interface Ec2CreateNatGatewayRequest {
  /**
   * @schema Ec2CreateNatGatewayRequest#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2CreateNatGatewayRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateNatGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateNatGatewayRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2CreateNatGatewayRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateNatGatewayRequest#ConnectivityType
   */
  readonly connectivityType?: string;

}

/**
 * Converts an object of type 'Ec2CreateNatGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNatGatewayRequest(obj: Ec2CreateNatGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
    'SubnetId': obj.subnetId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'ConnectivityType': obj.connectivityType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNatGatewayResult
 */
export interface Ec2CreateNatGatewayResult {
  /**
   * @schema Ec2CreateNatGatewayResult#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateNatGatewayResult#NatGateway
   */
  readonly natGateway?: Ec2NatGateway;

}

/**
 * Converts an object of type 'Ec2CreateNatGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNatGatewayResult(obj: Ec2CreateNatGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'NatGateway': toJson_Ec2NatGateway(obj.natGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkAclRequest
 */
export interface Ec2CreateNetworkAclRequest {
  /**
   * @schema Ec2CreateNetworkAclRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateNetworkAclRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateNetworkAclRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateNetworkAclRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkAclRequest(obj: Ec2CreateNetworkAclRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcId': obj.vpcId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkAclResult
 */
export interface Ec2CreateNetworkAclResult {
  /**
   * @schema Ec2CreateNetworkAclResult#NetworkAcl
   */
  readonly networkAcl?: Ec2NetworkAcl;

}

/**
 * Converts an object of type 'Ec2CreateNetworkAclResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkAclResult(obj: Ec2CreateNetworkAclResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkAcl': toJson_Ec2NetworkAcl(obj.networkAcl),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkAclEntryRequest
 */
export interface Ec2CreateNetworkAclEntryRequest {
  /**
   * @schema Ec2CreateNetworkAclEntryRequest#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#Egress
   */
  readonly egress?: boolean;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#IcmpTypeCode
   */
  readonly icmpTypeCode?: Ec2IcmpTypeCode;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#NetworkAclId
   */
  readonly networkAclId?: string;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#PortRange
   */
  readonly portRange?: Ec2PortRange;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#Protocol
   */
  readonly protocol?: string;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#RuleAction
   */
  readonly ruleAction?: string;

  /**
   * @schema Ec2CreateNetworkAclEntryRequest#RuleNumber
   */
  readonly ruleNumber?: number;

}

/**
 * Converts an object of type 'Ec2CreateNetworkAclEntryRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkAclEntryRequest(obj: Ec2CreateNetworkAclEntryRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrBlock': obj.cidrBlock,
    'DryRun': obj.dryRun,
    'Egress': obj.egress,
    'IcmpTypeCode': toJson_Ec2IcmpTypeCode(obj.icmpTypeCode),
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
    'NetworkAclId': obj.networkAclId,
    'PortRange': toJson_Ec2PortRange(obj.portRange),
    'Protocol': obj.protocol,
    'RuleAction': obj.ruleAction,
    'RuleNumber': obj.ruleNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkInsightsPathRequest
 */
export interface Ec2CreateNetworkInsightsPathRequest {
  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#SourceIp
   */
  readonly sourceIp?: string;

  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#DestinationIp
   */
  readonly destinationIp?: string;

  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#Source
   */
  readonly source?: string;

  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#Destination
   */
  readonly destination?: string;

  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#Protocol
   */
  readonly protocol?: string;

  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#DestinationPort
   */
  readonly destinationPort?: number;

  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateNetworkInsightsPathRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateNetworkInsightsPathRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkInsightsPathRequest(obj: Ec2CreateNetworkInsightsPathRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SourceIp': obj.sourceIp,
    'DestinationIp': obj.destinationIp,
    'Source': obj.source,
    'Destination': obj.destination,
    'Protocol': obj.protocol,
    'DestinationPort': obj.destinationPort,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkInsightsPathResult
 */
export interface Ec2CreateNetworkInsightsPathResult {
  /**
   * @schema Ec2CreateNetworkInsightsPathResult#NetworkInsightsPath
   */
  readonly networkInsightsPath?: Ec2NetworkInsightsPath;

}

/**
 * Converts an object of type 'Ec2CreateNetworkInsightsPathResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkInsightsPathResult(obj: Ec2CreateNetworkInsightsPathResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsPath': toJson_Ec2NetworkInsightsPath(obj.networkInsightsPath),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkInterfaceRequest
 */
export interface Ec2CreateNetworkInterfaceRequest {
  /**
   * @schema Ec2CreateNetworkInterfaceRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#Groups
   */
  readonly groups?: string[];

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#Ipv6AddressCount
   */
  readonly ipv6AddressCount?: number;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#Ipv6Addresses
   */
  readonly ipv6Addresses?: Ec2InstanceIpv6Address[];

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#PrivateIpAddresses
   */
  readonly privateIpAddresses?: Ec2PrivateIpAddressSpecification[];

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#SecondaryPrivateIpAddressCount
   */
  readonly secondaryPrivateIpAddressCount?: number;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#Ipv4Prefixes
   */
  readonly ipv4Prefixes?: Ec2Ipv4PrefixSpecificationRequest[];

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#Ipv4PrefixCount
   */
  readonly ipv4PrefixCount?: number;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#Ipv6Prefixes
   */
  readonly ipv6Prefixes?: Ec2Ipv6PrefixSpecificationRequest[];

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#Ipv6PrefixCount
   */
  readonly ipv6PrefixCount?: number;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#InterfaceType
   */
  readonly interfaceType?: string;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateNetworkInterfaceRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateNetworkInterfaceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkInterfaceRequest(obj: Ec2CreateNetworkInterfaceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'DryRun': obj.dryRun,
    'Groups': obj.groups?.map(y => y),
    'Ipv6AddressCount': obj.ipv6AddressCount,
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => toJson_Ec2InstanceIpv6Address(y)),
    'PrivateIpAddress': obj.privateIpAddress,
    'PrivateIpAddresses': obj.privateIpAddresses?.map(y => toJson_Ec2PrivateIpAddressSpecification(y)),
    'SecondaryPrivateIpAddressCount': obj.secondaryPrivateIpAddressCount,
    'Ipv4Prefixes': obj.ipv4Prefixes?.map(y => toJson_Ec2Ipv4PrefixSpecificationRequest(y)),
    'Ipv4PrefixCount': obj.ipv4PrefixCount,
    'Ipv6Prefixes': obj.ipv6Prefixes?.map(y => toJson_Ec2Ipv6PrefixSpecificationRequest(y)),
    'Ipv6PrefixCount': obj.ipv6PrefixCount,
    'InterfaceType': obj.interfaceType,
    'SubnetId': obj.subnetId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkInterfaceResult
 */
export interface Ec2CreateNetworkInterfaceResult {
  /**
   * @schema Ec2CreateNetworkInterfaceResult#NetworkInterface
   */
  readonly networkInterface?: Ec2NetworkInterface;

  /**
   * @schema Ec2CreateNetworkInterfaceResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateNetworkInterfaceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkInterfaceResult(obj: Ec2CreateNetworkInterfaceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterface': toJson_Ec2NetworkInterface(obj.networkInterface),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkInterfacePermissionRequest
 */
export interface Ec2CreateNetworkInterfacePermissionRequest {
  /**
   * @schema Ec2CreateNetworkInterfacePermissionRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2CreateNetworkInterfacePermissionRequest#AwsAccountId
   */
  readonly awsAccountId?: string;

  /**
   * @schema Ec2CreateNetworkInterfacePermissionRequest#AwsService
   */
  readonly awsService?: string;

  /**
   * @schema Ec2CreateNetworkInterfacePermissionRequest#Permission
   */
  readonly permission?: string;

  /**
   * @schema Ec2CreateNetworkInterfacePermissionRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateNetworkInterfacePermissionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkInterfacePermissionRequest(obj: Ec2CreateNetworkInterfacePermissionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfaceId': obj.networkInterfaceId,
    'AwsAccountId': obj.awsAccountId,
    'AwsService': obj.awsService,
    'Permission': obj.permission,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateNetworkInterfacePermissionResult
 */
export interface Ec2CreateNetworkInterfacePermissionResult {
  /**
   * @schema Ec2CreateNetworkInterfacePermissionResult#InterfacePermission
   */
  readonly interfacePermission?: Ec2NetworkInterfacePermission;

}

/**
 * Converts an object of type 'Ec2CreateNetworkInterfacePermissionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateNetworkInterfacePermissionResult(obj: Ec2CreateNetworkInterfacePermissionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InterfacePermission': toJson_Ec2NetworkInterfacePermission(obj.interfacePermission),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreatePlacementGroupRequest
 */
export interface Ec2CreatePlacementGroupRequest {
  /**
   * @schema Ec2CreatePlacementGroupRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreatePlacementGroupRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2CreatePlacementGroupRequest#Strategy
   */
  readonly strategy?: string;

  /**
   * @schema Ec2CreatePlacementGroupRequest#PartitionCount
   */
  readonly partitionCount?: number;

  /**
   * @schema Ec2CreatePlacementGroupRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreatePlacementGroupRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreatePlacementGroupRequest(obj: Ec2CreatePlacementGroupRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'GroupName': obj.groupName,
    'Strategy': obj.strategy,
    'PartitionCount': obj.partitionCount,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreatePlacementGroupResult
 */
export interface Ec2CreatePlacementGroupResult {
  /**
   * @schema Ec2CreatePlacementGroupResult#PlacementGroup
   */
  readonly placementGroup?: Ec2PlacementGroup;

}

/**
 * Converts an object of type 'Ec2CreatePlacementGroupResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreatePlacementGroupResult(obj: Ec2CreatePlacementGroupResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PlacementGroup': toJson_Ec2PlacementGroup(obj.placementGroup),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateReplaceRootVolumeTaskRequest
 */
export interface Ec2CreateReplaceRootVolumeTaskRequest {
  /**
   * @schema Ec2CreateReplaceRootVolumeTaskRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2CreateReplaceRootVolumeTaskRequest#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2CreateReplaceRootVolumeTaskRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateReplaceRootVolumeTaskRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateReplaceRootVolumeTaskRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateReplaceRootVolumeTaskRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateReplaceRootVolumeTaskRequest(obj: Ec2CreateReplaceRootVolumeTaskRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'SnapshotId': obj.snapshotId,
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateReplaceRootVolumeTaskResult
 */
export interface Ec2CreateReplaceRootVolumeTaskResult {
  /**
   * @schema Ec2CreateReplaceRootVolumeTaskResult#ReplaceRootVolumeTask
   */
  readonly replaceRootVolumeTask?: Ec2ReplaceRootVolumeTask;

}

/**
 * Converts an object of type 'Ec2CreateReplaceRootVolumeTaskResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateReplaceRootVolumeTaskResult(obj: Ec2CreateReplaceRootVolumeTaskResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReplaceRootVolumeTask': toJson_Ec2ReplaceRootVolumeTask(obj.replaceRootVolumeTask),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateReservedInstancesListingRequest
 */
export interface Ec2CreateReservedInstancesListingRequest {
  /**
   * @schema Ec2CreateReservedInstancesListingRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateReservedInstancesListingRequest#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2CreateReservedInstancesListingRequest#PriceSchedules
   */
  readonly priceSchedules?: Ec2PriceScheduleSpecification[];

  /**
   * @schema Ec2CreateReservedInstancesListingRequest#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

}

/**
 * Converts an object of type 'Ec2CreateReservedInstancesListingRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateReservedInstancesListingRequest(obj: Ec2CreateReservedInstancesListingRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'InstanceCount': obj.instanceCount,
    'PriceSchedules': obj.priceSchedules?.map(y => toJson_Ec2PriceScheduleSpecification(y)),
    'ReservedInstancesId': obj.reservedInstancesId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateReservedInstancesListingResult
 */
export interface Ec2CreateReservedInstancesListingResult {
  /**
   * @schema Ec2CreateReservedInstancesListingResult#ReservedInstancesListings
   */
  readonly reservedInstancesListings?: Ec2ReservedInstancesListing[];

}

/**
 * Converts an object of type 'Ec2CreateReservedInstancesListingResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateReservedInstancesListingResult(obj: Ec2CreateReservedInstancesListingResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesListings': obj.reservedInstancesListings?.map(y => toJson_Ec2ReservedInstancesListing(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateRestoreImageTaskRequest
 */
export interface Ec2CreateRestoreImageTaskRequest {
  /**
   * @schema Ec2CreateRestoreImageTaskRequest#Bucket
   */
  readonly bucket?: string;

  /**
   * @schema Ec2CreateRestoreImageTaskRequest#ObjectKey
   */
  readonly objectKey?: string;

  /**
   * @schema Ec2CreateRestoreImageTaskRequest#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2CreateRestoreImageTaskRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateRestoreImageTaskRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateRestoreImageTaskRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateRestoreImageTaskRequest(obj: Ec2CreateRestoreImageTaskRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Bucket': obj.bucket,
    'ObjectKey': obj.objectKey,
    'Name': obj.name,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateRestoreImageTaskResult
 */
export interface Ec2CreateRestoreImageTaskResult {
  /**
   * @schema Ec2CreateRestoreImageTaskResult#ImageId
   */
  readonly imageId?: string;

}

/**
 * Converts an object of type 'Ec2CreateRestoreImageTaskResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateRestoreImageTaskResult(obj: Ec2CreateRestoreImageTaskResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageId': obj.imageId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateRouteRequest
 */
export interface Ec2CreateRouteRequest {
  /**
   * @schema Ec2CreateRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2CreateRouteRequest#DestinationIpv6CidrBlock
   */
  readonly destinationIpv6CidrBlock?: string;

  /**
   * @schema Ec2CreateRouteRequest#DestinationPrefixListId
   */
  readonly destinationPrefixListId?: string;

  /**
   * @schema Ec2CreateRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateRouteRequest#VpcEndpointId
   */
  readonly vpcEndpointId?: string;

  /**
   * @schema Ec2CreateRouteRequest#EgressOnlyInternetGatewayId
   */
  readonly egressOnlyInternetGatewayId?: string;

  /**
   * @schema Ec2CreateRouteRequest#GatewayId
   */
  readonly gatewayId?: string;

  /**
   * @schema Ec2CreateRouteRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2CreateRouteRequest#NatGatewayId
   */
  readonly natGatewayId?: string;

  /**
   * @schema Ec2CreateRouteRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2CreateRouteRequest#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2CreateRouteRequest#CarrierGatewayId
   */
  readonly carrierGatewayId?: string;

  /**
   * @schema Ec2CreateRouteRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2CreateRouteRequest#RouteTableId
   */
  readonly routeTableId?: string;

  /**
   * @schema Ec2CreateRouteRequest#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2CreateRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateRouteRequest(obj: Ec2CreateRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'DestinationIpv6CidrBlock': obj.destinationIpv6CidrBlock,
    'DestinationPrefixListId': obj.destinationPrefixListId,
    'DryRun': obj.dryRun,
    'VpcEndpointId': obj.vpcEndpointId,
    'EgressOnlyInternetGatewayId': obj.egressOnlyInternetGatewayId,
    'GatewayId': obj.gatewayId,
    'InstanceId': obj.instanceId,
    'NatGatewayId': obj.natGatewayId,
    'TransitGatewayId': obj.transitGatewayId,
    'LocalGatewayId': obj.localGatewayId,
    'CarrierGatewayId': obj.carrierGatewayId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'RouteTableId': obj.routeTableId,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateRouteResult
 */
export interface Ec2CreateRouteResult {
  /**
   * @schema Ec2CreateRouteResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateRouteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateRouteResult(obj: Ec2CreateRouteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateRouteTableRequest
 */
export interface Ec2CreateRouteTableRequest {
  /**
   * @schema Ec2CreateRouteTableRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateRouteTableRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateRouteTableRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateRouteTableRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateRouteTableRequest(obj: Ec2CreateRouteTableRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcId': obj.vpcId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateRouteTableResult
 */
export interface Ec2CreateRouteTableResult {
  /**
   * @schema Ec2CreateRouteTableResult#RouteTable
   */
  readonly routeTable?: Ec2RouteTable;

}

/**
 * Converts an object of type 'Ec2CreateRouteTableResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateRouteTableResult(obj: Ec2CreateRouteTableResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'RouteTable': toJson_Ec2RouteTable(obj.routeTable),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSecurityGroupRequest
 */
export interface Ec2CreateSecurityGroupRequest {
  /**
   * @schema Ec2CreateSecurityGroupRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateSecurityGroupRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2CreateSecurityGroupRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateSecurityGroupRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateSecurityGroupRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateSecurityGroupRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSecurityGroupRequest(obj: Ec2CreateSecurityGroupRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'GroupName': obj.groupName,
    'VpcId': obj.vpcId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSecurityGroupResult
 */
export interface Ec2CreateSecurityGroupResult {
  /**
   * @schema Ec2CreateSecurityGroupResult#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2CreateSecurityGroupResult#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2CreateSecurityGroupResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSecurityGroupResult(obj: Ec2CreateSecurityGroupResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupId': obj.groupId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSnapshotRequest
 */
export interface Ec2CreateSnapshotRequest {
  /**
   * @schema Ec2CreateSnapshotRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateSnapshotRequest#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2CreateSnapshotRequest#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2CreateSnapshotRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateSnapshotRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateSnapshotRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSnapshotRequest(obj: Ec2CreateSnapshotRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'OutpostArn': obj.outpostArn,
    'VolumeId': obj.volumeId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Snapshot
 */
export interface Ec2Snapshot {
  /**
   * @schema Ec2Snapshot#DataEncryptionKeyId
   */
  readonly dataEncryptionKeyId?: string;

  /**
   * @schema Ec2Snapshot#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2Snapshot#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2Snapshot#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2Snapshot#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2Snapshot#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2Snapshot#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2Snapshot#StartTime
   */
  readonly startTime?: string;

  /**
   * @schema Ec2Snapshot#State
   */
  readonly state?: string;

  /**
   * @schema Ec2Snapshot#StateMessage
   */
  readonly stateMessage?: string;

  /**
   * @schema Ec2Snapshot#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2Snapshot#VolumeSize
   */
  readonly volumeSize?: number;

  /**
   * @schema Ec2Snapshot#OwnerAlias
   */
  readonly ownerAlias?: string;

  /**
   * @schema Ec2Snapshot#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2Snapshot#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2Snapshot' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Snapshot(obj: Ec2Snapshot | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DataEncryptionKeyId': obj.dataEncryptionKeyId,
    'Description': obj.description,
    'Encrypted': obj.encrypted,
    'KmsKeyId': obj.kmsKeyId,
    'OwnerId': obj.ownerId,
    'Progress': obj.progress,
    'SnapshotId': obj.snapshotId,
    'StartTime': obj.startTime,
    'State': obj.state,
    'StateMessage': obj.stateMessage,
    'VolumeId': obj.volumeId,
    'VolumeSize': obj.volumeSize,
    'OwnerAlias': obj.ownerAlias,
    'OutpostArn': obj.outpostArn,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSnapshotsRequest
 */
export interface Ec2CreateSnapshotsRequest {
  /**
   * @schema Ec2CreateSnapshotsRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateSnapshotsRequest#InstanceSpecification
   */
  readonly instanceSpecification?: Ec2InstanceSpecification;

  /**
   * @schema Ec2CreateSnapshotsRequest#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2CreateSnapshotsRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateSnapshotsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateSnapshotsRequest#CopyTagsFromSource
   */
  readonly copyTagsFromSource?: string;

}

/**
 * Converts an object of type 'Ec2CreateSnapshotsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSnapshotsRequest(obj: Ec2CreateSnapshotsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'InstanceSpecification': toJson_Ec2InstanceSpecification(obj.instanceSpecification),
    'OutpostArn': obj.outpostArn,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
    'CopyTagsFromSource': obj.copyTagsFromSource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSnapshotsResult
 */
export interface Ec2CreateSnapshotsResult {
  /**
   * @schema Ec2CreateSnapshotsResult#Snapshots
   */
  readonly snapshots?: Ec2SnapshotInfo[];

}

/**
 * Converts an object of type 'Ec2CreateSnapshotsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSnapshotsResult(obj: Ec2CreateSnapshotsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Snapshots': obj.snapshots?.map(y => toJson_Ec2SnapshotInfo(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSpotDatafeedSubscriptionRequest
 */
export interface Ec2CreateSpotDatafeedSubscriptionRequest {
  /**
   * @schema Ec2CreateSpotDatafeedSubscriptionRequest#Bucket
   */
  readonly bucket?: string;

  /**
   * @schema Ec2CreateSpotDatafeedSubscriptionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateSpotDatafeedSubscriptionRequest#Prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'Ec2CreateSpotDatafeedSubscriptionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSpotDatafeedSubscriptionRequest(obj: Ec2CreateSpotDatafeedSubscriptionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Bucket': obj.bucket,
    'DryRun': obj.dryRun,
    'Prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSpotDatafeedSubscriptionResult
 */
export interface Ec2CreateSpotDatafeedSubscriptionResult {
  /**
   * @schema Ec2CreateSpotDatafeedSubscriptionResult#SpotDatafeedSubscription
   */
  readonly spotDatafeedSubscription?: Ec2SpotDatafeedSubscription;

}

/**
 * Converts an object of type 'Ec2CreateSpotDatafeedSubscriptionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSpotDatafeedSubscriptionResult(obj: Ec2CreateSpotDatafeedSubscriptionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SpotDatafeedSubscription': toJson_Ec2SpotDatafeedSubscription(obj.spotDatafeedSubscription),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateStoreImageTaskRequest
 */
export interface Ec2CreateStoreImageTaskRequest {
  /**
   * @schema Ec2CreateStoreImageTaskRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2CreateStoreImageTaskRequest#Bucket
   */
  readonly bucket?: string;

  /**
   * @schema Ec2CreateStoreImageTaskRequest#S3ObjectTags
   */
  readonly s3ObjectTags?: Ec2S3ObjectTag[];

  /**
   * @schema Ec2CreateStoreImageTaskRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateStoreImageTaskRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateStoreImageTaskRequest(obj: Ec2CreateStoreImageTaskRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageId': obj.imageId,
    'Bucket': obj.bucket,
    'S3ObjectTags': obj.s3ObjectTags?.map(y => toJson_Ec2S3ObjectTag(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateStoreImageTaskResult
 */
export interface Ec2CreateStoreImageTaskResult {
  /**
   * @schema Ec2CreateStoreImageTaskResult#ObjectKey
   */
  readonly objectKey?: string;

}

/**
 * Converts an object of type 'Ec2CreateStoreImageTaskResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateStoreImageTaskResult(obj: Ec2CreateStoreImageTaskResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ObjectKey': obj.objectKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSubnetRequest
 */
export interface Ec2CreateSubnetRequest {
  /**
   * @schema Ec2CreateSubnetRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateSubnetRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2CreateSubnetRequest#AvailabilityZoneId
   */
  readonly availabilityZoneId?: string;

  /**
   * @schema Ec2CreateSubnetRequest#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

  /**
   * @schema Ec2CreateSubnetRequest#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2CreateSubnetRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateSubnetRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateSubnetRequest#CidrBlock
   */
  readonly cidrBlock?: string;

}

/**
 * Converts an object of type 'Ec2CreateSubnetRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSubnetRequest(obj: Ec2CreateSubnetRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'AvailabilityZone': obj.availabilityZone,
    'AvailabilityZoneId': obj.availabilityZoneId,
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
    'OutpostArn': obj.outpostArn,
    'VpcId': obj.vpcId,
    'DryRun': obj.dryRun,
    'CidrBlock': obj.cidrBlock,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSubnetResult
 */
export interface Ec2CreateSubnetResult {
  /**
   * @schema Ec2CreateSubnetResult#Subnet
   */
  readonly subnet?: Ec2Subnet;

}

/**
 * Converts an object of type 'Ec2CreateSubnetResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSubnetResult(obj: Ec2CreateSubnetResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Subnet': toJson_Ec2Subnet(obj.subnet),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSubnetCidrReservationRequest
 */
export interface Ec2CreateSubnetCidrReservationRequest {
  /**
   * @schema Ec2CreateSubnetCidrReservationRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateSubnetCidrReservationRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2CreateSubnetCidrReservationRequest#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2CreateSubnetCidrReservationRequest#ReservationType
   */
  readonly reservationType?: string;

  /**
   * @schema Ec2CreateSubnetCidrReservationRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateSubnetCidrReservationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateSubnetCidrReservationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSubnetCidrReservationRequest(obj: Ec2CreateSubnetCidrReservationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'SubnetId': obj.subnetId,
    'Cidr': obj.cidr,
    'ReservationType': obj.reservationType,
    'Description': obj.description,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateSubnetCidrReservationResult
 */
export interface Ec2CreateSubnetCidrReservationResult {
  /**
   * @schema Ec2CreateSubnetCidrReservationResult#SubnetCidrReservation
   */
  readonly subnetCidrReservation?: Ec2SubnetCidrReservation;

}

/**
 * Converts an object of type 'Ec2CreateSubnetCidrReservationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateSubnetCidrReservationResult(obj: Ec2CreateSubnetCidrReservationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SubnetCidrReservation': toJson_Ec2SubnetCidrReservation(obj.subnetCidrReservation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTagsRequest
 */
export interface Ec2CreateTagsRequest {
  /**
   * @schema Ec2CreateTagsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateTagsRequest#Resources
   */
  readonly resources?: string[];

  /**
   * @schema Ec2CreateTagsRequest#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2CreateTagsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTagsRequest(obj: Ec2CreateTagsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Resources': obj.resources?.map(y => y),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTrafficMirrorFilterRequest
 */
export interface Ec2CreateTrafficMirrorFilterRequest {
  /**
   * @schema Ec2CreateTrafficMirrorFilterRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTrafficMirrorFilterRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateTrafficMirrorFilterRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTrafficMirrorFilterRequest(obj: Ec2CreateTrafficMirrorFilterRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTrafficMirrorFilterResult
 */
export interface Ec2CreateTrafficMirrorFilterResult {
  /**
   * @schema Ec2CreateTrafficMirrorFilterResult#TrafficMirrorFilter
   */
  readonly trafficMirrorFilter?: Ec2TrafficMirrorFilter;

  /**
   * @schema Ec2CreateTrafficMirrorFilterResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateTrafficMirrorFilterResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTrafficMirrorFilterResult(obj: Ec2CreateTrafficMirrorFilterResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilter': toJson_Ec2TrafficMirrorFilter(obj.trafficMirrorFilter),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTrafficMirrorFilterRuleRequest
 */
export interface Ec2CreateTrafficMirrorFilterRuleRequest {
  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#TrafficDirection
   */
  readonly trafficDirection?: string;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#RuleNumber
   */
  readonly ruleNumber?: number;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#RuleAction
   */
  readonly ruleAction?: string;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#DestinationPortRange
   */
  readonly destinationPortRange?: Ec2TrafficMirrorPortRangeRequest;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#SourcePortRange
   */
  readonly sourcePortRange?: Ec2TrafficMirrorPortRangeRequest;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#Protocol
   */
  readonly protocol?: number;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#SourceCidrBlock
   */
  readonly sourceCidrBlock?: string;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateTrafficMirrorFilterRuleRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTrafficMirrorFilterRuleRequest(obj: Ec2CreateTrafficMirrorFilterRuleRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
    'TrafficDirection': obj.trafficDirection,
    'RuleNumber': obj.ruleNumber,
    'RuleAction': obj.ruleAction,
    'DestinationPortRange': toJson_Ec2TrafficMirrorPortRangeRequest(obj.destinationPortRange),
    'SourcePortRange': toJson_Ec2TrafficMirrorPortRangeRequest(obj.sourcePortRange),
    'Protocol': obj.protocol,
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'SourceCidrBlock': obj.sourceCidrBlock,
    'Description': obj.description,
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTrafficMirrorFilterRuleResult
 */
export interface Ec2CreateTrafficMirrorFilterRuleResult {
  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleResult#TrafficMirrorFilterRule
   */
  readonly trafficMirrorFilterRule?: Ec2TrafficMirrorFilterRule;

  /**
   * @schema Ec2CreateTrafficMirrorFilterRuleResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateTrafficMirrorFilterRuleResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTrafficMirrorFilterRuleResult(obj: Ec2CreateTrafficMirrorFilterRuleResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterRule': toJson_Ec2TrafficMirrorFilterRule(obj.trafficMirrorFilterRule),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTrafficMirrorSessionRequest
 */
export interface Ec2CreateTrafficMirrorSessionRequest {
  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#TrafficMirrorTargetId
   */
  readonly trafficMirrorTargetId?: string;

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#PacketLength
   */
  readonly packetLength?: number;

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#SessionNumber
   */
  readonly sessionNumber?: number;

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#VirtualNetworkId
   */
  readonly virtualNetworkId?: number;

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateTrafficMirrorSessionRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateTrafficMirrorSessionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTrafficMirrorSessionRequest(obj: Ec2CreateTrafficMirrorSessionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfaceId': obj.networkInterfaceId,
    'TrafficMirrorTargetId': obj.trafficMirrorTargetId,
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
    'PacketLength': obj.packetLength,
    'SessionNumber': obj.sessionNumber,
    'VirtualNetworkId': obj.virtualNetworkId,
    'Description': obj.description,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTrafficMirrorSessionResult
 */
export interface Ec2CreateTrafficMirrorSessionResult {
  /**
   * @schema Ec2CreateTrafficMirrorSessionResult#TrafficMirrorSession
   */
  readonly trafficMirrorSession?: Ec2TrafficMirrorSession;

  /**
   * @schema Ec2CreateTrafficMirrorSessionResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateTrafficMirrorSessionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTrafficMirrorSessionResult(obj: Ec2CreateTrafficMirrorSessionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorSession': toJson_Ec2TrafficMirrorSession(obj.trafficMirrorSession),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTrafficMirrorTargetRequest
 */
export interface Ec2CreateTrafficMirrorTargetRequest {
  /**
   * @schema Ec2CreateTrafficMirrorTargetRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2CreateTrafficMirrorTargetRequest#NetworkLoadBalancerArn
   */
  readonly networkLoadBalancerArn?: string;

  /**
   * @schema Ec2CreateTrafficMirrorTargetRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateTrafficMirrorTargetRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTrafficMirrorTargetRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateTrafficMirrorTargetRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateTrafficMirrorTargetRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTrafficMirrorTargetRequest(obj: Ec2CreateTrafficMirrorTargetRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfaceId': obj.networkInterfaceId,
    'NetworkLoadBalancerArn': obj.networkLoadBalancerArn,
    'Description': obj.description,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTrafficMirrorTargetResult
 */
export interface Ec2CreateTrafficMirrorTargetResult {
  /**
   * @schema Ec2CreateTrafficMirrorTargetResult#TrafficMirrorTarget
   */
  readonly trafficMirrorTarget?: Ec2TrafficMirrorTarget;

  /**
   * @schema Ec2CreateTrafficMirrorTargetResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateTrafficMirrorTargetResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTrafficMirrorTargetResult(obj: Ec2CreateTrafficMirrorTargetResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorTarget': toJson_Ec2TrafficMirrorTarget(obj.trafficMirrorTarget),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayRequest
 */
export interface Ec2CreateTransitGatewayRequest {
  /**
   * @schema Ec2CreateTransitGatewayRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2CreateTransitGatewayRequest#Options
   */
  readonly options?: Ec2TransitGatewayRequestOptions;

  /**
   * @schema Ec2CreateTransitGatewayRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTransitGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayRequest(obj: Ec2CreateTransitGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'Options': toJson_Ec2TransitGatewayRequestOptions(obj.options),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayResult
 */
export interface Ec2CreateTransitGatewayResult {
  /**
   * @schema Ec2CreateTransitGatewayResult#TransitGateway
   */
  readonly transitGateway?: Ec2TransitGateway;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayResult(obj: Ec2CreateTransitGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGateway': toJson_Ec2TransitGateway(obj.transitGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayConnectRequest
 */
export interface Ec2CreateTransitGatewayConnectRequest {
  /**
   * @schema Ec2CreateTransitGatewayConnectRequest#TransportTransitGatewayAttachmentId
   */
  readonly transportTransitGatewayAttachmentId?: string;

  /**
   * @schema Ec2CreateTransitGatewayConnectRequest#Options
   */
  readonly options?: Ec2CreateTransitGatewayConnectRequestOptions;

  /**
   * @schema Ec2CreateTransitGatewayConnectRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTransitGatewayConnectRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayConnectRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayConnectRequest(obj: Ec2CreateTransitGatewayConnectRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransportTransitGatewayAttachmentId': obj.transportTransitGatewayAttachmentId,
    'Options': toJson_Ec2CreateTransitGatewayConnectRequestOptions(obj.options),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayConnectResult
 */
export interface Ec2CreateTransitGatewayConnectResult {
  /**
   * @schema Ec2CreateTransitGatewayConnectResult#TransitGatewayConnect
   */
  readonly transitGatewayConnect?: Ec2TransitGatewayConnect;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayConnectResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayConnectResult(obj: Ec2CreateTransitGatewayConnectResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayConnect': toJson_Ec2TransitGatewayConnect(obj.transitGatewayConnect),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayConnectPeerRequest
 */
export interface Ec2CreateTransitGatewayConnectPeerRequest {
  /**
   * @schema Ec2CreateTransitGatewayConnectPeerRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2CreateTransitGatewayConnectPeerRequest#TransitGatewayAddress
   */
  readonly transitGatewayAddress?: string;

  /**
   * @schema Ec2CreateTransitGatewayConnectPeerRequest#PeerAddress
   */
  readonly peerAddress?: string;

  /**
   * @schema Ec2CreateTransitGatewayConnectPeerRequest#BgpOptions
   */
  readonly bgpOptions?: Ec2TransitGatewayConnectRequestBgpOptions;

  /**
   * @schema Ec2CreateTransitGatewayConnectPeerRequest#InsideCidrBlocks
   */
  readonly insideCidrBlocks?: string[];

  /**
   * @schema Ec2CreateTransitGatewayConnectPeerRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTransitGatewayConnectPeerRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayConnectPeerRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayConnectPeerRequest(obj: Ec2CreateTransitGatewayConnectPeerRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'TransitGatewayAddress': obj.transitGatewayAddress,
    'PeerAddress': obj.peerAddress,
    'BgpOptions': toJson_Ec2TransitGatewayConnectRequestBgpOptions(obj.bgpOptions),
    'InsideCidrBlocks': obj.insideCidrBlocks?.map(y => y),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayConnectPeerResult
 */
export interface Ec2CreateTransitGatewayConnectPeerResult {
  /**
   * @schema Ec2CreateTransitGatewayConnectPeerResult#TransitGatewayConnectPeer
   */
  readonly transitGatewayConnectPeer?: Ec2TransitGatewayConnectPeer;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayConnectPeerResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayConnectPeerResult(obj: Ec2CreateTransitGatewayConnectPeerResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayConnectPeer': toJson_Ec2TransitGatewayConnectPeer(obj.transitGatewayConnectPeer),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayMulticastDomainRequest
 */
export interface Ec2CreateTransitGatewayMulticastDomainRequest {
  /**
   * @schema Ec2CreateTransitGatewayMulticastDomainRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2CreateTransitGatewayMulticastDomainRequest#Options
   */
  readonly options?: Ec2CreateTransitGatewayMulticastDomainRequestOptions;

  /**
   * @schema Ec2CreateTransitGatewayMulticastDomainRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTransitGatewayMulticastDomainRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayMulticastDomainRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayMulticastDomainRequest(obj: Ec2CreateTransitGatewayMulticastDomainRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayId': obj.transitGatewayId,
    'Options': toJson_Ec2CreateTransitGatewayMulticastDomainRequestOptions(obj.options),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayMulticastDomainResult
 */
export interface Ec2CreateTransitGatewayMulticastDomainResult {
  /**
   * @schema Ec2CreateTransitGatewayMulticastDomainResult#TransitGatewayMulticastDomain
   */
  readonly transitGatewayMulticastDomain?: Ec2TransitGatewayMulticastDomain;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayMulticastDomainResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayMulticastDomainResult(obj: Ec2CreateTransitGatewayMulticastDomainResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomain': toJson_Ec2TransitGatewayMulticastDomain(obj.transitGatewayMulticastDomain),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayPeeringAttachmentRequest
 */
export interface Ec2CreateTransitGatewayPeeringAttachmentRequest {
  /**
   * @schema Ec2CreateTransitGatewayPeeringAttachmentRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2CreateTransitGatewayPeeringAttachmentRequest#PeerTransitGatewayId
   */
  readonly peerTransitGatewayId?: string;

  /**
   * @schema Ec2CreateTransitGatewayPeeringAttachmentRequest#PeerAccountId
   */
  readonly peerAccountId?: string;

  /**
   * @schema Ec2CreateTransitGatewayPeeringAttachmentRequest#PeerRegion
   */
  readonly peerRegion?: string;

  /**
   * @schema Ec2CreateTransitGatewayPeeringAttachmentRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTransitGatewayPeeringAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayPeeringAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayPeeringAttachmentRequest(obj: Ec2CreateTransitGatewayPeeringAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayId': obj.transitGatewayId,
    'PeerTransitGatewayId': obj.peerTransitGatewayId,
    'PeerAccountId': obj.peerAccountId,
    'PeerRegion': obj.peerRegion,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayPeeringAttachmentResult
 */
export interface Ec2CreateTransitGatewayPeeringAttachmentResult {
  /**
   * @schema Ec2CreateTransitGatewayPeeringAttachmentResult#TransitGatewayPeeringAttachment
   */
  readonly transitGatewayPeeringAttachment?: Ec2TransitGatewayPeeringAttachment;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayPeeringAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayPeeringAttachmentResult(obj: Ec2CreateTransitGatewayPeeringAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPeeringAttachment': toJson_Ec2TransitGatewayPeeringAttachment(obj.transitGatewayPeeringAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayPrefixListReferenceRequest
 */
export interface Ec2CreateTransitGatewayPrefixListReferenceRequest {
  /**
   * @schema Ec2CreateTransitGatewayPrefixListReferenceRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2CreateTransitGatewayPrefixListReferenceRequest#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2CreateTransitGatewayPrefixListReferenceRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2CreateTransitGatewayPrefixListReferenceRequest#Blackhole
   */
  readonly blackhole?: boolean;

  /**
   * @schema Ec2CreateTransitGatewayPrefixListReferenceRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayPrefixListReferenceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayPrefixListReferenceRequest(obj: Ec2CreateTransitGatewayPrefixListReferenceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'PrefixListId': obj.prefixListId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'Blackhole': obj.blackhole,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayPrefixListReferenceResult
 */
export interface Ec2CreateTransitGatewayPrefixListReferenceResult {
  /**
   * @schema Ec2CreateTransitGatewayPrefixListReferenceResult#TransitGatewayPrefixListReference
   */
  readonly transitGatewayPrefixListReference?: Ec2TransitGatewayPrefixListReference;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayPrefixListReferenceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayPrefixListReferenceResult(obj: Ec2CreateTransitGatewayPrefixListReferenceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPrefixListReference': toJson_Ec2TransitGatewayPrefixListReference(obj.transitGatewayPrefixListReference),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayRouteRequest
 */
export interface Ec2CreateTransitGatewayRouteRequest {
  /**
   * @schema Ec2CreateTransitGatewayRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2CreateTransitGatewayRouteRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2CreateTransitGatewayRouteRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2CreateTransitGatewayRouteRequest#Blackhole
   */
  readonly blackhole?: boolean;

  /**
   * @schema Ec2CreateTransitGatewayRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayRouteRequest(obj: Ec2CreateTransitGatewayRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'Blackhole': obj.blackhole,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayRouteResult
 */
export interface Ec2CreateTransitGatewayRouteResult {
  /**
   * @schema Ec2CreateTransitGatewayRouteResult#Route
   */
  readonly route?: Ec2TransitGatewayRoute;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayRouteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayRouteResult(obj: Ec2CreateTransitGatewayRouteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Route': toJson_Ec2TransitGatewayRoute(obj.route),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayRouteTableRequest
 */
export interface Ec2CreateTransitGatewayRouteTableRequest {
  /**
   * @schema Ec2CreateTransitGatewayRouteTableRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2CreateTransitGatewayRouteTableRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTransitGatewayRouteTableRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayRouteTableRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayRouteTableRequest(obj: Ec2CreateTransitGatewayRouteTableRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayId': obj.transitGatewayId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayRouteTableResult
 */
export interface Ec2CreateTransitGatewayRouteTableResult {
  /**
   * @schema Ec2CreateTransitGatewayRouteTableResult#TransitGatewayRouteTable
   */
  readonly transitGatewayRouteTable?: Ec2TransitGatewayRouteTable;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayRouteTableResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayRouteTableResult(obj: Ec2CreateTransitGatewayRouteTableResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTable': toJson_Ec2TransitGatewayRouteTable(obj.transitGatewayRouteTable),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayVpcAttachmentRequest
 */
export interface Ec2CreateTransitGatewayVpcAttachmentRequest {
  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequest#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequest#Options
   */
  readonly options?: Ec2CreateTransitGatewayVpcAttachmentRequestOptions;

  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayVpcAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayVpcAttachmentRequest(obj: Ec2CreateTransitGatewayVpcAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayId': obj.transitGatewayId,
    'VpcId': obj.vpcId,
    'SubnetIds': obj.subnetIds?.map(y => y),
    'Options': toJson_Ec2CreateTransitGatewayVpcAttachmentRequestOptions(obj.options),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayVpcAttachmentResult
 */
export interface Ec2CreateTransitGatewayVpcAttachmentResult {
  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentResult#TransitGatewayVpcAttachment
   */
  readonly transitGatewayVpcAttachment?: Ec2TransitGatewayVpcAttachment;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayVpcAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayVpcAttachmentResult(obj: Ec2CreateTransitGatewayVpcAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayVpcAttachment': toJson_Ec2TransitGatewayVpcAttachment(obj.transitGatewayVpcAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVolumeRequest
 */
export interface Ec2CreateVolumeRequest {
  /**
   * @schema Ec2CreateVolumeRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2CreateVolumeRequest#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2CreateVolumeRequest#Iops
   */
  readonly iops?: number;

  /**
   * @schema Ec2CreateVolumeRequest#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2CreateVolumeRequest#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2CreateVolumeRequest#Size
   */
  readonly size?: number;

  /**
   * @schema Ec2CreateVolumeRequest#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2CreateVolumeRequest#VolumeType
   */
  readonly volumeType?: string;

  /**
   * @schema Ec2CreateVolumeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateVolumeRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateVolumeRequest#MultiAttachEnabled
   */
  readonly multiAttachEnabled?: boolean;

  /**
   * @schema Ec2CreateVolumeRequest#Throughput
   */
  readonly throughput?: number;

  /**
   * @schema Ec2CreateVolumeRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateVolumeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVolumeRequest(obj: Ec2CreateVolumeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Encrypted': obj.encrypted,
    'Iops': obj.iops,
    'KmsKeyId': obj.kmsKeyId,
    'OutpostArn': obj.outpostArn,
    'Size': obj.size,
    'SnapshotId': obj.snapshotId,
    'VolumeType': obj.volumeType,
    'DryRun': obj.dryRun,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'MultiAttachEnabled': obj.multiAttachEnabled,
    'Throughput': obj.throughput,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Volume
 */
export interface Ec2Volume {
  /**
   * @schema Ec2Volume#Attachments
   */
  readonly attachments?: Ec2VolumeAttachment[];

  /**
   * @schema Ec2Volume#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2Volume#CreateTime
   */
  readonly createTime?: string;

  /**
   * @schema Ec2Volume#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2Volume#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2Volume#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2Volume#Size
   */
  readonly size?: number;

  /**
   * @schema Ec2Volume#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2Volume#State
   */
  readonly state?: string;

  /**
   * @schema Ec2Volume#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2Volume#Iops
   */
  readonly iops?: number;

  /**
   * @schema Ec2Volume#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2Volume#VolumeType
   */
  readonly volumeType?: string;

  /**
   * @schema Ec2Volume#FastRestored
   */
  readonly fastRestored?: boolean;

  /**
   * @schema Ec2Volume#MultiAttachEnabled
   */
  readonly multiAttachEnabled?: boolean;

  /**
   * @schema Ec2Volume#Throughput
   */
  readonly throughput?: number;

}

/**
 * Converts an object of type 'Ec2Volume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Volume(obj: Ec2Volume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attachments': obj.attachments?.map(y => toJson_Ec2VolumeAttachment(y)),
    'AvailabilityZone': obj.availabilityZone,
    'CreateTime': obj.createTime,
    'Encrypted': obj.encrypted,
    'KmsKeyId': obj.kmsKeyId,
    'OutpostArn': obj.outpostArn,
    'Size': obj.size,
    'SnapshotId': obj.snapshotId,
    'State': obj.state,
    'VolumeId': obj.volumeId,
    'Iops': obj.iops,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VolumeType': obj.volumeType,
    'FastRestored': obj.fastRestored,
    'MultiAttachEnabled': obj.multiAttachEnabled,
    'Throughput': obj.throughput,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcRequest
 */
export interface Ec2CreateVpcRequest {
  /**
   * @schema Ec2CreateVpcRequest#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2CreateVpcRequest#AmazonProvidedIpv6CidrBlock
   */
  readonly amazonProvidedIpv6CidrBlock?: boolean;

  /**
   * @schema Ec2CreateVpcRequest#Ipv6Pool
   */
  readonly ipv6Pool?: string;

  /**
   * @schema Ec2CreateVpcRequest#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

  /**
   * @schema Ec2CreateVpcRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateVpcRequest#InstanceTenancy
   */
  readonly instanceTenancy?: string;

  /**
   * @schema Ec2CreateVpcRequest#Ipv6CidrBlockNetworkBorderGroup
   */
  readonly ipv6CidrBlockNetworkBorderGroup?: string;

  /**
   * @schema Ec2CreateVpcRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateVpcRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcRequest(obj: Ec2CreateVpcRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrBlock': obj.cidrBlock,
    'AmazonProvidedIpv6CidrBlock': obj.amazonProvidedIpv6CidrBlock,
    'Ipv6Pool': obj.ipv6Pool,
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
    'DryRun': obj.dryRun,
    'InstanceTenancy': obj.instanceTenancy,
    'Ipv6CidrBlockNetworkBorderGroup': obj.ipv6CidrBlockNetworkBorderGroup,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcResult
 */
export interface Ec2CreateVpcResult {
  /**
   * @schema Ec2CreateVpcResult#Vpc
   */
  readonly vpc?: Ec2Vpc;

}

/**
 * Converts an object of type 'Ec2CreateVpcResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcResult(obj: Ec2CreateVpcResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Vpc': toJson_Ec2Vpc(obj.vpc),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcEndpointRequest
 */
export interface Ec2CreateVpcEndpointRequest {
  /**
   * @schema Ec2CreateVpcEndpointRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateVpcEndpointRequest#VpcEndpointType
   */
  readonly vpcEndpointType?: string;

  /**
   * @schema Ec2CreateVpcEndpointRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateVpcEndpointRequest#ServiceName
   */
  readonly serviceName?: string;

  /**
   * @schema Ec2CreateVpcEndpointRequest#PolicyDocument
   */
  readonly policyDocument?: string;

  /**
   * @schema Ec2CreateVpcEndpointRequest#RouteTableIds
   */
  readonly routeTableIds?: string[];

  /**
   * @schema Ec2CreateVpcEndpointRequest#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2CreateVpcEndpointRequest#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2CreateVpcEndpointRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateVpcEndpointRequest#PrivateDnsEnabled
   */
  readonly privateDnsEnabled?: boolean;

  /**
   * @schema Ec2CreateVpcEndpointRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateVpcEndpointRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcEndpointRequest(obj: Ec2CreateVpcEndpointRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcEndpointType': obj.vpcEndpointType,
    'VpcId': obj.vpcId,
    'ServiceName': obj.serviceName,
    'PolicyDocument': obj.policyDocument,
    'RouteTableIds': obj.routeTableIds?.map(y => y),
    'SubnetIds': obj.subnetIds?.map(y => y),
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'ClientToken': obj.clientToken,
    'PrivateDnsEnabled': obj.privateDnsEnabled,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcEndpointResult
 */
export interface Ec2CreateVpcEndpointResult {
  /**
   * @schema Ec2CreateVpcEndpointResult#VpcEndpoint
   */
  readonly vpcEndpoint?: Ec2VpcEndpoint;

  /**
   * @schema Ec2CreateVpcEndpointResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateVpcEndpointResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcEndpointResult(obj: Ec2CreateVpcEndpointResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcEndpoint': toJson_Ec2VpcEndpoint(obj.vpcEndpoint),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcEndpointConnectionNotificationRequest
 */
export interface Ec2CreateVpcEndpointConnectionNotificationRequest {
  /**
   * @schema Ec2CreateVpcEndpointConnectionNotificationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateVpcEndpointConnectionNotificationRequest#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2CreateVpcEndpointConnectionNotificationRequest#VpcEndpointId
   */
  readonly vpcEndpointId?: string;

  /**
   * @schema Ec2CreateVpcEndpointConnectionNotificationRequest#ConnectionNotificationArn
   */
  readonly connectionNotificationArn?: string;

  /**
   * @schema Ec2CreateVpcEndpointConnectionNotificationRequest#ConnectionEvents
   */
  readonly connectionEvents?: string[];

  /**
   * @schema Ec2CreateVpcEndpointConnectionNotificationRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateVpcEndpointConnectionNotificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcEndpointConnectionNotificationRequest(obj: Ec2CreateVpcEndpointConnectionNotificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceId': obj.serviceId,
    'VpcEndpointId': obj.vpcEndpointId,
    'ConnectionNotificationArn': obj.connectionNotificationArn,
    'ConnectionEvents': obj.connectionEvents?.map(y => y),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcEndpointConnectionNotificationResult
 */
export interface Ec2CreateVpcEndpointConnectionNotificationResult {
  /**
   * @schema Ec2CreateVpcEndpointConnectionNotificationResult#ConnectionNotification
   */
  readonly connectionNotification?: Ec2ConnectionNotification;

  /**
   * @schema Ec2CreateVpcEndpointConnectionNotificationResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateVpcEndpointConnectionNotificationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcEndpointConnectionNotificationResult(obj: Ec2CreateVpcEndpointConnectionNotificationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConnectionNotification': toJson_Ec2ConnectionNotification(obj.connectionNotification),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcEndpointServiceConfigurationRequest
 */
export interface Ec2CreateVpcEndpointServiceConfigurationRequest {
  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationRequest#AcceptanceRequired
   */
  readonly acceptanceRequired?: boolean;

  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationRequest#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationRequest#NetworkLoadBalancerArns
   */
  readonly networkLoadBalancerArns?: string[];

  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationRequest#GatewayLoadBalancerArns
   */
  readonly gatewayLoadBalancerArns?: string[];

  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateVpcEndpointServiceConfigurationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcEndpointServiceConfigurationRequest(obj: Ec2CreateVpcEndpointServiceConfigurationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'AcceptanceRequired': obj.acceptanceRequired,
    'PrivateDnsName': obj.privateDnsName,
    'NetworkLoadBalancerArns': obj.networkLoadBalancerArns?.map(y => y),
    'GatewayLoadBalancerArns': obj.gatewayLoadBalancerArns?.map(y => y),
    'ClientToken': obj.clientToken,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcEndpointServiceConfigurationResult
 */
export interface Ec2CreateVpcEndpointServiceConfigurationResult {
  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationResult#ServiceConfiguration
   */
  readonly serviceConfiguration?: Ec2ServiceConfiguration;

  /**
   * @schema Ec2CreateVpcEndpointServiceConfigurationResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2CreateVpcEndpointServiceConfigurationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcEndpointServiceConfigurationResult(obj: Ec2CreateVpcEndpointServiceConfigurationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ServiceConfiguration': toJson_Ec2ServiceConfiguration(obj.serviceConfiguration),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcPeeringConnectionRequest
 */
export interface Ec2CreateVpcPeeringConnectionRequest {
  /**
   * @schema Ec2CreateVpcPeeringConnectionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateVpcPeeringConnectionRequest#PeerOwnerId
   */
  readonly peerOwnerId?: string;

  /**
   * @schema Ec2CreateVpcPeeringConnectionRequest#PeerVpcId
   */
  readonly peerVpcId?: string;

  /**
   * @schema Ec2CreateVpcPeeringConnectionRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CreateVpcPeeringConnectionRequest#PeerRegion
   */
  readonly peerRegion?: string;

  /**
   * @schema Ec2CreateVpcPeeringConnectionRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateVpcPeeringConnectionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcPeeringConnectionRequest(obj: Ec2CreateVpcPeeringConnectionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PeerOwnerId': obj.peerOwnerId,
    'PeerVpcId': obj.peerVpcId,
    'VpcId': obj.vpcId,
    'PeerRegion': obj.peerRegion,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpcPeeringConnectionResult
 */
export interface Ec2CreateVpcPeeringConnectionResult {
  /**
   * @schema Ec2CreateVpcPeeringConnectionResult#VpcPeeringConnection
   */
  readonly vpcPeeringConnection?: Ec2VpcPeeringConnection;

}

/**
 * Converts an object of type 'Ec2CreateVpcPeeringConnectionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpcPeeringConnectionResult(obj: Ec2CreateVpcPeeringConnectionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcPeeringConnection': toJson_Ec2VpcPeeringConnection(obj.vpcPeeringConnection),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpnConnectionRequest
 */
export interface Ec2CreateVpnConnectionRequest {
  /**
   * @schema Ec2CreateVpnConnectionRequest#CustomerGatewayId
   */
  readonly customerGatewayId?: string;

  /**
   * @schema Ec2CreateVpnConnectionRequest#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2CreateVpnConnectionRequest#VpnGatewayId
   */
  readonly vpnGatewayId?: string;

  /**
   * @schema Ec2CreateVpnConnectionRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2CreateVpnConnectionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2CreateVpnConnectionRequest#Options
   */
  readonly options?: Ec2VpnConnectionOptionsSpecification;

  /**
   * @schema Ec2CreateVpnConnectionRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2CreateVpnConnectionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpnConnectionRequest(obj: Ec2CreateVpnConnectionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CustomerGatewayId': obj.customerGatewayId,
    'Type': obj.type,
    'VpnGatewayId': obj.vpnGatewayId,
    'TransitGatewayId': obj.transitGatewayId,
    'DryRun': obj.dryRun,
    'Options': toJson_Ec2VpnConnectionOptionsSpecification(obj.options),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpnConnectionResult
 */
export interface Ec2CreateVpnConnectionResult {
  /**
   * @schema Ec2CreateVpnConnectionResult#VpnConnection
   */
  readonly vpnConnection?: Ec2VpnConnection;

}

/**
 * Converts an object of type 'Ec2CreateVpnConnectionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpnConnectionResult(obj: Ec2CreateVpnConnectionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnection': toJson_Ec2VpnConnection(obj.vpnConnection),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpnConnectionRouteRequest
 */
export interface Ec2CreateVpnConnectionRouteRequest {
  /**
   * @schema Ec2CreateVpnConnectionRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2CreateVpnConnectionRouteRequest#VpnConnectionId
   */
  readonly vpnConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2CreateVpnConnectionRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpnConnectionRouteRequest(obj: Ec2CreateVpnConnectionRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'VpnConnectionId': obj.vpnConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpnGatewayRequest
 */
export interface Ec2CreateVpnGatewayRequest {
  /**
   * @schema Ec2CreateVpnGatewayRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2CreateVpnGatewayRequest#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2CreateVpnGatewayRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2CreateVpnGatewayRequest#AmazonSideAsn
   */
  readonly amazonSideAsn?: number;

  /**
   * @schema Ec2CreateVpnGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2CreateVpnGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpnGatewayRequest(obj: Ec2CreateVpnGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Type': obj.type,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'AmazonSideAsn': obj.amazonSideAsn,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVpnGatewayResult
 */
export interface Ec2CreateVpnGatewayResult {
  /**
   * @schema Ec2CreateVpnGatewayResult#VpnGateway
   */
  readonly vpnGateway?: Ec2VpnGateway;

}

/**
 * Converts an object of type 'Ec2CreateVpnGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVpnGatewayResult(obj: Ec2CreateVpnGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnGateway': toJson_Ec2VpnGateway(obj.vpnGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteCarrierGatewayRequest
 */
export interface Ec2DeleteCarrierGatewayRequest {
  /**
   * @schema Ec2DeleteCarrierGatewayRequest#CarrierGatewayId
   */
  readonly carrierGatewayId?: string;

  /**
   * @schema Ec2DeleteCarrierGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteCarrierGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteCarrierGatewayRequest(obj: Ec2DeleteCarrierGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CarrierGatewayId': obj.carrierGatewayId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteCarrierGatewayResult
 */
export interface Ec2DeleteCarrierGatewayResult {
  /**
   * @schema Ec2DeleteCarrierGatewayResult#CarrierGateway
   */
  readonly carrierGateway?: Ec2CarrierGateway;

}

/**
 * Converts an object of type 'Ec2DeleteCarrierGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteCarrierGatewayResult(obj: Ec2DeleteCarrierGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CarrierGateway': toJson_Ec2CarrierGateway(obj.carrierGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteClientVpnEndpointRequest
 */
export interface Ec2DeleteClientVpnEndpointRequest {
  /**
   * @schema Ec2DeleteClientVpnEndpointRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2DeleteClientVpnEndpointRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteClientVpnEndpointRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteClientVpnEndpointRequest(obj: Ec2DeleteClientVpnEndpointRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteClientVpnEndpointResult
 */
export interface Ec2DeleteClientVpnEndpointResult {
  /**
   * @schema Ec2DeleteClientVpnEndpointResult#Status
   */
  readonly status?: Ec2ClientVpnEndpointStatus;

}

/**
 * Converts an object of type 'Ec2DeleteClientVpnEndpointResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteClientVpnEndpointResult(obj: Ec2DeleteClientVpnEndpointResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Status': toJson_Ec2ClientVpnEndpointStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteClientVpnRouteRequest
 */
export interface Ec2DeleteClientVpnRouteRequest {
  /**
   * @schema Ec2DeleteClientVpnRouteRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2DeleteClientVpnRouteRequest#TargetVpcSubnetId
   */
  readonly targetVpcSubnetId?: string;

  /**
   * @schema Ec2DeleteClientVpnRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2DeleteClientVpnRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteClientVpnRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteClientVpnRouteRequest(obj: Ec2DeleteClientVpnRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'TargetVpcSubnetId': obj.targetVpcSubnetId,
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteClientVpnRouteResult
 */
export interface Ec2DeleteClientVpnRouteResult {
  /**
   * @schema Ec2DeleteClientVpnRouteResult#Status
   */
  readonly status?: Ec2ClientVpnRouteStatus;

}

/**
 * Converts an object of type 'Ec2DeleteClientVpnRouteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteClientVpnRouteResult(obj: Ec2DeleteClientVpnRouteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Status': toJson_Ec2ClientVpnRouteStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteCustomerGatewayRequest
 */
export interface Ec2DeleteCustomerGatewayRequest {
  /**
   * @schema Ec2DeleteCustomerGatewayRequest#CustomerGatewayId
   */
  readonly customerGatewayId?: string;

  /**
   * @schema Ec2DeleteCustomerGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteCustomerGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteCustomerGatewayRequest(obj: Ec2DeleteCustomerGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CustomerGatewayId': obj.customerGatewayId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteDhcpOptionsRequest
 */
export interface Ec2DeleteDhcpOptionsRequest {
  /**
   * @schema Ec2DeleteDhcpOptionsRequest#DhcpOptionsId
   */
  readonly dhcpOptionsId?: string;

  /**
   * @schema Ec2DeleteDhcpOptionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteDhcpOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteDhcpOptionsRequest(obj: Ec2DeleteDhcpOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DhcpOptionsId': obj.dhcpOptionsId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteEgressOnlyInternetGatewayRequest
 */
export interface Ec2DeleteEgressOnlyInternetGatewayRequest {
  /**
   * @schema Ec2DeleteEgressOnlyInternetGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteEgressOnlyInternetGatewayRequest#EgressOnlyInternetGatewayId
   */
  readonly egressOnlyInternetGatewayId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteEgressOnlyInternetGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteEgressOnlyInternetGatewayRequest(obj: Ec2DeleteEgressOnlyInternetGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'EgressOnlyInternetGatewayId': obj.egressOnlyInternetGatewayId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteEgressOnlyInternetGatewayResult
 */
export interface Ec2DeleteEgressOnlyInternetGatewayResult {
  /**
   * @schema Ec2DeleteEgressOnlyInternetGatewayResult#ReturnCode
   */
  readonly returnCode?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteEgressOnlyInternetGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteEgressOnlyInternetGatewayResult(obj: Ec2DeleteEgressOnlyInternetGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReturnCode': obj.returnCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFleetsRequest
 */
export interface Ec2DeleteFleetsRequest {
  /**
   * @schema Ec2DeleteFleetsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteFleetsRequest#FleetIds
   */
  readonly fleetIds?: string[];

  /**
   * @schema Ec2DeleteFleetsRequest#TerminateInstances
   */
  readonly terminateInstances?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteFleetsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFleetsRequest(obj: Ec2DeleteFleetsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'FleetIds': obj.fleetIds?.map(y => y),
    'TerminateInstances': obj.terminateInstances,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFleetsResult
 */
export interface Ec2DeleteFleetsResult {
  /**
   * @schema Ec2DeleteFleetsResult#SuccessfulFleetDeletions
   */
  readonly successfulFleetDeletions?: Ec2DeleteFleetSuccessItem[];

  /**
   * @schema Ec2DeleteFleetsResult#UnsuccessfulFleetDeletions
   */
  readonly unsuccessfulFleetDeletions?: Ec2DeleteFleetErrorItem[];

}

/**
 * Converts an object of type 'Ec2DeleteFleetsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFleetsResult(obj: Ec2DeleteFleetsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SuccessfulFleetDeletions': obj.successfulFleetDeletions?.map(y => toJson_Ec2DeleteFleetSuccessItem(y)),
    'UnsuccessfulFleetDeletions': obj.unsuccessfulFleetDeletions?.map(y => toJson_Ec2DeleteFleetErrorItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFlowLogsRequest
 */
export interface Ec2DeleteFlowLogsRequest {
  /**
   * @schema Ec2DeleteFlowLogsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteFlowLogsRequest#FlowLogIds
   */
  readonly flowLogIds?: string[];

}

/**
 * Converts an object of type 'Ec2DeleteFlowLogsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFlowLogsRequest(obj: Ec2DeleteFlowLogsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'FlowLogIds': obj.flowLogIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFlowLogsResult
 */
export interface Ec2DeleteFlowLogsResult {
  /**
   * @schema Ec2DeleteFlowLogsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2DeleteFlowLogsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFlowLogsResult(obj: Ec2DeleteFlowLogsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFpgaImageRequest
 */
export interface Ec2DeleteFpgaImageRequest {
  /**
   * @schema Ec2DeleteFpgaImageRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteFpgaImageRequest#FpgaImageId
   */
  readonly fpgaImageId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteFpgaImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFpgaImageRequest(obj: Ec2DeleteFpgaImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'FpgaImageId': obj.fpgaImageId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFpgaImageResult
 */
export interface Ec2DeleteFpgaImageResult {
  /**
   * @schema Ec2DeleteFpgaImageResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteFpgaImageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFpgaImageResult(obj: Ec2DeleteFpgaImageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteInstanceEventWindowRequest
 */
export interface Ec2DeleteInstanceEventWindowRequest {
  /**
   * @schema Ec2DeleteInstanceEventWindowRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteInstanceEventWindowRequest#ForceDelete
   */
  readonly forceDelete?: boolean;

  /**
   * @schema Ec2DeleteInstanceEventWindowRequest#InstanceEventWindowId
   */
  readonly instanceEventWindowId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteInstanceEventWindowRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteInstanceEventWindowRequest(obj: Ec2DeleteInstanceEventWindowRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ForceDelete': obj.forceDelete,
    'InstanceEventWindowId': obj.instanceEventWindowId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteInstanceEventWindowResult
 */
export interface Ec2DeleteInstanceEventWindowResult {
  /**
   * @schema Ec2DeleteInstanceEventWindowResult#InstanceEventWindowState
   */
  readonly instanceEventWindowState?: Ec2InstanceEventWindowStateChange;

}

/**
 * Converts an object of type 'Ec2DeleteInstanceEventWindowResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteInstanceEventWindowResult(obj: Ec2DeleteInstanceEventWindowResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventWindowState': toJson_Ec2InstanceEventWindowStateChange(obj.instanceEventWindowState),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteInternetGatewayRequest
 */
export interface Ec2DeleteInternetGatewayRequest {
  /**
   * @schema Ec2DeleteInternetGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteInternetGatewayRequest#InternetGatewayId
   */
  readonly internetGatewayId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteInternetGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteInternetGatewayRequest(obj: Ec2DeleteInternetGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InternetGatewayId': obj.internetGatewayId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteKeyPairRequest
 */
export interface Ec2DeleteKeyPairRequest {
  /**
   * @schema Ec2DeleteKeyPairRequest#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2DeleteKeyPairRequest#KeyPairId
   */
  readonly keyPairId?: string;

  /**
   * @schema Ec2DeleteKeyPairRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteKeyPairRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteKeyPairRequest(obj: Ec2DeleteKeyPairRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KeyName': obj.keyName,
    'KeyPairId': obj.keyPairId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLaunchTemplateRequest
 */
export interface Ec2DeleteLaunchTemplateRequest {
  /**
   * @schema Ec2DeleteLaunchTemplateRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteLaunchTemplateRequest#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2DeleteLaunchTemplateRequest#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

}

/**
 * Converts an object of type 'Ec2DeleteLaunchTemplateRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLaunchTemplateRequest(obj: Ec2DeleteLaunchTemplateRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLaunchTemplateResult
 */
export interface Ec2DeleteLaunchTemplateResult {
  /**
   * @schema Ec2DeleteLaunchTemplateResult#LaunchTemplate
   */
  readonly launchTemplate?: Ec2LaunchTemplate;

}

/**
 * Converts an object of type 'Ec2DeleteLaunchTemplateResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLaunchTemplateResult(obj: Ec2DeleteLaunchTemplateResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplate': toJson_Ec2LaunchTemplate(obj.launchTemplate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLaunchTemplateVersionsRequest
 */
export interface Ec2DeleteLaunchTemplateVersionsRequest {
  /**
   * @schema Ec2DeleteLaunchTemplateVersionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsRequest#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsRequest#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsRequest#Versions
   */
  readonly versions?: string[];

}

/**
 * Converts an object of type 'Ec2DeleteLaunchTemplateVersionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLaunchTemplateVersionsRequest(obj: Ec2DeleteLaunchTemplateVersionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'Versions': obj.versions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLaunchTemplateVersionsResult
 */
export interface Ec2DeleteLaunchTemplateVersionsResult {
  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResult#SuccessfullyDeletedLaunchTemplateVersions
   */
  readonly successfullyDeletedLaunchTemplateVersions?: Ec2DeleteLaunchTemplateVersionsResponseSuccessItem[];

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResult#UnsuccessfullyDeletedLaunchTemplateVersions
   */
  readonly unsuccessfullyDeletedLaunchTemplateVersions?: Ec2DeleteLaunchTemplateVersionsResponseErrorItem[];

}

/**
 * Converts an object of type 'Ec2DeleteLaunchTemplateVersionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLaunchTemplateVersionsResult(obj: Ec2DeleteLaunchTemplateVersionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SuccessfullyDeletedLaunchTemplateVersions': obj.successfullyDeletedLaunchTemplateVersions?.map(y => toJson_Ec2DeleteLaunchTemplateVersionsResponseSuccessItem(y)),
    'UnsuccessfullyDeletedLaunchTemplateVersions': obj.unsuccessfullyDeletedLaunchTemplateVersions?.map(y => toJson_Ec2DeleteLaunchTemplateVersionsResponseErrorItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLocalGatewayRouteRequest
 */
export interface Ec2DeleteLocalGatewayRouteRequest {
  /**
   * @schema Ec2DeleteLocalGatewayRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2DeleteLocalGatewayRouteRequest#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2DeleteLocalGatewayRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteLocalGatewayRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLocalGatewayRouteRequest(obj: Ec2DeleteLocalGatewayRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLocalGatewayRouteResult
 */
export interface Ec2DeleteLocalGatewayRouteResult {
  /**
   * @schema Ec2DeleteLocalGatewayRouteResult#Route
   */
  readonly route?: Ec2LocalGatewayRoute;

}

/**
 * Converts an object of type 'Ec2DeleteLocalGatewayRouteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLocalGatewayRouteResult(obj: Ec2DeleteLocalGatewayRouteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Route': toJson_Ec2LocalGatewayRoute(obj.route),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest
 */
export interface Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest {
  /**
   * @schema Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest#LocalGatewayRouteTableVpcAssociationId
   */
  readonly localGatewayRouteTableVpcAssociationId?: string;

  /**
   * @schema Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest(obj: Ec2DeleteLocalGatewayRouteTableVpcAssociationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVpcAssociationId': obj.localGatewayRouteTableVpcAssociationId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLocalGatewayRouteTableVpcAssociationResult
 */
export interface Ec2DeleteLocalGatewayRouteTableVpcAssociationResult {
  /**
   * @schema Ec2DeleteLocalGatewayRouteTableVpcAssociationResult#LocalGatewayRouteTableVpcAssociation
   */
  readonly localGatewayRouteTableVpcAssociation?: Ec2LocalGatewayRouteTableVpcAssociation;

}

/**
 * Converts an object of type 'Ec2DeleteLocalGatewayRouteTableVpcAssociationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLocalGatewayRouteTableVpcAssociationResult(obj: Ec2DeleteLocalGatewayRouteTableVpcAssociationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVpcAssociation': toJson_Ec2LocalGatewayRouteTableVpcAssociation(obj.localGatewayRouteTableVpcAssociation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteManagedPrefixListRequest
 */
export interface Ec2DeleteManagedPrefixListRequest {
  /**
   * @schema Ec2DeleteManagedPrefixListRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteManagedPrefixListRequest#PrefixListId
   */
  readonly prefixListId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteManagedPrefixListRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteManagedPrefixListRequest(obj: Ec2DeleteManagedPrefixListRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PrefixListId': obj.prefixListId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteManagedPrefixListResult
 */
export interface Ec2DeleteManagedPrefixListResult {
  /**
   * @schema Ec2DeleteManagedPrefixListResult#PrefixList
   */
  readonly prefixList?: Ec2ManagedPrefixList;

}

/**
 * Converts an object of type 'Ec2DeleteManagedPrefixListResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteManagedPrefixListResult(obj: Ec2DeleteManagedPrefixListResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrefixList': toJson_Ec2ManagedPrefixList(obj.prefixList),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNatGatewayRequest
 */
export interface Ec2DeleteNatGatewayRequest {
  /**
   * @schema Ec2DeleteNatGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteNatGatewayRequest#NatGatewayId
   */
  readonly natGatewayId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteNatGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNatGatewayRequest(obj: Ec2DeleteNatGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'NatGatewayId': obj.natGatewayId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNatGatewayResult
 */
export interface Ec2DeleteNatGatewayResult {
  /**
   * @schema Ec2DeleteNatGatewayResult#NatGatewayId
   */
  readonly natGatewayId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteNatGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNatGatewayResult(obj: Ec2DeleteNatGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NatGatewayId': obj.natGatewayId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkAclRequest
 */
export interface Ec2DeleteNetworkAclRequest {
  /**
   * @schema Ec2DeleteNetworkAclRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteNetworkAclRequest#NetworkAclId
   */
  readonly networkAclId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkAclRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkAclRequest(obj: Ec2DeleteNetworkAclRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'NetworkAclId': obj.networkAclId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkAclEntryRequest
 */
export interface Ec2DeleteNetworkAclEntryRequest {
  /**
   * @schema Ec2DeleteNetworkAclEntryRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteNetworkAclEntryRequest#Egress
   */
  readonly egress?: boolean;

  /**
   * @schema Ec2DeleteNetworkAclEntryRequest#NetworkAclId
   */
  readonly networkAclId?: string;

  /**
   * @schema Ec2DeleteNetworkAclEntryRequest#RuleNumber
   */
  readonly ruleNumber?: number;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkAclEntryRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkAclEntryRequest(obj: Ec2DeleteNetworkAclEntryRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Egress': obj.egress,
    'NetworkAclId': obj.networkAclId,
    'RuleNumber': obj.ruleNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkInsightsAnalysisRequest
 */
export interface Ec2DeleteNetworkInsightsAnalysisRequest {
  /**
   * @schema Ec2DeleteNetworkInsightsAnalysisRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteNetworkInsightsAnalysisRequest#NetworkInsightsAnalysisId
   */
  readonly networkInsightsAnalysisId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkInsightsAnalysisRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkInsightsAnalysisRequest(obj: Ec2DeleteNetworkInsightsAnalysisRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'NetworkInsightsAnalysisId': obj.networkInsightsAnalysisId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkInsightsAnalysisResult
 */
export interface Ec2DeleteNetworkInsightsAnalysisResult {
  /**
   * @schema Ec2DeleteNetworkInsightsAnalysisResult#NetworkInsightsAnalysisId
   */
  readonly networkInsightsAnalysisId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkInsightsAnalysisResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkInsightsAnalysisResult(obj: Ec2DeleteNetworkInsightsAnalysisResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsAnalysisId': obj.networkInsightsAnalysisId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkInsightsPathRequest
 */
export interface Ec2DeleteNetworkInsightsPathRequest {
  /**
   * @schema Ec2DeleteNetworkInsightsPathRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteNetworkInsightsPathRequest#NetworkInsightsPathId
   */
  readonly networkInsightsPathId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkInsightsPathRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkInsightsPathRequest(obj: Ec2DeleteNetworkInsightsPathRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'NetworkInsightsPathId': obj.networkInsightsPathId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkInsightsPathResult
 */
export interface Ec2DeleteNetworkInsightsPathResult {
  /**
   * @schema Ec2DeleteNetworkInsightsPathResult#NetworkInsightsPathId
   */
  readonly networkInsightsPathId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkInsightsPathResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkInsightsPathResult(obj: Ec2DeleteNetworkInsightsPathResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsPathId': obj.networkInsightsPathId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkInterfaceRequest
 */
export interface Ec2DeleteNetworkInterfaceRequest {
  /**
   * @schema Ec2DeleteNetworkInterfaceRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteNetworkInterfaceRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkInterfaceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkInterfaceRequest(obj: Ec2DeleteNetworkInterfaceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'NetworkInterfaceId': obj.networkInterfaceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkInterfacePermissionRequest
 */
export interface Ec2DeleteNetworkInterfacePermissionRequest {
  /**
   * @schema Ec2DeleteNetworkInterfacePermissionRequest#NetworkInterfacePermissionId
   */
  readonly networkInterfacePermissionId?: string;

  /**
   * @schema Ec2DeleteNetworkInterfacePermissionRequest#Force
   */
  readonly force?: boolean;

  /**
   * @schema Ec2DeleteNetworkInterfacePermissionRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkInterfacePermissionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkInterfacePermissionRequest(obj: Ec2DeleteNetworkInterfacePermissionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfacePermissionId': obj.networkInterfacePermissionId,
    'Force': obj.force,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteNetworkInterfacePermissionResult
 */
export interface Ec2DeleteNetworkInterfacePermissionResult {
  /**
   * @schema Ec2DeleteNetworkInterfacePermissionResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteNetworkInterfacePermissionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteNetworkInterfacePermissionResult(obj: Ec2DeleteNetworkInterfacePermissionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeletePlacementGroupRequest
 */
export interface Ec2DeletePlacementGroupRequest {
  /**
   * @schema Ec2DeletePlacementGroupRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeletePlacementGroupRequest#GroupName
   */
  readonly groupName?: string;

}

/**
 * Converts an object of type 'Ec2DeletePlacementGroupRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeletePlacementGroupRequest(obj: Ec2DeletePlacementGroupRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'GroupName': obj.groupName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteQueuedReservedInstancesRequest
 */
export interface Ec2DeleteQueuedReservedInstancesRequest {
  /**
   * @schema Ec2DeleteQueuedReservedInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteQueuedReservedInstancesRequest#ReservedInstancesIds
   */
  readonly reservedInstancesIds?: string[];

}

/**
 * Converts an object of type 'Ec2DeleteQueuedReservedInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteQueuedReservedInstancesRequest(obj: Ec2DeleteQueuedReservedInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ReservedInstancesIds': obj.reservedInstancesIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteQueuedReservedInstancesResult
 */
export interface Ec2DeleteQueuedReservedInstancesResult {
  /**
   * @schema Ec2DeleteQueuedReservedInstancesResult#SuccessfulQueuedPurchaseDeletions
   */
  readonly successfulQueuedPurchaseDeletions?: Ec2SuccessfulQueuedPurchaseDeletion[];

  /**
   * @schema Ec2DeleteQueuedReservedInstancesResult#FailedQueuedPurchaseDeletions
   */
  readonly failedQueuedPurchaseDeletions?: Ec2FailedQueuedPurchaseDeletion[];

}

/**
 * Converts an object of type 'Ec2DeleteQueuedReservedInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteQueuedReservedInstancesResult(obj: Ec2DeleteQueuedReservedInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SuccessfulQueuedPurchaseDeletions': obj.successfulQueuedPurchaseDeletions?.map(y => toJson_Ec2SuccessfulQueuedPurchaseDeletion(y)),
    'FailedQueuedPurchaseDeletions': obj.failedQueuedPurchaseDeletions?.map(y => toJson_Ec2FailedQueuedPurchaseDeletion(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteRouteRequest
 */
export interface Ec2DeleteRouteRequest {
  /**
   * @schema Ec2DeleteRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2DeleteRouteRequest#DestinationIpv6CidrBlock
   */
  readonly destinationIpv6CidrBlock?: string;

  /**
   * @schema Ec2DeleteRouteRequest#DestinationPrefixListId
   */
  readonly destinationPrefixListId?: string;

  /**
   * @schema Ec2DeleteRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteRouteRequest#RouteTableId
   */
  readonly routeTableId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteRouteRequest(obj: Ec2DeleteRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'DestinationIpv6CidrBlock': obj.destinationIpv6CidrBlock,
    'DestinationPrefixListId': obj.destinationPrefixListId,
    'DryRun': obj.dryRun,
    'RouteTableId': obj.routeTableId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteRouteTableRequest
 */
export interface Ec2DeleteRouteTableRequest {
  /**
   * @schema Ec2DeleteRouteTableRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteRouteTableRequest#RouteTableId
   */
  readonly routeTableId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteRouteTableRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteRouteTableRequest(obj: Ec2DeleteRouteTableRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'RouteTableId': obj.routeTableId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteSecurityGroupRequest
 */
export interface Ec2DeleteSecurityGroupRequest {
  /**
   * @schema Ec2DeleteSecurityGroupRequest#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2DeleteSecurityGroupRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2DeleteSecurityGroupRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteSecurityGroupRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteSecurityGroupRequest(obj: Ec2DeleteSecurityGroupRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupId': obj.groupId,
    'GroupName': obj.groupName,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteSnapshotRequest
 */
export interface Ec2DeleteSnapshotRequest {
  /**
   * @schema Ec2DeleteSnapshotRequest#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2DeleteSnapshotRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteSnapshotRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteSnapshotRequest(obj: Ec2DeleteSnapshotRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SnapshotId': obj.snapshotId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteSpotDatafeedSubscriptionRequest
 */
export interface Ec2DeleteSpotDatafeedSubscriptionRequest {
  /**
   * @schema Ec2DeleteSpotDatafeedSubscriptionRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteSpotDatafeedSubscriptionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteSpotDatafeedSubscriptionRequest(obj: Ec2DeleteSpotDatafeedSubscriptionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteSubnetRequest
 */
export interface Ec2DeleteSubnetRequest {
  /**
   * @schema Ec2DeleteSubnetRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2DeleteSubnetRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteSubnetRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteSubnetRequest(obj: Ec2DeleteSubnetRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SubnetId': obj.subnetId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteSubnetCidrReservationRequest
 */
export interface Ec2DeleteSubnetCidrReservationRequest {
  /**
   * @schema Ec2DeleteSubnetCidrReservationRequest#SubnetCidrReservationId
   */
  readonly subnetCidrReservationId?: string;

  /**
   * @schema Ec2DeleteSubnetCidrReservationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteSubnetCidrReservationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteSubnetCidrReservationRequest(obj: Ec2DeleteSubnetCidrReservationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SubnetCidrReservationId': obj.subnetCidrReservationId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteSubnetCidrReservationResult
 */
export interface Ec2DeleteSubnetCidrReservationResult {
  /**
   * @schema Ec2DeleteSubnetCidrReservationResult#DeletedSubnetCidrReservation
   */
  readonly deletedSubnetCidrReservation?: Ec2SubnetCidrReservation;

}

/**
 * Converts an object of type 'Ec2DeleteSubnetCidrReservationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteSubnetCidrReservationResult(obj: Ec2DeleteSubnetCidrReservationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeletedSubnetCidrReservation': toJson_Ec2SubnetCidrReservation(obj.deletedSubnetCidrReservation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTagsRequest
 */
export interface Ec2DeleteTagsRequest {
  /**
   * @schema Ec2DeleteTagsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteTagsRequest#Resources
   */
  readonly resources?: string[];

  /**
   * @schema Ec2DeleteTagsRequest#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2DeleteTagsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTagsRequest(obj: Ec2DeleteTagsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Resources': obj.resources?.map(y => y),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTrafficMirrorFilterRequest
 */
export interface Ec2DeleteTrafficMirrorFilterRequest {
  /**
   * @schema Ec2DeleteTrafficMirrorFilterRequest#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

  /**
   * @schema Ec2DeleteTrafficMirrorFilterRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTrafficMirrorFilterRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTrafficMirrorFilterRequest(obj: Ec2DeleteTrafficMirrorFilterRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTrafficMirrorFilterResult
 */
export interface Ec2DeleteTrafficMirrorFilterResult {
  /**
   * @schema Ec2DeleteTrafficMirrorFilterResult#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteTrafficMirrorFilterResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTrafficMirrorFilterResult(obj: Ec2DeleteTrafficMirrorFilterResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTrafficMirrorFilterRuleRequest
 */
export interface Ec2DeleteTrafficMirrorFilterRuleRequest {
  /**
   * @schema Ec2DeleteTrafficMirrorFilterRuleRequest#TrafficMirrorFilterRuleId
   */
  readonly trafficMirrorFilterRuleId?: string;

  /**
   * @schema Ec2DeleteTrafficMirrorFilterRuleRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTrafficMirrorFilterRuleRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTrafficMirrorFilterRuleRequest(obj: Ec2DeleteTrafficMirrorFilterRuleRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterRuleId': obj.trafficMirrorFilterRuleId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTrafficMirrorFilterRuleResult
 */
export interface Ec2DeleteTrafficMirrorFilterRuleResult {
  /**
   * @schema Ec2DeleteTrafficMirrorFilterRuleResult#TrafficMirrorFilterRuleId
   */
  readonly trafficMirrorFilterRuleId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteTrafficMirrorFilterRuleResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTrafficMirrorFilterRuleResult(obj: Ec2DeleteTrafficMirrorFilterRuleResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterRuleId': obj.trafficMirrorFilterRuleId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTrafficMirrorSessionRequest
 */
export interface Ec2DeleteTrafficMirrorSessionRequest {
  /**
   * @schema Ec2DeleteTrafficMirrorSessionRequest#TrafficMirrorSessionId
   */
  readonly trafficMirrorSessionId?: string;

  /**
   * @schema Ec2DeleteTrafficMirrorSessionRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTrafficMirrorSessionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTrafficMirrorSessionRequest(obj: Ec2DeleteTrafficMirrorSessionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorSessionId': obj.trafficMirrorSessionId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTrafficMirrorSessionResult
 */
export interface Ec2DeleteTrafficMirrorSessionResult {
  /**
   * @schema Ec2DeleteTrafficMirrorSessionResult#TrafficMirrorSessionId
   */
  readonly trafficMirrorSessionId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteTrafficMirrorSessionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTrafficMirrorSessionResult(obj: Ec2DeleteTrafficMirrorSessionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorSessionId': obj.trafficMirrorSessionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTrafficMirrorTargetRequest
 */
export interface Ec2DeleteTrafficMirrorTargetRequest {
  /**
   * @schema Ec2DeleteTrafficMirrorTargetRequest#TrafficMirrorTargetId
   */
  readonly trafficMirrorTargetId?: string;

  /**
   * @schema Ec2DeleteTrafficMirrorTargetRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTrafficMirrorTargetRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTrafficMirrorTargetRequest(obj: Ec2DeleteTrafficMirrorTargetRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorTargetId': obj.trafficMirrorTargetId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTrafficMirrorTargetResult
 */
export interface Ec2DeleteTrafficMirrorTargetResult {
  /**
   * @schema Ec2DeleteTrafficMirrorTargetResult#TrafficMirrorTargetId
   */
  readonly trafficMirrorTargetId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteTrafficMirrorTargetResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTrafficMirrorTargetResult(obj: Ec2DeleteTrafficMirrorTargetResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorTargetId': obj.trafficMirrorTargetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayRequest
 */
export interface Ec2DeleteTransitGatewayRequest {
  /**
   * @schema Ec2DeleteTransitGatewayRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayRequest(obj: Ec2DeleteTransitGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayId': obj.transitGatewayId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayResult
 */
export interface Ec2DeleteTransitGatewayResult {
  /**
   * @schema Ec2DeleteTransitGatewayResult#TransitGateway
   */
  readonly transitGateway?: Ec2TransitGateway;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayResult(obj: Ec2DeleteTransitGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGateway': toJson_Ec2TransitGateway(obj.transitGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayConnectRequest
 */
export interface Ec2DeleteTransitGatewayConnectRequest {
  /**
   * @schema Ec2DeleteTransitGatewayConnectRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayConnectRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayConnectRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayConnectRequest(obj: Ec2DeleteTransitGatewayConnectRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayConnectResult
 */
export interface Ec2DeleteTransitGatewayConnectResult {
  /**
   * @schema Ec2DeleteTransitGatewayConnectResult#TransitGatewayConnect
   */
  readonly transitGatewayConnect?: Ec2TransitGatewayConnect;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayConnectResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayConnectResult(obj: Ec2DeleteTransitGatewayConnectResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayConnect': toJson_Ec2TransitGatewayConnect(obj.transitGatewayConnect),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayConnectPeerRequest
 */
export interface Ec2DeleteTransitGatewayConnectPeerRequest {
  /**
   * @schema Ec2DeleteTransitGatewayConnectPeerRequest#TransitGatewayConnectPeerId
   */
  readonly transitGatewayConnectPeerId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayConnectPeerRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayConnectPeerRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayConnectPeerRequest(obj: Ec2DeleteTransitGatewayConnectPeerRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayConnectPeerId': obj.transitGatewayConnectPeerId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayConnectPeerResult
 */
export interface Ec2DeleteTransitGatewayConnectPeerResult {
  /**
   * @schema Ec2DeleteTransitGatewayConnectPeerResult#TransitGatewayConnectPeer
   */
  readonly transitGatewayConnectPeer?: Ec2TransitGatewayConnectPeer;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayConnectPeerResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayConnectPeerResult(obj: Ec2DeleteTransitGatewayConnectPeerResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayConnectPeer': toJson_Ec2TransitGatewayConnectPeer(obj.transitGatewayConnectPeer),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayMulticastDomainRequest
 */
export interface Ec2DeleteTransitGatewayMulticastDomainRequest {
  /**
   * @schema Ec2DeleteTransitGatewayMulticastDomainRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayMulticastDomainRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayMulticastDomainRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayMulticastDomainRequest(obj: Ec2DeleteTransitGatewayMulticastDomainRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayMulticastDomainResult
 */
export interface Ec2DeleteTransitGatewayMulticastDomainResult {
  /**
   * @schema Ec2DeleteTransitGatewayMulticastDomainResult#TransitGatewayMulticastDomain
   */
  readonly transitGatewayMulticastDomain?: Ec2TransitGatewayMulticastDomain;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayMulticastDomainResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayMulticastDomainResult(obj: Ec2DeleteTransitGatewayMulticastDomainResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomain': toJson_Ec2TransitGatewayMulticastDomain(obj.transitGatewayMulticastDomain),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayPeeringAttachmentRequest
 */
export interface Ec2DeleteTransitGatewayPeeringAttachmentRequest {
  /**
   * @schema Ec2DeleteTransitGatewayPeeringAttachmentRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayPeeringAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayPeeringAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayPeeringAttachmentRequest(obj: Ec2DeleteTransitGatewayPeeringAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayPeeringAttachmentResult
 */
export interface Ec2DeleteTransitGatewayPeeringAttachmentResult {
  /**
   * @schema Ec2DeleteTransitGatewayPeeringAttachmentResult#TransitGatewayPeeringAttachment
   */
  readonly transitGatewayPeeringAttachment?: Ec2TransitGatewayPeeringAttachment;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayPeeringAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayPeeringAttachmentResult(obj: Ec2DeleteTransitGatewayPeeringAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPeeringAttachment': toJson_Ec2TransitGatewayPeeringAttachment(obj.transitGatewayPeeringAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayPrefixListReferenceRequest
 */
export interface Ec2DeleteTransitGatewayPrefixListReferenceRequest {
  /**
   * @schema Ec2DeleteTransitGatewayPrefixListReferenceRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayPrefixListReferenceRequest#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayPrefixListReferenceRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayPrefixListReferenceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayPrefixListReferenceRequest(obj: Ec2DeleteTransitGatewayPrefixListReferenceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'PrefixListId': obj.prefixListId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayPrefixListReferenceResult
 */
export interface Ec2DeleteTransitGatewayPrefixListReferenceResult {
  /**
   * @schema Ec2DeleteTransitGatewayPrefixListReferenceResult#TransitGatewayPrefixListReference
   */
  readonly transitGatewayPrefixListReference?: Ec2TransitGatewayPrefixListReference;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayPrefixListReferenceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayPrefixListReferenceResult(obj: Ec2DeleteTransitGatewayPrefixListReferenceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPrefixListReference': toJson_Ec2TransitGatewayPrefixListReference(obj.transitGatewayPrefixListReference),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayRouteRequest
 */
export interface Ec2DeleteTransitGatewayRouteRequest {
  /**
   * @schema Ec2DeleteTransitGatewayRouteRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2DeleteTransitGatewayRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayRouteRequest(obj: Ec2DeleteTransitGatewayRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayRouteResult
 */
export interface Ec2DeleteTransitGatewayRouteResult {
  /**
   * @schema Ec2DeleteTransitGatewayRouteResult#Route
   */
  readonly route?: Ec2TransitGatewayRoute;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayRouteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayRouteResult(obj: Ec2DeleteTransitGatewayRouteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Route': toJson_Ec2TransitGatewayRoute(obj.route),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayRouteTableRequest
 */
export interface Ec2DeleteTransitGatewayRouteTableRequest {
  /**
   * @schema Ec2DeleteTransitGatewayRouteTableRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayRouteTableRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayRouteTableRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayRouteTableRequest(obj: Ec2DeleteTransitGatewayRouteTableRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayRouteTableResult
 */
export interface Ec2DeleteTransitGatewayRouteTableResult {
  /**
   * @schema Ec2DeleteTransitGatewayRouteTableResult#TransitGatewayRouteTable
   */
  readonly transitGatewayRouteTable?: Ec2TransitGatewayRouteTable;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayRouteTableResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayRouteTableResult(obj: Ec2DeleteTransitGatewayRouteTableResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTable': toJson_Ec2TransitGatewayRouteTable(obj.transitGatewayRouteTable),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayVpcAttachmentRequest
 */
export interface Ec2DeleteTransitGatewayVpcAttachmentRequest {
  /**
   * @schema Ec2DeleteTransitGatewayVpcAttachmentRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2DeleteTransitGatewayVpcAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayVpcAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayVpcAttachmentRequest(obj: Ec2DeleteTransitGatewayVpcAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteTransitGatewayVpcAttachmentResult
 */
export interface Ec2DeleteTransitGatewayVpcAttachmentResult {
  /**
   * @schema Ec2DeleteTransitGatewayVpcAttachmentResult#TransitGatewayVpcAttachment
   */
  readonly transitGatewayVpcAttachment?: Ec2TransitGatewayVpcAttachment;

}

/**
 * Converts an object of type 'Ec2DeleteTransitGatewayVpcAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteTransitGatewayVpcAttachmentResult(obj: Ec2DeleteTransitGatewayVpcAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayVpcAttachment': toJson_Ec2TransitGatewayVpcAttachment(obj.transitGatewayVpcAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVolumeRequest
 */
export interface Ec2DeleteVolumeRequest {
  /**
   * @schema Ec2DeleteVolumeRequest#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2DeleteVolumeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteVolumeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVolumeRequest(obj: Ec2DeleteVolumeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VolumeId': obj.volumeId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcRequest
 */
export interface Ec2DeleteVpcRequest {
  /**
   * @schema Ec2DeleteVpcRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2DeleteVpcRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteVpcRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcRequest(obj: Ec2DeleteVpcRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcId': obj.vpcId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcEndpointConnectionNotificationsRequest
 */
export interface Ec2DeleteVpcEndpointConnectionNotificationsRequest {
  /**
   * @schema Ec2DeleteVpcEndpointConnectionNotificationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteVpcEndpointConnectionNotificationsRequest#ConnectionNotificationIds
   */
  readonly connectionNotificationIds?: string[];

}

/**
 * Converts an object of type 'Ec2DeleteVpcEndpointConnectionNotificationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcEndpointConnectionNotificationsRequest(obj: Ec2DeleteVpcEndpointConnectionNotificationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ConnectionNotificationIds': obj.connectionNotificationIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcEndpointConnectionNotificationsResult
 */
export interface Ec2DeleteVpcEndpointConnectionNotificationsResult {
  /**
   * @schema Ec2DeleteVpcEndpointConnectionNotificationsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2DeleteVpcEndpointConnectionNotificationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcEndpointConnectionNotificationsResult(obj: Ec2DeleteVpcEndpointConnectionNotificationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcEndpointServiceConfigurationsRequest
 */
export interface Ec2DeleteVpcEndpointServiceConfigurationsRequest {
  /**
   * @schema Ec2DeleteVpcEndpointServiceConfigurationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteVpcEndpointServiceConfigurationsRequest#ServiceIds
   */
  readonly serviceIds?: string[];

}

/**
 * Converts an object of type 'Ec2DeleteVpcEndpointServiceConfigurationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcEndpointServiceConfigurationsRequest(obj: Ec2DeleteVpcEndpointServiceConfigurationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceIds': obj.serviceIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcEndpointServiceConfigurationsResult
 */
export interface Ec2DeleteVpcEndpointServiceConfigurationsResult {
  /**
   * @schema Ec2DeleteVpcEndpointServiceConfigurationsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2DeleteVpcEndpointServiceConfigurationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcEndpointServiceConfigurationsResult(obj: Ec2DeleteVpcEndpointServiceConfigurationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcEndpointsRequest
 */
export interface Ec2DeleteVpcEndpointsRequest {
  /**
   * @schema Ec2DeleteVpcEndpointsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteVpcEndpointsRequest#VpcEndpointIds
   */
  readonly vpcEndpointIds?: string[];

}

/**
 * Converts an object of type 'Ec2DeleteVpcEndpointsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcEndpointsRequest(obj: Ec2DeleteVpcEndpointsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcEndpointIds': obj.vpcEndpointIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcEndpointsResult
 */
export interface Ec2DeleteVpcEndpointsResult {
  /**
   * @schema Ec2DeleteVpcEndpointsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2DeleteVpcEndpointsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcEndpointsResult(obj: Ec2DeleteVpcEndpointsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcPeeringConnectionRequest
 */
export interface Ec2DeleteVpcPeeringConnectionRequest {
  /**
   * @schema Ec2DeleteVpcPeeringConnectionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeleteVpcPeeringConnectionRequest#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteVpcPeeringConnectionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcPeeringConnectionRequest(obj: Ec2DeleteVpcPeeringConnectionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpcPeeringConnectionResult
 */
export interface Ec2DeleteVpcPeeringConnectionResult {
  /**
   * @schema Ec2DeleteVpcPeeringConnectionResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteVpcPeeringConnectionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpcPeeringConnectionResult(obj: Ec2DeleteVpcPeeringConnectionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpnConnectionRequest
 */
export interface Ec2DeleteVpnConnectionRequest {
  /**
   * @schema Ec2DeleteVpnConnectionRequest#VpnConnectionId
   */
  readonly vpnConnectionId?: string;

  /**
   * @schema Ec2DeleteVpnConnectionRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteVpnConnectionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpnConnectionRequest(obj: Ec2DeleteVpnConnectionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnectionId': obj.vpnConnectionId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpnConnectionRouteRequest
 */
export interface Ec2DeleteVpnConnectionRouteRequest {
  /**
   * @schema Ec2DeleteVpnConnectionRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2DeleteVpnConnectionRouteRequest#VpnConnectionId
   */
  readonly vpnConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteVpnConnectionRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpnConnectionRouteRequest(obj: Ec2DeleteVpnConnectionRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'VpnConnectionId': obj.vpnConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteVpnGatewayRequest
 */
export interface Ec2DeleteVpnGatewayRequest {
  /**
   * @schema Ec2DeleteVpnGatewayRequest#VpnGatewayId
   */
  readonly vpnGatewayId?: string;

  /**
   * @schema Ec2DeleteVpnGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeleteVpnGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteVpnGatewayRequest(obj: Ec2DeleteVpnGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnGatewayId': obj.vpnGatewayId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeprovisionByoipCidrRequest
 */
export interface Ec2DeprovisionByoipCidrRequest {
  /**
   * @schema Ec2DeprovisionByoipCidrRequest#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2DeprovisionByoipCidrRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeprovisionByoipCidrRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeprovisionByoipCidrRequest(obj: Ec2DeprovisionByoipCidrRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeprovisionByoipCidrResult
 */
export interface Ec2DeprovisionByoipCidrResult {
  /**
   * @schema Ec2DeprovisionByoipCidrResult#ByoipCidr
   */
  readonly byoipCidr?: Ec2ByoipCidr;

}

/**
 * Converts an object of type 'Ec2DeprovisionByoipCidrResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeprovisionByoipCidrResult(obj: Ec2DeprovisionByoipCidrResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ByoipCidr': toJson_Ec2ByoipCidr(obj.byoipCidr),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeregisterImageRequest
 */
export interface Ec2DeregisterImageRequest {
  /**
   * @schema Ec2DeregisterImageRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2DeregisterImageRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeregisterImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeregisterImageRequest(obj: Ec2DeregisterImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageId': obj.imageId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeregisterInstanceEventNotificationAttributesRequest
 */
export interface Ec2DeregisterInstanceEventNotificationAttributesRequest {
  /**
   * @schema Ec2DeregisterInstanceEventNotificationAttributesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DeregisterInstanceEventNotificationAttributesRequest#InstanceTagAttribute
   */
  readonly instanceTagAttribute?: Ec2DeregisterInstanceTagAttributeRequest;

}

/**
 * Converts an object of type 'Ec2DeregisterInstanceEventNotificationAttributesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeregisterInstanceEventNotificationAttributesRequest(obj: Ec2DeregisterInstanceEventNotificationAttributesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceTagAttribute': toJson_Ec2DeregisterInstanceTagAttributeRequest(obj.instanceTagAttribute),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeregisterInstanceEventNotificationAttributesResult
 */
export interface Ec2DeregisterInstanceEventNotificationAttributesResult {
  /**
   * @schema Ec2DeregisterInstanceEventNotificationAttributesResult#InstanceTagAttribute
   */
  readonly instanceTagAttribute?: Ec2InstanceTagNotificationAttribute;

}

/**
 * Converts an object of type 'Ec2DeregisterInstanceEventNotificationAttributesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeregisterInstanceEventNotificationAttributesResult(obj: Ec2DeregisterInstanceEventNotificationAttributesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceTagAttribute': toJson_Ec2InstanceTagNotificationAttribute(obj.instanceTagAttribute),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeregisterTransitGatewayMulticastGroupMembersRequest
 */
export interface Ec2DeregisterTransitGatewayMulticastGroupMembersRequest {
  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupMembersRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupMembersRequest#GroupIpAddress
   */
  readonly groupIpAddress?: string;

  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupMembersRequest#NetworkInterfaceIds
   */
  readonly networkInterfaceIds?: string[];

  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupMembersRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeregisterTransitGatewayMulticastGroupMembersRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeregisterTransitGatewayMulticastGroupMembersRequest(obj: Ec2DeregisterTransitGatewayMulticastGroupMembersRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'GroupIpAddress': obj.groupIpAddress,
    'NetworkInterfaceIds': obj.networkInterfaceIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeregisterTransitGatewayMulticastGroupMembersResult
 */
export interface Ec2DeregisterTransitGatewayMulticastGroupMembersResult {
  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupMembersResult#DeregisteredMulticastGroupMembers
   */
  readonly deregisteredMulticastGroupMembers?: Ec2TransitGatewayMulticastDeregisteredGroupMembers;

}

/**
 * Converts an object of type 'Ec2DeregisterTransitGatewayMulticastGroupMembersResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeregisterTransitGatewayMulticastGroupMembersResult(obj: Ec2DeregisterTransitGatewayMulticastGroupMembersResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeregisteredMulticastGroupMembers': toJson_Ec2TransitGatewayMulticastDeregisteredGroupMembers(obj.deregisteredMulticastGroupMembers),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest
 */
export interface Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest {
  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest#GroupIpAddress
   */
  readonly groupIpAddress?: string;

  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest#NetworkInterfaceIds
   */
  readonly networkInterfaceIds?: string[];

  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest(obj: Ec2DeregisterTransitGatewayMulticastGroupSourcesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'GroupIpAddress': obj.groupIpAddress,
    'NetworkInterfaceIds': obj.networkInterfaceIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeregisterTransitGatewayMulticastGroupSourcesResult
 */
export interface Ec2DeregisterTransitGatewayMulticastGroupSourcesResult {
  /**
   * @schema Ec2DeregisterTransitGatewayMulticastGroupSourcesResult#DeregisteredMulticastGroupSources
   */
  readonly deregisteredMulticastGroupSources?: Ec2TransitGatewayMulticastDeregisteredGroupSources;

}

/**
 * Converts an object of type 'Ec2DeregisterTransitGatewayMulticastGroupSourcesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeregisterTransitGatewayMulticastGroupSourcesResult(obj: Ec2DeregisterTransitGatewayMulticastGroupSourcesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeregisteredMulticastGroupSources': toJson_Ec2TransitGatewayMulticastDeregisteredGroupSources(obj.deregisteredMulticastGroupSources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAccountAttributesRequest
 */
export interface Ec2DescribeAccountAttributesRequest {
  /**
   * @schema Ec2DescribeAccountAttributesRequest#AttributeNames
   */
  readonly attributeNames?: string[];

  /**
   * @schema Ec2DescribeAccountAttributesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeAccountAttributesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAccountAttributesRequest(obj: Ec2DescribeAccountAttributesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttributeNames': obj.attributeNames?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAccountAttributesResult
 */
export interface Ec2DescribeAccountAttributesResult {
  /**
   * @schema Ec2DescribeAccountAttributesResult#AccountAttributes
   */
  readonly accountAttributes?: Ec2AccountAttribute[];

}

/**
 * Converts an object of type 'Ec2DescribeAccountAttributesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAccountAttributesResult(obj: Ec2DescribeAccountAttributesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AccountAttributes': obj.accountAttributes?.map(y => toJson_Ec2AccountAttribute(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAddressesRequest
 */
export interface Ec2DescribeAddressesRequest {
  /**
   * @schema Ec2DescribeAddressesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeAddressesRequest#PublicIps
   */
  readonly publicIps?: string[];

  /**
   * @schema Ec2DescribeAddressesRequest#AllocationIds
   */
  readonly allocationIds?: string[];

  /**
   * @schema Ec2DescribeAddressesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeAddressesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAddressesRequest(obj: Ec2DescribeAddressesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'PublicIps': obj.publicIps?.map(y => y),
    'AllocationIds': obj.allocationIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAddressesResult
 */
export interface Ec2DescribeAddressesResult {
  /**
   * @schema Ec2DescribeAddressesResult#Addresses
   */
  readonly addresses?: Ec2Address[];

}

/**
 * Converts an object of type 'Ec2DescribeAddressesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAddressesResult(obj: Ec2DescribeAddressesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Addresses': obj.addresses?.map(y => toJson_Ec2Address(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAddressesAttributeRequest
 */
export interface Ec2DescribeAddressesAttributeRequest {
  /**
   * @schema Ec2DescribeAddressesAttributeRequest#AllocationIds
   */
  readonly allocationIds?: string[];

  /**
   * @schema Ec2DescribeAddressesAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2DescribeAddressesAttributeRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeAddressesAttributeRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeAddressesAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeAddressesAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAddressesAttributeRequest(obj: Ec2DescribeAddressesAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationIds': obj.allocationIds?.map(y => y),
    'Attribute': obj.attribute,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAddressesAttributeResult
 */
export interface Ec2DescribeAddressesAttributeResult {
  /**
   * @schema Ec2DescribeAddressesAttributeResult#Addresses
   */
  readonly addresses?: Ec2AddressAttribute[];

  /**
   * @schema Ec2DescribeAddressesAttributeResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeAddressesAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAddressesAttributeResult(obj: Ec2DescribeAddressesAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Addresses': obj.addresses?.map(y => toJson_Ec2AddressAttribute(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAggregateIdFormatRequest
 */
export interface Ec2DescribeAggregateIdFormatRequest {
  /**
   * @schema Ec2DescribeAggregateIdFormatRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeAggregateIdFormatRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAggregateIdFormatRequest(obj: Ec2DescribeAggregateIdFormatRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAggregateIdFormatResult
 */
export interface Ec2DescribeAggregateIdFormatResult {
  /**
   * @schema Ec2DescribeAggregateIdFormatResult#UseLongIdsAggregated
   */
  readonly useLongIdsAggregated?: boolean;

  /**
   * @schema Ec2DescribeAggregateIdFormatResult#Statuses
   */
  readonly statuses?: Ec2IdFormat[];

}

/**
 * Converts an object of type 'Ec2DescribeAggregateIdFormatResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAggregateIdFormatResult(obj: Ec2DescribeAggregateIdFormatResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'UseLongIdsAggregated': obj.useLongIdsAggregated,
    'Statuses': obj.statuses?.map(y => toJson_Ec2IdFormat(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAvailabilityZonesRequest
 */
export interface Ec2DescribeAvailabilityZonesRequest {
  /**
   * @schema Ec2DescribeAvailabilityZonesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeAvailabilityZonesRequest#ZoneNames
   */
  readonly zoneNames?: string[];

  /**
   * @schema Ec2DescribeAvailabilityZonesRequest#ZoneIds
   */
  readonly zoneIds?: string[];

  /**
   * @schema Ec2DescribeAvailabilityZonesRequest#AllAvailabilityZones
   */
  readonly allAvailabilityZones?: boolean;

  /**
   * @schema Ec2DescribeAvailabilityZonesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeAvailabilityZonesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAvailabilityZonesRequest(obj: Ec2DescribeAvailabilityZonesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'ZoneNames': obj.zoneNames?.map(y => y),
    'ZoneIds': obj.zoneIds?.map(y => y),
    'AllAvailabilityZones': obj.allAvailabilityZones,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeAvailabilityZonesResult
 */
export interface Ec2DescribeAvailabilityZonesResult {
  /**
   * @schema Ec2DescribeAvailabilityZonesResult#AvailabilityZones
   */
  readonly availabilityZones?: Ec2AvailabilityZone[];

}

/**
 * Converts an object of type 'Ec2DescribeAvailabilityZonesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeAvailabilityZonesResult(obj: Ec2DescribeAvailabilityZonesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZones': obj.availabilityZones?.map(y => toJson_Ec2AvailabilityZone(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeBundleTasksRequest
 */
export interface Ec2DescribeBundleTasksRequest {
  /**
   * @schema Ec2DescribeBundleTasksRequest#BundleIds
   */
  readonly bundleIds?: string[];

  /**
   * @schema Ec2DescribeBundleTasksRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeBundleTasksRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeBundleTasksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeBundleTasksRequest(obj: Ec2DescribeBundleTasksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BundleIds': obj.bundleIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeBundleTasksResult
 */
export interface Ec2DescribeBundleTasksResult {
  /**
   * @schema Ec2DescribeBundleTasksResult#BundleTasks
   */
  readonly bundleTasks?: Ec2BundleTask[];

}

/**
 * Converts an object of type 'Ec2DescribeBundleTasksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeBundleTasksResult(obj: Ec2DescribeBundleTasksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BundleTasks': obj.bundleTasks?.map(y => toJson_Ec2BundleTask(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeByoipCidrsRequest
 */
export interface Ec2DescribeByoipCidrsRequest {
  /**
   * @schema Ec2DescribeByoipCidrsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeByoipCidrsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeByoipCidrsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeByoipCidrsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeByoipCidrsRequest(obj: Ec2DescribeByoipCidrsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeByoipCidrsResult
 */
export interface Ec2DescribeByoipCidrsResult {
  /**
   * @schema Ec2DescribeByoipCidrsResult#ByoipCidrs
   */
  readonly byoipCidrs?: Ec2ByoipCidr[];

  /**
   * @schema Ec2DescribeByoipCidrsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeByoipCidrsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeByoipCidrsResult(obj: Ec2DescribeByoipCidrsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ByoipCidrs': obj.byoipCidrs?.map(y => toJson_Ec2ByoipCidr(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeCapacityReservationsRequest
 */
export interface Ec2DescribeCapacityReservationsRequest {
  /**
   * @schema Ec2DescribeCapacityReservationsRequest#CapacityReservationIds
   */
  readonly capacityReservationIds?: string[];

  /**
   * @schema Ec2DescribeCapacityReservationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeCapacityReservationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeCapacityReservationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeCapacityReservationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeCapacityReservationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeCapacityReservationsRequest(obj: Ec2DescribeCapacityReservationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationIds': obj.capacityReservationIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeCapacityReservationsResult
 */
export interface Ec2DescribeCapacityReservationsResult {
  /**
   * @schema Ec2DescribeCapacityReservationsResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeCapacityReservationsResult#CapacityReservations
   */
  readonly capacityReservations?: Ec2CapacityReservation[];

}

/**
 * Converts an object of type 'Ec2DescribeCapacityReservationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeCapacityReservationsResult(obj: Ec2DescribeCapacityReservationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'CapacityReservations': obj.capacityReservations?.map(y => toJson_Ec2CapacityReservation(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeCarrierGatewaysRequest
 */
export interface Ec2DescribeCarrierGatewaysRequest {
  /**
   * @schema Ec2DescribeCarrierGatewaysRequest#CarrierGatewayIds
   */
  readonly carrierGatewayIds?: string[];

  /**
   * @schema Ec2DescribeCarrierGatewaysRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeCarrierGatewaysRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeCarrierGatewaysRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeCarrierGatewaysRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeCarrierGatewaysRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeCarrierGatewaysRequest(obj: Ec2DescribeCarrierGatewaysRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CarrierGatewayIds': obj.carrierGatewayIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeCarrierGatewaysResult
 */
export interface Ec2DescribeCarrierGatewaysResult {
  /**
   * @schema Ec2DescribeCarrierGatewaysResult#CarrierGateways
   */
  readonly carrierGateways?: Ec2CarrierGateway[];

  /**
   * @schema Ec2DescribeCarrierGatewaysResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeCarrierGatewaysResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeCarrierGatewaysResult(obj: Ec2DescribeCarrierGatewaysResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CarrierGateways': obj.carrierGateways?.map(y => toJson_Ec2CarrierGateway(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClassicLinkInstancesRequest
 */
export interface Ec2DescribeClassicLinkInstancesRequest {
  /**
   * @schema Ec2DescribeClassicLinkInstancesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeClassicLinkInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeClassicLinkInstancesRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2DescribeClassicLinkInstancesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeClassicLinkInstancesRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeClassicLinkInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClassicLinkInstancesRequest(obj: Ec2DescribeClassicLinkInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'InstanceIds': obj.instanceIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClassicLinkInstancesResult
 */
export interface Ec2DescribeClassicLinkInstancesResult {
  /**
   * @schema Ec2DescribeClassicLinkInstancesResult#Instances
   */
  readonly instances?: Ec2ClassicLinkInstance[];

  /**
   * @schema Ec2DescribeClassicLinkInstancesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeClassicLinkInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClassicLinkInstancesResult(obj: Ec2DescribeClassicLinkInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Instances': obj.instances?.map(y => toJson_Ec2ClassicLinkInstance(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnAuthorizationRulesRequest
 */
export interface Ec2DescribeClientVpnAuthorizationRulesRequest {
  /**
   * @schema Ec2DescribeClientVpnAuthorizationRulesRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2DescribeClientVpnAuthorizationRulesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeClientVpnAuthorizationRulesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeClientVpnAuthorizationRulesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeClientVpnAuthorizationRulesRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnAuthorizationRulesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnAuthorizationRulesRequest(obj: Ec2DescribeClientVpnAuthorizationRulesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnAuthorizationRulesResult
 */
export interface Ec2DescribeClientVpnAuthorizationRulesResult {
  /**
   * @schema Ec2DescribeClientVpnAuthorizationRulesResult#AuthorizationRules
   */
  readonly authorizationRules?: Ec2AuthorizationRule[];

  /**
   * @schema Ec2DescribeClientVpnAuthorizationRulesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnAuthorizationRulesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnAuthorizationRulesResult(obj: Ec2DescribeClientVpnAuthorizationRulesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AuthorizationRules': obj.authorizationRules?.map(y => toJson_Ec2AuthorizationRule(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnConnectionsRequest
 */
export interface Ec2DescribeClientVpnConnectionsRequest {
  /**
   * @schema Ec2DescribeClientVpnConnectionsRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2DescribeClientVpnConnectionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeClientVpnConnectionsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeClientVpnConnectionsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeClientVpnConnectionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnConnectionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnConnectionsRequest(obj: Ec2DescribeClientVpnConnectionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnConnectionsResult
 */
export interface Ec2DescribeClientVpnConnectionsResult {
  /**
   * @schema Ec2DescribeClientVpnConnectionsResult#Connections
   */
  readonly connections?: Ec2ClientVpnConnection[];

  /**
   * @schema Ec2DescribeClientVpnConnectionsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnConnectionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnConnectionsResult(obj: Ec2DescribeClientVpnConnectionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Connections': obj.connections?.map(y => toJson_Ec2ClientVpnConnection(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnEndpointsRequest
 */
export interface Ec2DescribeClientVpnEndpointsRequest {
  /**
   * @schema Ec2DescribeClientVpnEndpointsRequest#ClientVpnEndpointIds
   */
  readonly clientVpnEndpointIds?: string[];

  /**
   * @schema Ec2DescribeClientVpnEndpointsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeClientVpnEndpointsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeClientVpnEndpointsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeClientVpnEndpointsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnEndpointsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnEndpointsRequest(obj: Ec2DescribeClientVpnEndpointsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointIds': obj.clientVpnEndpointIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnEndpointsResult
 */
export interface Ec2DescribeClientVpnEndpointsResult {
  /**
   * @schema Ec2DescribeClientVpnEndpointsResult#ClientVpnEndpoints
   */
  readonly clientVpnEndpoints?: Ec2ClientVpnEndpoint[];

  /**
   * @schema Ec2DescribeClientVpnEndpointsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnEndpointsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnEndpointsResult(obj: Ec2DescribeClientVpnEndpointsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpoints': obj.clientVpnEndpoints?.map(y => toJson_Ec2ClientVpnEndpoint(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnRoutesRequest
 */
export interface Ec2DescribeClientVpnRoutesRequest {
  /**
   * @schema Ec2DescribeClientVpnRoutesRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2DescribeClientVpnRoutesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeClientVpnRoutesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeClientVpnRoutesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeClientVpnRoutesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnRoutesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnRoutesRequest(obj: Ec2DescribeClientVpnRoutesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnRoutesResult
 */
export interface Ec2DescribeClientVpnRoutesResult {
  /**
   * @schema Ec2DescribeClientVpnRoutesResult#Routes
   */
  readonly routes?: Ec2ClientVpnRoute[];

  /**
   * @schema Ec2DescribeClientVpnRoutesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnRoutesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnRoutesResult(obj: Ec2DescribeClientVpnRoutesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Routes': obj.routes?.map(y => toJson_Ec2ClientVpnRoute(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnTargetNetworksRequest
 */
export interface Ec2DescribeClientVpnTargetNetworksRequest {
  /**
   * @schema Ec2DescribeClientVpnTargetNetworksRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2DescribeClientVpnTargetNetworksRequest#AssociationIds
   */
  readonly associationIds?: string[];

  /**
   * @schema Ec2DescribeClientVpnTargetNetworksRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeClientVpnTargetNetworksRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeClientVpnTargetNetworksRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeClientVpnTargetNetworksRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnTargetNetworksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnTargetNetworksRequest(obj: Ec2DescribeClientVpnTargetNetworksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'AssociationIds': obj.associationIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeClientVpnTargetNetworksResult
 */
export interface Ec2DescribeClientVpnTargetNetworksResult {
  /**
   * @schema Ec2DescribeClientVpnTargetNetworksResult#ClientVpnTargetNetworks
   */
  readonly clientVpnTargetNetworks?: Ec2TargetNetwork[];

  /**
   * @schema Ec2DescribeClientVpnTargetNetworksResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeClientVpnTargetNetworksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeClientVpnTargetNetworksResult(obj: Ec2DescribeClientVpnTargetNetworksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnTargetNetworks': obj.clientVpnTargetNetworks?.map(y => toJson_Ec2TargetNetwork(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeCoipPoolsRequest
 */
export interface Ec2DescribeCoipPoolsRequest {
  /**
   * @schema Ec2DescribeCoipPoolsRequest#PoolIds
   */
  readonly poolIds?: string[];

  /**
   * @schema Ec2DescribeCoipPoolsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeCoipPoolsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeCoipPoolsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeCoipPoolsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeCoipPoolsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeCoipPoolsRequest(obj: Ec2DescribeCoipPoolsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PoolIds': obj.poolIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeCoipPoolsResult
 */
export interface Ec2DescribeCoipPoolsResult {
  /**
   * @schema Ec2DescribeCoipPoolsResult#CoipPools
   */
  readonly coipPools?: Ec2CoipPool[];

  /**
   * @schema Ec2DescribeCoipPoolsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeCoipPoolsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeCoipPoolsResult(obj: Ec2DescribeCoipPoolsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CoipPools': obj.coipPools?.map(y => toJson_Ec2CoipPool(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeConversionTasksRequest
 */
export interface Ec2DescribeConversionTasksRequest {
  /**
   * @schema Ec2DescribeConversionTasksRequest#ConversionTaskIds
   */
  readonly conversionTaskIds?: string[];

  /**
   * @schema Ec2DescribeConversionTasksRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeConversionTasksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeConversionTasksRequest(obj: Ec2DescribeConversionTasksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConversionTaskIds': obj.conversionTaskIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeConversionTasksResult
 */
export interface Ec2DescribeConversionTasksResult {
  /**
   * @schema Ec2DescribeConversionTasksResult#ConversionTasks
   */
  readonly conversionTasks?: Ec2ConversionTask[];

}

/**
 * Converts an object of type 'Ec2DescribeConversionTasksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeConversionTasksResult(obj: Ec2DescribeConversionTasksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConversionTasks': obj.conversionTasks?.map(y => toJson_Ec2ConversionTask(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeCustomerGatewaysRequest
 */
export interface Ec2DescribeCustomerGatewaysRequest {
  /**
   * @schema Ec2DescribeCustomerGatewaysRequest#CustomerGatewayIds
   */
  readonly customerGatewayIds?: string[];

  /**
   * @schema Ec2DescribeCustomerGatewaysRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeCustomerGatewaysRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeCustomerGatewaysRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeCustomerGatewaysRequest(obj: Ec2DescribeCustomerGatewaysRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CustomerGatewayIds': obj.customerGatewayIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeCustomerGatewaysResult
 */
export interface Ec2DescribeCustomerGatewaysResult {
  /**
   * @schema Ec2DescribeCustomerGatewaysResult#CustomerGateways
   */
  readonly customerGateways?: Ec2CustomerGateway[];

}

/**
 * Converts an object of type 'Ec2DescribeCustomerGatewaysResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeCustomerGatewaysResult(obj: Ec2DescribeCustomerGatewaysResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CustomerGateways': obj.customerGateways?.map(y => toJson_Ec2CustomerGateway(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeDhcpOptionsRequest
 */
export interface Ec2DescribeDhcpOptionsRequest {
  /**
   * @schema Ec2DescribeDhcpOptionsRequest#DhcpOptionsIds
   */
  readonly dhcpOptionsIds?: string[];

  /**
   * @schema Ec2DescribeDhcpOptionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeDhcpOptionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeDhcpOptionsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeDhcpOptionsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeDhcpOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeDhcpOptionsRequest(obj: Ec2DescribeDhcpOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DhcpOptionsIds': obj.dhcpOptionsIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeDhcpOptionsResult
 */
export interface Ec2DescribeDhcpOptionsResult {
  /**
   * @schema Ec2DescribeDhcpOptionsResult#DhcpOptions
   */
  readonly dhcpOptions?: Ec2DhcpOptions[];

  /**
   * @schema Ec2DescribeDhcpOptionsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeDhcpOptionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeDhcpOptionsResult(obj: Ec2DescribeDhcpOptionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DhcpOptions': obj.dhcpOptions?.map(y => toJson_Ec2DhcpOptions(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeEgressOnlyInternetGatewaysRequest
 */
export interface Ec2DescribeEgressOnlyInternetGatewaysRequest {
  /**
   * @schema Ec2DescribeEgressOnlyInternetGatewaysRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeEgressOnlyInternetGatewaysRequest#EgressOnlyInternetGatewayIds
   */
  readonly egressOnlyInternetGatewayIds?: string[];

  /**
   * @schema Ec2DescribeEgressOnlyInternetGatewaysRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeEgressOnlyInternetGatewaysRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeEgressOnlyInternetGatewaysRequest#Filters
   */
  readonly filters?: Ec2Filter[];

}

/**
 * Converts an object of type 'Ec2DescribeEgressOnlyInternetGatewaysRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeEgressOnlyInternetGatewaysRequest(obj: Ec2DescribeEgressOnlyInternetGatewaysRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'EgressOnlyInternetGatewayIds': obj.egressOnlyInternetGatewayIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeEgressOnlyInternetGatewaysResult
 */
export interface Ec2DescribeEgressOnlyInternetGatewaysResult {
  /**
   * @schema Ec2DescribeEgressOnlyInternetGatewaysResult#EgressOnlyInternetGateways
   */
  readonly egressOnlyInternetGateways?: Ec2EgressOnlyInternetGateway[];

  /**
   * @schema Ec2DescribeEgressOnlyInternetGatewaysResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeEgressOnlyInternetGatewaysResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeEgressOnlyInternetGatewaysResult(obj: Ec2DescribeEgressOnlyInternetGatewaysResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EgressOnlyInternetGateways': obj.egressOnlyInternetGateways?.map(y => toJson_Ec2EgressOnlyInternetGateway(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeElasticGpusRequest
 */
export interface Ec2DescribeElasticGpusRequest {
  /**
   * @schema Ec2DescribeElasticGpusRequest#ElasticGpuIds
   */
  readonly elasticGpuIds?: string[];

  /**
   * @schema Ec2DescribeElasticGpusRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeElasticGpusRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeElasticGpusRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeElasticGpusRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeElasticGpusRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeElasticGpusRequest(obj: Ec2DescribeElasticGpusRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ElasticGpuIds': obj.elasticGpuIds?.map(y => y),
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeElasticGpusResult
 */
export interface Ec2DescribeElasticGpusResult {
  /**
   * @schema Ec2DescribeElasticGpusResult#ElasticGpuSet
   */
  readonly elasticGpuSet?: Ec2ElasticGpus[];

  /**
   * @schema Ec2DescribeElasticGpusResult#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeElasticGpusResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeElasticGpusResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeElasticGpusResult(obj: Ec2DescribeElasticGpusResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ElasticGpuSet': obj.elasticGpuSet?.map(y => toJson_Ec2ElasticGpus(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeExportImageTasksRequest
 */
export interface Ec2DescribeExportImageTasksRequest {
  /**
   * @schema Ec2DescribeExportImageTasksRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeExportImageTasksRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeExportImageTasksRequest#ExportImageTaskIds
   */
  readonly exportImageTaskIds?: string[];

  /**
   * @schema Ec2DescribeExportImageTasksRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeExportImageTasksRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeExportImageTasksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeExportImageTasksRequest(obj: Ec2DescribeExportImageTasksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'ExportImageTaskIds': obj.exportImageTaskIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeExportImageTasksResult
 */
export interface Ec2DescribeExportImageTasksResult {
  /**
   * @schema Ec2DescribeExportImageTasksResult#ExportImageTasks
   */
  readonly exportImageTasks?: Ec2ExportImageTask[];

  /**
   * @schema Ec2DescribeExportImageTasksResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeExportImageTasksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeExportImageTasksResult(obj: Ec2DescribeExportImageTasksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExportImageTasks': obj.exportImageTasks?.map(y => toJson_Ec2ExportImageTask(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeExportTasksRequest
 */
export interface Ec2DescribeExportTasksRequest {
  /**
   * @schema Ec2DescribeExportTasksRequest#ExportTaskIds
   */
  readonly exportTaskIds?: string[];

  /**
   * @schema Ec2DescribeExportTasksRequest#Filters
   */
  readonly filters?: Ec2Filter[];

}

/**
 * Converts an object of type 'Ec2DescribeExportTasksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeExportTasksRequest(obj: Ec2DescribeExportTasksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExportTaskIds': obj.exportTaskIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeExportTasksResult
 */
export interface Ec2DescribeExportTasksResult {
  /**
   * @schema Ec2DescribeExportTasksResult#ExportTasks
   */
  readonly exportTasks?: Ec2ExportTask[];

}

/**
 * Converts an object of type 'Ec2DescribeExportTasksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeExportTasksResult(obj: Ec2DescribeExportTasksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExportTasks': obj.exportTasks?.map(y => toJson_Ec2ExportTask(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFastSnapshotRestoresRequest
 */
export interface Ec2DescribeFastSnapshotRestoresRequest {
  /**
   * @schema Ec2DescribeFastSnapshotRestoresRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeFastSnapshotRestoresRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeFastSnapshotRestoresRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoresRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeFastSnapshotRestoresRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFastSnapshotRestoresRequest(obj: Ec2DescribeFastSnapshotRestoresRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFastSnapshotRestoresResult
 */
export interface Ec2DescribeFastSnapshotRestoresResult {
  /**
   * @schema Ec2DescribeFastSnapshotRestoresResult#FastSnapshotRestores
   */
  readonly fastSnapshotRestores?: Ec2DescribeFastSnapshotRestoreSuccessItem[];

  /**
   * @schema Ec2DescribeFastSnapshotRestoresResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFastSnapshotRestoresResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFastSnapshotRestoresResult(obj: Ec2DescribeFastSnapshotRestoresResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FastSnapshotRestores': obj.fastSnapshotRestores?.map(y => toJson_Ec2DescribeFastSnapshotRestoreSuccessItem(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFleetHistoryRequest
 */
export interface Ec2DescribeFleetHistoryRequest {
  /**
   * @schema Ec2DescribeFleetHistoryRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeFleetHistoryRequest#EventType
   */
  readonly eventType?: string;

  /**
   * @schema Ec2DescribeFleetHistoryRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeFleetHistoryRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeFleetHistoryRequest#FleetId
   */
  readonly fleetId?: string;

  /**
   * @schema Ec2DescribeFleetHistoryRequest#StartTime
   */
  readonly startTime?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFleetHistoryRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFleetHistoryRequest(obj: Ec2DescribeFleetHistoryRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'EventType': obj.eventType,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'FleetId': obj.fleetId,
    'StartTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFleetHistoryResult
 */
export interface Ec2DescribeFleetHistoryResult {
  /**
   * @schema Ec2DescribeFleetHistoryResult#HistoryRecords
   */
  readonly historyRecords?: Ec2HistoryRecordEntry[];

  /**
   * @schema Ec2DescribeFleetHistoryResult#LastEvaluatedTime
   */
  readonly lastEvaluatedTime?: string;

  /**
   * @schema Ec2DescribeFleetHistoryResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeFleetHistoryResult#FleetId
   */
  readonly fleetId?: string;

  /**
   * @schema Ec2DescribeFleetHistoryResult#StartTime
   */
  readonly startTime?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFleetHistoryResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFleetHistoryResult(obj: Ec2DescribeFleetHistoryResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HistoryRecords': obj.historyRecords?.map(y => toJson_Ec2HistoryRecordEntry(y)),
    'LastEvaluatedTime': obj.lastEvaluatedTime,
    'NextToken': obj.nextToken,
    'FleetId': obj.fleetId,
    'StartTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFleetInstancesRequest
 */
export interface Ec2DescribeFleetInstancesRequest {
  /**
   * @schema Ec2DescribeFleetInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeFleetInstancesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeFleetInstancesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeFleetInstancesRequest#FleetId
   */
  readonly fleetId?: string;

  /**
   * @schema Ec2DescribeFleetInstancesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

}

/**
 * Converts an object of type 'Ec2DescribeFleetInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFleetInstancesRequest(obj: Ec2DescribeFleetInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'FleetId': obj.fleetId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFleetInstancesResult
 */
export interface Ec2DescribeFleetInstancesResult {
  /**
   * @schema Ec2DescribeFleetInstancesResult#ActiveInstances
   */
  readonly activeInstances?: Ec2ActiveInstance[];

  /**
   * @schema Ec2DescribeFleetInstancesResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeFleetInstancesResult#FleetId
   */
  readonly fleetId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFleetInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFleetInstancesResult(obj: Ec2DescribeFleetInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ActiveInstances': obj.activeInstances?.map(y => toJson_Ec2ActiveInstance(y)),
    'NextToken': obj.nextToken,
    'FleetId': obj.fleetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFleetsRequest
 */
export interface Ec2DescribeFleetsRequest {
  /**
   * @schema Ec2DescribeFleetsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeFleetsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeFleetsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeFleetsRequest#FleetIds
   */
  readonly fleetIds?: string[];

  /**
   * @schema Ec2DescribeFleetsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

}

/**
 * Converts an object of type 'Ec2DescribeFleetsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFleetsRequest(obj: Ec2DescribeFleetsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'FleetIds': obj.fleetIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFleetsResult
 */
export interface Ec2DescribeFleetsResult {
  /**
   * @schema Ec2DescribeFleetsResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeFleetsResult#Fleets
   */
  readonly fleets?: Ec2FleetData[];

}

/**
 * Converts an object of type 'Ec2DescribeFleetsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFleetsResult(obj: Ec2DescribeFleetsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'Fleets': obj.fleets?.map(y => toJson_Ec2FleetData(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFlowLogsRequest
 */
export interface Ec2DescribeFlowLogsRequest {
  /**
   * @schema Ec2DescribeFlowLogsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeFlowLogsRequest#Filter
   */
  readonly filter?: Ec2Filter[];

  /**
   * @schema Ec2DescribeFlowLogsRequest#FlowLogIds
   */
  readonly flowLogIds?: string[];

  /**
   * @schema Ec2DescribeFlowLogsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeFlowLogsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFlowLogsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFlowLogsRequest(obj: Ec2DescribeFlowLogsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filter': obj.filter?.map(y => toJson_Ec2Filter(y)),
    'FlowLogIds': obj.flowLogIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFlowLogsResult
 */
export interface Ec2DescribeFlowLogsResult {
  /**
   * @schema Ec2DescribeFlowLogsResult#FlowLogs
   */
  readonly flowLogs?: Ec2FlowLog[];

  /**
   * @schema Ec2DescribeFlowLogsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFlowLogsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFlowLogsResult(obj: Ec2DescribeFlowLogsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FlowLogs': obj.flowLogs?.map(y => toJson_Ec2FlowLog(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFpgaImageAttributeRequest
 */
export interface Ec2DescribeFpgaImageAttributeRequest {
  /**
   * @schema Ec2DescribeFpgaImageAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeFpgaImageAttributeRequest#FpgaImageId
   */
  readonly fpgaImageId?: string;

  /**
   * @schema Ec2DescribeFpgaImageAttributeRequest#Attribute
   */
  readonly attribute?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFpgaImageAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFpgaImageAttributeRequest(obj: Ec2DescribeFpgaImageAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'FpgaImageId': obj.fpgaImageId,
    'Attribute': obj.attribute,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFpgaImageAttributeResult
 */
export interface Ec2DescribeFpgaImageAttributeResult {
  /**
   * @schema Ec2DescribeFpgaImageAttributeResult#FpgaImageAttribute
   */
  readonly fpgaImageAttribute?: Ec2FpgaImageAttribute;

}

/**
 * Converts an object of type 'Ec2DescribeFpgaImageAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFpgaImageAttributeResult(obj: Ec2DescribeFpgaImageAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FpgaImageAttribute': toJson_Ec2FpgaImageAttribute(obj.fpgaImageAttribute),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFpgaImagesRequest
 */
export interface Ec2DescribeFpgaImagesRequest {
  /**
   * @schema Ec2DescribeFpgaImagesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeFpgaImagesRequest#FpgaImageIds
   */
  readonly fpgaImageIds?: string[];

  /**
   * @schema Ec2DescribeFpgaImagesRequest#Owners
   */
  readonly owners?: string[];

  /**
   * @schema Ec2DescribeFpgaImagesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeFpgaImagesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeFpgaImagesRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeFpgaImagesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFpgaImagesRequest(obj: Ec2DescribeFpgaImagesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'FpgaImageIds': obj.fpgaImageIds?.map(y => y),
    'Owners': obj.owners?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFpgaImagesResult
 */
export interface Ec2DescribeFpgaImagesResult {
  /**
   * @schema Ec2DescribeFpgaImagesResult#FpgaImages
   */
  readonly fpgaImages?: Ec2FpgaImage[];

  /**
   * @schema Ec2DescribeFpgaImagesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFpgaImagesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFpgaImagesResult(obj: Ec2DescribeFpgaImagesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FpgaImages': obj.fpgaImages?.map(y => toJson_Ec2FpgaImage(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeHostReservationOfferingsRequest
 */
export interface Ec2DescribeHostReservationOfferingsRequest {
  /**
   * @schema Ec2DescribeHostReservationOfferingsRequest#Filter
   */
  readonly filter?: Ec2Filter[];

  /**
   * @schema Ec2DescribeHostReservationOfferingsRequest#MaxDuration
   */
  readonly maxDuration?: number;

  /**
   * @schema Ec2DescribeHostReservationOfferingsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeHostReservationOfferingsRequest#MinDuration
   */
  readonly minDuration?: number;

  /**
   * @schema Ec2DescribeHostReservationOfferingsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeHostReservationOfferingsRequest#OfferingId
   */
  readonly offeringId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeHostReservationOfferingsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeHostReservationOfferingsRequest(obj: Ec2DescribeHostReservationOfferingsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filter': obj.filter?.map(y => toJson_Ec2Filter(y)),
    'MaxDuration': obj.maxDuration,
    'MaxResults': obj.maxResults,
    'MinDuration': obj.minDuration,
    'NextToken': obj.nextToken,
    'OfferingId': obj.offeringId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeHostReservationOfferingsResult
 */
export interface Ec2DescribeHostReservationOfferingsResult {
  /**
   * @schema Ec2DescribeHostReservationOfferingsResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeHostReservationOfferingsResult#OfferingSet
   */
  readonly offeringSet?: Ec2HostOffering[];

}

/**
 * Converts an object of type 'Ec2DescribeHostReservationOfferingsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeHostReservationOfferingsResult(obj: Ec2DescribeHostReservationOfferingsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'OfferingSet': obj.offeringSet?.map(y => toJson_Ec2HostOffering(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeHostReservationsRequest
 */
export interface Ec2DescribeHostReservationsRequest {
  /**
   * @schema Ec2DescribeHostReservationsRequest#Filter
   */
  readonly filter?: Ec2Filter[];

  /**
   * @schema Ec2DescribeHostReservationsRequest#HostReservationIdSet
   */
  readonly hostReservationIdSet?: string[];

  /**
   * @schema Ec2DescribeHostReservationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeHostReservationsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeHostReservationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeHostReservationsRequest(obj: Ec2DescribeHostReservationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filter': obj.filter?.map(y => toJson_Ec2Filter(y)),
    'HostReservationIdSet': obj.hostReservationIdSet?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeHostReservationsResult
 */
export interface Ec2DescribeHostReservationsResult {
  /**
   * @schema Ec2DescribeHostReservationsResult#HostReservationSet
   */
  readonly hostReservationSet?: Ec2HostReservation[];

  /**
   * @schema Ec2DescribeHostReservationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeHostReservationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeHostReservationsResult(obj: Ec2DescribeHostReservationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HostReservationSet': obj.hostReservationSet?.map(y => toJson_Ec2HostReservation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeHostsRequest
 */
export interface Ec2DescribeHostsRequest {
  /**
   * @schema Ec2DescribeHostsRequest#Filter
   */
  readonly filter?: Ec2Filter[];

  /**
   * @schema Ec2DescribeHostsRequest#HostIds
   */
  readonly hostIds?: string[];

  /**
   * @schema Ec2DescribeHostsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeHostsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeHostsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeHostsRequest(obj: Ec2DescribeHostsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filter': obj.filter?.map(y => toJson_Ec2Filter(y)),
    'HostIds': obj.hostIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeHostsResult
 */
export interface Ec2DescribeHostsResult {
  /**
   * @schema Ec2DescribeHostsResult#Hosts
   */
  readonly hosts?: Ec2Host[];

  /**
   * @schema Ec2DescribeHostsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeHostsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeHostsResult(obj: Ec2DescribeHostsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Hosts': obj.hosts?.map(y => toJson_Ec2Host(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeIamInstanceProfileAssociationsRequest
 */
export interface Ec2DescribeIamInstanceProfileAssociationsRequest {
  /**
   * @schema Ec2DescribeIamInstanceProfileAssociationsRequest#AssociationIds
   */
  readonly associationIds?: string[];

  /**
   * @schema Ec2DescribeIamInstanceProfileAssociationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeIamInstanceProfileAssociationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeIamInstanceProfileAssociationsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeIamInstanceProfileAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeIamInstanceProfileAssociationsRequest(obj: Ec2DescribeIamInstanceProfileAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationIds': obj.associationIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeIamInstanceProfileAssociationsResult
 */
export interface Ec2DescribeIamInstanceProfileAssociationsResult {
  /**
   * @schema Ec2DescribeIamInstanceProfileAssociationsResult#IamInstanceProfileAssociations
   */
  readonly iamInstanceProfileAssociations?: Ec2IamInstanceProfileAssociation[];

  /**
   * @schema Ec2DescribeIamInstanceProfileAssociationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeIamInstanceProfileAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeIamInstanceProfileAssociationsResult(obj: Ec2DescribeIamInstanceProfileAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IamInstanceProfileAssociations': obj.iamInstanceProfileAssociations?.map(y => toJson_Ec2IamInstanceProfileAssociation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeIdFormatRequest
 */
export interface Ec2DescribeIdFormatRequest {
  /**
   * @schema Ec2DescribeIdFormatRequest#Resource
   */
  readonly resource?: string;

}

/**
 * Converts an object of type 'Ec2DescribeIdFormatRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeIdFormatRequest(obj: Ec2DescribeIdFormatRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeIdFormatResult
 */
export interface Ec2DescribeIdFormatResult {
  /**
   * @schema Ec2DescribeIdFormatResult#Statuses
   */
  readonly statuses?: Ec2IdFormat[];

}

/**
 * Converts an object of type 'Ec2DescribeIdFormatResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeIdFormatResult(obj: Ec2DescribeIdFormatResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Statuses': obj.statuses?.map(y => toJson_Ec2IdFormat(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeIdentityIdFormatRequest
 */
export interface Ec2DescribeIdentityIdFormatRequest {
  /**
   * @schema Ec2DescribeIdentityIdFormatRequest#PrincipalArn
   */
  readonly principalArn?: string;

  /**
   * @schema Ec2DescribeIdentityIdFormatRequest#Resource
   */
  readonly resource?: string;

}

/**
 * Converts an object of type 'Ec2DescribeIdentityIdFormatRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeIdentityIdFormatRequest(obj: Ec2DescribeIdentityIdFormatRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrincipalArn': obj.principalArn,
    'Resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeIdentityIdFormatResult
 */
export interface Ec2DescribeIdentityIdFormatResult {
  /**
   * @schema Ec2DescribeIdentityIdFormatResult#Statuses
   */
  readonly statuses?: Ec2IdFormat[];

}

/**
 * Converts an object of type 'Ec2DescribeIdentityIdFormatResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeIdentityIdFormatResult(obj: Ec2DescribeIdentityIdFormatResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Statuses': obj.statuses?.map(y => toJson_Ec2IdFormat(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeImageAttributeRequest
 */
export interface Ec2DescribeImageAttributeRequest {
  /**
   * @schema Ec2DescribeImageAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2DescribeImageAttributeRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2DescribeImageAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeImageAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeImageAttributeRequest(obj: Ec2DescribeImageAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'ImageId': obj.imageId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImageAttribute
 */
export interface Ec2ImageAttribute {
  /**
   * @schema Ec2ImageAttribute#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2BlockDeviceMapping[];

  /**
   * @schema Ec2ImageAttribute#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ImageAttribute#LaunchPermissions
   */
  readonly launchPermissions?: Ec2LaunchPermission[];

  /**
   * @schema Ec2ImageAttribute#ProductCodes
   */
  readonly productCodes?: Ec2ProductCode[];

  /**
   * @schema Ec2ImageAttribute#Description
   */
  readonly description?: Ec2AttributeValue;

  /**
   * @schema Ec2ImageAttribute#KernelId
   */
  readonly kernelId?: Ec2AttributeValue;

  /**
   * @schema Ec2ImageAttribute#RamdiskId
   */
  readonly ramdiskId?: Ec2AttributeValue;

  /**
   * @schema Ec2ImageAttribute#SriovNetSupport
   */
  readonly sriovNetSupport?: Ec2AttributeValue;

  /**
   * @schema Ec2ImageAttribute#BootMode
   */
  readonly bootMode?: Ec2AttributeValue;

}

/**
 * Converts an object of type 'Ec2ImageAttribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImageAttribute(obj: Ec2ImageAttribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2BlockDeviceMapping(y)),
    'ImageId': obj.imageId,
    'LaunchPermissions': obj.launchPermissions?.map(y => toJson_Ec2LaunchPermission(y)),
    'ProductCodes': obj.productCodes?.map(y => toJson_Ec2ProductCode(y)),
    'Description': toJson_Ec2AttributeValue(obj.description),
    'KernelId': toJson_Ec2AttributeValue(obj.kernelId),
    'RamdiskId': toJson_Ec2AttributeValue(obj.ramdiskId),
    'SriovNetSupport': toJson_Ec2AttributeValue(obj.sriovNetSupport),
    'BootMode': toJson_Ec2AttributeValue(obj.bootMode),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeImagesRequest
 */
export interface Ec2DescribeImagesRequest {
  /**
   * @schema Ec2DescribeImagesRequest#ExecutableUsers
   */
  readonly executableUsers?: string[];

  /**
   * @schema Ec2DescribeImagesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeImagesRequest#ImageIds
   */
  readonly imageIds?: string[];

  /**
   * @schema Ec2DescribeImagesRequest#Owners
   */
  readonly owners?: string[];

  /**
   * @schema Ec2DescribeImagesRequest#IncludeDeprecated
   */
  readonly includeDeprecated?: boolean;

  /**
   * @schema Ec2DescribeImagesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeImagesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeImagesRequest(obj: Ec2DescribeImagesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExecutableUsers': obj.executableUsers?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'ImageIds': obj.imageIds?.map(y => y),
    'Owners': obj.owners?.map(y => y),
    'IncludeDeprecated': obj.includeDeprecated,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeImagesResult
 */
export interface Ec2DescribeImagesResult {
  /**
   * @schema Ec2DescribeImagesResult#Images
   */
  readonly images?: Ec2Image[];

}

/**
 * Converts an object of type 'Ec2DescribeImagesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeImagesResult(obj: Ec2DescribeImagesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Images': obj.images?.map(y => toJson_Ec2Image(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeImportImageTasksRequest
 */
export interface Ec2DescribeImportImageTasksRequest {
  /**
   * @schema Ec2DescribeImportImageTasksRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeImportImageTasksRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeImportImageTasksRequest#ImportTaskIds
   */
  readonly importTaskIds?: string[];

  /**
   * @schema Ec2DescribeImportImageTasksRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeImportImageTasksRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeImportImageTasksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeImportImageTasksRequest(obj: Ec2DescribeImportImageTasksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'ImportTaskIds': obj.importTaskIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeImportImageTasksResult
 */
export interface Ec2DescribeImportImageTasksResult {
  /**
   * @schema Ec2DescribeImportImageTasksResult#ImportImageTasks
   */
  readonly importImageTasks?: Ec2ImportImageTask[];

  /**
   * @schema Ec2DescribeImportImageTasksResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeImportImageTasksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeImportImageTasksResult(obj: Ec2DescribeImportImageTasksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImportImageTasks': obj.importImageTasks?.map(y => toJson_Ec2ImportImageTask(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeImportSnapshotTasksRequest
 */
export interface Ec2DescribeImportSnapshotTasksRequest {
  /**
   * @schema Ec2DescribeImportSnapshotTasksRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeImportSnapshotTasksRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeImportSnapshotTasksRequest#ImportTaskIds
   */
  readonly importTaskIds?: string[];

  /**
   * @schema Ec2DescribeImportSnapshotTasksRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeImportSnapshotTasksRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeImportSnapshotTasksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeImportSnapshotTasksRequest(obj: Ec2DescribeImportSnapshotTasksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'ImportTaskIds': obj.importTaskIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeImportSnapshotTasksResult
 */
export interface Ec2DescribeImportSnapshotTasksResult {
  /**
   * @schema Ec2DescribeImportSnapshotTasksResult#ImportSnapshotTasks
   */
  readonly importSnapshotTasks?: Ec2ImportSnapshotTask[];

  /**
   * @schema Ec2DescribeImportSnapshotTasksResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeImportSnapshotTasksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeImportSnapshotTasksResult(obj: Ec2DescribeImportSnapshotTasksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImportSnapshotTasks': obj.importSnapshotTasks?.map(y => toJson_Ec2ImportSnapshotTask(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceAttributeRequest
 */
export interface Ec2DescribeInstanceAttributeRequest {
  /**
   * @schema Ec2DescribeInstanceAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2DescribeInstanceAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeInstanceAttributeRequest#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceAttributeRequest(obj: Ec2DescribeInstanceAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'DryRun': obj.dryRun,
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceAttribute
 */
export interface Ec2InstanceAttribute {
  /**
   * @schema Ec2InstanceAttribute#Groups
   */
  readonly groups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2InstanceAttribute#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2InstanceBlockDeviceMapping[];

  /**
   * @schema Ec2InstanceAttribute#DisableApiTermination
   */
  readonly disableApiTermination?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2InstanceAttribute#EnaSupport
   */
  readonly enaSupport?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2InstanceAttribute#EnclaveOptions
   */
  readonly enclaveOptions?: Ec2EnclaveOptions;

  /**
   * @schema Ec2InstanceAttribute#EbsOptimized
   */
  readonly ebsOptimized?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2InstanceAttribute#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2InstanceAttribute#InstanceInitiatedShutdownBehavior
   */
  readonly instanceInitiatedShutdownBehavior?: Ec2AttributeValue;

  /**
   * @schema Ec2InstanceAttribute#InstanceType
   */
  readonly instanceType?: Ec2AttributeValue;

  /**
   * @schema Ec2InstanceAttribute#KernelId
   */
  readonly kernelId?: Ec2AttributeValue;

  /**
   * @schema Ec2InstanceAttribute#ProductCodes
   */
  readonly productCodes?: Ec2ProductCode[];

  /**
   * @schema Ec2InstanceAttribute#RamdiskId
   */
  readonly ramdiskId?: Ec2AttributeValue;

  /**
   * @schema Ec2InstanceAttribute#RootDeviceName
   */
  readonly rootDeviceName?: Ec2AttributeValue;

  /**
   * @schema Ec2InstanceAttribute#SourceDestCheck
   */
  readonly sourceDestCheck?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2InstanceAttribute#SriovNetSupport
   */
  readonly sriovNetSupport?: Ec2AttributeValue;

  /**
   * @schema Ec2InstanceAttribute#UserData
   */
  readonly userData?: Ec2AttributeValue;

}

/**
 * Converts an object of type 'Ec2InstanceAttribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceAttribute(obj: Ec2InstanceAttribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Groups': obj.groups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2InstanceBlockDeviceMapping(y)),
    'DisableApiTermination': toJson_Ec2AttributeBooleanValue(obj.disableApiTermination),
    'EnaSupport': toJson_Ec2AttributeBooleanValue(obj.enaSupport),
    'EnclaveOptions': toJson_Ec2EnclaveOptions(obj.enclaveOptions),
    'EbsOptimized': toJson_Ec2AttributeBooleanValue(obj.ebsOptimized),
    'InstanceId': obj.instanceId,
    'InstanceInitiatedShutdownBehavior': toJson_Ec2AttributeValue(obj.instanceInitiatedShutdownBehavior),
    'InstanceType': toJson_Ec2AttributeValue(obj.instanceType),
    'KernelId': toJson_Ec2AttributeValue(obj.kernelId),
    'ProductCodes': obj.productCodes?.map(y => toJson_Ec2ProductCode(y)),
    'RamdiskId': toJson_Ec2AttributeValue(obj.ramdiskId),
    'RootDeviceName': toJson_Ec2AttributeValue(obj.rootDeviceName),
    'SourceDestCheck': toJson_Ec2AttributeBooleanValue(obj.sourceDestCheck),
    'SriovNetSupport': toJson_Ec2AttributeValue(obj.sriovNetSupport),
    'UserData': toJson_Ec2AttributeValue(obj.userData),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceCreditSpecificationsRequest
 */
export interface Ec2DescribeInstanceCreditSpecificationsRequest {
  /**
   * @schema Ec2DescribeInstanceCreditSpecificationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeInstanceCreditSpecificationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeInstanceCreditSpecificationsRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2DescribeInstanceCreditSpecificationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeInstanceCreditSpecificationsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceCreditSpecificationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceCreditSpecificationsRequest(obj: Ec2DescribeInstanceCreditSpecificationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'InstanceIds': obj.instanceIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceCreditSpecificationsResult
 */
export interface Ec2DescribeInstanceCreditSpecificationsResult {
  /**
   * @schema Ec2DescribeInstanceCreditSpecificationsResult#InstanceCreditSpecifications
   */
  readonly instanceCreditSpecifications?: Ec2InstanceCreditSpecification[];

  /**
   * @schema Ec2DescribeInstanceCreditSpecificationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceCreditSpecificationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceCreditSpecificationsResult(obj: Ec2DescribeInstanceCreditSpecificationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceCreditSpecifications': obj.instanceCreditSpecifications?.map(y => toJson_Ec2InstanceCreditSpecification(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceEventNotificationAttributesRequest
 */
export interface Ec2DescribeInstanceEventNotificationAttributesRequest {
  /**
   * @schema Ec2DescribeInstanceEventNotificationAttributesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceEventNotificationAttributesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceEventNotificationAttributesRequest(obj: Ec2DescribeInstanceEventNotificationAttributesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceEventNotificationAttributesResult
 */
export interface Ec2DescribeInstanceEventNotificationAttributesResult {
  /**
   * @schema Ec2DescribeInstanceEventNotificationAttributesResult#InstanceTagAttribute
   */
  readonly instanceTagAttribute?: Ec2InstanceTagNotificationAttribute;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceEventNotificationAttributesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceEventNotificationAttributesResult(obj: Ec2DescribeInstanceEventNotificationAttributesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceTagAttribute': toJson_Ec2InstanceTagNotificationAttribute(obj.instanceTagAttribute),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceEventWindowsRequest
 */
export interface Ec2DescribeInstanceEventWindowsRequest {
  /**
   * @schema Ec2DescribeInstanceEventWindowsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeInstanceEventWindowsRequest#InstanceEventWindowIds
   */
  readonly instanceEventWindowIds?: string[];

  /**
   * @schema Ec2DescribeInstanceEventWindowsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeInstanceEventWindowsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeInstanceEventWindowsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceEventWindowsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceEventWindowsRequest(obj: Ec2DescribeInstanceEventWindowsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceEventWindowIds': obj.instanceEventWindowIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceEventWindowsResult
 */
export interface Ec2DescribeInstanceEventWindowsResult {
  /**
   * @schema Ec2DescribeInstanceEventWindowsResult#InstanceEventWindows
   */
  readonly instanceEventWindows?: Ec2InstanceEventWindow[];

  /**
   * @schema Ec2DescribeInstanceEventWindowsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceEventWindowsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceEventWindowsResult(obj: Ec2DescribeInstanceEventWindowsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventWindows': obj.instanceEventWindows?.map(y => toJson_Ec2InstanceEventWindow(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceStatusRequest
 */
export interface Ec2DescribeInstanceStatusRequest {
  /**
   * @schema Ec2DescribeInstanceStatusRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeInstanceStatusRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2DescribeInstanceStatusRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeInstanceStatusRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeInstanceStatusRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeInstanceStatusRequest#IncludeAllInstances
   */
  readonly includeAllInstances?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceStatusRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceStatusRequest(obj: Ec2DescribeInstanceStatusRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'InstanceIds': obj.instanceIds?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
    'IncludeAllInstances': obj.includeAllInstances,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceStatusResult
 */
export interface Ec2DescribeInstanceStatusResult {
  /**
   * @schema Ec2DescribeInstanceStatusResult#InstanceStatuses
   */
  readonly instanceStatuses?: Ec2InstanceStatus[];

  /**
   * @schema Ec2DescribeInstanceStatusResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceStatusResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceStatusResult(obj: Ec2DescribeInstanceStatusResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceStatuses': obj.instanceStatuses?.map(y => toJson_Ec2InstanceStatus(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceTypeOfferingsRequest
 */
export interface Ec2DescribeInstanceTypeOfferingsRequest {
  /**
   * @schema Ec2DescribeInstanceTypeOfferingsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeInstanceTypeOfferingsRequest#LocationType
   */
  readonly locationType?: string;

  /**
   * @schema Ec2DescribeInstanceTypeOfferingsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeInstanceTypeOfferingsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeInstanceTypeOfferingsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceTypeOfferingsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceTypeOfferingsRequest(obj: Ec2DescribeInstanceTypeOfferingsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'LocationType': obj.locationType,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceTypeOfferingsResult
 */
export interface Ec2DescribeInstanceTypeOfferingsResult {
  /**
   * @schema Ec2DescribeInstanceTypeOfferingsResult#InstanceTypeOfferings
   */
  readonly instanceTypeOfferings?: Ec2InstanceTypeOffering[];

  /**
   * @schema Ec2DescribeInstanceTypeOfferingsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceTypeOfferingsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceTypeOfferingsResult(obj: Ec2DescribeInstanceTypeOfferingsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceTypeOfferings': obj.instanceTypeOfferings?.map(y => toJson_Ec2InstanceTypeOffering(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceTypesRequest
 */
export interface Ec2DescribeInstanceTypesRequest {
  /**
   * @schema Ec2DescribeInstanceTypesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeInstanceTypesRequest#InstanceTypes
   */
  readonly instanceTypes?: string[];

  /**
   * @schema Ec2DescribeInstanceTypesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeInstanceTypesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeInstanceTypesRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceTypesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceTypesRequest(obj: Ec2DescribeInstanceTypesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceTypes': obj.instanceTypes?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstanceTypesResult
 */
export interface Ec2DescribeInstanceTypesResult {
  /**
   * @schema Ec2DescribeInstanceTypesResult#InstanceTypes
   */
  readonly instanceTypes?: Ec2InstanceTypeInfo[];

  /**
   * @schema Ec2DescribeInstanceTypesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstanceTypesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstanceTypesResult(obj: Ec2DescribeInstanceTypesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceTypes': obj.instanceTypes?.map(y => toJson_Ec2InstanceTypeInfo(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstancesRequest
 */
export interface Ec2DescribeInstancesRequest {
  /**
   * @schema Ec2DescribeInstancesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeInstancesRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2DescribeInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeInstancesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeInstancesRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstancesRequest(obj: Ec2DescribeInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'InstanceIds': obj.instanceIds?.map(y => y),
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInstancesResult
 */
export interface Ec2DescribeInstancesResult {
  /**
   * @schema Ec2DescribeInstancesResult#Reservations
   */
  readonly reservations?: Ec2Reservation[];

  /**
   * @schema Ec2DescribeInstancesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInstancesResult(obj: Ec2DescribeInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Reservations': obj.reservations?.map(y => toJson_Ec2Reservation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInternetGatewaysRequest
 */
export interface Ec2DescribeInternetGatewaysRequest {
  /**
   * @schema Ec2DescribeInternetGatewaysRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeInternetGatewaysRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeInternetGatewaysRequest#InternetGatewayIds
   */
  readonly internetGatewayIds?: string[];

  /**
   * @schema Ec2DescribeInternetGatewaysRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeInternetGatewaysRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeInternetGatewaysRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInternetGatewaysRequest(obj: Ec2DescribeInternetGatewaysRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'InternetGatewayIds': obj.internetGatewayIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeInternetGatewaysResult
 */
export interface Ec2DescribeInternetGatewaysResult {
  /**
   * @schema Ec2DescribeInternetGatewaysResult#InternetGateways
   */
  readonly internetGateways?: Ec2InternetGateway[];

  /**
   * @schema Ec2DescribeInternetGatewaysResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeInternetGatewaysResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeInternetGatewaysResult(obj: Ec2DescribeInternetGatewaysResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InternetGateways': obj.internetGateways?.map(y => toJson_Ec2InternetGateway(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeIpv6PoolsRequest
 */
export interface Ec2DescribeIpv6PoolsRequest {
  /**
   * @schema Ec2DescribeIpv6PoolsRequest#PoolIds
   */
  readonly poolIds?: string[];

  /**
   * @schema Ec2DescribeIpv6PoolsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeIpv6PoolsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeIpv6PoolsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeIpv6PoolsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

}

/**
 * Converts an object of type 'Ec2DescribeIpv6PoolsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeIpv6PoolsRequest(obj: Ec2DescribeIpv6PoolsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PoolIds': obj.poolIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeIpv6PoolsResult
 */
export interface Ec2DescribeIpv6PoolsResult {
  /**
   * @schema Ec2DescribeIpv6PoolsResult#Ipv6Pools
   */
  readonly ipv6Pools?: Ec2Ipv6Pool[];

  /**
   * @schema Ec2DescribeIpv6PoolsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeIpv6PoolsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeIpv6PoolsResult(obj: Ec2DescribeIpv6PoolsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Pools': obj.ipv6Pools?.map(y => toJson_Ec2Ipv6Pool(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeKeyPairsRequest
 */
export interface Ec2DescribeKeyPairsRequest {
  /**
   * @schema Ec2DescribeKeyPairsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeKeyPairsRequest#KeyNames
   */
  readonly keyNames?: string[];

  /**
   * @schema Ec2DescribeKeyPairsRequest#KeyPairIds
   */
  readonly keyPairIds?: string[];

  /**
   * @schema Ec2DescribeKeyPairsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeKeyPairsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeKeyPairsRequest(obj: Ec2DescribeKeyPairsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'KeyNames': obj.keyNames?.map(y => y),
    'KeyPairIds': obj.keyPairIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeKeyPairsResult
 */
export interface Ec2DescribeKeyPairsResult {
  /**
   * @schema Ec2DescribeKeyPairsResult#KeyPairs
   */
  readonly keyPairs?: Ec2KeyPairInfo[];

}

/**
 * Converts an object of type 'Ec2DescribeKeyPairsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeKeyPairsResult(obj: Ec2DescribeKeyPairsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KeyPairs': obj.keyPairs?.map(y => toJson_Ec2KeyPairInfo(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLaunchTemplateVersionsRequest
 */
export interface Ec2DescribeLaunchTemplateVersionsRequest {
  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#Versions
   */
  readonly versions?: string[];

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#MinVersion
   */
  readonly minVersion?: string;

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#MaxVersion
   */
  readonly maxVersion?: string;

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

}

/**
 * Converts an object of type 'Ec2DescribeLaunchTemplateVersionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLaunchTemplateVersionsRequest(obj: Ec2DescribeLaunchTemplateVersionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'Versions': obj.versions?.map(y => y),
    'MinVersion': obj.minVersion,
    'MaxVersion': obj.maxVersion,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLaunchTemplateVersionsResult
 */
export interface Ec2DescribeLaunchTemplateVersionsResult {
  /**
   * @schema Ec2DescribeLaunchTemplateVersionsResult#LaunchTemplateVersions
   */
  readonly launchTemplateVersions?: Ec2LaunchTemplateVersion[];

  /**
   * @schema Ec2DescribeLaunchTemplateVersionsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeLaunchTemplateVersionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLaunchTemplateVersionsResult(obj: Ec2DescribeLaunchTemplateVersionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateVersions': obj.launchTemplateVersions?.map(y => toJson_Ec2LaunchTemplateVersion(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLaunchTemplatesRequest
 */
export interface Ec2DescribeLaunchTemplatesRequest {
  /**
   * @schema Ec2DescribeLaunchTemplatesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeLaunchTemplatesRequest#LaunchTemplateIds
   */
  readonly launchTemplateIds?: string[];

  /**
   * @schema Ec2DescribeLaunchTemplatesRequest#LaunchTemplateNames
   */
  readonly launchTemplateNames?: string[];

  /**
   * @schema Ec2DescribeLaunchTemplatesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeLaunchTemplatesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeLaunchTemplatesRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeLaunchTemplatesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLaunchTemplatesRequest(obj: Ec2DescribeLaunchTemplatesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'LaunchTemplateIds': obj.launchTemplateIds?.map(y => y),
    'LaunchTemplateNames': obj.launchTemplateNames?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLaunchTemplatesResult
 */
export interface Ec2DescribeLaunchTemplatesResult {
  /**
   * @schema Ec2DescribeLaunchTemplatesResult#LaunchTemplates
   */
  readonly launchTemplates?: Ec2LaunchTemplate[];

  /**
   * @schema Ec2DescribeLaunchTemplatesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeLaunchTemplatesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLaunchTemplatesResult(obj: Ec2DescribeLaunchTemplatesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplates': obj.launchTemplates?.map(y => toJson_Ec2LaunchTemplate(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest
 */
export interface Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest {
  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest#LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds
   */
  readonly localGatewayRouteTableVirtualInterfaceGroupAssociationIds?: string[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(obj: Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds': obj.localGatewayRouteTableVirtualInterfaceGroupAssociationIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult
 */
export interface Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult {
  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult#LocalGatewayRouteTableVirtualInterfaceGroupAssociations
   */
  readonly localGatewayRouteTableVirtualInterfaceGroupAssociations?: Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(obj: Ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVirtualInterfaceGroupAssociations': obj.localGatewayRouteTableVirtualInterfaceGroupAssociations?.map(y => toJson_Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest
 */
export interface Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest {
  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest#LocalGatewayRouteTableVpcAssociationIds
   */
  readonly localGatewayRouteTableVpcAssociationIds?: string[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest(obj: Ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVpcAssociationIds': obj.localGatewayRouteTableVpcAssociationIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsResult
 */
export interface Ec2DescribeLocalGatewayRouteTableVpcAssociationsResult {
  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsResult#LocalGatewayRouteTableVpcAssociations
   */
  readonly localGatewayRouteTableVpcAssociations?: Ec2LocalGatewayRouteTableVpcAssociation[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTableVpcAssociationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayRouteTableVpcAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayRouteTableVpcAssociationsResult(obj: Ec2DescribeLocalGatewayRouteTableVpcAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVpcAssociations': obj.localGatewayRouteTableVpcAssociations?.map(y => toJson_Ec2LocalGatewayRouteTableVpcAssociation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayRouteTablesRequest
 */
export interface Ec2DescribeLocalGatewayRouteTablesRequest {
  /**
   * @schema Ec2DescribeLocalGatewayRouteTablesRequest#LocalGatewayRouteTableIds
   */
  readonly localGatewayRouteTableIds?: string[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTablesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTablesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeLocalGatewayRouteTablesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeLocalGatewayRouteTablesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayRouteTablesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayRouteTablesRequest(obj: Ec2DescribeLocalGatewayRouteTablesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableIds': obj.localGatewayRouteTableIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayRouteTablesResult
 */
export interface Ec2DescribeLocalGatewayRouteTablesResult {
  /**
   * @schema Ec2DescribeLocalGatewayRouteTablesResult#LocalGatewayRouteTables
   */
  readonly localGatewayRouteTables?: Ec2LocalGatewayRouteTable[];

  /**
   * @schema Ec2DescribeLocalGatewayRouteTablesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayRouteTablesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayRouteTablesResult(obj: Ec2DescribeLocalGatewayRouteTablesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTables': obj.localGatewayRouteTables?.map(y => toJson_Ec2LocalGatewayRouteTable(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest
 */
export interface Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest {
  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest#LocalGatewayVirtualInterfaceGroupIds
   */
  readonly localGatewayVirtualInterfaceGroupIds?: string[];

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest(obj: Ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayVirtualInterfaceGroupIds': obj.localGatewayVirtualInterfaceGroupIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsResult
 */
export interface Ec2DescribeLocalGatewayVirtualInterfaceGroupsResult {
  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsResult#LocalGatewayVirtualInterfaceGroups
   */
  readonly localGatewayVirtualInterfaceGroups?: Ec2LocalGatewayVirtualInterfaceGroup[];

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfaceGroupsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayVirtualInterfaceGroupsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayVirtualInterfaceGroupsResult(obj: Ec2DescribeLocalGatewayVirtualInterfaceGroupsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayVirtualInterfaceGroups': obj.localGatewayVirtualInterfaceGroups?.map(y => toJson_Ec2LocalGatewayVirtualInterfaceGroup(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayVirtualInterfacesRequest
 */
export interface Ec2DescribeLocalGatewayVirtualInterfacesRequest {
  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfacesRequest#LocalGatewayVirtualInterfaceIds
   */
  readonly localGatewayVirtualInterfaceIds?: string[];

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfacesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfacesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfacesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfacesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayVirtualInterfacesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayVirtualInterfacesRequest(obj: Ec2DescribeLocalGatewayVirtualInterfacesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayVirtualInterfaceIds': obj.localGatewayVirtualInterfaceIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewayVirtualInterfacesResult
 */
export interface Ec2DescribeLocalGatewayVirtualInterfacesResult {
  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfacesResult#LocalGatewayVirtualInterfaces
   */
  readonly localGatewayVirtualInterfaces?: Ec2LocalGatewayVirtualInterface[];

  /**
   * @schema Ec2DescribeLocalGatewayVirtualInterfacesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewayVirtualInterfacesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewayVirtualInterfacesResult(obj: Ec2DescribeLocalGatewayVirtualInterfacesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayVirtualInterfaces': obj.localGatewayVirtualInterfaces?.map(y => toJson_Ec2LocalGatewayVirtualInterface(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewaysRequest
 */
export interface Ec2DescribeLocalGatewaysRequest {
  /**
   * @schema Ec2DescribeLocalGatewaysRequest#LocalGatewayIds
   */
  readonly localGatewayIds?: string[];

  /**
   * @schema Ec2DescribeLocalGatewaysRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeLocalGatewaysRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeLocalGatewaysRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeLocalGatewaysRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewaysRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewaysRequest(obj: Ec2DescribeLocalGatewaysRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayIds': obj.localGatewayIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeLocalGatewaysResult
 */
export interface Ec2DescribeLocalGatewaysResult {
  /**
   * @schema Ec2DescribeLocalGatewaysResult#LocalGateways
   */
  readonly localGateways?: Ec2LocalGateway[];

  /**
   * @schema Ec2DescribeLocalGatewaysResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeLocalGatewaysResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeLocalGatewaysResult(obj: Ec2DescribeLocalGatewaysResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGateways': obj.localGateways?.map(y => toJson_Ec2LocalGateway(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeManagedPrefixListsRequest
 */
export interface Ec2DescribeManagedPrefixListsRequest {
  /**
   * @schema Ec2DescribeManagedPrefixListsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeManagedPrefixListsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeManagedPrefixListsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeManagedPrefixListsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeManagedPrefixListsRequest#PrefixListIds
   */
  readonly prefixListIds?: string[];

}

/**
 * Converts an object of type 'Ec2DescribeManagedPrefixListsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeManagedPrefixListsRequest(obj: Ec2DescribeManagedPrefixListsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'PrefixListIds': obj.prefixListIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeManagedPrefixListsResult
 */
export interface Ec2DescribeManagedPrefixListsResult {
  /**
   * @schema Ec2DescribeManagedPrefixListsResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeManagedPrefixListsResult#PrefixLists
   */
  readonly prefixLists?: Ec2ManagedPrefixList[];

}

/**
 * Converts an object of type 'Ec2DescribeManagedPrefixListsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeManagedPrefixListsResult(obj: Ec2DescribeManagedPrefixListsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'PrefixLists': obj.prefixLists?.map(y => toJson_Ec2ManagedPrefixList(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeMovingAddressesRequest
 */
export interface Ec2DescribeMovingAddressesRequest {
  /**
   * @schema Ec2DescribeMovingAddressesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeMovingAddressesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeMovingAddressesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeMovingAddressesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeMovingAddressesRequest#PublicIps
   */
  readonly publicIps?: string[];

}

/**
 * Converts an object of type 'Ec2DescribeMovingAddressesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeMovingAddressesRequest(obj: Ec2DescribeMovingAddressesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'PublicIps': obj.publicIps?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeMovingAddressesResult
 */
export interface Ec2DescribeMovingAddressesResult {
  /**
   * @schema Ec2DescribeMovingAddressesResult#MovingAddressStatuses
   */
  readonly movingAddressStatuses?: Ec2MovingAddressStatus[];

  /**
   * @schema Ec2DescribeMovingAddressesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeMovingAddressesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeMovingAddressesResult(obj: Ec2DescribeMovingAddressesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MovingAddressStatuses': obj.movingAddressStatuses?.map(y => toJson_Ec2MovingAddressStatus(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNatGatewaysRequest
 */
export interface Ec2DescribeNatGatewaysRequest {
  /**
   * @schema Ec2DescribeNatGatewaysRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeNatGatewaysRequest#Filter
   */
  readonly filter?: Ec2Filter[];

  /**
   * @schema Ec2DescribeNatGatewaysRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeNatGatewaysRequest#NatGatewayIds
   */
  readonly natGatewayIds?: string[];

  /**
   * @schema Ec2DescribeNatGatewaysRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNatGatewaysRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNatGatewaysRequest(obj: Ec2DescribeNatGatewaysRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filter': obj.filter?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NatGatewayIds': obj.natGatewayIds?.map(y => y),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNatGatewaysResult
 */
export interface Ec2DescribeNatGatewaysResult {
  /**
   * @schema Ec2DescribeNatGatewaysResult#NatGateways
   */
  readonly natGateways?: Ec2NatGateway[];

  /**
   * @schema Ec2DescribeNatGatewaysResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNatGatewaysResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNatGatewaysResult(obj: Ec2DescribeNatGatewaysResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NatGateways': obj.natGateways?.map(y => toJson_Ec2NatGateway(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkAclsRequest
 */
export interface Ec2DescribeNetworkAclsRequest {
  /**
   * @schema Ec2DescribeNetworkAclsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeNetworkAclsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeNetworkAclsRequest#NetworkAclIds
   */
  readonly networkAclIds?: string[];

  /**
   * @schema Ec2DescribeNetworkAclsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeNetworkAclsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkAclsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkAclsRequest(obj: Ec2DescribeNetworkAclsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'NetworkAclIds': obj.networkAclIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkAclsResult
 */
export interface Ec2DescribeNetworkAclsResult {
  /**
   * @schema Ec2DescribeNetworkAclsResult#NetworkAcls
   */
  readonly networkAcls?: Ec2NetworkAcl[];

  /**
   * @schema Ec2DescribeNetworkAclsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkAclsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkAclsResult(obj: Ec2DescribeNetworkAclsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkAcls': obj.networkAcls?.map(y => toJson_Ec2NetworkAcl(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInsightsAnalysesRequest
 */
export interface Ec2DescribeNetworkInsightsAnalysesRequest {
  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesRequest#NetworkInsightsAnalysisIds
   */
  readonly networkInsightsAnalysisIds?: string[];

  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesRequest#NetworkInsightsPathId
   */
  readonly networkInsightsPathId?: string;

  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesRequest#AnalysisStartTime
   */
  readonly analysisStartTime?: string;

  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesRequest#AnalysisEndTime
   */
  readonly analysisEndTime?: string;

  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInsightsAnalysesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInsightsAnalysesRequest(obj: Ec2DescribeNetworkInsightsAnalysesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsAnalysisIds': obj.networkInsightsAnalysisIds?.map(y => y),
    'NetworkInsightsPathId': obj.networkInsightsPathId,
    'AnalysisStartTime': obj.analysisStartTime,
    'AnalysisEndTime': obj.analysisEndTime,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInsightsAnalysesResult
 */
export interface Ec2DescribeNetworkInsightsAnalysesResult {
  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesResult#NetworkInsightsAnalyses
   */
  readonly networkInsightsAnalyses?: Ec2NetworkInsightsAnalysis[];

  /**
   * @schema Ec2DescribeNetworkInsightsAnalysesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInsightsAnalysesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInsightsAnalysesResult(obj: Ec2DescribeNetworkInsightsAnalysesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsAnalyses': obj.networkInsightsAnalyses?.map(y => toJson_Ec2NetworkInsightsAnalysis(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInsightsPathsRequest
 */
export interface Ec2DescribeNetworkInsightsPathsRequest {
  /**
   * @schema Ec2DescribeNetworkInsightsPathsRequest#NetworkInsightsPathIds
   */
  readonly networkInsightsPathIds?: string[];

  /**
   * @schema Ec2DescribeNetworkInsightsPathsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeNetworkInsightsPathsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeNetworkInsightsPathsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeNetworkInsightsPathsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInsightsPathsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInsightsPathsRequest(obj: Ec2DescribeNetworkInsightsPathsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsPathIds': obj.networkInsightsPathIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInsightsPathsResult
 */
export interface Ec2DescribeNetworkInsightsPathsResult {
  /**
   * @schema Ec2DescribeNetworkInsightsPathsResult#NetworkInsightsPaths
   */
  readonly networkInsightsPaths?: Ec2NetworkInsightsPath[];

  /**
   * @schema Ec2DescribeNetworkInsightsPathsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInsightsPathsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInsightsPathsResult(obj: Ec2DescribeNetworkInsightsPathsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsPaths': obj.networkInsightsPaths?.map(y => toJson_Ec2NetworkInsightsPath(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInterfaceAttributeRequest
 */
export interface Ec2DescribeNetworkInterfaceAttributeRequest {
  /**
   * @schema Ec2DescribeNetworkInterfaceAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2DescribeNetworkInterfaceAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeNetworkInterfaceAttributeRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInterfaceAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInterfaceAttributeRequest(obj: Ec2DescribeNetworkInterfaceAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'DryRun': obj.dryRun,
    'NetworkInterfaceId': obj.networkInterfaceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInterfaceAttributeResult
 */
export interface Ec2DescribeNetworkInterfaceAttributeResult {
  /**
   * @schema Ec2DescribeNetworkInterfaceAttributeResult#Attachment
   */
  readonly attachment?: Ec2NetworkInterfaceAttachment;

  /**
   * @schema Ec2DescribeNetworkInterfaceAttributeResult#Description
   */
  readonly description?: Ec2AttributeValue;

  /**
   * @schema Ec2DescribeNetworkInterfaceAttributeResult#Groups
   */
  readonly groups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2DescribeNetworkInterfaceAttributeResult#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2DescribeNetworkInterfaceAttributeResult#SourceDestCheck
   */
  readonly sourceDestCheck?: Ec2AttributeBooleanValue;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInterfaceAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInterfaceAttributeResult(obj: Ec2DescribeNetworkInterfaceAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attachment': toJson_Ec2NetworkInterfaceAttachment(obj.attachment),
    'Description': toJson_Ec2AttributeValue(obj.description),
    'Groups': obj.groups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'NetworkInterfaceId': obj.networkInterfaceId,
    'SourceDestCheck': toJson_Ec2AttributeBooleanValue(obj.sourceDestCheck),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInterfacePermissionsRequest
 */
export interface Ec2DescribeNetworkInterfacePermissionsRequest {
  /**
   * @schema Ec2DescribeNetworkInterfacePermissionsRequest#NetworkInterfacePermissionIds
   */
  readonly networkInterfacePermissionIds?: string[];

  /**
   * @schema Ec2DescribeNetworkInterfacePermissionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeNetworkInterfacePermissionsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeNetworkInterfacePermissionsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInterfacePermissionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInterfacePermissionsRequest(obj: Ec2DescribeNetworkInterfacePermissionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfacePermissionIds': obj.networkInterfacePermissionIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInterfacePermissionsResult
 */
export interface Ec2DescribeNetworkInterfacePermissionsResult {
  /**
   * @schema Ec2DescribeNetworkInterfacePermissionsResult#NetworkInterfacePermissions
   */
  readonly networkInterfacePermissions?: Ec2NetworkInterfacePermission[];

  /**
   * @schema Ec2DescribeNetworkInterfacePermissionsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInterfacePermissionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInterfacePermissionsResult(obj: Ec2DescribeNetworkInterfacePermissionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfacePermissions': obj.networkInterfacePermissions?.map(y => toJson_Ec2NetworkInterfacePermission(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInterfacesRequest
 */
export interface Ec2DescribeNetworkInterfacesRequest {
  /**
   * @schema Ec2DescribeNetworkInterfacesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeNetworkInterfacesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeNetworkInterfacesRequest#NetworkInterfaceIds
   */
  readonly networkInterfaceIds?: string[];

  /**
   * @schema Ec2DescribeNetworkInterfacesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeNetworkInterfacesRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInterfacesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInterfacesRequest(obj: Ec2DescribeNetworkInterfacesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'NetworkInterfaceIds': obj.networkInterfaceIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeNetworkInterfacesResult
 */
export interface Ec2DescribeNetworkInterfacesResult {
  /**
   * @schema Ec2DescribeNetworkInterfacesResult#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2NetworkInterface[];

  /**
   * @schema Ec2DescribeNetworkInterfacesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeNetworkInterfacesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeNetworkInterfacesResult(obj: Ec2DescribeNetworkInterfacesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2NetworkInterface(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribePlacementGroupsRequest
 */
export interface Ec2DescribePlacementGroupsRequest {
  /**
   * @schema Ec2DescribePlacementGroupsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribePlacementGroupsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribePlacementGroupsRequest#GroupNames
   */
  readonly groupNames?: string[];

  /**
   * @schema Ec2DescribePlacementGroupsRequest#GroupIds
   */
  readonly groupIds?: string[];

}

/**
 * Converts an object of type 'Ec2DescribePlacementGroupsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribePlacementGroupsRequest(obj: Ec2DescribePlacementGroupsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'GroupNames': obj.groupNames?.map(y => y),
    'GroupIds': obj.groupIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribePlacementGroupsResult
 */
export interface Ec2DescribePlacementGroupsResult {
  /**
   * @schema Ec2DescribePlacementGroupsResult#PlacementGroups
   */
  readonly placementGroups?: Ec2PlacementGroup[];

}

/**
 * Converts an object of type 'Ec2DescribePlacementGroupsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribePlacementGroupsResult(obj: Ec2DescribePlacementGroupsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PlacementGroups': obj.placementGroups?.map(y => toJson_Ec2PlacementGroup(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribePrefixListsRequest
 */
export interface Ec2DescribePrefixListsRequest {
  /**
   * @schema Ec2DescribePrefixListsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribePrefixListsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribePrefixListsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribePrefixListsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribePrefixListsRequest#PrefixListIds
   */
  readonly prefixListIds?: string[];

}

/**
 * Converts an object of type 'Ec2DescribePrefixListsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribePrefixListsRequest(obj: Ec2DescribePrefixListsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'PrefixListIds': obj.prefixListIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribePrefixListsResult
 */
export interface Ec2DescribePrefixListsResult {
  /**
   * @schema Ec2DescribePrefixListsResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribePrefixListsResult#PrefixLists
   */
  readonly prefixLists?: Ec2PrefixList[];

}

/**
 * Converts an object of type 'Ec2DescribePrefixListsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribePrefixListsResult(obj: Ec2DescribePrefixListsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'PrefixLists': obj.prefixLists?.map(y => toJson_Ec2PrefixList(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribePrincipalIdFormatRequest
 */
export interface Ec2DescribePrincipalIdFormatRequest {
  /**
   * @schema Ec2DescribePrincipalIdFormatRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribePrincipalIdFormatRequest#Resources
   */
  readonly resources?: string[];

  /**
   * @schema Ec2DescribePrincipalIdFormatRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribePrincipalIdFormatRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribePrincipalIdFormatRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribePrincipalIdFormatRequest(obj: Ec2DescribePrincipalIdFormatRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Resources': obj.resources?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribePrincipalIdFormatResult
 */
export interface Ec2DescribePrincipalIdFormatResult {
  /**
   * @schema Ec2DescribePrincipalIdFormatResult#Principals
   */
  readonly principals?: Ec2PrincipalIdFormat[];

  /**
   * @schema Ec2DescribePrincipalIdFormatResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribePrincipalIdFormatResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribePrincipalIdFormatResult(obj: Ec2DescribePrincipalIdFormatResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Principals': obj.principals?.map(y => toJson_Ec2PrincipalIdFormat(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribePublicIpv4PoolsRequest
 */
export interface Ec2DescribePublicIpv4PoolsRequest {
  /**
   * @schema Ec2DescribePublicIpv4PoolsRequest#PoolIds
   */
  readonly poolIds?: string[];

  /**
   * @schema Ec2DescribePublicIpv4PoolsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribePublicIpv4PoolsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribePublicIpv4PoolsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

}

/**
 * Converts an object of type 'Ec2DescribePublicIpv4PoolsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribePublicIpv4PoolsRequest(obj: Ec2DescribePublicIpv4PoolsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PoolIds': obj.poolIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribePublicIpv4PoolsResult
 */
export interface Ec2DescribePublicIpv4PoolsResult {
  /**
   * @schema Ec2DescribePublicIpv4PoolsResult#PublicIpv4Pools
   */
  readonly publicIpv4Pools?: Ec2PublicIpv4Pool[];

  /**
   * @schema Ec2DescribePublicIpv4PoolsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribePublicIpv4PoolsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribePublicIpv4PoolsResult(obj: Ec2DescribePublicIpv4PoolsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PublicIpv4Pools': obj.publicIpv4Pools?.map(y => toJson_Ec2PublicIpv4Pool(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeRegionsRequest
 */
export interface Ec2DescribeRegionsRequest {
  /**
   * @schema Ec2DescribeRegionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeRegionsRequest#RegionNames
   */
  readonly regionNames?: string[];

  /**
   * @schema Ec2DescribeRegionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeRegionsRequest#AllRegions
   */
  readonly allRegions?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeRegionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeRegionsRequest(obj: Ec2DescribeRegionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'RegionNames': obj.regionNames?.map(y => y),
    'DryRun': obj.dryRun,
    'AllRegions': obj.allRegions,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeRegionsResult
 */
export interface Ec2DescribeRegionsResult {
  /**
   * @schema Ec2DescribeRegionsResult#Regions
   */
  readonly regions?: Ec2Region[];

}

/**
 * Converts an object of type 'Ec2DescribeRegionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeRegionsResult(obj: Ec2DescribeRegionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Regions': obj.regions?.map(y => toJson_Ec2Region(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReplaceRootVolumeTasksRequest
 */
export interface Ec2DescribeReplaceRootVolumeTasksRequest {
  /**
   * @schema Ec2DescribeReplaceRootVolumeTasksRequest#ReplaceRootVolumeTaskIds
   */
  readonly replaceRootVolumeTaskIds?: string[];

  /**
   * @schema Ec2DescribeReplaceRootVolumeTasksRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeReplaceRootVolumeTasksRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeReplaceRootVolumeTasksRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeReplaceRootVolumeTasksRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeReplaceRootVolumeTasksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReplaceRootVolumeTasksRequest(obj: Ec2DescribeReplaceRootVolumeTasksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReplaceRootVolumeTaskIds': obj.replaceRootVolumeTaskIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReplaceRootVolumeTasksResult
 */
export interface Ec2DescribeReplaceRootVolumeTasksResult {
  /**
   * @schema Ec2DescribeReplaceRootVolumeTasksResult#ReplaceRootVolumeTasks
   */
  readonly replaceRootVolumeTasks?: Ec2ReplaceRootVolumeTask[];

  /**
   * @schema Ec2DescribeReplaceRootVolumeTasksResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeReplaceRootVolumeTasksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReplaceRootVolumeTasksResult(obj: Ec2DescribeReplaceRootVolumeTasksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReplaceRootVolumeTasks': obj.replaceRootVolumeTasks?.map(y => toJson_Ec2ReplaceRootVolumeTask(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReservedInstancesRequest
 */
export interface Ec2DescribeReservedInstancesRequest {
  /**
   * @schema Ec2DescribeReservedInstancesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeReservedInstancesRequest#OfferingClass
   */
  readonly offeringClass?: string;

  /**
   * @schema Ec2DescribeReservedInstancesRequest#ReservedInstancesIds
   */
  readonly reservedInstancesIds?: string[];

  /**
   * @schema Ec2DescribeReservedInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeReservedInstancesRequest#OfferingType
   */
  readonly offeringType?: string;

}

/**
 * Converts an object of type 'Ec2DescribeReservedInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReservedInstancesRequest(obj: Ec2DescribeReservedInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'OfferingClass': obj.offeringClass,
    'ReservedInstancesIds': obj.reservedInstancesIds?.map(y => y),
    'DryRun': obj.dryRun,
    'OfferingType': obj.offeringType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReservedInstancesResult
 */
export interface Ec2DescribeReservedInstancesResult {
  /**
   * @schema Ec2DescribeReservedInstancesResult#ReservedInstances
   */
  readonly reservedInstances?: Ec2ReservedInstances[];

}

/**
 * Converts an object of type 'Ec2DescribeReservedInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReservedInstancesResult(obj: Ec2DescribeReservedInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstances': obj.reservedInstances?.map(y => toJson_Ec2ReservedInstances(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReservedInstancesListingsRequest
 */
export interface Ec2DescribeReservedInstancesListingsRequest {
  /**
   * @schema Ec2DescribeReservedInstancesListingsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeReservedInstancesListingsRequest#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

  /**
   * @schema Ec2DescribeReservedInstancesListingsRequest#ReservedInstancesListingId
   */
  readonly reservedInstancesListingId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeReservedInstancesListingsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReservedInstancesListingsRequest(obj: Ec2DescribeReservedInstancesListingsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'ReservedInstancesId': obj.reservedInstancesId,
    'ReservedInstancesListingId': obj.reservedInstancesListingId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReservedInstancesListingsResult
 */
export interface Ec2DescribeReservedInstancesListingsResult {
  /**
   * @schema Ec2DescribeReservedInstancesListingsResult#ReservedInstancesListings
   */
  readonly reservedInstancesListings?: Ec2ReservedInstancesListing[];

}

/**
 * Converts an object of type 'Ec2DescribeReservedInstancesListingsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReservedInstancesListingsResult(obj: Ec2DescribeReservedInstancesListingsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesListings': obj.reservedInstancesListings?.map(y => toJson_Ec2ReservedInstancesListing(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReservedInstancesModificationsRequest
 */
export interface Ec2DescribeReservedInstancesModificationsRequest {
  /**
   * @schema Ec2DescribeReservedInstancesModificationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeReservedInstancesModificationsRequest#ReservedInstancesModificationIds
   */
  readonly reservedInstancesModificationIds?: string[];

  /**
   * @schema Ec2DescribeReservedInstancesModificationsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeReservedInstancesModificationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReservedInstancesModificationsRequest(obj: Ec2DescribeReservedInstancesModificationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'ReservedInstancesModificationIds': obj.reservedInstancesModificationIds?.map(y => y),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReservedInstancesModificationsResult
 */
export interface Ec2DescribeReservedInstancesModificationsResult {
  /**
   * @schema Ec2DescribeReservedInstancesModificationsResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeReservedInstancesModificationsResult#ReservedInstancesModifications
   */
  readonly reservedInstancesModifications?: Ec2ReservedInstancesModification[];

}

/**
 * Converts an object of type 'Ec2DescribeReservedInstancesModificationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReservedInstancesModificationsResult(obj: Ec2DescribeReservedInstancesModificationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'ReservedInstancesModifications': obj.reservedInstancesModifications?.map(y => toJson_Ec2ReservedInstancesModification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReservedInstancesOfferingsRequest
 */
export interface Ec2DescribeReservedInstancesOfferingsRequest {
  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#IncludeMarketplace
   */
  readonly includeMarketplace?: boolean;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#MaxDuration
   */
  readonly maxDuration?: number;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#MaxInstanceCount
   */
  readonly maxInstanceCount?: number;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#MinDuration
   */
  readonly minDuration?: number;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#OfferingClass
   */
  readonly offeringClass?: string;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#ProductDescription
   */
  readonly productDescription?: string;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#ReservedInstancesOfferingIds
   */
  readonly reservedInstancesOfferingIds?: string[];

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#InstanceTenancy
   */
  readonly instanceTenancy?: string;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsRequest#OfferingType
   */
  readonly offeringType?: string;

}

/**
 * Converts an object of type 'Ec2DescribeReservedInstancesOfferingsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReservedInstancesOfferingsRequest(obj: Ec2DescribeReservedInstancesOfferingsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'IncludeMarketplace': obj.includeMarketplace,
    'InstanceType': obj.instanceType,
    'MaxDuration': obj.maxDuration,
    'MaxInstanceCount': obj.maxInstanceCount,
    'MinDuration': obj.minDuration,
    'OfferingClass': obj.offeringClass,
    'ProductDescription': obj.productDescription,
    'ReservedInstancesOfferingIds': obj.reservedInstancesOfferingIds?.map(y => y),
    'DryRun': obj.dryRun,
    'InstanceTenancy': obj.instanceTenancy,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'OfferingType': obj.offeringType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeReservedInstancesOfferingsResult
 */
export interface Ec2DescribeReservedInstancesOfferingsResult {
  /**
   * @schema Ec2DescribeReservedInstancesOfferingsResult#ReservedInstancesOfferings
   */
  readonly reservedInstancesOfferings?: Ec2ReservedInstancesOffering[];

  /**
   * @schema Ec2DescribeReservedInstancesOfferingsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeReservedInstancesOfferingsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeReservedInstancesOfferingsResult(obj: Ec2DescribeReservedInstancesOfferingsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesOfferings': obj.reservedInstancesOfferings?.map(y => toJson_Ec2ReservedInstancesOffering(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeRouteTablesRequest
 */
export interface Ec2DescribeRouteTablesRequest {
  /**
   * @schema Ec2DescribeRouteTablesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeRouteTablesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeRouteTablesRequest#RouteTableIds
   */
  readonly routeTableIds?: string[];

  /**
   * @schema Ec2DescribeRouteTablesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeRouteTablesRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeRouteTablesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeRouteTablesRequest(obj: Ec2DescribeRouteTablesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'RouteTableIds': obj.routeTableIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeRouteTablesResult
 */
export interface Ec2DescribeRouteTablesResult {
  /**
   * @schema Ec2DescribeRouteTablesResult#RouteTables
   */
  readonly routeTables?: Ec2RouteTable[];

  /**
   * @schema Ec2DescribeRouteTablesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeRouteTablesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeRouteTablesResult(obj: Ec2DescribeRouteTablesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'RouteTables': obj.routeTables?.map(y => toJson_Ec2RouteTable(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeScheduledInstanceAvailabilityRequest
 */
export interface Ec2DescribeScheduledInstanceAvailabilityRequest {
  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityRequest#FirstSlotStartTimeRange
   */
  readonly firstSlotStartTimeRange?: Ec2SlotDateTimeRangeRequest;

  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityRequest#MaxSlotDurationInHours
   */
  readonly maxSlotDurationInHours?: number;

  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityRequest#MinSlotDurationInHours
   */
  readonly minSlotDurationInHours?: number;

  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityRequest#Recurrence
   */
  readonly recurrence?: Ec2ScheduledInstanceRecurrenceRequest;

}

/**
 * Converts an object of type 'Ec2DescribeScheduledInstanceAvailabilityRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeScheduledInstanceAvailabilityRequest(obj: Ec2DescribeScheduledInstanceAvailabilityRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'FirstSlotStartTimeRange': toJson_Ec2SlotDateTimeRangeRequest(obj.firstSlotStartTimeRange),
    'MaxResults': obj.maxResults,
    'MaxSlotDurationInHours': obj.maxSlotDurationInHours,
    'MinSlotDurationInHours': obj.minSlotDurationInHours,
    'NextToken': obj.nextToken,
    'Recurrence': toJson_Ec2ScheduledInstanceRecurrenceRequest(obj.recurrence),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeScheduledInstanceAvailabilityResult
 */
export interface Ec2DescribeScheduledInstanceAvailabilityResult {
  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeScheduledInstanceAvailabilityResult#ScheduledInstanceAvailabilitySet
   */
  readonly scheduledInstanceAvailabilitySet?: Ec2ScheduledInstanceAvailability[];

}

/**
 * Converts an object of type 'Ec2DescribeScheduledInstanceAvailabilityResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeScheduledInstanceAvailabilityResult(obj: Ec2DescribeScheduledInstanceAvailabilityResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'ScheduledInstanceAvailabilitySet': obj.scheduledInstanceAvailabilitySet?.map(y => toJson_Ec2ScheduledInstanceAvailability(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeScheduledInstancesRequest
 */
export interface Ec2DescribeScheduledInstancesRequest {
  /**
   * @schema Ec2DescribeScheduledInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeScheduledInstancesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeScheduledInstancesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeScheduledInstancesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeScheduledInstancesRequest#ScheduledInstanceIds
   */
  readonly scheduledInstanceIds?: string[];

  /**
   * @schema Ec2DescribeScheduledInstancesRequest#SlotStartTimeRange
   */
  readonly slotStartTimeRange?: Ec2SlotStartTimeRangeRequest;

}

/**
 * Converts an object of type 'Ec2DescribeScheduledInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeScheduledInstancesRequest(obj: Ec2DescribeScheduledInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'ScheduledInstanceIds': obj.scheduledInstanceIds?.map(y => y),
    'SlotStartTimeRange': toJson_Ec2SlotStartTimeRangeRequest(obj.slotStartTimeRange),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeScheduledInstancesResult
 */
export interface Ec2DescribeScheduledInstancesResult {
  /**
   * @schema Ec2DescribeScheduledInstancesResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeScheduledInstancesResult#ScheduledInstanceSet
   */
  readonly scheduledInstanceSet?: Ec2ScheduledInstance[];

}

/**
 * Converts an object of type 'Ec2DescribeScheduledInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeScheduledInstancesResult(obj: Ec2DescribeScheduledInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'ScheduledInstanceSet': obj.scheduledInstanceSet?.map(y => toJson_Ec2ScheduledInstance(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSecurityGroupReferencesRequest
 */
export interface Ec2DescribeSecurityGroupReferencesRequest {
  /**
   * @schema Ec2DescribeSecurityGroupReferencesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSecurityGroupReferencesRequest#GroupId
   */
  readonly groupId?: string[];

}

/**
 * Converts an object of type 'Ec2DescribeSecurityGroupReferencesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSecurityGroupReferencesRequest(obj: Ec2DescribeSecurityGroupReferencesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'GroupId': obj.groupId?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSecurityGroupReferencesResult
 */
export interface Ec2DescribeSecurityGroupReferencesResult {
  /**
   * @schema Ec2DescribeSecurityGroupReferencesResult#SecurityGroupReferenceSet
   */
  readonly securityGroupReferenceSet?: Ec2SecurityGroupReference[];

}

/**
 * Converts an object of type 'Ec2DescribeSecurityGroupReferencesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSecurityGroupReferencesResult(obj: Ec2DescribeSecurityGroupReferencesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupReferenceSet': obj.securityGroupReferenceSet?.map(y => toJson_Ec2SecurityGroupReference(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSecurityGroupRulesRequest
 */
export interface Ec2DescribeSecurityGroupRulesRequest {
  /**
   * @schema Ec2DescribeSecurityGroupRulesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeSecurityGroupRulesRequest#SecurityGroupRuleIds
   */
  readonly securityGroupRuleIds?: string[];

  /**
   * @schema Ec2DescribeSecurityGroupRulesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSecurityGroupRulesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSecurityGroupRulesRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeSecurityGroupRulesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSecurityGroupRulesRequest(obj: Ec2DescribeSecurityGroupRulesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'SecurityGroupRuleIds': obj.securityGroupRuleIds?.map(y => y),
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSecurityGroupRulesResult
 */
export interface Ec2DescribeSecurityGroupRulesResult {
  /**
   * @schema Ec2DescribeSecurityGroupRulesResult#SecurityGroupRules
   */
  readonly securityGroupRules?: Ec2SecurityGroupRule[];

  /**
   * @schema Ec2DescribeSecurityGroupRulesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSecurityGroupRulesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSecurityGroupRulesResult(obj: Ec2DescribeSecurityGroupRulesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupRules': obj.securityGroupRules?.map(y => toJson_Ec2SecurityGroupRule(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSecurityGroupsRequest
 */
export interface Ec2DescribeSecurityGroupsRequest {
  /**
   * @schema Ec2DescribeSecurityGroupsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeSecurityGroupsRequest#GroupIds
   */
  readonly groupIds?: string[];

  /**
   * @schema Ec2DescribeSecurityGroupsRequest#GroupNames
   */
  readonly groupNames?: string[];

  /**
   * @schema Ec2DescribeSecurityGroupsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSecurityGroupsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSecurityGroupsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeSecurityGroupsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSecurityGroupsRequest(obj: Ec2DescribeSecurityGroupsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'GroupIds': obj.groupIds?.map(y => y),
    'GroupNames': obj.groupNames?.map(y => y),
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSecurityGroupsResult
 */
export interface Ec2DescribeSecurityGroupsResult {
  /**
   * @schema Ec2DescribeSecurityGroupsResult#SecurityGroups
   */
  readonly securityGroups?: Ec2SecurityGroup[];

  /**
   * @schema Ec2DescribeSecurityGroupsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSecurityGroupsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSecurityGroupsResult(obj: Ec2DescribeSecurityGroupsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroups': obj.securityGroups?.map(y => toJson_Ec2SecurityGroup(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSnapshotAttributeRequest
 */
export interface Ec2DescribeSnapshotAttributeRequest {
  /**
   * @schema Ec2DescribeSnapshotAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2DescribeSnapshotAttributeRequest#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2DescribeSnapshotAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeSnapshotAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSnapshotAttributeRequest(obj: Ec2DescribeSnapshotAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'SnapshotId': obj.snapshotId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSnapshotAttributeResult
 */
export interface Ec2DescribeSnapshotAttributeResult {
  /**
   * @schema Ec2DescribeSnapshotAttributeResult#CreateVolumePermissions
   */
  readonly createVolumePermissions?: Ec2CreateVolumePermission[];

  /**
   * @schema Ec2DescribeSnapshotAttributeResult#ProductCodes
   */
  readonly productCodes?: Ec2ProductCode[];

  /**
   * @schema Ec2DescribeSnapshotAttributeResult#SnapshotId
   */
  readonly snapshotId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSnapshotAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSnapshotAttributeResult(obj: Ec2DescribeSnapshotAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CreateVolumePermissions': obj.createVolumePermissions?.map(y => toJson_Ec2CreateVolumePermission(y)),
    'ProductCodes': obj.productCodes?.map(y => toJson_Ec2ProductCode(y)),
    'SnapshotId': obj.snapshotId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSnapshotsRequest
 */
export interface Ec2DescribeSnapshotsRequest {
  /**
   * @schema Ec2DescribeSnapshotsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeSnapshotsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeSnapshotsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSnapshotsRequest#OwnerIds
   */
  readonly ownerIds?: string[];

  /**
   * @schema Ec2DescribeSnapshotsRequest#RestorableByUserIds
   */
  readonly restorableByUserIds?: string[];

  /**
   * @schema Ec2DescribeSnapshotsRequest#SnapshotIds
   */
  readonly snapshotIds?: string[];

  /**
   * @schema Ec2DescribeSnapshotsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeSnapshotsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSnapshotsRequest(obj: Ec2DescribeSnapshotsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'OwnerIds': obj.ownerIds?.map(y => y),
    'RestorableByUserIds': obj.restorableByUserIds?.map(y => y),
    'SnapshotIds': obj.snapshotIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSnapshotsResult
 */
export interface Ec2DescribeSnapshotsResult {
  /**
   * @schema Ec2DescribeSnapshotsResult#Snapshots
   */
  readonly snapshots?: Ec2Snapshot[];

  /**
   * @schema Ec2DescribeSnapshotsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSnapshotsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSnapshotsResult(obj: Ec2DescribeSnapshotsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Snapshots': obj.snapshots?.map(y => toJson_Ec2Snapshot(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotDatafeedSubscriptionRequest
 */
export interface Ec2DescribeSpotDatafeedSubscriptionRequest {
  /**
   * @schema Ec2DescribeSpotDatafeedSubscriptionRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeSpotDatafeedSubscriptionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotDatafeedSubscriptionRequest(obj: Ec2DescribeSpotDatafeedSubscriptionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotDatafeedSubscriptionResult
 */
export interface Ec2DescribeSpotDatafeedSubscriptionResult {
  /**
   * @schema Ec2DescribeSpotDatafeedSubscriptionResult#SpotDatafeedSubscription
   */
  readonly spotDatafeedSubscription?: Ec2SpotDatafeedSubscription;

}

/**
 * Converts an object of type 'Ec2DescribeSpotDatafeedSubscriptionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotDatafeedSubscriptionResult(obj: Ec2DescribeSpotDatafeedSubscriptionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SpotDatafeedSubscription': toJson_Ec2SpotDatafeedSubscription(obj.spotDatafeedSubscription),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotFleetInstancesRequest
 */
export interface Ec2DescribeSpotFleetInstancesRequest {
  /**
   * @schema Ec2DescribeSpotFleetInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSpotFleetInstancesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeSpotFleetInstancesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotFleetInstancesRequest#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSpotFleetInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotFleetInstancesRequest(obj: Ec2DescribeSpotFleetInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'SpotFleetRequestId': obj.spotFleetRequestId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotFleetInstancesResponse
 */
export interface Ec2DescribeSpotFleetInstancesResponse {
  /**
   * @schema Ec2DescribeSpotFleetInstancesResponse#ActiveInstances
   */
  readonly activeInstances?: Ec2ActiveInstance[];

  /**
   * @schema Ec2DescribeSpotFleetInstancesResponse#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotFleetInstancesResponse#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSpotFleetInstancesResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotFleetInstancesResponse(obj: Ec2DescribeSpotFleetInstancesResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ActiveInstances': obj.activeInstances?.map(y => toJson_Ec2ActiveInstance(y)),
    'NextToken': obj.nextToken,
    'SpotFleetRequestId': obj.spotFleetRequestId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotFleetRequestHistoryRequest
 */
export interface Ec2DescribeSpotFleetRequestHistoryRequest {
  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryRequest#EventType
   */
  readonly eventType?: string;

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryRequest#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryRequest#StartTime
   */
  readonly startTime?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSpotFleetRequestHistoryRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotFleetRequestHistoryRequest(obj: Ec2DescribeSpotFleetRequestHistoryRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'EventType': obj.eventType,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'SpotFleetRequestId': obj.spotFleetRequestId,
    'StartTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotFleetRequestHistoryResponse
 */
export interface Ec2DescribeSpotFleetRequestHistoryResponse {
  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryResponse#HistoryRecords
   */
  readonly historyRecords?: Ec2HistoryRecord[];

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryResponse#LastEvaluatedTime
   */
  readonly lastEvaluatedTime?: string;

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryResponse#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryResponse#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

  /**
   * @schema Ec2DescribeSpotFleetRequestHistoryResponse#StartTime
   */
  readonly startTime?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSpotFleetRequestHistoryResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotFleetRequestHistoryResponse(obj: Ec2DescribeSpotFleetRequestHistoryResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HistoryRecords': obj.historyRecords?.map(y => toJson_Ec2HistoryRecord(y)),
    'LastEvaluatedTime': obj.lastEvaluatedTime,
    'NextToken': obj.nextToken,
    'SpotFleetRequestId': obj.spotFleetRequestId,
    'StartTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotFleetRequestsRequest
 */
export interface Ec2DescribeSpotFleetRequestsRequest {
  /**
   * @schema Ec2DescribeSpotFleetRequestsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSpotFleetRequestsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeSpotFleetRequestsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotFleetRequestsRequest#SpotFleetRequestIds
   */
  readonly spotFleetRequestIds?: string[];

}

/**
 * Converts an object of type 'Ec2DescribeSpotFleetRequestsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotFleetRequestsRequest(obj: Ec2DescribeSpotFleetRequestsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'SpotFleetRequestIds': obj.spotFleetRequestIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotFleetRequestsResponse
 */
export interface Ec2DescribeSpotFleetRequestsResponse {
  /**
   * @schema Ec2DescribeSpotFleetRequestsResponse#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotFleetRequestsResponse#SpotFleetRequestConfigs
   */
  readonly spotFleetRequestConfigs?: Ec2SpotFleetRequestConfig[];

}

/**
 * Converts an object of type 'Ec2DescribeSpotFleetRequestsResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotFleetRequestsResponse(obj: Ec2DescribeSpotFleetRequestsResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'SpotFleetRequestConfigs': obj.spotFleetRequestConfigs?.map(y => toJson_Ec2SpotFleetRequestConfig(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotInstanceRequestsRequest
 */
export interface Ec2DescribeSpotInstanceRequestsRequest {
  /**
   * @schema Ec2DescribeSpotInstanceRequestsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeSpotInstanceRequestsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSpotInstanceRequestsRequest#SpotInstanceRequestIds
   */
  readonly spotInstanceRequestIds?: string[];

  /**
   * @schema Ec2DescribeSpotInstanceRequestsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotInstanceRequestsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeSpotInstanceRequestsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotInstanceRequestsRequest(obj: Ec2DescribeSpotInstanceRequestsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'SpotInstanceRequestIds': obj.spotInstanceRequestIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotInstanceRequestsResult
 */
export interface Ec2DescribeSpotInstanceRequestsResult {
  /**
   * @schema Ec2DescribeSpotInstanceRequestsResult#SpotInstanceRequests
   */
  readonly spotInstanceRequests?: Ec2SpotInstanceRequest[];

  /**
   * @schema Ec2DescribeSpotInstanceRequestsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSpotInstanceRequestsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotInstanceRequestsResult(obj: Ec2DescribeSpotInstanceRequestsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SpotInstanceRequests': obj.spotInstanceRequests?.map(y => toJson_Ec2SpotInstanceRequest(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotPriceHistoryRequest
 */
export interface Ec2DescribeSpotPriceHistoryRequest {
  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#EndTime
   */
  readonly endTime?: string;

  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#InstanceTypes
   */
  readonly instanceTypes?: string[];

  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#ProductDescriptions
   */
  readonly productDescriptions?: string[];

  /**
   * @schema Ec2DescribeSpotPriceHistoryRequest#StartTime
   */
  readonly startTime?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSpotPriceHistoryRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotPriceHistoryRequest(obj: Ec2DescribeSpotPriceHistoryRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'AvailabilityZone': obj.availabilityZone,
    'DryRun': obj.dryRun,
    'EndTime': obj.endTime,
    'InstanceTypes': obj.instanceTypes?.map(y => y),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'ProductDescriptions': obj.productDescriptions?.map(y => y),
    'StartTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSpotPriceHistoryResult
 */
export interface Ec2DescribeSpotPriceHistoryResult {
  /**
   * @schema Ec2DescribeSpotPriceHistoryResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSpotPriceHistoryResult#SpotPriceHistory
   */
  readonly spotPriceHistory?: Ec2SpotPrice[];

}

/**
 * Converts an object of type 'Ec2DescribeSpotPriceHistoryResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSpotPriceHistoryResult(obj: Ec2DescribeSpotPriceHistoryResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'SpotPriceHistory': obj.spotPriceHistory?.map(y => toJson_Ec2SpotPrice(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeStaleSecurityGroupsRequest
 */
export interface Ec2DescribeStaleSecurityGroupsRequest {
  /**
   * @schema Ec2DescribeStaleSecurityGroupsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeStaleSecurityGroupsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeStaleSecurityGroupsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeStaleSecurityGroupsRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeStaleSecurityGroupsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeStaleSecurityGroupsRequest(obj: Ec2DescribeStaleSecurityGroupsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeStaleSecurityGroupsResult
 */
export interface Ec2DescribeStaleSecurityGroupsResult {
  /**
   * @schema Ec2DescribeStaleSecurityGroupsResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeStaleSecurityGroupsResult#StaleSecurityGroupSet
   */
  readonly staleSecurityGroupSet?: Ec2StaleSecurityGroup[];

}

/**
 * Converts an object of type 'Ec2DescribeStaleSecurityGroupsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeStaleSecurityGroupsResult(obj: Ec2DescribeStaleSecurityGroupsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'StaleSecurityGroupSet': obj.staleSecurityGroupSet?.map(y => toJson_Ec2StaleSecurityGroup(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeStoreImageTasksRequest
 */
export interface Ec2DescribeStoreImageTasksRequest {
  /**
   * @schema Ec2DescribeStoreImageTasksRequest#ImageIds
   */
  readonly imageIds?: string[];

  /**
   * @schema Ec2DescribeStoreImageTasksRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeStoreImageTasksRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeStoreImageTasksRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeStoreImageTasksRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeStoreImageTasksRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeStoreImageTasksRequest(obj: Ec2DescribeStoreImageTasksRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageIds': obj.imageIds?.map(y => y),
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeStoreImageTasksResult
 */
export interface Ec2DescribeStoreImageTasksResult {
  /**
   * @schema Ec2DescribeStoreImageTasksResult#StoreImageTaskResults
   */
  readonly storeImageTaskResults?: Ec2StoreImageTaskResult[];

  /**
   * @schema Ec2DescribeStoreImageTasksResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeStoreImageTasksResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeStoreImageTasksResult(obj: Ec2DescribeStoreImageTasksResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'StoreImageTaskResults': obj.storeImageTaskResults?.map(y => toJson_Ec2StoreImageTaskResult(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSubnetsRequest
 */
export interface Ec2DescribeSubnetsRequest {
  /**
   * @schema Ec2DescribeSubnetsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeSubnetsRequest#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2DescribeSubnetsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeSubnetsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeSubnetsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeSubnetsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSubnetsRequest(obj: Ec2DescribeSubnetsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'SubnetIds': obj.subnetIds?.map(y => y),
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeSubnetsResult
 */
export interface Ec2DescribeSubnetsResult {
  /**
   * @schema Ec2DescribeSubnetsResult#Subnets
   */
  readonly subnets?: Ec2Subnet[];

  /**
   * @schema Ec2DescribeSubnetsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeSubnetsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeSubnetsResult(obj: Ec2DescribeSubnetsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Subnets': obj.subnets?.map(y => toJson_Ec2Subnet(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTagsRequest
 */
export interface Ec2DescribeTagsRequest {
  /**
   * @schema Ec2DescribeTagsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeTagsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTagsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTagsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTagsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTagsRequest(obj: Ec2DescribeTagsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTagsResult
 */
export interface Ec2DescribeTagsResult {
  /**
   * @schema Ec2DescribeTagsResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTagsResult#Tags
   */
  readonly tags?: Ec2TagDescription[];

}

/**
 * Converts an object of type 'Ec2DescribeTagsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTagsResult(obj: Ec2DescribeTagsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'Tags': obj.tags?.map(y => toJson_Ec2TagDescription(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTrafficMirrorFiltersRequest
 */
export interface Ec2DescribeTrafficMirrorFiltersRequest {
  /**
   * @schema Ec2DescribeTrafficMirrorFiltersRequest#TrafficMirrorFilterIds
   */
  readonly trafficMirrorFilterIds?: string[];

  /**
   * @schema Ec2DescribeTrafficMirrorFiltersRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeTrafficMirrorFiltersRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTrafficMirrorFiltersRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTrafficMirrorFiltersRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTrafficMirrorFiltersRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTrafficMirrorFiltersRequest(obj: Ec2DescribeTrafficMirrorFiltersRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterIds': obj.trafficMirrorFilterIds?.map(y => y),
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTrafficMirrorFiltersResult
 */
export interface Ec2DescribeTrafficMirrorFiltersResult {
  /**
   * @schema Ec2DescribeTrafficMirrorFiltersResult#TrafficMirrorFilters
   */
  readonly trafficMirrorFilters?: Ec2TrafficMirrorFilter[];

  /**
   * @schema Ec2DescribeTrafficMirrorFiltersResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTrafficMirrorFiltersResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTrafficMirrorFiltersResult(obj: Ec2DescribeTrafficMirrorFiltersResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilters': obj.trafficMirrorFilters?.map(y => toJson_Ec2TrafficMirrorFilter(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTrafficMirrorSessionsRequest
 */
export interface Ec2DescribeTrafficMirrorSessionsRequest {
  /**
   * @schema Ec2DescribeTrafficMirrorSessionsRequest#TrafficMirrorSessionIds
   */
  readonly trafficMirrorSessionIds?: string[];

  /**
   * @schema Ec2DescribeTrafficMirrorSessionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeTrafficMirrorSessionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTrafficMirrorSessionsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTrafficMirrorSessionsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTrafficMirrorSessionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTrafficMirrorSessionsRequest(obj: Ec2DescribeTrafficMirrorSessionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorSessionIds': obj.trafficMirrorSessionIds?.map(y => y),
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTrafficMirrorSessionsResult
 */
export interface Ec2DescribeTrafficMirrorSessionsResult {
  /**
   * @schema Ec2DescribeTrafficMirrorSessionsResult#TrafficMirrorSessions
   */
  readonly trafficMirrorSessions?: Ec2TrafficMirrorSession[];

  /**
   * @schema Ec2DescribeTrafficMirrorSessionsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTrafficMirrorSessionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTrafficMirrorSessionsResult(obj: Ec2DescribeTrafficMirrorSessionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorSessions': obj.trafficMirrorSessions?.map(y => toJson_Ec2TrafficMirrorSession(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTrafficMirrorTargetsRequest
 */
export interface Ec2DescribeTrafficMirrorTargetsRequest {
  /**
   * @schema Ec2DescribeTrafficMirrorTargetsRequest#TrafficMirrorTargetIds
   */
  readonly trafficMirrorTargetIds?: string[];

  /**
   * @schema Ec2DescribeTrafficMirrorTargetsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeTrafficMirrorTargetsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTrafficMirrorTargetsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTrafficMirrorTargetsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTrafficMirrorTargetsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTrafficMirrorTargetsRequest(obj: Ec2DescribeTrafficMirrorTargetsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorTargetIds': obj.trafficMirrorTargetIds?.map(y => y),
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTrafficMirrorTargetsResult
 */
export interface Ec2DescribeTrafficMirrorTargetsResult {
  /**
   * @schema Ec2DescribeTrafficMirrorTargetsResult#TrafficMirrorTargets
   */
  readonly trafficMirrorTargets?: Ec2TrafficMirrorTarget[];

  /**
   * @schema Ec2DescribeTrafficMirrorTargetsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTrafficMirrorTargetsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTrafficMirrorTargetsResult(obj: Ec2DescribeTrafficMirrorTargetsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorTargets': obj.trafficMirrorTargets?.map(y => toJson_Ec2TrafficMirrorTarget(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayAttachmentsRequest
 */
export interface Ec2DescribeTransitGatewayAttachmentsRequest {
  /**
   * @schema Ec2DescribeTransitGatewayAttachmentsRequest#TransitGatewayAttachmentIds
   */
  readonly transitGatewayAttachmentIds?: string[];

  /**
   * @schema Ec2DescribeTransitGatewayAttachmentsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTransitGatewayAttachmentsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTransitGatewayAttachmentsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTransitGatewayAttachmentsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayAttachmentsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayAttachmentsRequest(obj: Ec2DescribeTransitGatewayAttachmentsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentIds': obj.transitGatewayAttachmentIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayAttachmentsResult
 */
export interface Ec2DescribeTransitGatewayAttachmentsResult {
  /**
   * @schema Ec2DescribeTransitGatewayAttachmentsResult#TransitGatewayAttachments
   */
  readonly transitGatewayAttachments?: Ec2TransitGatewayAttachment[];

  /**
   * @schema Ec2DescribeTransitGatewayAttachmentsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayAttachmentsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayAttachmentsResult(obj: Ec2DescribeTransitGatewayAttachmentsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachments': obj.transitGatewayAttachments?.map(y => toJson_Ec2TransitGatewayAttachment(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayConnectPeersRequest
 */
export interface Ec2DescribeTransitGatewayConnectPeersRequest {
  /**
   * @schema Ec2DescribeTransitGatewayConnectPeersRequest#TransitGatewayConnectPeerIds
   */
  readonly transitGatewayConnectPeerIds?: string[];

  /**
   * @schema Ec2DescribeTransitGatewayConnectPeersRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTransitGatewayConnectPeersRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTransitGatewayConnectPeersRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTransitGatewayConnectPeersRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayConnectPeersRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayConnectPeersRequest(obj: Ec2DescribeTransitGatewayConnectPeersRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayConnectPeerIds': obj.transitGatewayConnectPeerIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayConnectPeersResult
 */
export interface Ec2DescribeTransitGatewayConnectPeersResult {
  /**
   * @schema Ec2DescribeTransitGatewayConnectPeersResult#TransitGatewayConnectPeers
   */
  readonly transitGatewayConnectPeers?: Ec2TransitGatewayConnectPeer[];

  /**
   * @schema Ec2DescribeTransitGatewayConnectPeersResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayConnectPeersResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayConnectPeersResult(obj: Ec2DescribeTransitGatewayConnectPeersResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayConnectPeers': obj.transitGatewayConnectPeers?.map(y => toJson_Ec2TransitGatewayConnectPeer(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayConnectsRequest
 */
export interface Ec2DescribeTransitGatewayConnectsRequest {
  /**
   * @schema Ec2DescribeTransitGatewayConnectsRequest#TransitGatewayAttachmentIds
   */
  readonly transitGatewayAttachmentIds?: string[];

  /**
   * @schema Ec2DescribeTransitGatewayConnectsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTransitGatewayConnectsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTransitGatewayConnectsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTransitGatewayConnectsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayConnectsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayConnectsRequest(obj: Ec2DescribeTransitGatewayConnectsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentIds': obj.transitGatewayAttachmentIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayConnectsResult
 */
export interface Ec2DescribeTransitGatewayConnectsResult {
  /**
   * @schema Ec2DescribeTransitGatewayConnectsResult#TransitGatewayConnects
   */
  readonly transitGatewayConnects?: Ec2TransitGatewayConnect[];

  /**
   * @schema Ec2DescribeTransitGatewayConnectsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayConnectsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayConnectsResult(obj: Ec2DescribeTransitGatewayConnectsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayConnects': obj.transitGatewayConnects?.map(y => toJson_Ec2TransitGatewayConnect(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayMulticastDomainsRequest
 */
export interface Ec2DescribeTransitGatewayMulticastDomainsRequest {
  /**
   * @schema Ec2DescribeTransitGatewayMulticastDomainsRequest#TransitGatewayMulticastDomainIds
   */
  readonly transitGatewayMulticastDomainIds?: string[];

  /**
   * @schema Ec2DescribeTransitGatewayMulticastDomainsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTransitGatewayMulticastDomainsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTransitGatewayMulticastDomainsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTransitGatewayMulticastDomainsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayMulticastDomainsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayMulticastDomainsRequest(obj: Ec2DescribeTransitGatewayMulticastDomainsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainIds': obj.transitGatewayMulticastDomainIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayMulticastDomainsResult
 */
export interface Ec2DescribeTransitGatewayMulticastDomainsResult {
  /**
   * @schema Ec2DescribeTransitGatewayMulticastDomainsResult#TransitGatewayMulticastDomains
   */
  readonly transitGatewayMulticastDomains?: Ec2TransitGatewayMulticastDomain[];

  /**
   * @schema Ec2DescribeTransitGatewayMulticastDomainsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayMulticastDomainsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayMulticastDomainsResult(obj: Ec2DescribeTransitGatewayMulticastDomainsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomains': obj.transitGatewayMulticastDomains?.map(y => toJson_Ec2TransitGatewayMulticastDomain(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayPeeringAttachmentsRequest
 */
export interface Ec2DescribeTransitGatewayPeeringAttachmentsRequest {
  /**
   * @schema Ec2DescribeTransitGatewayPeeringAttachmentsRequest#TransitGatewayAttachmentIds
   */
  readonly transitGatewayAttachmentIds?: string[];

  /**
   * @schema Ec2DescribeTransitGatewayPeeringAttachmentsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTransitGatewayPeeringAttachmentsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTransitGatewayPeeringAttachmentsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTransitGatewayPeeringAttachmentsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayPeeringAttachmentsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayPeeringAttachmentsRequest(obj: Ec2DescribeTransitGatewayPeeringAttachmentsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentIds': obj.transitGatewayAttachmentIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayPeeringAttachmentsResult
 */
export interface Ec2DescribeTransitGatewayPeeringAttachmentsResult {
  /**
   * @schema Ec2DescribeTransitGatewayPeeringAttachmentsResult#TransitGatewayPeeringAttachments
   */
  readonly transitGatewayPeeringAttachments?: Ec2TransitGatewayPeeringAttachment[];

  /**
   * @schema Ec2DescribeTransitGatewayPeeringAttachmentsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayPeeringAttachmentsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayPeeringAttachmentsResult(obj: Ec2DescribeTransitGatewayPeeringAttachmentsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPeeringAttachments': obj.transitGatewayPeeringAttachments?.map(y => toJson_Ec2TransitGatewayPeeringAttachment(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayRouteTablesRequest
 */
export interface Ec2DescribeTransitGatewayRouteTablesRequest {
  /**
   * @schema Ec2DescribeTransitGatewayRouteTablesRequest#TransitGatewayRouteTableIds
   */
  readonly transitGatewayRouteTableIds?: string[];

  /**
   * @schema Ec2DescribeTransitGatewayRouteTablesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTransitGatewayRouteTablesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTransitGatewayRouteTablesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTransitGatewayRouteTablesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayRouteTablesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayRouteTablesRequest(obj: Ec2DescribeTransitGatewayRouteTablesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableIds': obj.transitGatewayRouteTableIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayRouteTablesResult
 */
export interface Ec2DescribeTransitGatewayRouteTablesResult {
  /**
   * @schema Ec2DescribeTransitGatewayRouteTablesResult#TransitGatewayRouteTables
   */
  readonly transitGatewayRouteTables?: Ec2TransitGatewayRouteTable[];

  /**
   * @schema Ec2DescribeTransitGatewayRouteTablesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayRouteTablesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayRouteTablesResult(obj: Ec2DescribeTransitGatewayRouteTablesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTables': obj.transitGatewayRouteTables?.map(y => toJson_Ec2TransitGatewayRouteTable(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayVpcAttachmentsRequest
 */
export interface Ec2DescribeTransitGatewayVpcAttachmentsRequest {
  /**
   * @schema Ec2DescribeTransitGatewayVpcAttachmentsRequest#TransitGatewayAttachmentIds
   */
  readonly transitGatewayAttachmentIds?: string[];

  /**
   * @schema Ec2DescribeTransitGatewayVpcAttachmentsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTransitGatewayVpcAttachmentsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTransitGatewayVpcAttachmentsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTransitGatewayVpcAttachmentsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayVpcAttachmentsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayVpcAttachmentsRequest(obj: Ec2DescribeTransitGatewayVpcAttachmentsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentIds': obj.transitGatewayAttachmentIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewayVpcAttachmentsResult
 */
export interface Ec2DescribeTransitGatewayVpcAttachmentsResult {
  /**
   * @schema Ec2DescribeTransitGatewayVpcAttachmentsResult#TransitGatewayVpcAttachments
   */
  readonly transitGatewayVpcAttachments?: Ec2TransitGatewayVpcAttachment[];

  /**
   * @schema Ec2DescribeTransitGatewayVpcAttachmentsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewayVpcAttachmentsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewayVpcAttachmentsResult(obj: Ec2DescribeTransitGatewayVpcAttachmentsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayVpcAttachments': obj.transitGatewayVpcAttachments?.map(y => toJson_Ec2TransitGatewayVpcAttachment(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewaysRequest
 */
export interface Ec2DescribeTransitGatewaysRequest {
  /**
   * @schema Ec2DescribeTransitGatewaysRequest#TransitGatewayIds
   */
  readonly transitGatewayIds?: string[];

  /**
   * @schema Ec2DescribeTransitGatewaysRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTransitGatewaysRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeTransitGatewaysRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTransitGatewaysRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewaysRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewaysRequest(obj: Ec2DescribeTransitGatewaysRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayIds': obj.transitGatewayIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTransitGatewaysResult
 */
export interface Ec2DescribeTransitGatewaysResult {
  /**
   * @schema Ec2DescribeTransitGatewaysResult#TransitGateways
   */
  readonly transitGateways?: Ec2TransitGateway[];

  /**
   * @schema Ec2DescribeTransitGatewaysResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTransitGatewaysResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTransitGatewaysResult(obj: Ec2DescribeTransitGatewaysResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGateways': obj.transitGateways?.map(y => toJson_Ec2TransitGateway(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTrunkInterfaceAssociationsRequest
 */
export interface Ec2DescribeTrunkInterfaceAssociationsRequest {
  /**
   * @schema Ec2DescribeTrunkInterfaceAssociationsRequest#AssociationIds
   */
  readonly associationIds?: string[];

  /**
   * @schema Ec2DescribeTrunkInterfaceAssociationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeTrunkInterfaceAssociationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeTrunkInterfaceAssociationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeTrunkInterfaceAssociationsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeTrunkInterfaceAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTrunkInterfaceAssociationsRequest(obj: Ec2DescribeTrunkInterfaceAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationIds': obj.associationIds?.map(y => y),
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeTrunkInterfaceAssociationsResult
 */
export interface Ec2DescribeTrunkInterfaceAssociationsResult {
  /**
   * @schema Ec2DescribeTrunkInterfaceAssociationsResult#InterfaceAssociations
   */
  readonly interfaceAssociations?: Ec2TrunkInterfaceAssociation[];

  /**
   * @schema Ec2DescribeTrunkInterfaceAssociationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeTrunkInterfaceAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeTrunkInterfaceAssociationsResult(obj: Ec2DescribeTrunkInterfaceAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InterfaceAssociations': obj.interfaceAssociations?.map(y => toJson_Ec2TrunkInterfaceAssociation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVolumeAttributeRequest
 */
export interface Ec2DescribeVolumeAttributeRequest {
  /**
   * @schema Ec2DescribeVolumeAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2DescribeVolumeAttributeRequest#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2DescribeVolumeAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeVolumeAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVolumeAttributeRequest(obj: Ec2DescribeVolumeAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'VolumeId': obj.volumeId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVolumeAttributeResult
 */
export interface Ec2DescribeVolumeAttributeResult {
  /**
   * @schema Ec2DescribeVolumeAttributeResult#AutoEnableIO
   */
  readonly autoEnableIo?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2DescribeVolumeAttributeResult#ProductCodes
   */
  readonly productCodes?: Ec2ProductCode[];

  /**
   * @schema Ec2DescribeVolumeAttributeResult#VolumeId
   */
  readonly volumeId?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVolumeAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVolumeAttributeResult(obj: Ec2DescribeVolumeAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AutoEnableIO': toJson_Ec2AttributeBooleanValue(obj.autoEnableIo),
    'ProductCodes': obj.productCodes?.map(y => toJson_Ec2ProductCode(y)),
    'VolumeId': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVolumeStatusRequest
 */
export interface Ec2DescribeVolumeStatusRequest {
  /**
   * @schema Ec2DescribeVolumeStatusRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVolumeStatusRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVolumeStatusRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeVolumeStatusRequest#VolumeIds
   */
  readonly volumeIds?: string[];

  /**
   * @schema Ec2DescribeVolumeStatusRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeVolumeStatusRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVolumeStatusRequest(obj: Ec2DescribeVolumeStatusRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'VolumeIds': obj.volumeIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVolumeStatusResult
 */
export interface Ec2DescribeVolumeStatusResult {
  /**
   * @schema Ec2DescribeVolumeStatusResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeVolumeStatusResult#VolumeStatuses
   */
  readonly volumeStatuses?: Ec2VolumeStatusItem[];

}

/**
 * Converts an object of type 'Ec2DescribeVolumeStatusResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVolumeStatusResult(obj: Ec2DescribeVolumeStatusResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'VolumeStatuses': obj.volumeStatuses?.map(y => toJson_Ec2VolumeStatusItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVolumesRequest
 */
export interface Ec2DescribeVolumesRequest {
  /**
   * @schema Ec2DescribeVolumesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVolumesRequest#VolumeIds
   */
  readonly volumeIds?: string[];

  /**
   * @schema Ec2DescribeVolumesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVolumesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVolumesRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVolumesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVolumesRequest(obj: Ec2DescribeVolumesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'VolumeIds': obj.volumeIds?.map(y => y),
    'DryRun': obj.dryRun,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVolumesResult
 */
export interface Ec2DescribeVolumesResult {
  /**
   * @schema Ec2DescribeVolumesResult#Volumes
   */
  readonly volumes?: Ec2Volume[];

  /**
   * @schema Ec2DescribeVolumesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVolumesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVolumesResult(obj: Ec2DescribeVolumesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Volumes': obj.volumes?.map(y => toJson_Ec2Volume(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVolumesModificationsRequest
 */
export interface Ec2DescribeVolumesModificationsRequest {
  /**
   * @schema Ec2DescribeVolumesModificationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVolumesModificationsRequest#VolumeIds
   */
  readonly volumeIds?: string[];

  /**
   * @schema Ec2DescribeVolumesModificationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVolumesModificationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeVolumesModificationsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeVolumesModificationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVolumesModificationsRequest(obj: Ec2DescribeVolumesModificationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VolumeIds': obj.volumeIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVolumesModificationsResult
 */
export interface Ec2DescribeVolumesModificationsResult {
  /**
   * @schema Ec2DescribeVolumesModificationsResult#VolumesModifications
   */
  readonly volumesModifications?: Ec2VolumeModification[];

  /**
   * @schema Ec2DescribeVolumesModificationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVolumesModificationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVolumesModificationsResult(obj: Ec2DescribeVolumesModificationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VolumesModifications': obj.volumesModifications?.map(y => toJson_Ec2VolumeModification(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcAttributeRequest
 */
export interface Ec2DescribeVpcAttributeRequest {
  /**
   * @schema Ec2DescribeVpcAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2DescribeVpcAttributeRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2DescribeVpcAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeVpcAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcAttributeRequest(obj: Ec2DescribeVpcAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'VpcId': obj.vpcId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcAttributeResult
 */
export interface Ec2DescribeVpcAttributeResult {
  /**
   * @schema Ec2DescribeVpcAttributeResult#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2DescribeVpcAttributeResult#EnableDnsHostnames
   */
  readonly enableDnsHostnames?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2DescribeVpcAttributeResult#EnableDnsSupport
   */
  readonly enableDnsSupport?: Ec2AttributeBooleanValue;

}

/**
 * Converts an object of type 'Ec2DescribeVpcAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcAttributeResult(obj: Ec2DescribeVpcAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcId': obj.vpcId,
    'EnableDnsHostnames': toJson_Ec2AttributeBooleanValue(obj.enableDnsHostnames),
    'EnableDnsSupport': toJson_Ec2AttributeBooleanValue(obj.enableDnsSupport),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcClassicLinkRequest
 */
export interface Ec2DescribeVpcClassicLinkRequest {
  /**
   * @schema Ec2DescribeVpcClassicLinkRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcClassicLinkRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcClassicLinkRequest#VpcIds
   */
  readonly vpcIds?: string[];

}

/**
 * Converts an object of type 'Ec2DescribeVpcClassicLinkRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcClassicLinkRequest(obj: Ec2DescribeVpcClassicLinkRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'VpcIds': obj.vpcIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcClassicLinkResult
 */
export interface Ec2DescribeVpcClassicLinkResult {
  /**
   * @schema Ec2DescribeVpcClassicLinkResult#Vpcs
   */
  readonly vpcs?: Ec2VpcClassicLink[];

}

/**
 * Converts an object of type 'Ec2DescribeVpcClassicLinkResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcClassicLinkResult(obj: Ec2DescribeVpcClassicLinkResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Vpcs': obj.vpcs?.map(y => toJson_Ec2VpcClassicLink(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcClassicLinkDnsSupportRequest
 */
export interface Ec2DescribeVpcClassicLinkDnsSupportRequest {
  /**
   * @schema Ec2DescribeVpcClassicLinkDnsSupportRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVpcClassicLinkDnsSupportRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeVpcClassicLinkDnsSupportRequest#VpcIds
   */
  readonly vpcIds?: string[];

}

/**
 * Converts an object of type 'Ec2DescribeVpcClassicLinkDnsSupportRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcClassicLinkDnsSupportRequest(obj: Ec2DescribeVpcClassicLinkDnsSupportRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'VpcIds': obj.vpcIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcClassicLinkDnsSupportResult
 */
export interface Ec2DescribeVpcClassicLinkDnsSupportResult {
  /**
   * @schema Ec2DescribeVpcClassicLinkDnsSupportResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeVpcClassicLinkDnsSupportResult#Vpcs
   */
  readonly vpcs?: Ec2ClassicLinkDnsSupport[];

}

/**
 * Converts an object of type 'Ec2DescribeVpcClassicLinkDnsSupportResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcClassicLinkDnsSupportResult(obj: Ec2DescribeVpcClassicLinkDnsSupportResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'Vpcs': obj.vpcs?.map(y => toJson_Ec2ClassicLinkDnsSupport(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointConnectionNotificationsRequest
 */
export interface Ec2DescribeVpcEndpointConnectionNotificationsRequest {
  /**
   * @schema Ec2DescribeVpcEndpointConnectionNotificationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcEndpointConnectionNotificationsRequest#ConnectionNotificationId
   */
  readonly connectionNotificationId?: string;

  /**
   * @schema Ec2DescribeVpcEndpointConnectionNotificationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcEndpointConnectionNotificationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVpcEndpointConnectionNotificationsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointConnectionNotificationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointConnectionNotificationsRequest(obj: Ec2DescribeVpcEndpointConnectionNotificationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ConnectionNotificationId': obj.connectionNotificationId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointConnectionNotificationsResult
 */
export interface Ec2DescribeVpcEndpointConnectionNotificationsResult {
  /**
   * @schema Ec2DescribeVpcEndpointConnectionNotificationsResult#ConnectionNotificationSet
   */
  readonly connectionNotificationSet?: Ec2ConnectionNotification[];

  /**
   * @schema Ec2DescribeVpcEndpointConnectionNotificationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointConnectionNotificationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointConnectionNotificationsResult(obj: Ec2DescribeVpcEndpointConnectionNotificationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConnectionNotificationSet': obj.connectionNotificationSet?.map(y => toJson_Ec2ConnectionNotification(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointConnectionsRequest
 */
export interface Ec2DescribeVpcEndpointConnectionsRequest {
  /**
   * @schema Ec2DescribeVpcEndpointConnectionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcEndpointConnectionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcEndpointConnectionsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVpcEndpointConnectionsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointConnectionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointConnectionsRequest(obj: Ec2DescribeVpcEndpointConnectionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointConnectionsResult
 */
export interface Ec2DescribeVpcEndpointConnectionsResult {
  /**
   * @schema Ec2DescribeVpcEndpointConnectionsResult#VpcEndpointConnections
   */
  readonly vpcEndpointConnections?: Ec2VpcEndpointConnection[];

  /**
   * @schema Ec2DescribeVpcEndpointConnectionsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointConnectionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointConnectionsResult(obj: Ec2DescribeVpcEndpointConnectionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcEndpointConnections': obj.vpcEndpointConnections?.map(y => toJson_Ec2VpcEndpointConnection(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointServiceConfigurationsRequest
 */
export interface Ec2DescribeVpcEndpointServiceConfigurationsRequest {
  /**
   * @schema Ec2DescribeVpcEndpointServiceConfigurationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcEndpointServiceConfigurationsRequest#ServiceIds
   */
  readonly serviceIds?: string[];

  /**
   * @schema Ec2DescribeVpcEndpointServiceConfigurationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcEndpointServiceConfigurationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVpcEndpointServiceConfigurationsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointServiceConfigurationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointServiceConfigurationsRequest(obj: Ec2DescribeVpcEndpointServiceConfigurationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceIds': obj.serviceIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointServiceConfigurationsResult
 */
export interface Ec2DescribeVpcEndpointServiceConfigurationsResult {
  /**
   * @schema Ec2DescribeVpcEndpointServiceConfigurationsResult#ServiceConfigurations
   */
  readonly serviceConfigurations?: Ec2ServiceConfiguration[];

  /**
   * @schema Ec2DescribeVpcEndpointServiceConfigurationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointServiceConfigurationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointServiceConfigurationsResult(obj: Ec2DescribeVpcEndpointServiceConfigurationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ServiceConfigurations': obj.serviceConfigurations?.map(y => toJson_Ec2ServiceConfiguration(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointServicePermissionsRequest
 */
export interface Ec2DescribeVpcEndpointServicePermissionsRequest {
  /**
   * @schema Ec2DescribeVpcEndpointServicePermissionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcEndpointServicePermissionsRequest#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2DescribeVpcEndpointServicePermissionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcEndpointServicePermissionsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVpcEndpointServicePermissionsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointServicePermissionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointServicePermissionsRequest(obj: Ec2DescribeVpcEndpointServicePermissionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceId': obj.serviceId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointServicePermissionsResult
 */
export interface Ec2DescribeVpcEndpointServicePermissionsResult {
  /**
   * @schema Ec2DescribeVpcEndpointServicePermissionsResult#AllowedPrincipals
   */
  readonly allowedPrincipals?: Ec2AllowedPrincipal[];

  /**
   * @schema Ec2DescribeVpcEndpointServicePermissionsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointServicePermissionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointServicePermissionsResult(obj: Ec2DescribeVpcEndpointServicePermissionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllowedPrincipals': obj.allowedPrincipals?.map(y => toJson_Ec2AllowedPrincipal(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointServicesRequest
 */
export interface Ec2DescribeVpcEndpointServicesRequest {
  /**
   * @schema Ec2DescribeVpcEndpointServicesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcEndpointServicesRequest#ServiceNames
   */
  readonly serviceNames?: string[];

  /**
   * @schema Ec2DescribeVpcEndpointServicesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcEndpointServicesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVpcEndpointServicesRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointServicesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointServicesRequest(obj: Ec2DescribeVpcEndpointServicesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceNames': obj.serviceNames?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointServicesResult
 */
export interface Ec2DescribeVpcEndpointServicesResult {
  /**
   * @schema Ec2DescribeVpcEndpointServicesResult#ServiceNames
   */
  readonly serviceNames?: string[];

  /**
   * @schema Ec2DescribeVpcEndpointServicesResult#ServiceDetails
   */
  readonly serviceDetails?: Ec2ServiceDetail[];

  /**
   * @schema Ec2DescribeVpcEndpointServicesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointServicesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointServicesResult(obj: Ec2DescribeVpcEndpointServicesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ServiceNames': obj.serviceNames?.map(y => y),
    'ServiceDetails': obj.serviceDetails?.map(y => toJson_Ec2ServiceDetail(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointsRequest
 */
export interface Ec2DescribeVpcEndpointsRequest {
  /**
   * @schema Ec2DescribeVpcEndpointsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcEndpointsRequest#VpcEndpointIds
   */
  readonly vpcEndpointIds?: string[];

  /**
   * @schema Ec2DescribeVpcEndpointsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcEndpointsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2DescribeVpcEndpointsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointsRequest(obj: Ec2DescribeVpcEndpointsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcEndpointIds': obj.vpcEndpointIds?.map(y => y),
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcEndpointsResult
 */
export interface Ec2DescribeVpcEndpointsResult {
  /**
   * @schema Ec2DescribeVpcEndpointsResult#VpcEndpoints
   */
  readonly vpcEndpoints?: Ec2VpcEndpoint[];

  /**
   * @schema Ec2DescribeVpcEndpointsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcEndpointsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcEndpointsResult(obj: Ec2DescribeVpcEndpointsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcEndpoints': obj.vpcEndpoints?.map(y => toJson_Ec2VpcEndpoint(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcPeeringConnectionsRequest
 */
export interface Ec2DescribeVpcPeeringConnectionsRequest {
  /**
   * @schema Ec2DescribeVpcPeeringConnectionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcPeeringConnectionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcPeeringConnectionsRequest#VpcPeeringConnectionIds
   */
  readonly vpcPeeringConnectionIds?: string[];

  /**
   * @schema Ec2DescribeVpcPeeringConnectionsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeVpcPeeringConnectionsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeVpcPeeringConnectionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcPeeringConnectionsRequest(obj: Ec2DescribeVpcPeeringConnectionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'DryRun': obj.dryRun,
    'VpcPeeringConnectionIds': obj.vpcPeeringConnectionIds?.map(y => y),
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcPeeringConnectionsResult
 */
export interface Ec2DescribeVpcPeeringConnectionsResult {
  /**
   * @schema Ec2DescribeVpcPeeringConnectionsResult#VpcPeeringConnections
   */
  readonly vpcPeeringConnections?: Ec2VpcPeeringConnection[];

  /**
   * @schema Ec2DescribeVpcPeeringConnectionsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcPeeringConnectionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcPeeringConnectionsResult(obj: Ec2DescribeVpcPeeringConnectionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcPeeringConnections': obj.vpcPeeringConnections?.map(y => toJson_Ec2VpcPeeringConnection(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcsRequest
 */
export interface Ec2DescribeVpcsRequest {
  /**
   * @schema Ec2DescribeVpcsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpcsRequest#VpcIds
   */
  readonly vpcIds?: string[];

  /**
   * @schema Ec2DescribeVpcsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DescribeVpcsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2DescribeVpcsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2DescribeVpcsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcsRequest(obj: Ec2DescribeVpcsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'VpcIds': obj.vpcIds?.map(y => y),
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpcsResult
 */
export interface Ec2DescribeVpcsResult {
  /**
   * @schema Ec2DescribeVpcsResult#Vpcs
   */
  readonly vpcs?: Ec2Vpc[];

  /**
   * @schema Ec2DescribeVpcsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2DescribeVpcsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpcsResult(obj: Ec2DescribeVpcsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Vpcs': obj.vpcs?.map(y => toJson_Ec2Vpc(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpnConnectionsRequest
 */
export interface Ec2DescribeVpnConnectionsRequest {
  /**
   * @schema Ec2DescribeVpnConnectionsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpnConnectionsRequest#VpnConnectionIds
   */
  readonly vpnConnectionIds?: string[];

  /**
   * @schema Ec2DescribeVpnConnectionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeVpnConnectionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpnConnectionsRequest(obj: Ec2DescribeVpnConnectionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'VpnConnectionIds': obj.vpnConnectionIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpnConnectionsResult
 */
export interface Ec2DescribeVpnConnectionsResult {
  /**
   * @schema Ec2DescribeVpnConnectionsResult#VpnConnections
   */
  readonly vpnConnections?: Ec2VpnConnection[];

}

/**
 * Converts an object of type 'Ec2DescribeVpnConnectionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpnConnectionsResult(obj: Ec2DescribeVpnConnectionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnections': obj.vpnConnections?.map(y => toJson_Ec2VpnConnection(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpnGatewaysRequest
 */
export interface Ec2DescribeVpnGatewaysRequest {
  /**
   * @schema Ec2DescribeVpnGatewaysRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2DescribeVpnGatewaysRequest#VpnGatewayIds
   */
  readonly vpnGatewayIds?: string[];

  /**
   * @schema Ec2DescribeVpnGatewaysRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DescribeVpnGatewaysRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpnGatewaysRequest(obj: Ec2DescribeVpnGatewaysRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'VpnGatewayIds': obj.vpnGatewayIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeVpnGatewaysResult
 */
export interface Ec2DescribeVpnGatewaysResult {
  /**
   * @schema Ec2DescribeVpnGatewaysResult#VpnGateways
   */
  readonly vpnGateways?: Ec2VpnGateway[];

}

/**
 * Converts an object of type 'Ec2DescribeVpnGatewaysResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeVpnGatewaysResult(obj: Ec2DescribeVpnGatewaysResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnGateways': obj.vpnGateways?.map(y => toJson_Ec2VpnGateway(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DetachClassicLinkVpcRequest
 */
export interface Ec2DetachClassicLinkVpcRequest {
  /**
   * @schema Ec2DetachClassicLinkVpcRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DetachClassicLinkVpcRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2DetachClassicLinkVpcRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2DetachClassicLinkVpcRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DetachClassicLinkVpcRequest(obj: Ec2DetachClassicLinkVpcRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceId': obj.instanceId,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DetachClassicLinkVpcResult
 */
export interface Ec2DetachClassicLinkVpcResult {
  /**
   * @schema Ec2DetachClassicLinkVpcResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2DetachClassicLinkVpcResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DetachClassicLinkVpcResult(obj: Ec2DetachClassicLinkVpcResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DetachInternetGatewayRequest
 */
export interface Ec2DetachInternetGatewayRequest {
  /**
   * @schema Ec2DetachInternetGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DetachInternetGatewayRequest#InternetGatewayId
   */
  readonly internetGatewayId?: string;

  /**
   * @schema Ec2DetachInternetGatewayRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2DetachInternetGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DetachInternetGatewayRequest(obj: Ec2DetachInternetGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InternetGatewayId': obj.internetGatewayId,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DetachNetworkInterfaceRequest
 */
export interface Ec2DetachNetworkInterfaceRequest {
  /**
   * @schema Ec2DetachNetworkInterfaceRequest#AttachmentId
   */
  readonly attachmentId?: string;

  /**
   * @schema Ec2DetachNetworkInterfaceRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DetachNetworkInterfaceRequest#Force
   */
  readonly force?: boolean;

}

/**
 * Converts an object of type 'Ec2DetachNetworkInterfaceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DetachNetworkInterfaceRequest(obj: Ec2DetachNetworkInterfaceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttachmentId': obj.attachmentId,
    'DryRun': obj.dryRun,
    'Force': obj.force,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DetachVolumeRequest
 */
export interface Ec2DetachVolumeRequest {
  /**
   * @schema Ec2DetachVolumeRequest#Device
   */
  readonly device?: string;

  /**
   * @schema Ec2DetachVolumeRequest#Force
   */
  readonly force?: boolean;

  /**
   * @schema Ec2DetachVolumeRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2DetachVolumeRequest#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2DetachVolumeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DetachVolumeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DetachVolumeRequest(obj: Ec2DetachVolumeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Device': obj.device,
    'Force': obj.force,
    'InstanceId': obj.instanceId,
    'VolumeId': obj.volumeId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DetachVpnGatewayRequest
 */
export interface Ec2DetachVpnGatewayRequest {
  /**
   * @schema Ec2DetachVpnGatewayRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2DetachVpnGatewayRequest#VpnGatewayId
   */
  readonly vpnGatewayId?: string;

  /**
   * @schema Ec2DetachVpnGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DetachVpnGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DetachVpnGatewayRequest(obj: Ec2DetachVpnGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcId': obj.vpcId,
    'VpnGatewayId': obj.vpnGatewayId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableEbsEncryptionByDefaultRequest
 */
export interface Ec2DisableEbsEncryptionByDefaultRequest {
  /**
   * @schema Ec2DisableEbsEncryptionByDefaultRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableEbsEncryptionByDefaultRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableEbsEncryptionByDefaultRequest(obj: Ec2DisableEbsEncryptionByDefaultRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableEbsEncryptionByDefaultResult
 */
export interface Ec2DisableEbsEncryptionByDefaultResult {
  /**
   * @schema Ec2DisableEbsEncryptionByDefaultResult#EbsEncryptionByDefault
   */
  readonly ebsEncryptionByDefault?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableEbsEncryptionByDefaultResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableEbsEncryptionByDefaultResult(obj: Ec2DisableEbsEncryptionByDefaultResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EbsEncryptionByDefault': obj.ebsEncryptionByDefault,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableFastSnapshotRestoresRequest
 */
export interface Ec2DisableFastSnapshotRestoresRequest {
  /**
   * @schema Ec2DisableFastSnapshotRestoresRequest#AvailabilityZones
   */
  readonly availabilityZones?: string[];

  /**
   * @schema Ec2DisableFastSnapshotRestoresRequest#SourceSnapshotIds
   */
  readonly sourceSnapshotIds?: string[];

  /**
   * @schema Ec2DisableFastSnapshotRestoresRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableFastSnapshotRestoresRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableFastSnapshotRestoresRequest(obj: Ec2DisableFastSnapshotRestoresRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZones': obj.availabilityZones?.map(y => y),
    'SourceSnapshotIds': obj.sourceSnapshotIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableFastSnapshotRestoresResult
 */
export interface Ec2DisableFastSnapshotRestoresResult {
  /**
   * @schema Ec2DisableFastSnapshotRestoresResult#Successful
   */
  readonly successful?: Ec2DisableFastSnapshotRestoreSuccessItem[];

  /**
   * @schema Ec2DisableFastSnapshotRestoresResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2DisableFastSnapshotRestoreErrorItem[];

}

/**
 * Converts an object of type 'Ec2DisableFastSnapshotRestoresResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableFastSnapshotRestoresResult(obj: Ec2DisableFastSnapshotRestoresResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Successful': obj.successful?.map(y => toJson_Ec2DisableFastSnapshotRestoreSuccessItem(y)),
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2DisableFastSnapshotRestoreErrorItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableImageDeprecationRequest
 */
export interface Ec2DisableImageDeprecationRequest {
  /**
   * @schema Ec2DisableImageDeprecationRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2DisableImageDeprecationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableImageDeprecationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableImageDeprecationRequest(obj: Ec2DisableImageDeprecationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageId': obj.imageId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableImageDeprecationResult
 */
export interface Ec2DisableImageDeprecationResult {
  /**
   * @schema Ec2DisableImageDeprecationResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableImageDeprecationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableImageDeprecationResult(obj: Ec2DisableImageDeprecationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableSerialConsoleAccessRequest
 */
export interface Ec2DisableSerialConsoleAccessRequest {
  /**
   * @schema Ec2DisableSerialConsoleAccessRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableSerialConsoleAccessRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableSerialConsoleAccessRequest(obj: Ec2DisableSerialConsoleAccessRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableSerialConsoleAccessResult
 */
export interface Ec2DisableSerialConsoleAccessResult {
  /**
   * @schema Ec2DisableSerialConsoleAccessResult#SerialConsoleAccessEnabled
   */
  readonly serialConsoleAccessEnabled?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableSerialConsoleAccessResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableSerialConsoleAccessResult(obj: Ec2DisableSerialConsoleAccessResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SerialConsoleAccessEnabled': obj.serialConsoleAccessEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableTransitGatewayRouteTablePropagationRequest
 */
export interface Ec2DisableTransitGatewayRouteTablePropagationRequest {
  /**
   * @schema Ec2DisableTransitGatewayRouteTablePropagationRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2DisableTransitGatewayRouteTablePropagationRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2DisableTransitGatewayRouteTablePropagationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableTransitGatewayRouteTablePropagationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableTransitGatewayRouteTablePropagationRequest(obj: Ec2DisableTransitGatewayRouteTablePropagationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableTransitGatewayRouteTablePropagationResult
 */
export interface Ec2DisableTransitGatewayRouteTablePropagationResult {
  /**
   * @schema Ec2DisableTransitGatewayRouteTablePropagationResult#Propagation
   */
  readonly propagation?: Ec2TransitGatewayPropagation;

}

/**
 * Converts an object of type 'Ec2DisableTransitGatewayRouteTablePropagationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableTransitGatewayRouteTablePropagationResult(obj: Ec2DisableTransitGatewayRouteTablePropagationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Propagation': toJson_Ec2TransitGatewayPropagation(obj.propagation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableVgwRoutePropagationRequest
 */
export interface Ec2DisableVgwRoutePropagationRequest {
  /**
   * @schema Ec2DisableVgwRoutePropagationRequest#GatewayId
   */
  readonly gatewayId?: string;

  /**
   * @schema Ec2DisableVgwRoutePropagationRequest#RouteTableId
   */
  readonly routeTableId?: string;

  /**
   * @schema Ec2DisableVgwRoutePropagationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableVgwRoutePropagationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableVgwRoutePropagationRequest(obj: Ec2DisableVgwRoutePropagationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GatewayId': obj.gatewayId,
    'RouteTableId': obj.routeTableId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableVpcClassicLinkRequest
 */
export interface Ec2DisableVpcClassicLinkRequest {
  /**
   * @schema Ec2DisableVpcClassicLinkRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DisableVpcClassicLinkRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2DisableVpcClassicLinkRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableVpcClassicLinkRequest(obj: Ec2DisableVpcClassicLinkRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableVpcClassicLinkResult
 */
export interface Ec2DisableVpcClassicLinkResult {
  /**
   * @schema Ec2DisableVpcClassicLinkResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableVpcClassicLinkResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableVpcClassicLinkResult(obj: Ec2DisableVpcClassicLinkResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableVpcClassicLinkDnsSupportRequest
 */
export interface Ec2DisableVpcClassicLinkDnsSupportRequest {
  /**
   * @schema Ec2DisableVpcClassicLinkDnsSupportRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2DisableVpcClassicLinkDnsSupportRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableVpcClassicLinkDnsSupportRequest(obj: Ec2DisableVpcClassicLinkDnsSupportRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableVpcClassicLinkDnsSupportResult
 */
export interface Ec2DisableVpcClassicLinkDnsSupportResult {
  /**
   * @schema Ec2DisableVpcClassicLinkDnsSupportResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2DisableVpcClassicLinkDnsSupportResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableVpcClassicLinkDnsSupportResult(obj: Ec2DisableVpcClassicLinkDnsSupportResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateAddressRequest
 */
export interface Ec2DisassociateAddressRequest {
  /**
   * @schema Ec2DisassociateAddressRequest#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2DisassociateAddressRequest#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2DisassociateAddressRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisassociateAddressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateAddressRequest(obj: Ec2DisassociateAddressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'PublicIp': obj.publicIp,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateClientVpnTargetNetworkRequest
 */
export interface Ec2DisassociateClientVpnTargetNetworkRequest {
  /**
   * @schema Ec2DisassociateClientVpnTargetNetworkRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2DisassociateClientVpnTargetNetworkRequest#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2DisassociateClientVpnTargetNetworkRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisassociateClientVpnTargetNetworkRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateClientVpnTargetNetworkRequest(obj: Ec2DisassociateClientVpnTargetNetworkRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'AssociationId': obj.associationId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateClientVpnTargetNetworkResult
 */
export interface Ec2DisassociateClientVpnTargetNetworkResult {
  /**
   * @schema Ec2DisassociateClientVpnTargetNetworkResult#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2DisassociateClientVpnTargetNetworkResult#Status
   */
  readonly status?: Ec2AssociationStatus;

}

/**
 * Converts an object of type 'Ec2DisassociateClientVpnTargetNetworkResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateClientVpnTargetNetworkResult(obj: Ec2DisassociateClientVpnTargetNetworkResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'Status': toJson_Ec2AssociationStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateEnclaveCertificateIamRoleRequest
 */
export interface Ec2DisassociateEnclaveCertificateIamRoleRequest {
  /**
   * @schema Ec2DisassociateEnclaveCertificateIamRoleRequest#CertificateArn
   */
  readonly certificateArn?: string;

  /**
   * @schema Ec2DisassociateEnclaveCertificateIamRoleRequest#RoleArn
   */
  readonly roleArn?: string;

  /**
   * @schema Ec2DisassociateEnclaveCertificateIamRoleRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisassociateEnclaveCertificateIamRoleRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateEnclaveCertificateIamRoleRequest(obj: Ec2DisassociateEnclaveCertificateIamRoleRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CertificateArn': obj.certificateArn,
    'RoleArn': obj.roleArn,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateEnclaveCertificateIamRoleResult
 */
export interface Ec2DisassociateEnclaveCertificateIamRoleResult {
  /**
   * @schema Ec2DisassociateEnclaveCertificateIamRoleResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2DisassociateEnclaveCertificateIamRoleResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateEnclaveCertificateIamRoleResult(obj: Ec2DisassociateEnclaveCertificateIamRoleResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateIamInstanceProfileRequest
 */
export interface Ec2DisassociateIamInstanceProfileRequest {
  /**
   * @schema Ec2DisassociateIamInstanceProfileRequest#AssociationId
   */
  readonly associationId?: string;

}

/**
 * Converts an object of type 'Ec2DisassociateIamInstanceProfileRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateIamInstanceProfileRequest(obj: Ec2DisassociateIamInstanceProfileRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateIamInstanceProfileResult
 */
export interface Ec2DisassociateIamInstanceProfileResult {
  /**
   * @schema Ec2DisassociateIamInstanceProfileResult#IamInstanceProfileAssociation
   */
  readonly iamInstanceProfileAssociation?: Ec2IamInstanceProfileAssociation;

}

/**
 * Converts an object of type 'Ec2DisassociateIamInstanceProfileResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateIamInstanceProfileResult(obj: Ec2DisassociateIamInstanceProfileResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IamInstanceProfileAssociation': toJson_Ec2IamInstanceProfileAssociation(obj.iamInstanceProfileAssociation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateInstanceEventWindowRequest
 */
export interface Ec2DisassociateInstanceEventWindowRequest {
  /**
   * @schema Ec2DisassociateInstanceEventWindowRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2DisassociateInstanceEventWindowRequest#InstanceEventWindowId
   */
  readonly instanceEventWindowId?: string;

  /**
   * @schema Ec2DisassociateInstanceEventWindowRequest#AssociationTarget
   */
  readonly associationTarget?: Ec2InstanceEventWindowDisassociationRequest;

}

/**
 * Converts an object of type 'Ec2DisassociateInstanceEventWindowRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateInstanceEventWindowRequest(obj: Ec2DisassociateInstanceEventWindowRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceEventWindowId': obj.instanceEventWindowId,
    'AssociationTarget': toJson_Ec2InstanceEventWindowDisassociationRequest(obj.associationTarget),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateInstanceEventWindowResult
 */
export interface Ec2DisassociateInstanceEventWindowResult {
  /**
   * @schema Ec2DisassociateInstanceEventWindowResult#InstanceEventWindow
   */
  readonly instanceEventWindow?: Ec2InstanceEventWindow;

}

/**
 * Converts an object of type 'Ec2DisassociateInstanceEventWindowResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateInstanceEventWindowResult(obj: Ec2DisassociateInstanceEventWindowResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventWindow': toJson_Ec2InstanceEventWindow(obj.instanceEventWindow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateRouteTableRequest
 */
export interface Ec2DisassociateRouteTableRequest {
  /**
   * @schema Ec2DisassociateRouteTableRequest#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2DisassociateRouteTableRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisassociateRouteTableRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateRouteTableRequest(obj: Ec2DisassociateRouteTableRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateSubnetCidrBlockRequest
 */
export interface Ec2DisassociateSubnetCidrBlockRequest {
  /**
   * @schema Ec2DisassociateSubnetCidrBlockRequest#AssociationId
   */
  readonly associationId?: string;

}

/**
 * Converts an object of type 'Ec2DisassociateSubnetCidrBlockRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateSubnetCidrBlockRequest(obj: Ec2DisassociateSubnetCidrBlockRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateSubnetCidrBlockResult
 */
export interface Ec2DisassociateSubnetCidrBlockResult {
  /**
   * @schema Ec2DisassociateSubnetCidrBlockResult#Ipv6CidrBlockAssociation
   */
  readonly ipv6CidrBlockAssociation?: Ec2SubnetIpv6CidrBlockAssociation;

  /**
   * @schema Ec2DisassociateSubnetCidrBlockResult#SubnetId
   */
  readonly subnetId?: string;

}

/**
 * Converts an object of type 'Ec2DisassociateSubnetCidrBlockResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateSubnetCidrBlockResult(obj: Ec2DisassociateSubnetCidrBlockResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6CidrBlockAssociation': toJson_Ec2SubnetIpv6CidrBlockAssociation(obj.ipv6CidrBlockAssociation),
    'SubnetId': obj.subnetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateTransitGatewayMulticastDomainRequest
 */
export interface Ec2DisassociateTransitGatewayMulticastDomainRequest {
  /**
   * @schema Ec2DisassociateTransitGatewayMulticastDomainRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2DisassociateTransitGatewayMulticastDomainRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2DisassociateTransitGatewayMulticastDomainRequest#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2DisassociateTransitGatewayMulticastDomainRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisassociateTransitGatewayMulticastDomainRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateTransitGatewayMulticastDomainRequest(obj: Ec2DisassociateTransitGatewayMulticastDomainRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'SubnetIds': obj.subnetIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateTransitGatewayMulticastDomainResult
 */
export interface Ec2DisassociateTransitGatewayMulticastDomainResult {
  /**
   * @schema Ec2DisassociateTransitGatewayMulticastDomainResult#Associations
   */
  readonly associations?: Ec2TransitGatewayMulticastDomainAssociations;

}

/**
 * Converts an object of type 'Ec2DisassociateTransitGatewayMulticastDomainResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateTransitGatewayMulticastDomainResult(obj: Ec2DisassociateTransitGatewayMulticastDomainResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Associations': toJson_Ec2TransitGatewayMulticastDomainAssociations(obj.associations),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateTransitGatewayRouteTableRequest
 */
export interface Ec2DisassociateTransitGatewayRouteTableRequest {
  /**
   * @schema Ec2DisassociateTransitGatewayRouteTableRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2DisassociateTransitGatewayRouteTableRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2DisassociateTransitGatewayRouteTableRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisassociateTransitGatewayRouteTableRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateTransitGatewayRouteTableRequest(obj: Ec2DisassociateTransitGatewayRouteTableRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateTransitGatewayRouteTableResult
 */
export interface Ec2DisassociateTransitGatewayRouteTableResult {
  /**
   * @schema Ec2DisassociateTransitGatewayRouteTableResult#Association
   */
  readonly association?: Ec2TransitGatewayAssociation;

}

/**
 * Converts an object of type 'Ec2DisassociateTransitGatewayRouteTableResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateTransitGatewayRouteTableResult(obj: Ec2DisassociateTransitGatewayRouteTableResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Association': toJson_Ec2TransitGatewayAssociation(obj.association),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateTrunkInterfaceRequest
 */
export interface Ec2DisassociateTrunkInterfaceRequest {
  /**
   * @schema Ec2DisassociateTrunkInterfaceRequest#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2DisassociateTrunkInterfaceRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2DisassociateTrunkInterfaceRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2DisassociateTrunkInterfaceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateTrunkInterfaceRequest(obj: Ec2DisassociateTrunkInterfaceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateTrunkInterfaceResult
 */
export interface Ec2DisassociateTrunkInterfaceResult {
  /**
   * @schema Ec2DisassociateTrunkInterfaceResult#Return
   */
  readonly return?: boolean;

  /**
   * @schema Ec2DisassociateTrunkInterfaceResult#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2DisassociateTrunkInterfaceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateTrunkInterfaceResult(obj: Ec2DisassociateTrunkInterfaceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateVpcCidrBlockRequest
 */
export interface Ec2DisassociateVpcCidrBlockRequest {
  /**
   * @schema Ec2DisassociateVpcCidrBlockRequest#AssociationId
   */
  readonly associationId?: string;

}

/**
 * Converts an object of type 'Ec2DisassociateVpcCidrBlockRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateVpcCidrBlockRequest(obj: Ec2DisassociateVpcCidrBlockRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisassociateVpcCidrBlockResult
 */
export interface Ec2DisassociateVpcCidrBlockResult {
  /**
   * @schema Ec2DisassociateVpcCidrBlockResult#Ipv6CidrBlockAssociation
   */
  readonly ipv6CidrBlockAssociation?: Ec2VpcIpv6CidrBlockAssociation;

  /**
   * @schema Ec2DisassociateVpcCidrBlockResult#CidrBlockAssociation
   */
  readonly cidrBlockAssociation?: Ec2VpcCidrBlockAssociation;

  /**
   * @schema Ec2DisassociateVpcCidrBlockResult#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2DisassociateVpcCidrBlockResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisassociateVpcCidrBlockResult(obj: Ec2DisassociateVpcCidrBlockResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6CidrBlockAssociation': toJson_Ec2VpcIpv6CidrBlockAssociation(obj.ipv6CidrBlockAssociation),
    'CidrBlockAssociation': toJson_Ec2VpcCidrBlockAssociation(obj.cidrBlockAssociation),
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableEbsEncryptionByDefaultRequest
 */
export interface Ec2EnableEbsEncryptionByDefaultRequest {
  /**
   * @schema Ec2EnableEbsEncryptionByDefaultRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableEbsEncryptionByDefaultRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableEbsEncryptionByDefaultRequest(obj: Ec2EnableEbsEncryptionByDefaultRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableEbsEncryptionByDefaultResult
 */
export interface Ec2EnableEbsEncryptionByDefaultResult {
  /**
   * @schema Ec2EnableEbsEncryptionByDefaultResult#EbsEncryptionByDefault
   */
  readonly ebsEncryptionByDefault?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableEbsEncryptionByDefaultResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableEbsEncryptionByDefaultResult(obj: Ec2EnableEbsEncryptionByDefaultResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EbsEncryptionByDefault': obj.ebsEncryptionByDefault,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableFastSnapshotRestoresRequest
 */
export interface Ec2EnableFastSnapshotRestoresRequest {
  /**
   * @schema Ec2EnableFastSnapshotRestoresRequest#AvailabilityZones
   */
  readonly availabilityZones?: string[];

  /**
   * @schema Ec2EnableFastSnapshotRestoresRequest#SourceSnapshotIds
   */
  readonly sourceSnapshotIds?: string[];

  /**
   * @schema Ec2EnableFastSnapshotRestoresRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableFastSnapshotRestoresRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableFastSnapshotRestoresRequest(obj: Ec2EnableFastSnapshotRestoresRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZones': obj.availabilityZones?.map(y => y),
    'SourceSnapshotIds': obj.sourceSnapshotIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableFastSnapshotRestoresResult
 */
export interface Ec2EnableFastSnapshotRestoresResult {
  /**
   * @schema Ec2EnableFastSnapshotRestoresResult#Successful
   */
  readonly successful?: Ec2EnableFastSnapshotRestoreSuccessItem[];

  /**
   * @schema Ec2EnableFastSnapshotRestoresResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2EnableFastSnapshotRestoreErrorItem[];

}

/**
 * Converts an object of type 'Ec2EnableFastSnapshotRestoresResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableFastSnapshotRestoresResult(obj: Ec2EnableFastSnapshotRestoresResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Successful': obj.successful?.map(y => toJson_Ec2EnableFastSnapshotRestoreSuccessItem(y)),
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2EnableFastSnapshotRestoreErrorItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableImageDeprecationRequest
 */
export interface Ec2EnableImageDeprecationRequest {
  /**
   * @schema Ec2EnableImageDeprecationRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2EnableImageDeprecationRequest#DeprecateAt
   */
  readonly deprecateAt?: string;

  /**
   * @schema Ec2EnableImageDeprecationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableImageDeprecationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableImageDeprecationRequest(obj: Ec2EnableImageDeprecationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageId': obj.imageId,
    'DeprecateAt': obj.deprecateAt,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableImageDeprecationResult
 */
export interface Ec2EnableImageDeprecationResult {
  /**
   * @schema Ec2EnableImageDeprecationResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableImageDeprecationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableImageDeprecationResult(obj: Ec2EnableImageDeprecationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableSerialConsoleAccessRequest
 */
export interface Ec2EnableSerialConsoleAccessRequest {
  /**
   * @schema Ec2EnableSerialConsoleAccessRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableSerialConsoleAccessRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableSerialConsoleAccessRequest(obj: Ec2EnableSerialConsoleAccessRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableSerialConsoleAccessResult
 */
export interface Ec2EnableSerialConsoleAccessResult {
  /**
   * @schema Ec2EnableSerialConsoleAccessResult#SerialConsoleAccessEnabled
   */
  readonly serialConsoleAccessEnabled?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableSerialConsoleAccessResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableSerialConsoleAccessResult(obj: Ec2EnableSerialConsoleAccessResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SerialConsoleAccessEnabled': obj.serialConsoleAccessEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableTransitGatewayRouteTablePropagationRequest
 */
export interface Ec2EnableTransitGatewayRouteTablePropagationRequest {
  /**
   * @schema Ec2EnableTransitGatewayRouteTablePropagationRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2EnableTransitGatewayRouteTablePropagationRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2EnableTransitGatewayRouteTablePropagationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableTransitGatewayRouteTablePropagationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableTransitGatewayRouteTablePropagationRequest(obj: Ec2EnableTransitGatewayRouteTablePropagationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableTransitGatewayRouteTablePropagationResult
 */
export interface Ec2EnableTransitGatewayRouteTablePropagationResult {
  /**
   * @schema Ec2EnableTransitGatewayRouteTablePropagationResult#Propagation
   */
  readonly propagation?: Ec2TransitGatewayPropagation;

}

/**
 * Converts an object of type 'Ec2EnableTransitGatewayRouteTablePropagationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableTransitGatewayRouteTablePropagationResult(obj: Ec2EnableTransitGatewayRouteTablePropagationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Propagation': toJson_Ec2TransitGatewayPropagation(obj.propagation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableVgwRoutePropagationRequest
 */
export interface Ec2EnableVgwRoutePropagationRequest {
  /**
   * @schema Ec2EnableVgwRoutePropagationRequest#GatewayId
   */
  readonly gatewayId?: string;

  /**
   * @schema Ec2EnableVgwRoutePropagationRequest#RouteTableId
   */
  readonly routeTableId?: string;

  /**
   * @schema Ec2EnableVgwRoutePropagationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableVgwRoutePropagationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableVgwRoutePropagationRequest(obj: Ec2EnableVgwRoutePropagationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GatewayId': obj.gatewayId,
    'RouteTableId': obj.routeTableId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableVolumeIoRequest
 */
export interface Ec2EnableVolumeIoRequest {
  /**
   * @schema Ec2EnableVolumeIoRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2EnableVolumeIoRequest#VolumeId
   */
  readonly volumeId?: string;

}

/**
 * Converts an object of type 'Ec2EnableVolumeIoRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableVolumeIoRequest(obj: Ec2EnableVolumeIoRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VolumeId': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableVpcClassicLinkRequest
 */
export interface Ec2EnableVpcClassicLinkRequest {
  /**
   * @schema Ec2EnableVpcClassicLinkRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2EnableVpcClassicLinkRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2EnableVpcClassicLinkRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableVpcClassicLinkRequest(obj: Ec2EnableVpcClassicLinkRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableVpcClassicLinkResult
 */
export interface Ec2EnableVpcClassicLinkResult {
  /**
   * @schema Ec2EnableVpcClassicLinkResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableVpcClassicLinkResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableVpcClassicLinkResult(obj: Ec2EnableVpcClassicLinkResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableVpcClassicLinkDnsSupportRequest
 */
export interface Ec2EnableVpcClassicLinkDnsSupportRequest {
  /**
   * @schema Ec2EnableVpcClassicLinkDnsSupportRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2EnableVpcClassicLinkDnsSupportRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableVpcClassicLinkDnsSupportRequest(obj: Ec2EnableVpcClassicLinkDnsSupportRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableVpcClassicLinkDnsSupportResult
 */
export interface Ec2EnableVpcClassicLinkDnsSupportResult {
  /**
   * @schema Ec2EnableVpcClassicLinkDnsSupportResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2EnableVpcClassicLinkDnsSupportResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableVpcClassicLinkDnsSupportResult(obj: Ec2EnableVpcClassicLinkDnsSupportResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportClientVpnClientCertificateRevocationListRequest
 */
export interface Ec2ExportClientVpnClientCertificateRevocationListRequest {
  /**
   * @schema Ec2ExportClientVpnClientCertificateRevocationListRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2ExportClientVpnClientCertificateRevocationListRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ExportClientVpnClientCertificateRevocationListRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportClientVpnClientCertificateRevocationListRequest(obj: Ec2ExportClientVpnClientCertificateRevocationListRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportClientVpnClientCertificateRevocationListResult
 */
export interface Ec2ExportClientVpnClientCertificateRevocationListResult {
  /**
   * @schema Ec2ExportClientVpnClientCertificateRevocationListResult#CertificateRevocationList
   */
  readonly certificateRevocationList?: string;

  /**
   * @schema Ec2ExportClientVpnClientCertificateRevocationListResult#Status
   */
  readonly status?: Ec2ClientCertificateRevocationListStatus;

}

/**
 * Converts an object of type 'Ec2ExportClientVpnClientCertificateRevocationListResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportClientVpnClientCertificateRevocationListResult(obj: Ec2ExportClientVpnClientCertificateRevocationListResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CertificateRevocationList': obj.certificateRevocationList,
    'Status': toJson_Ec2ClientCertificateRevocationListStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportClientVpnClientConfigurationRequest
 */
export interface Ec2ExportClientVpnClientConfigurationRequest {
  /**
   * @schema Ec2ExportClientVpnClientConfigurationRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2ExportClientVpnClientConfigurationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ExportClientVpnClientConfigurationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportClientVpnClientConfigurationRequest(obj: Ec2ExportClientVpnClientConfigurationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportClientVpnClientConfigurationResult
 */
export interface Ec2ExportClientVpnClientConfigurationResult {
  /**
   * @schema Ec2ExportClientVpnClientConfigurationResult#ClientConfiguration
   */
  readonly clientConfiguration?: string;

}

/**
 * Converts an object of type 'Ec2ExportClientVpnClientConfigurationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportClientVpnClientConfigurationResult(obj: Ec2ExportClientVpnClientConfigurationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientConfiguration': obj.clientConfiguration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportImageRequest
 */
export interface Ec2ExportImageRequest {
  /**
   * @schema Ec2ExportImageRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2ExportImageRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ExportImageRequest#DiskImageFormat
   */
  readonly diskImageFormat?: string;

  /**
   * @schema Ec2ExportImageRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ExportImageRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ExportImageRequest#S3ExportLocation
   */
  readonly s3ExportLocation?: Ec2ExportTaskS3LocationRequest;

  /**
   * @schema Ec2ExportImageRequest#RoleName
   */
  readonly roleName?: string;

  /**
   * @schema Ec2ExportImageRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2ExportImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportImageRequest(obj: Ec2ExportImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'Description': obj.description,
    'DiskImageFormat': obj.diskImageFormat,
    'DryRun': obj.dryRun,
    'ImageId': obj.imageId,
    'S3ExportLocation': toJson_Ec2ExportTaskS3LocationRequest(obj.s3ExportLocation),
    'RoleName': obj.roleName,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportImageResult
 */
export interface Ec2ExportImageResult {
  /**
   * @schema Ec2ExportImageResult#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ExportImageResult#DiskImageFormat
   */
  readonly diskImageFormat?: string;

  /**
   * @schema Ec2ExportImageResult#ExportImageTaskId
   */
  readonly exportImageTaskId?: string;

  /**
   * @schema Ec2ExportImageResult#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ExportImageResult#RoleName
   */
  readonly roleName?: string;

  /**
   * @schema Ec2ExportImageResult#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2ExportImageResult#S3ExportLocation
   */
  readonly s3ExportLocation?: Ec2ExportTaskS3Location;

  /**
   * @schema Ec2ExportImageResult#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2ExportImageResult#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ExportImageResult#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ExportImageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportImageResult(obj: Ec2ExportImageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'DiskImageFormat': obj.diskImageFormat,
    'ExportImageTaskId': obj.exportImageTaskId,
    'ImageId': obj.imageId,
    'RoleName': obj.roleName,
    'Progress': obj.progress,
    'S3ExportLocation': toJson_Ec2ExportTaskS3Location(obj.s3ExportLocation),
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportTransitGatewayRoutesRequest
 */
export interface Ec2ExportTransitGatewayRoutesRequest {
  /**
   * @schema Ec2ExportTransitGatewayRoutesRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2ExportTransitGatewayRoutesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2ExportTransitGatewayRoutesRequest#S3Bucket
   */
  readonly s3Bucket?: string;

  /**
   * @schema Ec2ExportTransitGatewayRoutesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ExportTransitGatewayRoutesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportTransitGatewayRoutesRequest(obj: Ec2ExportTransitGatewayRoutesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'S3Bucket': obj.s3Bucket,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportTransitGatewayRoutesResult
 */
export interface Ec2ExportTransitGatewayRoutesResult {
  /**
   * @schema Ec2ExportTransitGatewayRoutesResult#S3Location
   */
  readonly s3Location?: string;

}

/**
 * Converts an object of type 'Ec2ExportTransitGatewayRoutesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportTransitGatewayRoutesResult(obj: Ec2ExportTransitGatewayRoutesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'S3Location': obj.s3Location,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetAssociatedEnclaveCertificateIamRolesRequest
 */
export interface Ec2GetAssociatedEnclaveCertificateIamRolesRequest {
  /**
   * @schema Ec2GetAssociatedEnclaveCertificateIamRolesRequest#CertificateArn
   */
  readonly certificateArn?: string;

  /**
   * @schema Ec2GetAssociatedEnclaveCertificateIamRolesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetAssociatedEnclaveCertificateIamRolesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetAssociatedEnclaveCertificateIamRolesRequest(obj: Ec2GetAssociatedEnclaveCertificateIamRolesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CertificateArn': obj.certificateArn,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetAssociatedEnclaveCertificateIamRolesResult
 */
export interface Ec2GetAssociatedEnclaveCertificateIamRolesResult {
  /**
   * @schema Ec2GetAssociatedEnclaveCertificateIamRolesResult#AssociatedRoles
   */
  readonly associatedRoles?: Ec2AssociatedRole[];

}

/**
 * Converts an object of type 'Ec2GetAssociatedEnclaveCertificateIamRolesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetAssociatedEnclaveCertificateIamRolesResult(obj: Ec2GetAssociatedEnclaveCertificateIamRolesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociatedRoles': obj.associatedRoles?.map(y => toJson_Ec2AssociatedRole(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetAssociatedIpv6PoolCidrsRequest
 */
export interface Ec2GetAssociatedIpv6PoolCidrsRequest {
  /**
   * @schema Ec2GetAssociatedIpv6PoolCidrsRequest#PoolId
   */
  readonly poolId?: string;

  /**
   * @schema Ec2GetAssociatedIpv6PoolCidrsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetAssociatedIpv6PoolCidrsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetAssociatedIpv6PoolCidrsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetAssociatedIpv6PoolCidrsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetAssociatedIpv6PoolCidrsRequest(obj: Ec2GetAssociatedIpv6PoolCidrsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PoolId': obj.poolId,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetAssociatedIpv6PoolCidrsResult
 */
export interface Ec2GetAssociatedIpv6PoolCidrsResult {
  /**
   * @schema Ec2GetAssociatedIpv6PoolCidrsResult#Ipv6CidrAssociations
   */
  readonly ipv6CidrAssociations?: Ec2Ipv6CidrAssociation[];

  /**
   * @schema Ec2GetAssociatedIpv6PoolCidrsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetAssociatedIpv6PoolCidrsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetAssociatedIpv6PoolCidrsResult(obj: Ec2GetAssociatedIpv6PoolCidrsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6CidrAssociations': obj.ipv6CidrAssociations?.map(y => toJson_Ec2Ipv6CidrAssociation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetCapacityReservationUsageRequest
 */
export interface Ec2GetCapacityReservationUsageRequest {
  /**
   * @schema Ec2GetCapacityReservationUsageRequest#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2GetCapacityReservationUsageRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetCapacityReservationUsageRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetCapacityReservationUsageRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetCapacityReservationUsageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetCapacityReservationUsageRequest(obj: Ec2GetCapacityReservationUsageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationId': obj.capacityReservationId,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetCapacityReservationUsageResult
 */
export interface Ec2GetCapacityReservationUsageResult {
  /**
   * @schema Ec2GetCapacityReservationUsageResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetCapacityReservationUsageResult#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2GetCapacityReservationUsageResult#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2GetCapacityReservationUsageResult#TotalInstanceCount
   */
  readonly totalInstanceCount?: number;

  /**
   * @schema Ec2GetCapacityReservationUsageResult#AvailableInstanceCount
   */
  readonly availableInstanceCount?: number;

  /**
   * @schema Ec2GetCapacityReservationUsageResult#State
   */
  readonly state?: string;

  /**
   * @schema Ec2GetCapacityReservationUsageResult#InstanceUsages
   */
  readonly instanceUsages?: Ec2InstanceUsage[];

}

/**
 * Converts an object of type 'Ec2GetCapacityReservationUsageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetCapacityReservationUsageResult(obj: Ec2GetCapacityReservationUsageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'CapacityReservationId': obj.capacityReservationId,
    'InstanceType': obj.instanceType,
    'TotalInstanceCount': obj.totalInstanceCount,
    'AvailableInstanceCount': obj.availableInstanceCount,
    'State': obj.state,
    'InstanceUsages': obj.instanceUsages?.map(y => toJson_Ec2InstanceUsage(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetCoipPoolUsageRequest
 */
export interface Ec2GetCoipPoolUsageRequest {
  /**
   * @schema Ec2GetCoipPoolUsageRequest#PoolId
   */
  readonly poolId?: string;

  /**
   * @schema Ec2GetCoipPoolUsageRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2GetCoipPoolUsageRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetCoipPoolUsageRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetCoipPoolUsageRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetCoipPoolUsageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetCoipPoolUsageRequest(obj: Ec2GetCoipPoolUsageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PoolId': obj.poolId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetCoipPoolUsageResult
 */
export interface Ec2GetCoipPoolUsageResult {
  /**
   * @schema Ec2GetCoipPoolUsageResult#CoipPoolId
   */
  readonly coipPoolId?: string;

  /**
   * @schema Ec2GetCoipPoolUsageResult#CoipAddressUsages
   */
  readonly coipAddressUsages?: Ec2CoipAddressUsage[];

  /**
   * @schema Ec2GetCoipPoolUsageResult#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

}

/**
 * Converts an object of type 'Ec2GetCoipPoolUsageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetCoipPoolUsageResult(obj: Ec2GetCoipPoolUsageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CoipPoolId': obj.coipPoolId,
    'CoipAddressUsages': obj.coipAddressUsages?.map(y => toJson_Ec2CoipAddressUsage(y)),
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetConsoleOutputRequest
 */
export interface Ec2GetConsoleOutputRequest {
  /**
   * @schema Ec2GetConsoleOutputRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2GetConsoleOutputRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetConsoleOutputRequest#Latest
   */
  readonly latest?: boolean;

}

/**
 * Converts an object of type 'Ec2GetConsoleOutputRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetConsoleOutputRequest(obj: Ec2GetConsoleOutputRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'DryRun': obj.dryRun,
    'Latest': obj.latest,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetConsoleOutputResult
 */
export interface Ec2GetConsoleOutputResult {
  /**
   * @schema Ec2GetConsoleOutputResult#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2GetConsoleOutputResult#Output
   */
  readonly output?: string;

  /**
   * @schema Ec2GetConsoleOutputResult#Timestamp
   */
  readonly timestamp?: string;

}

/**
 * Converts an object of type 'Ec2GetConsoleOutputResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetConsoleOutputResult(obj: Ec2GetConsoleOutputResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'Output': obj.output,
    'Timestamp': obj.timestamp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetConsoleScreenshotRequest
 */
export interface Ec2GetConsoleScreenshotRequest {
  /**
   * @schema Ec2GetConsoleScreenshotRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetConsoleScreenshotRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2GetConsoleScreenshotRequest#WakeUp
   */
  readonly wakeUp?: boolean;

}

/**
 * Converts an object of type 'Ec2GetConsoleScreenshotRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetConsoleScreenshotRequest(obj: Ec2GetConsoleScreenshotRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceId': obj.instanceId,
    'WakeUp': obj.wakeUp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetConsoleScreenshotResult
 */
export interface Ec2GetConsoleScreenshotResult {
  /**
   * @schema Ec2GetConsoleScreenshotResult#ImageData
   */
  readonly imageData?: string;

  /**
   * @schema Ec2GetConsoleScreenshotResult#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2GetConsoleScreenshotResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetConsoleScreenshotResult(obj: Ec2GetConsoleScreenshotResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageData': obj.imageData,
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetDefaultCreditSpecificationRequest
 */
export interface Ec2GetDefaultCreditSpecificationRequest {
  /**
   * @schema Ec2GetDefaultCreditSpecificationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetDefaultCreditSpecificationRequest#InstanceFamily
   */
  readonly instanceFamily?: string;

}

/**
 * Converts an object of type 'Ec2GetDefaultCreditSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetDefaultCreditSpecificationRequest(obj: Ec2GetDefaultCreditSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceFamily': obj.instanceFamily,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetDefaultCreditSpecificationResult
 */
export interface Ec2GetDefaultCreditSpecificationResult {
  /**
   * @schema Ec2GetDefaultCreditSpecificationResult#InstanceFamilyCreditSpecification
   */
  readonly instanceFamilyCreditSpecification?: Ec2InstanceFamilyCreditSpecification;

}

/**
 * Converts an object of type 'Ec2GetDefaultCreditSpecificationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetDefaultCreditSpecificationResult(obj: Ec2GetDefaultCreditSpecificationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceFamilyCreditSpecification': toJson_Ec2InstanceFamilyCreditSpecification(obj.instanceFamilyCreditSpecification),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetEbsDefaultKmsKeyIdRequest
 */
export interface Ec2GetEbsDefaultKmsKeyIdRequest {
  /**
   * @schema Ec2GetEbsDefaultKmsKeyIdRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetEbsDefaultKmsKeyIdRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetEbsDefaultKmsKeyIdRequest(obj: Ec2GetEbsDefaultKmsKeyIdRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetEbsDefaultKmsKeyIdResult
 */
export interface Ec2GetEbsDefaultKmsKeyIdResult {
  /**
   * @schema Ec2GetEbsDefaultKmsKeyIdResult#KmsKeyId
   */
  readonly kmsKeyId?: string;

}

/**
 * Converts an object of type 'Ec2GetEbsDefaultKmsKeyIdResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetEbsDefaultKmsKeyIdResult(obj: Ec2GetEbsDefaultKmsKeyIdResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KmsKeyId': obj.kmsKeyId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetEbsEncryptionByDefaultRequest
 */
export interface Ec2GetEbsEncryptionByDefaultRequest {
  /**
   * @schema Ec2GetEbsEncryptionByDefaultRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetEbsEncryptionByDefaultRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetEbsEncryptionByDefaultRequest(obj: Ec2GetEbsEncryptionByDefaultRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetEbsEncryptionByDefaultResult
 */
export interface Ec2GetEbsEncryptionByDefaultResult {
  /**
   * @schema Ec2GetEbsEncryptionByDefaultResult#EbsEncryptionByDefault
   */
  readonly ebsEncryptionByDefault?: boolean;

}

/**
 * Converts an object of type 'Ec2GetEbsEncryptionByDefaultResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetEbsEncryptionByDefaultResult(obj: Ec2GetEbsEncryptionByDefaultResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EbsEncryptionByDefault': obj.ebsEncryptionByDefault,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetFlowLogsIntegrationTemplateRequest
 */
export interface Ec2GetFlowLogsIntegrationTemplateRequest {
  /**
   * @schema Ec2GetFlowLogsIntegrationTemplateRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetFlowLogsIntegrationTemplateRequest#FlowLogId
   */
  readonly flowLogId?: string;

  /**
   * @schema Ec2GetFlowLogsIntegrationTemplateRequest#ConfigDeliveryS3DestinationArn
   */
  readonly configDeliveryS3DestinationArn?: string;

  /**
   * @schema Ec2GetFlowLogsIntegrationTemplateRequest#IntegrateServices
   */
  readonly integrateServices?: Ec2IntegrateServices;

}

/**
 * Converts an object of type 'Ec2GetFlowLogsIntegrationTemplateRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetFlowLogsIntegrationTemplateRequest(obj: Ec2GetFlowLogsIntegrationTemplateRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'FlowLogId': obj.flowLogId,
    'ConfigDeliveryS3DestinationArn': obj.configDeliveryS3DestinationArn,
    'IntegrateServices': toJson_Ec2IntegrateServices(obj.integrateServices),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetFlowLogsIntegrationTemplateResult
 */
export interface Ec2GetFlowLogsIntegrationTemplateResult {
  /**
   * @schema Ec2GetFlowLogsIntegrationTemplateResult#Result
   */
  readonly result?: string;

}

/**
 * Converts an object of type 'Ec2GetFlowLogsIntegrationTemplateResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetFlowLogsIntegrationTemplateResult(obj: Ec2GetFlowLogsIntegrationTemplateResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Result': obj.result,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetGroupsForCapacityReservationRequest
 */
export interface Ec2GetGroupsForCapacityReservationRequest {
  /**
   * @schema Ec2GetGroupsForCapacityReservationRequest#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2GetGroupsForCapacityReservationRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetGroupsForCapacityReservationRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetGroupsForCapacityReservationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetGroupsForCapacityReservationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetGroupsForCapacityReservationRequest(obj: Ec2GetGroupsForCapacityReservationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationId': obj.capacityReservationId,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetGroupsForCapacityReservationResult
 */
export interface Ec2GetGroupsForCapacityReservationResult {
  /**
   * @schema Ec2GetGroupsForCapacityReservationResult#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetGroupsForCapacityReservationResult#CapacityReservationGroups
   */
  readonly capacityReservationGroups?: Ec2CapacityReservationGroup[];

}

/**
 * Converts an object of type 'Ec2GetGroupsForCapacityReservationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetGroupsForCapacityReservationResult(obj: Ec2GetGroupsForCapacityReservationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NextToken': obj.nextToken,
    'CapacityReservationGroups': obj.capacityReservationGroups?.map(y => toJson_Ec2CapacityReservationGroup(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetHostReservationPurchasePreviewRequest
 */
export interface Ec2GetHostReservationPurchasePreviewRequest {
  /**
   * @schema Ec2GetHostReservationPurchasePreviewRequest#HostIdSet
   */
  readonly hostIdSet?: string[];

  /**
   * @schema Ec2GetHostReservationPurchasePreviewRequest#OfferingId
   */
  readonly offeringId?: string;

}

/**
 * Converts an object of type 'Ec2GetHostReservationPurchasePreviewRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetHostReservationPurchasePreviewRequest(obj: Ec2GetHostReservationPurchasePreviewRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HostIdSet': obj.hostIdSet?.map(y => y),
    'OfferingId': obj.offeringId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetHostReservationPurchasePreviewResult
 */
export interface Ec2GetHostReservationPurchasePreviewResult {
  /**
   * @schema Ec2GetHostReservationPurchasePreviewResult#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2GetHostReservationPurchasePreviewResult#Purchase
   */
  readonly purchase?: Ec2Purchase[];

  /**
   * @schema Ec2GetHostReservationPurchasePreviewResult#TotalHourlyPrice
   */
  readonly totalHourlyPrice?: string;

  /**
   * @schema Ec2GetHostReservationPurchasePreviewResult#TotalUpfrontPrice
   */
  readonly totalUpfrontPrice?: string;

}

/**
 * Converts an object of type 'Ec2GetHostReservationPurchasePreviewResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetHostReservationPurchasePreviewResult(obj: Ec2GetHostReservationPurchasePreviewResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CurrencyCode': obj.currencyCode,
    'Purchase': obj.purchase?.map(y => toJson_Ec2Purchase(y)),
    'TotalHourlyPrice': obj.totalHourlyPrice,
    'TotalUpfrontPrice': obj.totalUpfrontPrice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetLaunchTemplateDataRequest
 */
export interface Ec2GetLaunchTemplateDataRequest {
  /**
   * @schema Ec2GetLaunchTemplateDataRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetLaunchTemplateDataRequest#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2GetLaunchTemplateDataRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetLaunchTemplateDataRequest(obj: Ec2GetLaunchTemplateDataRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetLaunchTemplateDataResult
 */
export interface Ec2GetLaunchTemplateDataResult {
  /**
   * @schema Ec2GetLaunchTemplateDataResult#LaunchTemplateData
   */
  readonly launchTemplateData?: Ec2ResponseLaunchTemplateData;

}

/**
 * Converts an object of type 'Ec2GetLaunchTemplateDataResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetLaunchTemplateDataResult(obj: Ec2GetLaunchTemplateDataResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateData': toJson_Ec2ResponseLaunchTemplateData(obj.launchTemplateData),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetManagedPrefixListAssociationsRequest
 */
export interface Ec2GetManagedPrefixListAssociationsRequest {
  /**
   * @schema Ec2GetManagedPrefixListAssociationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetManagedPrefixListAssociationsRequest#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2GetManagedPrefixListAssociationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetManagedPrefixListAssociationsRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetManagedPrefixListAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetManagedPrefixListAssociationsRequest(obj: Ec2GetManagedPrefixListAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PrefixListId': obj.prefixListId,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetManagedPrefixListAssociationsResult
 */
export interface Ec2GetManagedPrefixListAssociationsResult {
  /**
   * @schema Ec2GetManagedPrefixListAssociationsResult#PrefixListAssociations
   */
  readonly prefixListAssociations?: Ec2PrefixListAssociation[];

  /**
   * @schema Ec2GetManagedPrefixListAssociationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetManagedPrefixListAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetManagedPrefixListAssociationsResult(obj: Ec2GetManagedPrefixListAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrefixListAssociations': obj.prefixListAssociations?.map(y => toJson_Ec2PrefixListAssociation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetManagedPrefixListEntriesRequest
 */
export interface Ec2GetManagedPrefixListEntriesRequest {
  /**
   * @schema Ec2GetManagedPrefixListEntriesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetManagedPrefixListEntriesRequest#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2GetManagedPrefixListEntriesRequest#TargetVersion
   */
  readonly targetVersion?: number;

  /**
   * @schema Ec2GetManagedPrefixListEntriesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetManagedPrefixListEntriesRequest#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetManagedPrefixListEntriesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetManagedPrefixListEntriesRequest(obj: Ec2GetManagedPrefixListEntriesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PrefixListId': obj.prefixListId,
    'TargetVersion': obj.targetVersion,
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetManagedPrefixListEntriesResult
 */
export interface Ec2GetManagedPrefixListEntriesResult {
  /**
   * @schema Ec2GetManagedPrefixListEntriesResult#Entries
   */
  readonly entries?: Ec2PrefixListEntry[];

  /**
   * @schema Ec2GetManagedPrefixListEntriesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetManagedPrefixListEntriesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetManagedPrefixListEntriesResult(obj: Ec2GetManagedPrefixListEntriesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Entries': obj.entries?.map(y => toJson_Ec2PrefixListEntry(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetPasswordDataRequest
 */
export interface Ec2GetPasswordDataRequest {
  /**
   * @schema Ec2GetPasswordDataRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2GetPasswordDataRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetPasswordDataRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetPasswordDataRequest(obj: Ec2GetPasswordDataRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetPasswordDataResult
 */
export interface Ec2GetPasswordDataResult {
  /**
   * @schema Ec2GetPasswordDataResult#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2GetPasswordDataResult#PasswordData
   */
  readonly passwordData?: string;

  /**
   * @schema Ec2GetPasswordDataResult#Timestamp
   */
  readonly timestamp?: string;

}

/**
 * Converts an object of type 'Ec2GetPasswordDataResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetPasswordDataResult(obj: Ec2GetPasswordDataResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'PasswordData': obj.passwordData,
    'Timestamp': obj.timestamp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetReservedInstancesExchangeQuoteRequest
 */
export interface Ec2GetReservedInstancesExchangeQuoteRequest {
  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteRequest#ReservedInstanceIds
   */
  readonly reservedInstanceIds?: string[];

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteRequest#TargetConfigurations
   */
  readonly targetConfigurations?: Ec2TargetConfigurationRequest[];

}

/**
 * Converts an object of type 'Ec2GetReservedInstancesExchangeQuoteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetReservedInstancesExchangeQuoteRequest(obj: Ec2GetReservedInstancesExchangeQuoteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ReservedInstanceIds': obj.reservedInstanceIds?.map(y => y),
    'TargetConfigurations': obj.targetConfigurations?.map(y => toJson_Ec2TargetConfigurationRequest(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetReservedInstancesExchangeQuoteResult
 */
export interface Ec2GetReservedInstancesExchangeQuoteResult {
  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#IsValidExchange
   */
  readonly isValidExchange?: boolean;

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#OutputReservedInstancesWillExpireAt
   */
  readonly outputReservedInstancesWillExpireAt?: string;

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#PaymentDue
   */
  readonly paymentDue?: string;

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#ReservedInstanceValueRollup
   */
  readonly reservedInstanceValueRollup?: Ec2ReservationValue;

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#ReservedInstanceValueSet
   */
  readonly reservedInstanceValueSet?: Ec2ReservedInstanceReservationValue[];

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#TargetConfigurationValueRollup
   */
  readonly targetConfigurationValueRollup?: Ec2ReservationValue;

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#TargetConfigurationValueSet
   */
  readonly targetConfigurationValueSet?: Ec2TargetReservationValue[];

  /**
   * @schema Ec2GetReservedInstancesExchangeQuoteResult#ValidationFailureReason
   */
  readonly validationFailureReason?: string;

}

/**
 * Converts an object of type 'Ec2GetReservedInstancesExchangeQuoteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetReservedInstancesExchangeQuoteResult(obj: Ec2GetReservedInstancesExchangeQuoteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CurrencyCode': obj.currencyCode,
    'IsValidExchange': obj.isValidExchange,
    'OutputReservedInstancesWillExpireAt': obj.outputReservedInstancesWillExpireAt,
    'PaymentDue': obj.paymentDue,
    'ReservedInstanceValueRollup': toJson_Ec2ReservationValue(obj.reservedInstanceValueRollup),
    'ReservedInstanceValueSet': obj.reservedInstanceValueSet?.map(y => toJson_Ec2ReservedInstanceReservationValue(y)),
    'TargetConfigurationValueRollup': toJson_Ec2ReservationValue(obj.targetConfigurationValueRollup),
    'TargetConfigurationValueSet': obj.targetConfigurationValueSet?.map(y => toJson_Ec2TargetReservationValue(y)),
    'ValidationFailureReason': obj.validationFailureReason,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetSerialConsoleAccessStatusRequest
 */
export interface Ec2GetSerialConsoleAccessStatusRequest {
  /**
   * @schema Ec2GetSerialConsoleAccessStatusRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetSerialConsoleAccessStatusRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetSerialConsoleAccessStatusRequest(obj: Ec2GetSerialConsoleAccessStatusRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetSerialConsoleAccessStatusResult
 */
export interface Ec2GetSerialConsoleAccessStatusResult {
  /**
   * @schema Ec2GetSerialConsoleAccessStatusResult#SerialConsoleAccessEnabled
   */
  readonly serialConsoleAccessEnabled?: boolean;

}

/**
 * Converts an object of type 'Ec2GetSerialConsoleAccessStatusResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetSerialConsoleAccessStatusResult(obj: Ec2GetSerialConsoleAccessStatusResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SerialConsoleAccessEnabled': obj.serialConsoleAccessEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetSubnetCidrReservationsRequest
 */
export interface Ec2GetSubnetCidrReservationsRequest {
  /**
   * @schema Ec2GetSubnetCidrReservationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2GetSubnetCidrReservationsRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2GetSubnetCidrReservationsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2GetSubnetCidrReservationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetSubnetCidrReservationsRequest#MaxResults
   */
  readonly maxResults?: number;

}

/**
 * Converts an object of type 'Ec2GetSubnetCidrReservationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetSubnetCidrReservationsRequest(obj: Ec2GetSubnetCidrReservationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'SubnetId': obj.subnetId,
    'DryRun': obj.dryRun,
    'NextToken': obj.nextToken,
    'MaxResults': obj.maxResults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetSubnetCidrReservationsResult
 */
export interface Ec2GetSubnetCidrReservationsResult {
  /**
   * @schema Ec2GetSubnetCidrReservationsResult#SubnetIpv4CidrReservations
   */
  readonly subnetIpv4CidrReservations?: Ec2SubnetCidrReservation[];

  /**
   * @schema Ec2GetSubnetCidrReservationsResult#SubnetIpv6CidrReservations
   */
  readonly subnetIpv6CidrReservations?: Ec2SubnetCidrReservation[];

  /**
   * @schema Ec2GetSubnetCidrReservationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetSubnetCidrReservationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetSubnetCidrReservationsResult(obj: Ec2GetSubnetCidrReservationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SubnetIpv4CidrReservations': obj.subnetIpv4CidrReservations?.map(y => toJson_Ec2SubnetCidrReservation(y)),
    'SubnetIpv6CidrReservations': obj.subnetIpv6CidrReservations?.map(y => toJson_Ec2SubnetCidrReservation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayAttachmentPropagationsRequest
 */
export interface Ec2GetTransitGatewayAttachmentPropagationsRequest {
  /**
   * @schema Ec2GetTransitGatewayAttachmentPropagationsRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2GetTransitGatewayAttachmentPropagationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2GetTransitGatewayAttachmentPropagationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetTransitGatewayAttachmentPropagationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetTransitGatewayAttachmentPropagationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayAttachmentPropagationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayAttachmentPropagationsRequest(obj: Ec2GetTransitGatewayAttachmentPropagationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayAttachmentPropagationsResult
 */
export interface Ec2GetTransitGatewayAttachmentPropagationsResult {
  /**
   * @schema Ec2GetTransitGatewayAttachmentPropagationsResult#TransitGatewayAttachmentPropagations
   */
  readonly transitGatewayAttachmentPropagations?: Ec2TransitGatewayAttachmentPropagation[];

  /**
   * @schema Ec2GetTransitGatewayAttachmentPropagationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayAttachmentPropagationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayAttachmentPropagationsResult(obj: Ec2GetTransitGatewayAttachmentPropagationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentPropagations': obj.transitGatewayAttachmentPropagations?.map(y => toJson_Ec2TransitGatewayAttachmentPropagation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayMulticastDomainAssociationsRequest
 */
export interface Ec2GetTransitGatewayMulticastDomainAssociationsRequest {
  /**
   * @schema Ec2GetTransitGatewayMulticastDomainAssociationsRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2GetTransitGatewayMulticastDomainAssociationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2GetTransitGatewayMulticastDomainAssociationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetTransitGatewayMulticastDomainAssociationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetTransitGatewayMulticastDomainAssociationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayMulticastDomainAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayMulticastDomainAssociationsRequest(obj: Ec2GetTransitGatewayMulticastDomainAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayMulticastDomainAssociationsResult
 */
export interface Ec2GetTransitGatewayMulticastDomainAssociationsResult {
  /**
   * @schema Ec2GetTransitGatewayMulticastDomainAssociationsResult#MulticastDomainAssociations
   */
  readonly multicastDomainAssociations?: Ec2TransitGatewayMulticastDomainAssociation[];

  /**
   * @schema Ec2GetTransitGatewayMulticastDomainAssociationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayMulticastDomainAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayMulticastDomainAssociationsResult(obj: Ec2GetTransitGatewayMulticastDomainAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MulticastDomainAssociations': obj.multicastDomainAssociations?.map(y => toJson_Ec2TransitGatewayMulticastDomainAssociation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayPrefixListReferencesRequest
 */
export interface Ec2GetTransitGatewayPrefixListReferencesRequest {
  /**
   * @schema Ec2GetTransitGatewayPrefixListReferencesRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2GetTransitGatewayPrefixListReferencesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2GetTransitGatewayPrefixListReferencesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetTransitGatewayPrefixListReferencesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetTransitGatewayPrefixListReferencesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayPrefixListReferencesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayPrefixListReferencesRequest(obj: Ec2GetTransitGatewayPrefixListReferencesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayPrefixListReferencesResult
 */
export interface Ec2GetTransitGatewayPrefixListReferencesResult {
  /**
   * @schema Ec2GetTransitGatewayPrefixListReferencesResult#TransitGatewayPrefixListReferences
   */
  readonly transitGatewayPrefixListReferences?: Ec2TransitGatewayPrefixListReference[];

  /**
   * @schema Ec2GetTransitGatewayPrefixListReferencesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayPrefixListReferencesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayPrefixListReferencesResult(obj: Ec2GetTransitGatewayPrefixListReferencesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPrefixListReferences': obj.transitGatewayPrefixListReferences?.map(y => toJson_Ec2TransitGatewayPrefixListReference(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayRouteTableAssociationsRequest
 */
export interface Ec2GetTransitGatewayRouteTableAssociationsRequest {
  /**
   * @schema Ec2GetTransitGatewayRouteTableAssociationsRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2GetTransitGatewayRouteTableAssociationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2GetTransitGatewayRouteTableAssociationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetTransitGatewayRouteTableAssociationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetTransitGatewayRouteTableAssociationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayRouteTableAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayRouteTableAssociationsRequest(obj: Ec2GetTransitGatewayRouteTableAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayRouteTableAssociationsResult
 */
export interface Ec2GetTransitGatewayRouteTableAssociationsResult {
  /**
   * @schema Ec2GetTransitGatewayRouteTableAssociationsResult#Associations
   */
  readonly associations?: Ec2TransitGatewayRouteTableAssociation[];

  /**
   * @schema Ec2GetTransitGatewayRouteTableAssociationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayRouteTableAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayRouteTableAssociationsResult(obj: Ec2GetTransitGatewayRouteTableAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Associations': obj.associations?.map(y => toJson_Ec2TransitGatewayRouteTableAssociation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayRouteTablePropagationsRequest
 */
export interface Ec2GetTransitGatewayRouteTablePropagationsRequest {
  /**
   * @schema Ec2GetTransitGatewayRouteTablePropagationsRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2GetTransitGatewayRouteTablePropagationsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2GetTransitGatewayRouteTablePropagationsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2GetTransitGatewayRouteTablePropagationsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2GetTransitGatewayRouteTablePropagationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayRouteTablePropagationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayRouteTablePropagationsRequest(obj: Ec2GetTransitGatewayRouteTablePropagationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GetTransitGatewayRouteTablePropagationsResult
 */
export interface Ec2GetTransitGatewayRouteTablePropagationsResult {
  /**
   * @schema Ec2GetTransitGatewayRouteTablePropagationsResult#TransitGatewayRouteTablePropagations
   */
  readonly transitGatewayRouteTablePropagations?: Ec2TransitGatewayRouteTablePropagation[];

  /**
   * @schema Ec2GetTransitGatewayRouteTablePropagationsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2GetTransitGatewayRouteTablePropagationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GetTransitGatewayRouteTablePropagationsResult(obj: Ec2GetTransitGatewayRouteTablePropagationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTablePropagations': obj.transitGatewayRouteTablePropagations?.map(y => toJson_Ec2TransitGatewayRouteTablePropagation(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportClientVpnClientCertificateRevocationListRequest
 */
export interface Ec2ImportClientVpnClientCertificateRevocationListRequest {
  /**
   * @schema Ec2ImportClientVpnClientCertificateRevocationListRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2ImportClientVpnClientCertificateRevocationListRequest#CertificateRevocationList
   */
  readonly certificateRevocationList?: string;

  /**
   * @schema Ec2ImportClientVpnClientCertificateRevocationListRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ImportClientVpnClientCertificateRevocationListRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportClientVpnClientCertificateRevocationListRequest(obj: Ec2ImportClientVpnClientCertificateRevocationListRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'CertificateRevocationList': obj.certificateRevocationList,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportClientVpnClientCertificateRevocationListResult
 */
export interface Ec2ImportClientVpnClientCertificateRevocationListResult {
  /**
   * @schema Ec2ImportClientVpnClientCertificateRevocationListResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ImportClientVpnClientCertificateRevocationListResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportClientVpnClientCertificateRevocationListResult(obj: Ec2ImportClientVpnClientCertificateRevocationListResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportImageRequest
 */
export interface Ec2ImportImageRequest {
  /**
   * @schema Ec2ImportImageRequest#Architecture
   */
  readonly architecture?: string;

  /**
   * @schema Ec2ImportImageRequest#ClientData
   */
  readonly clientData?: Ec2ClientData;

  /**
   * @schema Ec2ImportImageRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2ImportImageRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportImageRequest#DiskContainers
   */
  readonly diskContainers?: Ec2ImageDiskContainer[];

  /**
   * @schema Ec2ImportImageRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ImportImageRequest#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2ImportImageRequest#Hypervisor
   */
  readonly hypervisor?: string;

  /**
   * @schema Ec2ImportImageRequest#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2ImportImageRequest#LicenseType
   */
  readonly licenseType?: string;

  /**
   * @schema Ec2ImportImageRequest#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2ImportImageRequest#RoleName
   */
  readonly roleName?: string;

  /**
   * @schema Ec2ImportImageRequest#LicenseSpecifications
   */
  readonly licenseSpecifications?: Ec2ImportImageLicenseConfigurationRequest[];

  /**
   * @schema Ec2ImportImageRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2ImportImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportImageRequest(obj: Ec2ImportImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Architecture': obj.architecture,
    'ClientData': toJson_Ec2ClientData(obj.clientData),
    'ClientToken': obj.clientToken,
    'Description': obj.description,
    'DiskContainers': obj.diskContainers?.map(y => toJson_Ec2ImageDiskContainer(y)),
    'DryRun': obj.dryRun,
    'Encrypted': obj.encrypted,
    'Hypervisor': obj.hypervisor,
    'KmsKeyId': obj.kmsKeyId,
    'LicenseType': obj.licenseType,
    'Platform': obj.platform,
    'RoleName': obj.roleName,
    'LicenseSpecifications': obj.licenseSpecifications?.map(y => toJson_Ec2ImportImageLicenseConfigurationRequest(y)),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportImageResult
 */
export interface Ec2ImportImageResult {
  /**
   * @schema Ec2ImportImageResult#Architecture
   */
  readonly architecture?: string;

  /**
   * @schema Ec2ImportImageResult#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportImageResult#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2ImportImageResult#Hypervisor
   */
  readonly hypervisor?: string;

  /**
   * @schema Ec2ImportImageResult#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ImportImageResult#ImportTaskId
   */
  readonly importTaskId?: string;

  /**
   * @schema Ec2ImportImageResult#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2ImportImageResult#LicenseType
   */
  readonly licenseType?: string;

  /**
   * @schema Ec2ImportImageResult#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2ImportImageResult#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2ImportImageResult#SnapshotDetails
   */
  readonly snapshotDetails?: Ec2SnapshotDetail[];

  /**
   * @schema Ec2ImportImageResult#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2ImportImageResult#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ImportImageResult#LicenseSpecifications
   */
  readonly licenseSpecifications?: Ec2ImportImageLicenseConfigurationResponse[];

  /**
   * @schema Ec2ImportImageResult#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ImportImageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportImageResult(obj: Ec2ImportImageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Architecture': obj.architecture,
    'Description': obj.description,
    'Encrypted': obj.encrypted,
    'Hypervisor': obj.hypervisor,
    'ImageId': obj.imageId,
    'ImportTaskId': obj.importTaskId,
    'KmsKeyId': obj.kmsKeyId,
    'LicenseType': obj.licenseType,
    'Platform': obj.platform,
    'Progress': obj.progress,
    'SnapshotDetails': obj.snapshotDetails?.map(y => toJson_Ec2SnapshotDetail(y)),
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'LicenseSpecifications': obj.licenseSpecifications?.map(y => toJson_Ec2ImportImageLicenseConfigurationResponse(y)),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportInstanceRequest
 */
export interface Ec2ImportInstanceRequest {
  /**
   * @schema Ec2ImportInstanceRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportInstanceRequest#DiskImages
   */
  readonly diskImages?: Ec2DiskImage[];

  /**
   * @schema Ec2ImportInstanceRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ImportInstanceRequest#LaunchSpecification
   */
  readonly launchSpecification?: Ec2ImportInstanceLaunchSpecification;

  /**
   * @schema Ec2ImportInstanceRequest#Platform
   */
  readonly platform?: string;

}

/**
 * Converts an object of type 'Ec2ImportInstanceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportInstanceRequest(obj: Ec2ImportInstanceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'DiskImages': obj.diskImages?.map(y => toJson_Ec2DiskImage(y)),
    'DryRun': obj.dryRun,
    'LaunchSpecification': toJson_Ec2ImportInstanceLaunchSpecification(obj.launchSpecification),
    'Platform': obj.platform,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportInstanceResult
 */
export interface Ec2ImportInstanceResult {
  /**
   * @schema Ec2ImportInstanceResult#ConversionTask
   */
  readonly conversionTask?: Ec2ConversionTask;

}

/**
 * Converts an object of type 'Ec2ImportInstanceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportInstanceResult(obj: Ec2ImportInstanceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConversionTask': toJson_Ec2ConversionTask(obj.conversionTask),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportKeyPairRequest
 */
export interface Ec2ImportKeyPairRequest {
  /**
   * @schema Ec2ImportKeyPairRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ImportKeyPairRequest#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2ImportKeyPairRequest#PublicKeyMaterial
   */
  readonly publicKeyMaterial?: any;

  /**
   * @schema Ec2ImportKeyPairRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2ImportKeyPairRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportKeyPairRequest(obj: Ec2ImportKeyPairRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'KeyName': obj.keyName,
    'PublicKeyMaterial': obj.publicKeyMaterial,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportKeyPairResult
 */
export interface Ec2ImportKeyPairResult {
  /**
   * @schema Ec2ImportKeyPairResult#KeyFingerprint
   */
  readonly keyFingerprint?: string;

  /**
   * @schema Ec2ImportKeyPairResult#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2ImportKeyPairResult#KeyPairId
   */
  readonly keyPairId?: string;

  /**
   * @schema Ec2ImportKeyPairResult#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ImportKeyPairResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportKeyPairResult(obj: Ec2ImportKeyPairResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KeyFingerprint': obj.keyFingerprint,
    'KeyName': obj.keyName,
    'KeyPairId': obj.keyPairId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportSnapshotRequest
 */
export interface Ec2ImportSnapshotRequest {
  /**
   * @schema Ec2ImportSnapshotRequest#ClientData
   */
  readonly clientData?: Ec2ClientData;

  /**
   * @schema Ec2ImportSnapshotRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2ImportSnapshotRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportSnapshotRequest#DiskContainer
   */
  readonly diskContainer?: Ec2SnapshotDiskContainer;

  /**
   * @schema Ec2ImportSnapshotRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ImportSnapshotRequest#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2ImportSnapshotRequest#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2ImportSnapshotRequest#RoleName
   */
  readonly roleName?: string;

  /**
   * @schema Ec2ImportSnapshotRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2ImportSnapshotRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportSnapshotRequest(obj: Ec2ImportSnapshotRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientData': toJson_Ec2ClientData(obj.clientData),
    'ClientToken': obj.clientToken,
    'Description': obj.description,
    'DiskContainer': toJson_Ec2SnapshotDiskContainer(obj.diskContainer),
    'DryRun': obj.dryRun,
    'Encrypted': obj.encrypted,
    'KmsKeyId': obj.kmsKeyId,
    'RoleName': obj.roleName,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportSnapshotResult
 */
export interface Ec2ImportSnapshotResult {
  /**
   * @schema Ec2ImportSnapshotResult#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportSnapshotResult#ImportTaskId
   */
  readonly importTaskId?: string;

  /**
   * @schema Ec2ImportSnapshotResult#SnapshotTaskDetail
   */
  readonly snapshotTaskDetail?: Ec2SnapshotTaskDetail;

  /**
   * @schema Ec2ImportSnapshotResult#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ImportSnapshotResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportSnapshotResult(obj: Ec2ImportSnapshotResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'ImportTaskId': obj.importTaskId,
    'SnapshotTaskDetail': toJson_Ec2SnapshotTaskDetail(obj.snapshotTaskDetail),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportVolumeRequest
 */
export interface Ec2ImportVolumeRequest {
  /**
   * @schema Ec2ImportVolumeRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ImportVolumeRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportVolumeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ImportVolumeRequest#Image
   */
  readonly image?: Ec2DiskImageDetail;

  /**
   * @schema Ec2ImportVolumeRequest#Volume
   */
  readonly volume?: Ec2VolumeDetail;

}

/**
 * Converts an object of type 'Ec2ImportVolumeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportVolumeRequest(obj: Ec2ImportVolumeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Description': obj.description,
    'DryRun': obj.dryRun,
    'Image': toJson_Ec2DiskImageDetail(obj.image),
    'Volume': toJson_Ec2VolumeDetail(obj.volume),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportVolumeResult
 */
export interface Ec2ImportVolumeResult {
  /**
   * @schema Ec2ImportVolumeResult#ConversionTask
   */
  readonly conversionTask?: Ec2ConversionTask;

}

/**
 * Converts an object of type 'Ec2ImportVolumeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportVolumeResult(obj: Ec2ImportVolumeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConversionTask': toJson_Ec2ConversionTask(obj.conversionTask),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyAddressAttributeRequest
 */
export interface Ec2ModifyAddressAttributeRequest {
  /**
   * @schema Ec2ModifyAddressAttributeRequest#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2ModifyAddressAttributeRequest#DomainName
   */
  readonly domainName?: string;

  /**
   * @schema Ec2ModifyAddressAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyAddressAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyAddressAttributeRequest(obj: Ec2ModifyAddressAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'DomainName': obj.domainName,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyAddressAttributeResult
 */
export interface Ec2ModifyAddressAttributeResult {
  /**
   * @schema Ec2ModifyAddressAttributeResult#Address
   */
  readonly address?: Ec2AddressAttribute;

}

/**
 * Converts an object of type 'Ec2ModifyAddressAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyAddressAttributeResult(obj: Ec2ModifyAddressAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Address': toJson_Ec2AddressAttribute(obj.address),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyAvailabilityZoneGroupRequest
 */
export interface Ec2ModifyAvailabilityZoneGroupRequest {
  /**
   * @schema Ec2ModifyAvailabilityZoneGroupRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2ModifyAvailabilityZoneGroupRequest#OptInStatus
   */
  readonly optInStatus?: string;

  /**
   * @schema Ec2ModifyAvailabilityZoneGroupRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyAvailabilityZoneGroupRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyAvailabilityZoneGroupRequest(obj: Ec2ModifyAvailabilityZoneGroupRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupName': obj.groupName,
    'OptInStatus': obj.optInStatus,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyAvailabilityZoneGroupResult
 */
export interface Ec2ModifyAvailabilityZoneGroupResult {
  /**
   * @schema Ec2ModifyAvailabilityZoneGroupResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyAvailabilityZoneGroupResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyAvailabilityZoneGroupResult(obj: Ec2ModifyAvailabilityZoneGroupResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyCapacityReservationRequest
 */
export interface Ec2ModifyCapacityReservationRequest {
  /**
   * @schema Ec2ModifyCapacityReservationRequest#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2ModifyCapacityReservationRequest#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2ModifyCapacityReservationRequest#EndDate
   */
  readonly endDate?: string;

  /**
   * @schema Ec2ModifyCapacityReservationRequest#EndDateType
   */
  readonly endDateType?: string;

  /**
   * @schema Ec2ModifyCapacityReservationRequest#Accept
   */
  readonly accept?: boolean;

  /**
   * @schema Ec2ModifyCapacityReservationRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyCapacityReservationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyCapacityReservationRequest(obj: Ec2ModifyCapacityReservationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationId': obj.capacityReservationId,
    'InstanceCount': obj.instanceCount,
    'EndDate': obj.endDate,
    'EndDateType': obj.endDateType,
    'Accept': obj.accept,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyCapacityReservationResult
 */
export interface Ec2ModifyCapacityReservationResult {
  /**
   * @schema Ec2ModifyCapacityReservationResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyCapacityReservationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyCapacityReservationResult(obj: Ec2ModifyCapacityReservationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyClientVpnEndpointRequest
 */
export interface Ec2ModifyClientVpnEndpointRequest {
  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#ServerCertificateArn
   */
  readonly serverCertificateArn?: string;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#ConnectionLogOptions
   */
  readonly connectionLogOptions?: Ec2ConnectionLogOptions;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#DnsServers
   */
  readonly dnsServers?: Ec2DnsServersOptionsModifyStructure;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#VpnPort
   */
  readonly vpnPort?: number;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#SplitTunnel
   */
  readonly splitTunnel?: boolean;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#SelfServicePortal
   */
  readonly selfServicePortal?: string;

  /**
   * @schema Ec2ModifyClientVpnEndpointRequest#ClientConnectOptions
   */
  readonly clientConnectOptions?: Ec2ClientConnectOptions;

}

/**
 * Converts an object of type 'Ec2ModifyClientVpnEndpointRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyClientVpnEndpointRequest(obj: Ec2ModifyClientVpnEndpointRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'ServerCertificateArn': obj.serverCertificateArn,
    'ConnectionLogOptions': toJson_Ec2ConnectionLogOptions(obj.connectionLogOptions),
    'DnsServers': toJson_Ec2DnsServersOptionsModifyStructure(obj.dnsServers),
    'VpnPort': obj.vpnPort,
    'Description': obj.description,
    'SplitTunnel': obj.splitTunnel,
    'DryRun': obj.dryRun,
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'VpcId': obj.vpcId,
    'SelfServicePortal': obj.selfServicePortal,
    'ClientConnectOptions': toJson_Ec2ClientConnectOptions(obj.clientConnectOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyClientVpnEndpointResult
 */
export interface Ec2ModifyClientVpnEndpointResult {
  /**
   * @schema Ec2ModifyClientVpnEndpointResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyClientVpnEndpointResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyClientVpnEndpointResult(obj: Ec2ModifyClientVpnEndpointResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyDefaultCreditSpecificationRequest
 */
export interface Ec2ModifyDefaultCreditSpecificationRequest {
  /**
   * @schema Ec2ModifyDefaultCreditSpecificationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyDefaultCreditSpecificationRequest#InstanceFamily
   */
  readonly instanceFamily?: string;

  /**
   * @schema Ec2ModifyDefaultCreditSpecificationRequest#CpuCredits
   */
  readonly cpuCredits?: string;

}

/**
 * Converts an object of type 'Ec2ModifyDefaultCreditSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyDefaultCreditSpecificationRequest(obj: Ec2ModifyDefaultCreditSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceFamily': obj.instanceFamily,
    'CpuCredits': obj.cpuCredits,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyDefaultCreditSpecificationResult
 */
export interface Ec2ModifyDefaultCreditSpecificationResult {
  /**
   * @schema Ec2ModifyDefaultCreditSpecificationResult#InstanceFamilyCreditSpecification
   */
  readonly instanceFamilyCreditSpecification?: Ec2InstanceFamilyCreditSpecification;

}

/**
 * Converts an object of type 'Ec2ModifyDefaultCreditSpecificationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyDefaultCreditSpecificationResult(obj: Ec2ModifyDefaultCreditSpecificationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceFamilyCreditSpecification': toJson_Ec2InstanceFamilyCreditSpecification(obj.instanceFamilyCreditSpecification),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyEbsDefaultKmsKeyIdRequest
 */
export interface Ec2ModifyEbsDefaultKmsKeyIdRequest {
  /**
   * @schema Ec2ModifyEbsDefaultKmsKeyIdRequest#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2ModifyEbsDefaultKmsKeyIdRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyEbsDefaultKmsKeyIdRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyEbsDefaultKmsKeyIdRequest(obj: Ec2ModifyEbsDefaultKmsKeyIdRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KmsKeyId': obj.kmsKeyId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyEbsDefaultKmsKeyIdResult
 */
export interface Ec2ModifyEbsDefaultKmsKeyIdResult {
  /**
   * @schema Ec2ModifyEbsDefaultKmsKeyIdResult#KmsKeyId
   */
  readonly kmsKeyId?: string;

}

/**
 * Converts an object of type 'Ec2ModifyEbsDefaultKmsKeyIdResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyEbsDefaultKmsKeyIdResult(obj: Ec2ModifyEbsDefaultKmsKeyIdResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KmsKeyId': obj.kmsKeyId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyFleetRequest
 */
export interface Ec2ModifyFleetRequest {
  /**
   * @schema Ec2ModifyFleetRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyFleetRequest#ExcessCapacityTerminationPolicy
   */
  readonly excessCapacityTerminationPolicy?: string;

  /**
   * @schema Ec2ModifyFleetRequest#LaunchTemplateConfigs
   */
  readonly launchTemplateConfigs?: Ec2FleetLaunchTemplateConfigRequest[];

  /**
   * @schema Ec2ModifyFleetRequest#FleetId
   */
  readonly fleetId?: string;

  /**
   * @schema Ec2ModifyFleetRequest#TargetCapacitySpecification
   */
  readonly targetCapacitySpecification?: Ec2TargetCapacitySpecificationRequest;

  /**
   * @schema Ec2ModifyFleetRequest#Context
   */
  readonly context?: string;

}

/**
 * Converts an object of type 'Ec2ModifyFleetRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyFleetRequest(obj: Ec2ModifyFleetRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ExcessCapacityTerminationPolicy': obj.excessCapacityTerminationPolicy,
    'LaunchTemplateConfigs': obj.launchTemplateConfigs?.map(y => toJson_Ec2FleetLaunchTemplateConfigRequest(y)),
    'FleetId': obj.fleetId,
    'TargetCapacitySpecification': toJson_Ec2TargetCapacitySpecificationRequest(obj.targetCapacitySpecification),
    'Context': obj.context,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyFleetResult
 */
export interface Ec2ModifyFleetResult {
  /**
   * @schema Ec2ModifyFleetResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyFleetResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyFleetResult(obj: Ec2ModifyFleetResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyFpgaImageAttributeRequest
 */
export interface Ec2ModifyFpgaImageAttributeRequest {
  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#FpgaImageId
   */
  readonly fpgaImageId?: string;

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#OperationType
   */
  readonly operationType?: string;

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#UserIds
   */
  readonly userIds?: string[];

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#UserGroups
   */
  readonly userGroups?: string[];

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#ProductCodes
   */
  readonly productCodes?: string[];

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#LoadPermission
   */
  readonly loadPermission?: Ec2LoadPermissionModifications;

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ModifyFpgaImageAttributeRequest#Name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'Ec2ModifyFpgaImageAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyFpgaImageAttributeRequest(obj: Ec2ModifyFpgaImageAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'FpgaImageId': obj.fpgaImageId,
    'Attribute': obj.attribute,
    'OperationType': obj.operationType,
    'UserIds': obj.userIds?.map(y => y),
    'UserGroups': obj.userGroups?.map(y => y),
    'ProductCodes': obj.productCodes?.map(y => y),
    'LoadPermission': toJson_Ec2LoadPermissionModifications(obj.loadPermission),
    'Description': obj.description,
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyFpgaImageAttributeResult
 */
export interface Ec2ModifyFpgaImageAttributeResult {
  /**
   * @schema Ec2ModifyFpgaImageAttributeResult#FpgaImageAttribute
   */
  readonly fpgaImageAttribute?: Ec2FpgaImageAttribute;

}

/**
 * Converts an object of type 'Ec2ModifyFpgaImageAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyFpgaImageAttributeResult(obj: Ec2ModifyFpgaImageAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FpgaImageAttribute': toJson_Ec2FpgaImageAttribute(obj.fpgaImageAttribute),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyHostsRequest
 */
export interface Ec2ModifyHostsRequest {
  /**
   * @schema Ec2ModifyHostsRequest#AutoPlacement
   */
  readonly autoPlacement?: string;

  /**
   * @schema Ec2ModifyHostsRequest#HostIds
   */
  readonly hostIds?: string[];

  /**
   * @schema Ec2ModifyHostsRequest#HostRecovery
   */
  readonly hostRecovery?: string;

  /**
   * @schema Ec2ModifyHostsRequest#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ModifyHostsRequest#InstanceFamily
   */
  readonly instanceFamily?: string;

}

/**
 * Converts an object of type 'Ec2ModifyHostsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyHostsRequest(obj: Ec2ModifyHostsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AutoPlacement': obj.autoPlacement,
    'HostIds': obj.hostIds?.map(y => y),
    'HostRecovery': obj.hostRecovery,
    'InstanceType': obj.instanceType,
    'InstanceFamily': obj.instanceFamily,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyHostsResult
 */
export interface Ec2ModifyHostsResult {
  /**
   * @schema Ec2ModifyHostsResult#Successful
   */
  readonly successful?: string[];

  /**
   * @schema Ec2ModifyHostsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2ModifyHostsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyHostsResult(obj: Ec2ModifyHostsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Successful': obj.successful?.map(y => y),
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyIdFormatRequest
 */
export interface Ec2ModifyIdFormatRequest {
  /**
   * @schema Ec2ModifyIdFormatRequest#Resource
   */
  readonly resource?: string;

  /**
   * @schema Ec2ModifyIdFormatRequest#UseLongIds
   */
  readonly useLongIds?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyIdFormatRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyIdFormatRequest(obj: Ec2ModifyIdFormatRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Resource': obj.resource,
    'UseLongIds': obj.useLongIds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyIdentityIdFormatRequest
 */
export interface Ec2ModifyIdentityIdFormatRequest {
  /**
   * @schema Ec2ModifyIdentityIdFormatRequest#PrincipalArn
   */
  readonly principalArn?: string;

  /**
   * @schema Ec2ModifyIdentityIdFormatRequest#Resource
   */
  readonly resource?: string;

  /**
   * @schema Ec2ModifyIdentityIdFormatRequest#UseLongIds
   */
  readonly useLongIds?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyIdentityIdFormatRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyIdentityIdFormatRequest(obj: Ec2ModifyIdentityIdFormatRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrincipalArn': obj.principalArn,
    'Resource': obj.resource,
    'UseLongIds': obj.useLongIds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyImageAttributeRequest
 */
export interface Ec2ModifyImageAttributeRequest {
  /**
   * @schema Ec2ModifyImageAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2ModifyImageAttributeRequest#Description
   */
  readonly description?: Ec2AttributeValue;

  /**
   * @schema Ec2ModifyImageAttributeRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ModifyImageAttributeRequest#LaunchPermission
   */
  readonly launchPermission?: Ec2LaunchPermissionModifications;

  /**
   * @schema Ec2ModifyImageAttributeRequest#OperationType
   */
  readonly operationType?: string;

  /**
   * @schema Ec2ModifyImageAttributeRequest#ProductCodes
   */
  readonly productCodes?: string[];

  /**
   * @schema Ec2ModifyImageAttributeRequest#UserGroups
   */
  readonly userGroups?: string[];

  /**
   * @schema Ec2ModifyImageAttributeRequest#UserIds
   */
  readonly userIds?: string[];

  /**
   * @schema Ec2ModifyImageAttributeRequest#Value
   */
  readonly value?: string;

  /**
   * @schema Ec2ModifyImageAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyImageAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyImageAttributeRequest(obj: Ec2ModifyImageAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'Description': toJson_Ec2AttributeValue(obj.description),
    'ImageId': obj.imageId,
    'LaunchPermission': toJson_Ec2LaunchPermissionModifications(obj.launchPermission),
    'OperationType': obj.operationType,
    'ProductCodes': obj.productCodes?.map(y => y),
    'UserGroups': obj.userGroups?.map(y => y),
    'UserIds': obj.userIds?.map(y => y),
    'Value': obj.value,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceAttributeRequest
 */
export interface Ec2ModifyInstanceAttributeRequest {
  /**
   * @schema Ec2ModifyInstanceAttributeRequest#SourceDestCheck
   */
  readonly sourceDestCheck?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2InstanceBlockDeviceMappingSpecification[];

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#DisableApiTermination
   */
  readonly disableApiTermination?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#EbsOptimized
   */
  readonly ebsOptimized?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#EnaSupport
   */
  readonly enaSupport?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#Groups
   */
  readonly groups?: string[];

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#InstanceInitiatedShutdownBehavior
   */
  readonly instanceInitiatedShutdownBehavior?: Ec2AttributeValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#InstanceType
   */
  readonly instanceType?: Ec2AttributeValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#Kernel
   */
  readonly kernel?: Ec2AttributeValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#Ramdisk
   */
  readonly ramdisk?: Ec2AttributeValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#SriovNetSupport
   */
  readonly sriovNetSupport?: Ec2AttributeValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#UserData
   */
  readonly userData?: Ec2BlobAttributeValue;

  /**
   * @schema Ec2ModifyInstanceAttributeRequest#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceAttributeRequest(obj: Ec2ModifyInstanceAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SourceDestCheck': toJson_Ec2AttributeBooleanValue(obj.sourceDestCheck),
    'Attribute': obj.attribute,
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2InstanceBlockDeviceMappingSpecification(y)),
    'DisableApiTermination': toJson_Ec2AttributeBooleanValue(obj.disableApiTermination),
    'DryRun': obj.dryRun,
    'EbsOptimized': toJson_Ec2AttributeBooleanValue(obj.ebsOptimized),
    'EnaSupport': toJson_Ec2AttributeBooleanValue(obj.enaSupport),
    'Groups': obj.groups?.map(y => y),
    'InstanceId': obj.instanceId,
    'InstanceInitiatedShutdownBehavior': toJson_Ec2AttributeValue(obj.instanceInitiatedShutdownBehavior),
    'InstanceType': toJson_Ec2AttributeValue(obj.instanceType),
    'Kernel': toJson_Ec2AttributeValue(obj.kernel),
    'Ramdisk': toJson_Ec2AttributeValue(obj.ramdisk),
    'SriovNetSupport': toJson_Ec2AttributeValue(obj.sriovNetSupport),
    'UserData': toJson_Ec2BlobAttributeValue(obj.userData),
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceCapacityReservationAttributesRequest
 */
export interface Ec2ModifyInstanceCapacityReservationAttributesRequest {
  /**
   * @schema Ec2ModifyInstanceCapacityReservationAttributesRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ModifyInstanceCapacityReservationAttributesRequest#CapacityReservationSpecification
   */
  readonly capacityReservationSpecification?: Ec2CapacityReservationSpecification;

  /**
   * @schema Ec2ModifyInstanceCapacityReservationAttributesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceCapacityReservationAttributesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceCapacityReservationAttributesRequest(obj: Ec2ModifyInstanceCapacityReservationAttributesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'CapacityReservationSpecification': toJson_Ec2CapacityReservationSpecification(obj.capacityReservationSpecification),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceCapacityReservationAttributesResult
 */
export interface Ec2ModifyInstanceCapacityReservationAttributesResult {
  /**
   * @schema Ec2ModifyInstanceCapacityReservationAttributesResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceCapacityReservationAttributesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceCapacityReservationAttributesResult(obj: Ec2ModifyInstanceCapacityReservationAttributesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceCreditSpecificationRequest
 */
export interface Ec2ModifyInstanceCreditSpecificationRequest {
  /**
   * @schema Ec2ModifyInstanceCreditSpecificationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyInstanceCreditSpecificationRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2ModifyInstanceCreditSpecificationRequest#InstanceCreditSpecifications
   */
  readonly instanceCreditSpecifications?: Ec2InstanceCreditSpecificationRequest[];

}

/**
 * Converts an object of type 'Ec2ModifyInstanceCreditSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceCreditSpecificationRequest(obj: Ec2ModifyInstanceCreditSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
    'InstanceCreditSpecifications': obj.instanceCreditSpecifications?.map(y => toJson_Ec2InstanceCreditSpecificationRequest(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceCreditSpecificationResult
 */
export interface Ec2ModifyInstanceCreditSpecificationResult {
  /**
   * @schema Ec2ModifyInstanceCreditSpecificationResult#SuccessfulInstanceCreditSpecifications
   */
  readonly successfulInstanceCreditSpecifications?: Ec2SuccessfulInstanceCreditSpecificationItem[];

  /**
   * @schema Ec2ModifyInstanceCreditSpecificationResult#UnsuccessfulInstanceCreditSpecifications
   */
  readonly unsuccessfulInstanceCreditSpecifications?: Ec2UnsuccessfulInstanceCreditSpecificationItem[];

}

/**
 * Converts an object of type 'Ec2ModifyInstanceCreditSpecificationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceCreditSpecificationResult(obj: Ec2ModifyInstanceCreditSpecificationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SuccessfulInstanceCreditSpecifications': obj.successfulInstanceCreditSpecifications?.map(y => toJson_Ec2SuccessfulInstanceCreditSpecificationItem(y)),
    'UnsuccessfulInstanceCreditSpecifications': obj.unsuccessfulInstanceCreditSpecifications?.map(y => toJson_Ec2UnsuccessfulInstanceCreditSpecificationItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceEventStartTimeRequest
 */
export interface Ec2ModifyInstanceEventStartTimeRequest {
  /**
   * @schema Ec2ModifyInstanceEventStartTimeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyInstanceEventStartTimeRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ModifyInstanceEventStartTimeRequest#InstanceEventId
   */
  readonly instanceEventId?: string;

  /**
   * @schema Ec2ModifyInstanceEventStartTimeRequest#NotBefore
   */
  readonly notBefore?: string;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceEventStartTimeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceEventStartTimeRequest(obj: Ec2ModifyInstanceEventStartTimeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceId': obj.instanceId,
    'InstanceEventId': obj.instanceEventId,
    'NotBefore': obj.notBefore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceEventStartTimeResult
 */
export interface Ec2ModifyInstanceEventStartTimeResult {
  /**
   * @schema Ec2ModifyInstanceEventStartTimeResult#Event
   */
  readonly event?: Ec2InstanceStatusEvent;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceEventStartTimeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceEventStartTimeResult(obj: Ec2ModifyInstanceEventStartTimeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Event': toJson_Ec2InstanceStatusEvent(obj.event),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceEventWindowRequest
 */
export interface Ec2ModifyInstanceEventWindowRequest {
  /**
   * @schema Ec2ModifyInstanceEventWindowRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyInstanceEventWindowRequest#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2ModifyInstanceEventWindowRequest#InstanceEventWindowId
   */
  readonly instanceEventWindowId?: string;

  /**
   * @schema Ec2ModifyInstanceEventWindowRequest#TimeRanges
   */
  readonly timeRanges?: Ec2InstanceEventWindowTimeRangeRequest[];

  /**
   * @schema Ec2ModifyInstanceEventWindowRequest#CronExpression
   */
  readonly cronExpression?: string;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceEventWindowRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceEventWindowRequest(obj: Ec2ModifyInstanceEventWindowRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'Name': obj.name,
    'InstanceEventWindowId': obj.instanceEventWindowId,
    'TimeRanges': obj.timeRanges?.map(y => toJson_Ec2InstanceEventWindowTimeRangeRequest(y)),
    'CronExpression': obj.cronExpression,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceEventWindowResult
 */
export interface Ec2ModifyInstanceEventWindowResult {
  /**
   * @schema Ec2ModifyInstanceEventWindowResult#InstanceEventWindow
   */
  readonly instanceEventWindow?: Ec2InstanceEventWindow;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceEventWindowResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceEventWindowResult(obj: Ec2ModifyInstanceEventWindowResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventWindow': toJson_Ec2InstanceEventWindow(obj.instanceEventWindow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceMetadataOptionsRequest
 */
export interface Ec2ModifyInstanceMetadataOptionsRequest {
  /**
   * @schema Ec2ModifyInstanceMetadataOptionsRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ModifyInstanceMetadataOptionsRequest#HttpTokens
   */
  readonly httpTokens?: string;

  /**
   * @schema Ec2ModifyInstanceMetadataOptionsRequest#HttpPutResponseHopLimit
   */
  readonly httpPutResponseHopLimit?: number;

  /**
   * @schema Ec2ModifyInstanceMetadataOptionsRequest#HttpEndpoint
   */
  readonly httpEndpoint?: string;

  /**
   * @schema Ec2ModifyInstanceMetadataOptionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceMetadataOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceMetadataOptionsRequest(obj: Ec2ModifyInstanceMetadataOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'HttpTokens': obj.httpTokens,
    'HttpPutResponseHopLimit': obj.httpPutResponseHopLimit,
    'HttpEndpoint': obj.httpEndpoint,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstanceMetadataOptionsResult
 */
export interface Ec2ModifyInstanceMetadataOptionsResult {
  /**
   * @schema Ec2ModifyInstanceMetadataOptionsResult#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ModifyInstanceMetadataOptionsResult#InstanceMetadataOptions
   */
  readonly instanceMetadataOptions?: Ec2InstanceMetadataOptionsResponse;

}

/**
 * Converts an object of type 'Ec2ModifyInstanceMetadataOptionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstanceMetadataOptionsResult(obj: Ec2ModifyInstanceMetadataOptionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'InstanceMetadataOptions': toJson_Ec2InstanceMetadataOptionsResponse(obj.instanceMetadataOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstancePlacementRequest
 */
export interface Ec2ModifyInstancePlacementRequest {
  /**
   * @schema Ec2ModifyInstancePlacementRequest#Affinity
   */
  readonly affinity?: string;

  /**
   * @schema Ec2ModifyInstancePlacementRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2ModifyInstancePlacementRequest#HostId
   */
  readonly hostId?: string;

  /**
   * @schema Ec2ModifyInstancePlacementRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ModifyInstancePlacementRequest#Tenancy
   */
  readonly tenancy?: string;

  /**
   * @schema Ec2ModifyInstancePlacementRequest#PartitionNumber
   */
  readonly partitionNumber?: number;

  /**
   * @schema Ec2ModifyInstancePlacementRequest#HostResourceGroupArn
   */
  readonly hostResourceGroupArn?: string;

}

/**
 * Converts an object of type 'Ec2ModifyInstancePlacementRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstancePlacementRequest(obj: Ec2ModifyInstancePlacementRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Affinity': obj.affinity,
    'GroupName': obj.groupName,
    'HostId': obj.hostId,
    'InstanceId': obj.instanceId,
    'Tenancy': obj.tenancy,
    'PartitionNumber': obj.partitionNumber,
    'HostResourceGroupArn': obj.hostResourceGroupArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyInstancePlacementResult
 */
export interface Ec2ModifyInstancePlacementResult {
  /**
   * @schema Ec2ModifyInstancePlacementResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyInstancePlacementResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyInstancePlacementResult(obj: Ec2ModifyInstancePlacementResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyLaunchTemplateRequest
 */
export interface Ec2ModifyLaunchTemplateRequest {
  /**
   * @schema Ec2ModifyLaunchTemplateRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyLaunchTemplateRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2ModifyLaunchTemplateRequest#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2ModifyLaunchTemplateRequest#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2ModifyLaunchTemplateRequest#DefaultVersion
   */
  readonly defaultVersion?: string;

}

/**
 * Converts an object of type 'Ec2ModifyLaunchTemplateRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyLaunchTemplateRequest(obj: Ec2ModifyLaunchTemplateRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ClientToken': obj.clientToken,
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'DefaultVersion': obj.defaultVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyLaunchTemplateResult
 */
export interface Ec2ModifyLaunchTemplateResult {
  /**
   * @schema Ec2ModifyLaunchTemplateResult#LaunchTemplate
   */
  readonly launchTemplate?: Ec2LaunchTemplate;

}

/**
 * Converts an object of type 'Ec2ModifyLaunchTemplateResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyLaunchTemplateResult(obj: Ec2ModifyLaunchTemplateResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplate': toJson_Ec2LaunchTemplate(obj.launchTemplate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyManagedPrefixListRequest
 */
export interface Ec2ModifyManagedPrefixListRequest {
  /**
   * @schema Ec2ModifyManagedPrefixListRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyManagedPrefixListRequest#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2ModifyManagedPrefixListRequest#CurrentVersion
   */
  readonly currentVersion?: number;

  /**
   * @schema Ec2ModifyManagedPrefixListRequest#PrefixListName
   */
  readonly prefixListName?: string;

  /**
   * @schema Ec2ModifyManagedPrefixListRequest#AddEntries
   */
  readonly addEntries?: Ec2AddPrefixListEntry[];

  /**
   * @schema Ec2ModifyManagedPrefixListRequest#RemoveEntries
   */
  readonly removeEntries?: Ec2RemovePrefixListEntry[];

}

/**
 * Converts an object of type 'Ec2ModifyManagedPrefixListRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyManagedPrefixListRequest(obj: Ec2ModifyManagedPrefixListRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PrefixListId': obj.prefixListId,
    'CurrentVersion': obj.currentVersion,
    'PrefixListName': obj.prefixListName,
    'AddEntries': obj.addEntries?.map(y => toJson_Ec2AddPrefixListEntry(y)),
    'RemoveEntries': obj.removeEntries?.map(y => toJson_Ec2RemovePrefixListEntry(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyManagedPrefixListResult
 */
export interface Ec2ModifyManagedPrefixListResult {
  /**
   * @schema Ec2ModifyManagedPrefixListResult#PrefixList
   */
  readonly prefixList?: Ec2ManagedPrefixList;

}

/**
 * Converts an object of type 'Ec2ModifyManagedPrefixListResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyManagedPrefixListResult(obj: Ec2ModifyManagedPrefixListResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrefixList': toJson_Ec2ManagedPrefixList(obj.prefixList),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyNetworkInterfaceAttributeRequest
 */
export interface Ec2ModifyNetworkInterfaceAttributeRequest {
  /**
   * @schema Ec2ModifyNetworkInterfaceAttributeRequest#Attachment
   */
  readonly attachment?: Ec2NetworkInterfaceAttachmentChanges;

  /**
   * @schema Ec2ModifyNetworkInterfaceAttributeRequest#Description
   */
  readonly description?: Ec2AttributeValue;

  /**
   * @schema Ec2ModifyNetworkInterfaceAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyNetworkInterfaceAttributeRequest#Groups
   */
  readonly groups?: string[];

  /**
   * @schema Ec2ModifyNetworkInterfaceAttributeRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2ModifyNetworkInterfaceAttributeRequest#SourceDestCheck
   */
  readonly sourceDestCheck?: Ec2AttributeBooleanValue;

}

/**
 * Converts an object of type 'Ec2ModifyNetworkInterfaceAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyNetworkInterfaceAttributeRequest(obj: Ec2ModifyNetworkInterfaceAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attachment': toJson_Ec2NetworkInterfaceAttachmentChanges(obj.attachment),
    'Description': toJson_Ec2AttributeValue(obj.description),
    'DryRun': obj.dryRun,
    'Groups': obj.groups?.map(y => y),
    'NetworkInterfaceId': obj.networkInterfaceId,
    'SourceDestCheck': toJson_Ec2AttributeBooleanValue(obj.sourceDestCheck),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyReservedInstancesRequest
 */
export interface Ec2ModifyReservedInstancesRequest {
  /**
   * @schema Ec2ModifyReservedInstancesRequest#ReservedInstancesIds
   */
  readonly reservedInstancesIds?: string[];

  /**
   * @schema Ec2ModifyReservedInstancesRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2ModifyReservedInstancesRequest#TargetConfigurations
   */
  readonly targetConfigurations?: Ec2ReservedInstancesConfiguration[];

}

/**
 * Converts an object of type 'Ec2ModifyReservedInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyReservedInstancesRequest(obj: Ec2ModifyReservedInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesIds': obj.reservedInstancesIds?.map(y => y),
    'ClientToken': obj.clientToken,
    'TargetConfigurations': obj.targetConfigurations?.map(y => toJson_Ec2ReservedInstancesConfiguration(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyReservedInstancesResult
 */
export interface Ec2ModifyReservedInstancesResult {
  /**
   * @schema Ec2ModifyReservedInstancesResult#ReservedInstancesModificationId
   */
  readonly reservedInstancesModificationId?: string;

}

/**
 * Converts an object of type 'Ec2ModifyReservedInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyReservedInstancesResult(obj: Ec2ModifyReservedInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesModificationId': obj.reservedInstancesModificationId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifySecurityGroupRulesRequest
 */
export interface Ec2ModifySecurityGroupRulesRequest {
  /**
   * @schema Ec2ModifySecurityGroupRulesRequest#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2ModifySecurityGroupRulesRequest#SecurityGroupRules
   */
  readonly securityGroupRules?: Ec2SecurityGroupRuleUpdate[];

  /**
   * @schema Ec2ModifySecurityGroupRulesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifySecurityGroupRulesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifySecurityGroupRulesRequest(obj: Ec2ModifySecurityGroupRulesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupId': obj.groupId,
    'SecurityGroupRules': obj.securityGroupRules?.map(y => toJson_Ec2SecurityGroupRuleUpdate(y)),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifySecurityGroupRulesResult
 */
export interface Ec2ModifySecurityGroupRulesResult {
  /**
   * @schema Ec2ModifySecurityGroupRulesResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifySecurityGroupRulesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifySecurityGroupRulesResult(obj: Ec2ModifySecurityGroupRulesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifySnapshotAttributeRequest
 */
export interface Ec2ModifySnapshotAttributeRequest {
  /**
   * @schema Ec2ModifySnapshotAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2ModifySnapshotAttributeRequest#CreateVolumePermission
   */
  readonly createVolumePermission?: Ec2CreateVolumePermissionModifications;

  /**
   * @schema Ec2ModifySnapshotAttributeRequest#GroupNames
   */
  readonly groupNames?: string[];

  /**
   * @schema Ec2ModifySnapshotAttributeRequest#OperationType
   */
  readonly operationType?: string;

  /**
   * @schema Ec2ModifySnapshotAttributeRequest#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2ModifySnapshotAttributeRequest#UserIds
   */
  readonly userIds?: string[];

  /**
   * @schema Ec2ModifySnapshotAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifySnapshotAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifySnapshotAttributeRequest(obj: Ec2ModifySnapshotAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'CreateVolumePermission': toJson_Ec2CreateVolumePermissionModifications(obj.createVolumePermission),
    'GroupNames': obj.groupNames?.map(y => y),
    'OperationType': obj.operationType,
    'SnapshotId': obj.snapshotId,
    'UserIds': obj.userIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifySpotFleetRequestRequest
 */
export interface Ec2ModifySpotFleetRequestRequest {
  /**
   * @schema Ec2ModifySpotFleetRequestRequest#ExcessCapacityTerminationPolicy
   */
  readonly excessCapacityTerminationPolicy?: string;

  /**
   * @schema Ec2ModifySpotFleetRequestRequest#LaunchTemplateConfigs
   */
  readonly launchTemplateConfigs?: Ec2LaunchTemplateConfig[];

  /**
   * @schema Ec2ModifySpotFleetRequestRequest#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

  /**
   * @schema Ec2ModifySpotFleetRequestRequest#TargetCapacity
   */
  readonly targetCapacity?: number;

  /**
   * @schema Ec2ModifySpotFleetRequestRequest#OnDemandTargetCapacity
   */
  readonly onDemandTargetCapacity?: number;

  /**
   * @schema Ec2ModifySpotFleetRequestRequest#Context
   */
  readonly context?: string;

}

/**
 * Converts an object of type 'Ec2ModifySpotFleetRequestRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifySpotFleetRequestRequest(obj: Ec2ModifySpotFleetRequestRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExcessCapacityTerminationPolicy': obj.excessCapacityTerminationPolicy,
    'LaunchTemplateConfigs': obj.launchTemplateConfigs?.map(y => toJson_Ec2LaunchTemplateConfig(y)),
    'SpotFleetRequestId': obj.spotFleetRequestId,
    'TargetCapacity': obj.targetCapacity,
    'OnDemandTargetCapacity': obj.onDemandTargetCapacity,
    'Context': obj.context,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifySpotFleetRequestResponse
 */
export interface Ec2ModifySpotFleetRequestResponse {
  /**
   * @schema Ec2ModifySpotFleetRequestResponse#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifySpotFleetRequestResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifySpotFleetRequestResponse(obj: Ec2ModifySpotFleetRequestResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifySubnetAttributeRequest
 */
export interface Ec2ModifySubnetAttributeRequest {
  /**
   * @schema Ec2ModifySubnetAttributeRequest#AssignIpv6AddressOnCreation
   */
  readonly assignIpv6AddressOnCreation?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifySubnetAttributeRequest#MapPublicIpOnLaunch
   */
  readonly mapPublicIpOnLaunch?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifySubnetAttributeRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2ModifySubnetAttributeRequest#MapCustomerOwnedIpOnLaunch
   */
  readonly mapCustomerOwnedIpOnLaunch?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifySubnetAttributeRequest#CustomerOwnedIpv4Pool
   */
  readonly customerOwnedIpv4Pool?: string;

}

/**
 * Converts an object of type 'Ec2ModifySubnetAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifySubnetAttributeRequest(obj: Ec2ModifySubnetAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssignIpv6AddressOnCreation': toJson_Ec2AttributeBooleanValue(obj.assignIpv6AddressOnCreation),
    'MapPublicIpOnLaunch': toJson_Ec2AttributeBooleanValue(obj.mapPublicIpOnLaunch),
    'SubnetId': obj.subnetId,
    'MapCustomerOwnedIpOnLaunch': toJson_Ec2AttributeBooleanValue(obj.mapCustomerOwnedIpOnLaunch),
    'CustomerOwnedIpv4Pool': obj.customerOwnedIpv4Pool,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTrafficMirrorFilterNetworkServicesRequest
 */
export interface Ec2ModifyTrafficMirrorFilterNetworkServicesRequest {
  /**
   * @schema Ec2ModifyTrafficMirrorFilterNetworkServicesRequest#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterNetworkServicesRequest#AddNetworkServices
   */
  readonly addNetworkServices?: string[];

  /**
   * @schema Ec2ModifyTrafficMirrorFilterNetworkServicesRequest#RemoveNetworkServices
   */
  readonly removeNetworkServices?: string[];

  /**
   * @schema Ec2ModifyTrafficMirrorFilterNetworkServicesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyTrafficMirrorFilterNetworkServicesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTrafficMirrorFilterNetworkServicesRequest(obj: Ec2ModifyTrafficMirrorFilterNetworkServicesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
    'AddNetworkServices': obj.addNetworkServices?.map(y => y),
    'RemoveNetworkServices': obj.removeNetworkServices?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTrafficMirrorFilterNetworkServicesResult
 */
export interface Ec2ModifyTrafficMirrorFilterNetworkServicesResult {
  /**
   * @schema Ec2ModifyTrafficMirrorFilterNetworkServicesResult#TrafficMirrorFilter
   */
  readonly trafficMirrorFilter?: Ec2TrafficMirrorFilter;

}

/**
 * Converts an object of type 'Ec2ModifyTrafficMirrorFilterNetworkServicesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTrafficMirrorFilterNetworkServicesResult(obj: Ec2ModifyTrafficMirrorFilterNetworkServicesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilter': toJson_Ec2TrafficMirrorFilter(obj.trafficMirrorFilter),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTrafficMirrorFilterRuleRequest
 */
export interface Ec2ModifyTrafficMirrorFilterRuleRequest {
  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#TrafficMirrorFilterRuleId
   */
  readonly trafficMirrorFilterRuleId?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#TrafficDirection
   */
  readonly trafficDirection?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#RuleNumber
   */
  readonly ruleNumber?: number;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#RuleAction
   */
  readonly ruleAction?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#DestinationPortRange
   */
  readonly destinationPortRange?: Ec2TrafficMirrorPortRangeRequest;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#SourcePortRange
   */
  readonly sourcePortRange?: Ec2TrafficMirrorPortRangeRequest;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#Protocol
   */
  readonly protocol?: number;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#SourceCidrBlock
   */
  readonly sourceCidrBlock?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#RemoveFields
   */
  readonly removeFields?: string[];

  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyTrafficMirrorFilterRuleRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTrafficMirrorFilterRuleRequest(obj: Ec2ModifyTrafficMirrorFilterRuleRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterRuleId': obj.trafficMirrorFilterRuleId,
    'TrafficDirection': obj.trafficDirection,
    'RuleNumber': obj.ruleNumber,
    'RuleAction': obj.ruleAction,
    'DestinationPortRange': toJson_Ec2TrafficMirrorPortRangeRequest(obj.destinationPortRange),
    'SourcePortRange': toJson_Ec2TrafficMirrorPortRangeRequest(obj.sourcePortRange),
    'Protocol': obj.protocol,
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'SourceCidrBlock': obj.sourceCidrBlock,
    'Description': obj.description,
    'RemoveFields': obj.removeFields?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTrafficMirrorFilterRuleResult
 */
export interface Ec2ModifyTrafficMirrorFilterRuleResult {
  /**
   * @schema Ec2ModifyTrafficMirrorFilterRuleResult#TrafficMirrorFilterRule
   */
  readonly trafficMirrorFilterRule?: Ec2TrafficMirrorFilterRule;

}

/**
 * Converts an object of type 'Ec2ModifyTrafficMirrorFilterRuleResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTrafficMirrorFilterRuleResult(obj: Ec2ModifyTrafficMirrorFilterRuleResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterRule': toJson_Ec2TrafficMirrorFilterRule(obj.trafficMirrorFilterRule),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTrafficMirrorSessionRequest
 */
export interface Ec2ModifyTrafficMirrorSessionRequest {
  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#TrafficMirrorSessionId
   */
  readonly trafficMirrorSessionId?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#TrafficMirrorTargetId
   */
  readonly trafficMirrorTargetId?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#PacketLength
   */
  readonly packetLength?: number;

  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#SessionNumber
   */
  readonly sessionNumber?: number;

  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#VirtualNetworkId
   */
  readonly virtualNetworkId?: number;

  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#RemoveFields
   */
  readonly removeFields?: string[];

  /**
   * @schema Ec2ModifyTrafficMirrorSessionRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyTrafficMirrorSessionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTrafficMirrorSessionRequest(obj: Ec2ModifyTrafficMirrorSessionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorSessionId': obj.trafficMirrorSessionId,
    'TrafficMirrorTargetId': obj.trafficMirrorTargetId,
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
    'PacketLength': obj.packetLength,
    'SessionNumber': obj.sessionNumber,
    'VirtualNetworkId': obj.virtualNetworkId,
    'Description': obj.description,
    'RemoveFields': obj.removeFields?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTrafficMirrorSessionResult
 */
export interface Ec2ModifyTrafficMirrorSessionResult {
  /**
   * @schema Ec2ModifyTrafficMirrorSessionResult#TrafficMirrorSession
   */
  readonly trafficMirrorSession?: Ec2TrafficMirrorSession;

}

/**
 * Converts an object of type 'Ec2ModifyTrafficMirrorSessionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTrafficMirrorSessionResult(obj: Ec2ModifyTrafficMirrorSessionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorSession': toJson_Ec2TrafficMirrorSession(obj.trafficMirrorSession),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTransitGatewayRequest
 */
export interface Ec2ModifyTransitGatewayRequest {
  /**
   * @schema Ec2ModifyTransitGatewayRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2ModifyTransitGatewayRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ModifyTransitGatewayRequest#Options
   */
  readonly options?: Ec2ModifyTransitGatewayOptions;

  /**
   * @schema Ec2ModifyTransitGatewayRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyTransitGatewayRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTransitGatewayRequest(obj: Ec2ModifyTransitGatewayRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayId': obj.transitGatewayId,
    'Description': obj.description,
    'Options': toJson_Ec2ModifyTransitGatewayOptions(obj.options),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTransitGatewayResult
 */
export interface Ec2ModifyTransitGatewayResult {
  /**
   * @schema Ec2ModifyTransitGatewayResult#TransitGateway
   */
  readonly transitGateway?: Ec2TransitGateway;

}

/**
 * Converts an object of type 'Ec2ModifyTransitGatewayResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTransitGatewayResult(obj: Ec2ModifyTransitGatewayResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGateway': toJson_Ec2TransitGateway(obj.transitGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTransitGatewayPrefixListReferenceRequest
 */
export interface Ec2ModifyTransitGatewayPrefixListReferenceRequest {
  /**
   * @schema Ec2ModifyTransitGatewayPrefixListReferenceRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2ModifyTransitGatewayPrefixListReferenceRequest#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2ModifyTransitGatewayPrefixListReferenceRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2ModifyTransitGatewayPrefixListReferenceRequest#Blackhole
   */
  readonly blackhole?: boolean;

  /**
   * @schema Ec2ModifyTransitGatewayPrefixListReferenceRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyTransitGatewayPrefixListReferenceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTransitGatewayPrefixListReferenceRequest(obj: Ec2ModifyTransitGatewayPrefixListReferenceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'PrefixListId': obj.prefixListId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'Blackhole': obj.blackhole,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTransitGatewayPrefixListReferenceResult
 */
export interface Ec2ModifyTransitGatewayPrefixListReferenceResult {
  /**
   * @schema Ec2ModifyTransitGatewayPrefixListReferenceResult#TransitGatewayPrefixListReference
   */
  readonly transitGatewayPrefixListReference?: Ec2TransitGatewayPrefixListReference;

}

/**
 * Converts an object of type 'Ec2ModifyTransitGatewayPrefixListReferenceResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTransitGatewayPrefixListReferenceResult(obj: Ec2ModifyTransitGatewayPrefixListReferenceResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPrefixListReference': toJson_Ec2TransitGatewayPrefixListReference(obj.transitGatewayPrefixListReference),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTransitGatewayVpcAttachmentRequest
 */
export interface Ec2ModifyTransitGatewayVpcAttachmentRequest {
  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentRequest#AddSubnetIds
   */
  readonly addSubnetIds?: string[];

  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentRequest#RemoveSubnetIds
   */
  readonly removeSubnetIds?: string[];

  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentRequest#Options
   */
  readonly options?: Ec2ModifyTransitGatewayVpcAttachmentRequestOptions;

  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyTransitGatewayVpcAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTransitGatewayVpcAttachmentRequest(obj: Ec2ModifyTransitGatewayVpcAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'AddSubnetIds': obj.addSubnetIds?.map(y => y),
    'RemoveSubnetIds': obj.removeSubnetIds?.map(y => y),
    'Options': toJson_Ec2ModifyTransitGatewayVpcAttachmentRequestOptions(obj.options),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTransitGatewayVpcAttachmentResult
 */
export interface Ec2ModifyTransitGatewayVpcAttachmentResult {
  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentResult#TransitGatewayVpcAttachment
   */
  readonly transitGatewayVpcAttachment?: Ec2TransitGatewayVpcAttachment;

}

/**
 * Converts an object of type 'Ec2ModifyTransitGatewayVpcAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTransitGatewayVpcAttachmentResult(obj: Ec2ModifyTransitGatewayVpcAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayVpcAttachment': toJson_Ec2TransitGatewayVpcAttachment(obj.transitGatewayVpcAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVolumeRequest
 */
export interface Ec2ModifyVolumeRequest {
  /**
   * @schema Ec2ModifyVolumeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyVolumeRequest#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2ModifyVolumeRequest#Size
   */
  readonly size?: number;

  /**
   * @schema Ec2ModifyVolumeRequest#VolumeType
   */
  readonly volumeType?: string;

  /**
   * @schema Ec2ModifyVolumeRequest#Iops
   */
  readonly iops?: number;

  /**
   * @schema Ec2ModifyVolumeRequest#Throughput
   */
  readonly throughput?: number;

  /**
   * @schema Ec2ModifyVolumeRequest#MultiAttachEnabled
   */
  readonly multiAttachEnabled?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVolumeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVolumeRequest(obj: Ec2ModifyVolumeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VolumeId': obj.volumeId,
    'Size': obj.size,
    'VolumeType': obj.volumeType,
    'Iops': obj.iops,
    'Throughput': obj.throughput,
    'MultiAttachEnabled': obj.multiAttachEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVolumeResult
 */
export interface Ec2ModifyVolumeResult {
  /**
   * @schema Ec2ModifyVolumeResult#VolumeModification
   */
  readonly volumeModification?: Ec2VolumeModification;

}

/**
 * Converts an object of type 'Ec2ModifyVolumeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVolumeResult(obj: Ec2ModifyVolumeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VolumeModification': toJson_Ec2VolumeModification(obj.volumeModification),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVolumeAttributeRequest
 */
export interface Ec2ModifyVolumeAttributeRequest {
  /**
   * @schema Ec2ModifyVolumeAttributeRequest#AutoEnableIO
   */
  readonly autoEnableIo?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifyVolumeAttributeRequest#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2ModifyVolumeAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVolumeAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVolumeAttributeRequest(obj: Ec2ModifyVolumeAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AutoEnableIO': toJson_Ec2AttributeBooleanValue(obj.autoEnableIo),
    'VolumeId': obj.volumeId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcAttributeRequest
 */
export interface Ec2ModifyVpcAttributeRequest {
  /**
   * @schema Ec2ModifyVpcAttributeRequest#EnableDnsHostnames
   */
  readonly enableDnsHostnames?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifyVpcAttributeRequest#EnableDnsSupport
   */
  readonly enableDnsSupport?: Ec2AttributeBooleanValue;

  /**
   * @schema Ec2ModifyVpcAttributeRequest#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2ModifyVpcAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcAttributeRequest(obj: Ec2ModifyVpcAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EnableDnsHostnames': toJson_Ec2AttributeBooleanValue(obj.enableDnsHostnames),
    'EnableDnsSupport': toJson_Ec2AttributeBooleanValue(obj.enableDnsSupport),
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcEndpointRequest
 */
export interface Ec2ModifyVpcEndpointRequest {
  /**
   * @schema Ec2ModifyVpcEndpointRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyVpcEndpointRequest#VpcEndpointId
   */
  readonly vpcEndpointId?: string;

  /**
   * @schema Ec2ModifyVpcEndpointRequest#ResetPolicy
   */
  readonly resetPolicy?: boolean;

  /**
   * @schema Ec2ModifyVpcEndpointRequest#PolicyDocument
   */
  readonly policyDocument?: string;

  /**
   * @schema Ec2ModifyVpcEndpointRequest#AddRouteTableIds
   */
  readonly addRouteTableIds?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointRequest#RemoveRouteTableIds
   */
  readonly removeRouteTableIds?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointRequest#AddSubnetIds
   */
  readonly addSubnetIds?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointRequest#RemoveSubnetIds
   */
  readonly removeSubnetIds?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointRequest#AddSecurityGroupIds
   */
  readonly addSecurityGroupIds?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointRequest#RemoveSecurityGroupIds
   */
  readonly removeSecurityGroupIds?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointRequest#PrivateDnsEnabled
   */
  readonly privateDnsEnabled?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpcEndpointRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcEndpointRequest(obj: Ec2ModifyVpcEndpointRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcEndpointId': obj.vpcEndpointId,
    'ResetPolicy': obj.resetPolicy,
    'PolicyDocument': obj.policyDocument,
    'AddRouteTableIds': obj.addRouteTableIds?.map(y => y),
    'RemoveRouteTableIds': obj.removeRouteTableIds?.map(y => y),
    'AddSubnetIds': obj.addSubnetIds?.map(y => y),
    'RemoveSubnetIds': obj.removeSubnetIds?.map(y => y),
    'AddSecurityGroupIds': obj.addSecurityGroupIds?.map(y => y),
    'RemoveSecurityGroupIds': obj.removeSecurityGroupIds?.map(y => y),
    'PrivateDnsEnabled': obj.privateDnsEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcEndpointResult
 */
export interface Ec2ModifyVpcEndpointResult {
  /**
   * @schema Ec2ModifyVpcEndpointResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpcEndpointResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcEndpointResult(obj: Ec2ModifyVpcEndpointResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcEndpointConnectionNotificationRequest
 */
export interface Ec2ModifyVpcEndpointConnectionNotificationRequest {
  /**
   * @schema Ec2ModifyVpcEndpointConnectionNotificationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyVpcEndpointConnectionNotificationRequest#ConnectionNotificationId
   */
  readonly connectionNotificationId?: string;

  /**
   * @schema Ec2ModifyVpcEndpointConnectionNotificationRequest#ConnectionNotificationArn
   */
  readonly connectionNotificationArn?: string;

  /**
   * @schema Ec2ModifyVpcEndpointConnectionNotificationRequest#ConnectionEvents
   */
  readonly connectionEvents?: string[];

}

/**
 * Converts an object of type 'Ec2ModifyVpcEndpointConnectionNotificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcEndpointConnectionNotificationRequest(obj: Ec2ModifyVpcEndpointConnectionNotificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ConnectionNotificationId': obj.connectionNotificationId,
    'ConnectionNotificationArn': obj.connectionNotificationArn,
    'ConnectionEvents': obj.connectionEvents?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcEndpointConnectionNotificationResult
 */
export interface Ec2ModifyVpcEndpointConnectionNotificationResult {
  /**
   * @schema Ec2ModifyVpcEndpointConnectionNotificationResult#ReturnValue
   */
  readonly returnValue?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpcEndpointConnectionNotificationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcEndpointConnectionNotificationResult(obj: Ec2ModifyVpcEndpointConnectionNotificationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReturnValue': obj.returnValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest
 */
export interface Ec2ModifyVpcEndpointServiceConfigurationRequest {
  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#RemovePrivateDnsName
   */
  readonly removePrivateDnsName?: boolean;

  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#AcceptanceRequired
   */
  readonly acceptanceRequired?: boolean;

  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#AddNetworkLoadBalancerArns
   */
  readonly addNetworkLoadBalancerArns?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#RemoveNetworkLoadBalancerArns
   */
  readonly removeNetworkLoadBalancerArns?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#AddGatewayLoadBalancerArns
   */
  readonly addGatewayLoadBalancerArns?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationRequest#RemoveGatewayLoadBalancerArns
   */
  readonly removeGatewayLoadBalancerArns?: string[];

}

/**
 * Converts an object of type 'Ec2ModifyVpcEndpointServiceConfigurationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcEndpointServiceConfigurationRequest(obj: Ec2ModifyVpcEndpointServiceConfigurationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceId': obj.serviceId,
    'PrivateDnsName': obj.privateDnsName,
    'RemovePrivateDnsName': obj.removePrivateDnsName,
    'AcceptanceRequired': obj.acceptanceRequired,
    'AddNetworkLoadBalancerArns': obj.addNetworkLoadBalancerArns?.map(y => y),
    'RemoveNetworkLoadBalancerArns': obj.removeNetworkLoadBalancerArns?.map(y => y),
    'AddGatewayLoadBalancerArns': obj.addGatewayLoadBalancerArns?.map(y => y),
    'RemoveGatewayLoadBalancerArns': obj.removeGatewayLoadBalancerArns?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcEndpointServiceConfigurationResult
 */
export interface Ec2ModifyVpcEndpointServiceConfigurationResult {
  /**
   * @schema Ec2ModifyVpcEndpointServiceConfigurationResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpcEndpointServiceConfigurationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcEndpointServiceConfigurationResult(obj: Ec2ModifyVpcEndpointServiceConfigurationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcEndpointServicePermissionsRequest
 */
export interface Ec2ModifyVpcEndpointServicePermissionsRequest {
  /**
   * @schema Ec2ModifyVpcEndpointServicePermissionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyVpcEndpointServicePermissionsRequest#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2ModifyVpcEndpointServicePermissionsRequest#AddAllowedPrincipals
   */
  readonly addAllowedPrincipals?: string[];

  /**
   * @schema Ec2ModifyVpcEndpointServicePermissionsRequest#RemoveAllowedPrincipals
   */
  readonly removeAllowedPrincipals?: string[];

}

/**
 * Converts an object of type 'Ec2ModifyVpcEndpointServicePermissionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcEndpointServicePermissionsRequest(obj: Ec2ModifyVpcEndpointServicePermissionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceId': obj.serviceId,
    'AddAllowedPrincipals': obj.addAllowedPrincipals?.map(y => y),
    'RemoveAllowedPrincipals': obj.removeAllowedPrincipals?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcEndpointServicePermissionsResult
 */
export interface Ec2ModifyVpcEndpointServicePermissionsResult {
  /**
   * @schema Ec2ModifyVpcEndpointServicePermissionsResult#ReturnValue
   */
  readonly returnValue?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpcEndpointServicePermissionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcEndpointServicePermissionsResult(obj: Ec2ModifyVpcEndpointServicePermissionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReturnValue': obj.returnValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcPeeringConnectionOptionsRequest
 */
export interface Ec2ModifyVpcPeeringConnectionOptionsRequest {
  /**
   * @schema Ec2ModifyVpcPeeringConnectionOptionsRequest#AccepterPeeringConnectionOptions
   */
  readonly accepterPeeringConnectionOptions?: Ec2PeeringConnectionOptionsRequest;

  /**
   * @schema Ec2ModifyVpcPeeringConnectionOptionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ModifyVpcPeeringConnectionOptionsRequest#RequesterPeeringConnectionOptions
   */
  readonly requesterPeeringConnectionOptions?: Ec2PeeringConnectionOptionsRequest;

  /**
   * @schema Ec2ModifyVpcPeeringConnectionOptionsRequest#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2ModifyVpcPeeringConnectionOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcPeeringConnectionOptionsRequest(obj: Ec2ModifyVpcPeeringConnectionOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AccepterPeeringConnectionOptions': toJson_Ec2PeeringConnectionOptionsRequest(obj.accepterPeeringConnectionOptions),
    'DryRun': obj.dryRun,
    'RequesterPeeringConnectionOptions': toJson_Ec2PeeringConnectionOptionsRequest(obj.requesterPeeringConnectionOptions),
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcPeeringConnectionOptionsResult
 */
export interface Ec2ModifyVpcPeeringConnectionOptionsResult {
  /**
   * @schema Ec2ModifyVpcPeeringConnectionOptionsResult#AccepterPeeringConnectionOptions
   */
  readonly accepterPeeringConnectionOptions?: Ec2PeeringConnectionOptions;

  /**
   * @schema Ec2ModifyVpcPeeringConnectionOptionsResult#RequesterPeeringConnectionOptions
   */
  readonly requesterPeeringConnectionOptions?: Ec2PeeringConnectionOptions;

}

/**
 * Converts an object of type 'Ec2ModifyVpcPeeringConnectionOptionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcPeeringConnectionOptionsResult(obj: Ec2ModifyVpcPeeringConnectionOptionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AccepterPeeringConnectionOptions': toJson_Ec2PeeringConnectionOptions(obj.accepterPeeringConnectionOptions),
    'RequesterPeeringConnectionOptions': toJson_Ec2PeeringConnectionOptions(obj.requesterPeeringConnectionOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcTenancyRequest
 */
export interface Ec2ModifyVpcTenancyRequest {
  /**
   * @schema Ec2ModifyVpcTenancyRequest#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2ModifyVpcTenancyRequest#InstanceTenancy
   */
  readonly instanceTenancy?: string;

  /**
   * @schema Ec2ModifyVpcTenancyRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpcTenancyRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcTenancyRequest(obj: Ec2ModifyVpcTenancyRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcId': obj.vpcId,
    'InstanceTenancy': obj.instanceTenancy,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpcTenancyResult
 */
export interface Ec2ModifyVpcTenancyResult {
  /**
   * @schema Ec2ModifyVpcTenancyResult#ReturnValue
   */
  readonly returnValue?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpcTenancyResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpcTenancyResult(obj: Ec2ModifyVpcTenancyResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReturnValue': obj.returnValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnConnectionRequest
 */
export interface Ec2ModifyVpnConnectionRequest {
  /**
   * @schema Ec2ModifyVpnConnectionRequest#VpnConnectionId
   */
  readonly vpnConnectionId?: string;

  /**
   * @schema Ec2ModifyVpnConnectionRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2ModifyVpnConnectionRequest#CustomerGatewayId
   */
  readonly customerGatewayId?: string;

  /**
   * @schema Ec2ModifyVpnConnectionRequest#VpnGatewayId
   */
  readonly vpnGatewayId?: string;

  /**
   * @schema Ec2ModifyVpnConnectionRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpnConnectionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnConnectionRequest(obj: Ec2ModifyVpnConnectionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnectionId': obj.vpnConnectionId,
    'TransitGatewayId': obj.transitGatewayId,
    'CustomerGatewayId': obj.customerGatewayId,
    'VpnGatewayId': obj.vpnGatewayId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnConnectionResult
 */
export interface Ec2ModifyVpnConnectionResult {
  /**
   * @schema Ec2ModifyVpnConnectionResult#VpnConnection
   */
  readonly vpnConnection?: Ec2VpnConnection;

}

/**
 * Converts an object of type 'Ec2ModifyVpnConnectionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnConnectionResult(obj: Ec2ModifyVpnConnectionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnection': toJson_Ec2VpnConnection(obj.vpnConnection),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnConnectionOptionsRequest
 */
export interface Ec2ModifyVpnConnectionOptionsRequest {
  /**
   * @schema Ec2ModifyVpnConnectionOptionsRequest#VpnConnectionId
   */
  readonly vpnConnectionId?: string;

  /**
   * @schema Ec2ModifyVpnConnectionOptionsRequest#LocalIpv4NetworkCidr
   */
  readonly localIpv4NetworkCidr?: string;

  /**
   * @schema Ec2ModifyVpnConnectionOptionsRequest#RemoteIpv4NetworkCidr
   */
  readonly remoteIpv4NetworkCidr?: string;

  /**
   * @schema Ec2ModifyVpnConnectionOptionsRequest#LocalIpv6NetworkCidr
   */
  readonly localIpv6NetworkCidr?: string;

  /**
   * @schema Ec2ModifyVpnConnectionOptionsRequest#RemoteIpv6NetworkCidr
   */
  readonly remoteIpv6NetworkCidr?: string;

  /**
   * @schema Ec2ModifyVpnConnectionOptionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpnConnectionOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnConnectionOptionsRequest(obj: Ec2ModifyVpnConnectionOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnectionId': obj.vpnConnectionId,
    'LocalIpv4NetworkCidr': obj.localIpv4NetworkCidr,
    'RemoteIpv4NetworkCidr': obj.remoteIpv4NetworkCidr,
    'LocalIpv6NetworkCidr': obj.localIpv6NetworkCidr,
    'RemoteIpv6NetworkCidr': obj.remoteIpv6NetworkCidr,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnConnectionOptionsResult
 */
export interface Ec2ModifyVpnConnectionOptionsResult {
  /**
   * @schema Ec2ModifyVpnConnectionOptionsResult#VpnConnection
   */
  readonly vpnConnection?: Ec2VpnConnection;

}

/**
 * Converts an object of type 'Ec2ModifyVpnConnectionOptionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnConnectionOptionsResult(obj: Ec2ModifyVpnConnectionOptionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnection': toJson_Ec2VpnConnection(obj.vpnConnection),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnTunnelCertificateRequest
 */
export interface Ec2ModifyVpnTunnelCertificateRequest {
  /**
   * @schema Ec2ModifyVpnTunnelCertificateRequest#VpnConnectionId
   */
  readonly vpnConnectionId?: string;

  /**
   * @schema Ec2ModifyVpnTunnelCertificateRequest#VpnTunnelOutsideIpAddress
   */
  readonly vpnTunnelOutsideIpAddress?: string;

  /**
   * @schema Ec2ModifyVpnTunnelCertificateRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpnTunnelCertificateRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnTunnelCertificateRequest(obj: Ec2ModifyVpnTunnelCertificateRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnectionId': obj.vpnConnectionId,
    'VpnTunnelOutsideIpAddress': obj.vpnTunnelOutsideIpAddress,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnTunnelCertificateResult
 */
export interface Ec2ModifyVpnTunnelCertificateResult {
  /**
   * @schema Ec2ModifyVpnTunnelCertificateResult#VpnConnection
   */
  readonly vpnConnection?: Ec2VpnConnection;

}

/**
 * Converts an object of type 'Ec2ModifyVpnTunnelCertificateResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnTunnelCertificateResult(obj: Ec2ModifyVpnTunnelCertificateResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnection': toJson_Ec2VpnConnection(obj.vpnConnection),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnTunnelOptionsRequest
 */
export interface Ec2ModifyVpnTunnelOptionsRequest {
  /**
   * @schema Ec2ModifyVpnTunnelOptionsRequest#VpnConnectionId
   */
  readonly vpnConnectionId?: string;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsRequest#VpnTunnelOutsideIpAddress
   */
  readonly vpnTunnelOutsideIpAddress?: string;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsRequest#TunnelOptions
   */
  readonly tunnelOptions?: Ec2ModifyVpnTunnelOptionsSpecification;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ModifyVpnTunnelOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnTunnelOptionsRequest(obj: Ec2ModifyVpnTunnelOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnectionId': obj.vpnConnectionId,
    'VpnTunnelOutsideIpAddress': obj.vpnTunnelOutsideIpAddress,
    'TunnelOptions': toJson_Ec2ModifyVpnTunnelOptionsSpecification(obj.tunnelOptions),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnTunnelOptionsResult
 */
export interface Ec2ModifyVpnTunnelOptionsResult {
  /**
   * @schema Ec2ModifyVpnTunnelOptionsResult#VpnConnection
   */
  readonly vpnConnection?: Ec2VpnConnection;

}

/**
 * Converts an object of type 'Ec2ModifyVpnTunnelOptionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnTunnelOptionsResult(obj: Ec2ModifyVpnTunnelOptionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpnConnection': toJson_Ec2VpnConnection(obj.vpnConnection),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2MonitorInstancesRequest
 */
export interface Ec2MonitorInstancesRequest {
  /**
   * @schema Ec2MonitorInstancesRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2MonitorInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2MonitorInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2MonitorInstancesRequest(obj: Ec2MonitorInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2MonitorInstancesResult
 */
export interface Ec2MonitorInstancesResult {
  /**
   * @schema Ec2MonitorInstancesResult#InstanceMonitorings
   */
  readonly instanceMonitorings?: Ec2InstanceMonitoring[];

}

/**
 * Converts an object of type 'Ec2MonitorInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2MonitorInstancesResult(obj: Ec2MonitorInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceMonitorings': obj.instanceMonitorings?.map(y => toJson_Ec2InstanceMonitoring(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2MoveAddressToVpcRequest
 */
export interface Ec2MoveAddressToVpcRequest {
  /**
   * @schema Ec2MoveAddressToVpcRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2MoveAddressToVpcRequest#PublicIp
   */
  readonly publicIp?: string;

}

/**
 * Converts an object of type 'Ec2MoveAddressToVpcRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2MoveAddressToVpcRequest(obj: Ec2MoveAddressToVpcRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PublicIp': obj.publicIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2MoveAddressToVpcResult
 */
export interface Ec2MoveAddressToVpcResult {
  /**
   * @schema Ec2MoveAddressToVpcResult#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2MoveAddressToVpcResult#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2MoveAddressToVpcResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2MoveAddressToVpcResult(obj: Ec2MoveAddressToVpcResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ProvisionByoipCidrRequest
 */
export interface Ec2ProvisionByoipCidrRequest {
  /**
   * @schema Ec2ProvisionByoipCidrRequest#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2ProvisionByoipCidrRequest#CidrAuthorizationContext
   */
  readonly cidrAuthorizationContext?: Ec2CidrAuthorizationContext;

  /**
   * @schema Ec2ProvisionByoipCidrRequest#PubliclyAdvertisable
   */
  readonly publiclyAdvertisable?: boolean;

  /**
   * @schema Ec2ProvisionByoipCidrRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ProvisionByoipCidrRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ProvisionByoipCidrRequest#PoolTagSpecifications
   */
  readonly poolTagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2ProvisionByoipCidrRequest#MultiRegion
   */
  readonly multiRegion?: boolean;

}

/**
 * Converts an object of type 'Ec2ProvisionByoipCidrRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ProvisionByoipCidrRequest(obj: Ec2ProvisionByoipCidrRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'CidrAuthorizationContext': toJson_Ec2CidrAuthorizationContext(obj.cidrAuthorizationContext),
    'PubliclyAdvertisable': obj.publiclyAdvertisable,
    'Description': obj.description,
    'DryRun': obj.dryRun,
    'PoolTagSpecifications': obj.poolTagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'MultiRegion': obj.multiRegion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ProvisionByoipCidrResult
 */
export interface Ec2ProvisionByoipCidrResult {
  /**
   * @schema Ec2ProvisionByoipCidrResult#ByoipCidr
   */
  readonly byoipCidr?: Ec2ByoipCidr;

}

/**
 * Converts an object of type 'Ec2ProvisionByoipCidrResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ProvisionByoipCidrResult(obj: Ec2ProvisionByoipCidrResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ByoipCidr': toJson_Ec2ByoipCidr(obj.byoipCidr),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PurchaseHostReservationRequest
 */
export interface Ec2PurchaseHostReservationRequest {
  /**
   * @schema Ec2PurchaseHostReservationRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2PurchaseHostReservationRequest#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2PurchaseHostReservationRequest#HostIdSet
   */
  readonly hostIdSet?: string[];

  /**
   * @schema Ec2PurchaseHostReservationRequest#LimitPrice
   */
  readonly limitPrice?: string;

  /**
   * @schema Ec2PurchaseHostReservationRequest#OfferingId
   */
  readonly offeringId?: string;

  /**
   * @schema Ec2PurchaseHostReservationRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2PurchaseHostReservationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PurchaseHostReservationRequest(obj: Ec2PurchaseHostReservationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'CurrencyCode': obj.currencyCode,
    'HostIdSet': obj.hostIdSet?.map(y => y),
    'LimitPrice': obj.limitPrice,
    'OfferingId': obj.offeringId,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PurchaseHostReservationResult
 */
export interface Ec2PurchaseHostReservationResult {
  /**
   * @schema Ec2PurchaseHostReservationResult#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2PurchaseHostReservationResult#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2PurchaseHostReservationResult#Purchase
   */
  readonly purchase?: Ec2Purchase[];

  /**
   * @schema Ec2PurchaseHostReservationResult#TotalHourlyPrice
   */
  readonly totalHourlyPrice?: string;

  /**
   * @schema Ec2PurchaseHostReservationResult#TotalUpfrontPrice
   */
  readonly totalUpfrontPrice?: string;

}

/**
 * Converts an object of type 'Ec2PurchaseHostReservationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PurchaseHostReservationResult(obj: Ec2PurchaseHostReservationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'CurrencyCode': obj.currencyCode,
    'Purchase': obj.purchase?.map(y => toJson_Ec2Purchase(y)),
    'TotalHourlyPrice': obj.totalHourlyPrice,
    'TotalUpfrontPrice': obj.totalUpfrontPrice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PurchaseReservedInstancesOfferingRequest
 */
export interface Ec2PurchaseReservedInstancesOfferingRequest {
  /**
   * @schema Ec2PurchaseReservedInstancesOfferingRequest#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2PurchaseReservedInstancesOfferingRequest#ReservedInstancesOfferingId
   */
  readonly reservedInstancesOfferingId?: string;

  /**
   * @schema Ec2PurchaseReservedInstancesOfferingRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2PurchaseReservedInstancesOfferingRequest#LimitPrice
   */
  readonly limitPrice?: Ec2ReservedInstanceLimitPrice;

  /**
   * @schema Ec2PurchaseReservedInstancesOfferingRequest#PurchaseTime
   */
  readonly purchaseTime?: string;

}

/**
 * Converts an object of type 'Ec2PurchaseReservedInstancesOfferingRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PurchaseReservedInstancesOfferingRequest(obj: Ec2PurchaseReservedInstancesOfferingRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceCount': obj.instanceCount,
    'ReservedInstancesOfferingId': obj.reservedInstancesOfferingId,
    'DryRun': obj.dryRun,
    'LimitPrice': toJson_Ec2ReservedInstanceLimitPrice(obj.limitPrice),
    'PurchaseTime': obj.purchaseTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PurchaseReservedInstancesOfferingResult
 */
export interface Ec2PurchaseReservedInstancesOfferingResult {
  /**
   * @schema Ec2PurchaseReservedInstancesOfferingResult#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

}

/**
 * Converts an object of type 'Ec2PurchaseReservedInstancesOfferingResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PurchaseReservedInstancesOfferingResult(obj: Ec2PurchaseReservedInstancesOfferingResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesId': obj.reservedInstancesId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PurchaseScheduledInstancesRequest
 */
export interface Ec2PurchaseScheduledInstancesRequest {
  /**
   * @schema Ec2PurchaseScheduledInstancesRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2PurchaseScheduledInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2PurchaseScheduledInstancesRequest#PurchaseRequests
   */
  readonly purchaseRequests?: Ec2PurchaseRequest[];

}

/**
 * Converts an object of type 'Ec2PurchaseScheduledInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PurchaseScheduledInstancesRequest(obj: Ec2PurchaseScheduledInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
    'PurchaseRequests': obj.purchaseRequests?.map(y => toJson_Ec2PurchaseRequest(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PurchaseScheduledInstancesResult
 */
export interface Ec2PurchaseScheduledInstancesResult {
  /**
   * @schema Ec2PurchaseScheduledInstancesResult#ScheduledInstanceSet
   */
  readonly scheduledInstanceSet?: Ec2ScheduledInstance[];

}

/**
 * Converts an object of type 'Ec2PurchaseScheduledInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PurchaseScheduledInstancesResult(obj: Ec2PurchaseScheduledInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ScheduledInstanceSet': obj.scheduledInstanceSet?.map(y => toJson_Ec2ScheduledInstance(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RebootInstancesRequest
 */
export interface Ec2RebootInstancesRequest {
  /**
   * @schema Ec2RebootInstancesRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2RebootInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2RebootInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RebootInstancesRequest(obj: Ec2RebootInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterImageRequest
 */
export interface Ec2RegisterImageRequest {
  /**
   * @schema Ec2RegisterImageRequest#ImageLocation
   */
  readonly imageLocation?: string;

  /**
   * @schema Ec2RegisterImageRequest#Architecture
   */
  readonly architecture?: string;

  /**
   * @schema Ec2RegisterImageRequest#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2BlockDeviceMapping[];

  /**
   * @schema Ec2RegisterImageRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2RegisterImageRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RegisterImageRequest#EnaSupport
   */
  readonly enaSupport?: boolean;

  /**
   * @schema Ec2RegisterImageRequest#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2RegisterImageRequest#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2RegisterImageRequest#BillingProducts
   */
  readonly billingProducts?: string[];

  /**
   * @schema Ec2RegisterImageRequest#RamdiskId
   */
  readonly ramdiskId?: string;

  /**
   * @schema Ec2RegisterImageRequest#RootDeviceName
   */
  readonly rootDeviceName?: string;

  /**
   * @schema Ec2RegisterImageRequest#SriovNetSupport
   */
  readonly sriovNetSupport?: string;

  /**
   * @schema Ec2RegisterImageRequest#VirtualizationType
   */
  readonly virtualizationType?: string;

  /**
   * @schema Ec2RegisterImageRequest#BootMode
   */
  readonly bootMode?: string;

}

/**
 * Converts an object of type 'Ec2RegisterImageRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterImageRequest(obj: Ec2RegisterImageRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageLocation': obj.imageLocation,
    'Architecture': obj.architecture,
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2BlockDeviceMapping(y)),
    'Description': obj.description,
    'DryRun': obj.dryRun,
    'EnaSupport': obj.enaSupport,
    'KernelId': obj.kernelId,
    'Name': obj.name,
    'BillingProducts': obj.billingProducts?.map(y => y),
    'RamdiskId': obj.ramdiskId,
    'RootDeviceName': obj.rootDeviceName,
    'SriovNetSupport': obj.sriovNetSupport,
    'VirtualizationType': obj.virtualizationType,
    'BootMode': obj.bootMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterImageResult
 */
export interface Ec2RegisterImageResult {
  /**
   * @schema Ec2RegisterImageResult#ImageId
   */
  readonly imageId?: string;

}

/**
 * Converts an object of type 'Ec2RegisterImageResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterImageResult(obj: Ec2RegisterImageResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImageId': obj.imageId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterInstanceEventNotificationAttributesRequest
 */
export interface Ec2RegisterInstanceEventNotificationAttributesRequest {
  /**
   * @schema Ec2RegisterInstanceEventNotificationAttributesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RegisterInstanceEventNotificationAttributesRequest#InstanceTagAttribute
   */
  readonly instanceTagAttribute?: Ec2RegisterInstanceTagAttributeRequest;

}

/**
 * Converts an object of type 'Ec2RegisterInstanceEventNotificationAttributesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterInstanceEventNotificationAttributesRequest(obj: Ec2RegisterInstanceEventNotificationAttributesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'InstanceTagAttribute': toJson_Ec2RegisterInstanceTagAttributeRequest(obj.instanceTagAttribute),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterInstanceEventNotificationAttributesResult
 */
export interface Ec2RegisterInstanceEventNotificationAttributesResult {
  /**
   * @schema Ec2RegisterInstanceEventNotificationAttributesResult#InstanceTagAttribute
   */
  readonly instanceTagAttribute?: Ec2InstanceTagNotificationAttribute;

}

/**
 * Converts an object of type 'Ec2RegisterInstanceEventNotificationAttributesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterInstanceEventNotificationAttributesResult(obj: Ec2RegisterInstanceEventNotificationAttributesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceTagAttribute': toJson_Ec2InstanceTagNotificationAttribute(obj.instanceTagAttribute),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterTransitGatewayMulticastGroupMembersRequest
 */
export interface Ec2RegisterTransitGatewayMulticastGroupMembersRequest {
  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupMembersRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupMembersRequest#GroupIpAddress
   */
  readonly groupIpAddress?: string;

  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupMembersRequest#NetworkInterfaceIds
   */
  readonly networkInterfaceIds?: string[];

  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupMembersRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2RegisterTransitGatewayMulticastGroupMembersRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterTransitGatewayMulticastGroupMembersRequest(obj: Ec2RegisterTransitGatewayMulticastGroupMembersRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'GroupIpAddress': obj.groupIpAddress,
    'NetworkInterfaceIds': obj.networkInterfaceIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterTransitGatewayMulticastGroupMembersResult
 */
export interface Ec2RegisterTransitGatewayMulticastGroupMembersResult {
  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupMembersResult#RegisteredMulticastGroupMembers
   */
  readonly registeredMulticastGroupMembers?: Ec2TransitGatewayMulticastRegisteredGroupMembers;

}

/**
 * Converts an object of type 'Ec2RegisterTransitGatewayMulticastGroupMembersResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterTransitGatewayMulticastGroupMembersResult(obj: Ec2RegisterTransitGatewayMulticastGroupMembersResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'RegisteredMulticastGroupMembers': toJson_Ec2TransitGatewayMulticastRegisteredGroupMembers(obj.registeredMulticastGroupMembers),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterTransitGatewayMulticastGroupSourcesRequest
 */
export interface Ec2RegisterTransitGatewayMulticastGroupSourcesRequest {
  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupSourcesRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupSourcesRequest#GroupIpAddress
   */
  readonly groupIpAddress?: string;

  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupSourcesRequest#NetworkInterfaceIds
   */
  readonly networkInterfaceIds?: string[];

  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupSourcesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2RegisterTransitGatewayMulticastGroupSourcesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterTransitGatewayMulticastGroupSourcesRequest(obj: Ec2RegisterTransitGatewayMulticastGroupSourcesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'GroupIpAddress': obj.groupIpAddress,
    'NetworkInterfaceIds': obj.networkInterfaceIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterTransitGatewayMulticastGroupSourcesResult
 */
export interface Ec2RegisterTransitGatewayMulticastGroupSourcesResult {
  /**
   * @schema Ec2RegisterTransitGatewayMulticastGroupSourcesResult#RegisteredMulticastGroupSources
   */
  readonly registeredMulticastGroupSources?: Ec2TransitGatewayMulticastRegisteredGroupSources;

}

/**
 * Converts an object of type 'Ec2RegisterTransitGatewayMulticastGroupSourcesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterTransitGatewayMulticastGroupSourcesResult(obj: Ec2RegisterTransitGatewayMulticastGroupSourcesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'RegisteredMulticastGroupSources': toJson_Ec2TransitGatewayMulticastRegisteredGroupSources(obj.registeredMulticastGroupSources),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectTransitGatewayMulticastDomainAssociationsRequest
 */
export interface Ec2RejectTransitGatewayMulticastDomainAssociationsRequest {
  /**
   * @schema Ec2RejectTransitGatewayMulticastDomainAssociationsRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2RejectTransitGatewayMulticastDomainAssociationsRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2RejectTransitGatewayMulticastDomainAssociationsRequest#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2RejectTransitGatewayMulticastDomainAssociationsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2RejectTransitGatewayMulticastDomainAssociationsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectTransitGatewayMulticastDomainAssociationsRequest(obj: Ec2RejectTransitGatewayMulticastDomainAssociationsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'SubnetIds': obj.subnetIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectTransitGatewayMulticastDomainAssociationsResult
 */
export interface Ec2RejectTransitGatewayMulticastDomainAssociationsResult {
  /**
   * @schema Ec2RejectTransitGatewayMulticastDomainAssociationsResult#Associations
   */
  readonly associations?: Ec2TransitGatewayMulticastDomainAssociations;

}

/**
 * Converts an object of type 'Ec2RejectTransitGatewayMulticastDomainAssociationsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectTransitGatewayMulticastDomainAssociationsResult(obj: Ec2RejectTransitGatewayMulticastDomainAssociationsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Associations': toJson_Ec2TransitGatewayMulticastDomainAssociations(obj.associations),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectTransitGatewayPeeringAttachmentRequest
 */
export interface Ec2RejectTransitGatewayPeeringAttachmentRequest {
  /**
   * @schema Ec2RejectTransitGatewayPeeringAttachmentRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2RejectTransitGatewayPeeringAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2RejectTransitGatewayPeeringAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectTransitGatewayPeeringAttachmentRequest(obj: Ec2RejectTransitGatewayPeeringAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectTransitGatewayPeeringAttachmentResult
 */
export interface Ec2RejectTransitGatewayPeeringAttachmentResult {
  /**
   * @schema Ec2RejectTransitGatewayPeeringAttachmentResult#TransitGatewayPeeringAttachment
   */
  readonly transitGatewayPeeringAttachment?: Ec2TransitGatewayPeeringAttachment;

}

/**
 * Converts an object of type 'Ec2RejectTransitGatewayPeeringAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectTransitGatewayPeeringAttachmentResult(obj: Ec2RejectTransitGatewayPeeringAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayPeeringAttachment': toJson_Ec2TransitGatewayPeeringAttachment(obj.transitGatewayPeeringAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectTransitGatewayVpcAttachmentRequest
 */
export interface Ec2RejectTransitGatewayVpcAttachmentRequest {
  /**
   * @schema Ec2RejectTransitGatewayVpcAttachmentRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2RejectTransitGatewayVpcAttachmentRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2RejectTransitGatewayVpcAttachmentRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectTransitGatewayVpcAttachmentRequest(obj: Ec2RejectTransitGatewayVpcAttachmentRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectTransitGatewayVpcAttachmentResult
 */
export interface Ec2RejectTransitGatewayVpcAttachmentResult {
  /**
   * @schema Ec2RejectTransitGatewayVpcAttachmentResult#TransitGatewayVpcAttachment
   */
  readonly transitGatewayVpcAttachment?: Ec2TransitGatewayVpcAttachment;

}

/**
 * Converts an object of type 'Ec2RejectTransitGatewayVpcAttachmentResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectTransitGatewayVpcAttachmentResult(obj: Ec2RejectTransitGatewayVpcAttachmentResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayVpcAttachment': toJson_Ec2TransitGatewayVpcAttachment(obj.transitGatewayVpcAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectVpcEndpointConnectionsRequest
 */
export interface Ec2RejectVpcEndpointConnectionsRequest {
  /**
   * @schema Ec2RejectVpcEndpointConnectionsRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RejectVpcEndpointConnectionsRequest#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2RejectVpcEndpointConnectionsRequest#VpcEndpointIds
   */
  readonly vpcEndpointIds?: string[];

}

/**
 * Converts an object of type 'Ec2RejectVpcEndpointConnectionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectVpcEndpointConnectionsRequest(obj: Ec2RejectVpcEndpointConnectionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceId': obj.serviceId,
    'VpcEndpointIds': obj.vpcEndpointIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectVpcEndpointConnectionsResult
 */
export interface Ec2RejectVpcEndpointConnectionsResult {
  /**
   * @schema Ec2RejectVpcEndpointConnectionsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2RejectVpcEndpointConnectionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectVpcEndpointConnectionsResult(obj: Ec2RejectVpcEndpointConnectionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectVpcPeeringConnectionRequest
 */
export interface Ec2RejectVpcPeeringConnectionRequest {
  /**
   * @schema Ec2RejectVpcPeeringConnectionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RejectVpcPeeringConnectionRequest#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2RejectVpcPeeringConnectionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectVpcPeeringConnectionRequest(obj: Ec2RejectVpcPeeringConnectionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RejectVpcPeeringConnectionResult
 */
export interface Ec2RejectVpcPeeringConnectionResult {
  /**
   * @schema Ec2RejectVpcPeeringConnectionResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2RejectVpcPeeringConnectionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RejectVpcPeeringConnectionResult(obj: Ec2RejectVpcPeeringConnectionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReleaseAddressRequest
 */
export interface Ec2ReleaseAddressRequest {
  /**
   * @schema Ec2ReleaseAddressRequest#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2ReleaseAddressRequest#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2ReleaseAddressRequest#NetworkBorderGroup
   */
  readonly networkBorderGroup?: string;

  /**
   * @schema Ec2ReleaseAddressRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ReleaseAddressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReleaseAddressRequest(obj: Ec2ReleaseAddressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'PublicIp': obj.publicIp,
    'NetworkBorderGroup': obj.networkBorderGroup,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReleaseHostsRequest
 */
export interface Ec2ReleaseHostsRequest {
  /**
   * @schema Ec2ReleaseHostsRequest#HostIds
   */
  readonly hostIds?: string[];

}

/**
 * Converts an object of type 'Ec2ReleaseHostsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReleaseHostsRequest(obj: Ec2ReleaseHostsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HostIds': obj.hostIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReleaseHostsResult
 */
export interface Ec2ReleaseHostsResult {
  /**
   * @schema Ec2ReleaseHostsResult#Successful
   */
  readonly successful?: string[];

  /**
   * @schema Ec2ReleaseHostsResult#Unsuccessful
   */
  readonly unsuccessful?: Ec2UnsuccessfulItem[];

}

/**
 * Converts an object of type 'Ec2ReleaseHostsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReleaseHostsResult(obj: Ec2ReleaseHostsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Successful': obj.successful?.map(y => y),
    'Unsuccessful': obj.unsuccessful?.map(y => toJson_Ec2UnsuccessfulItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceIamInstanceProfileAssociationRequest
 */
export interface Ec2ReplaceIamInstanceProfileAssociationRequest {
  /**
   * @schema Ec2ReplaceIamInstanceProfileAssociationRequest#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2IamInstanceProfileSpecification;

  /**
   * @schema Ec2ReplaceIamInstanceProfileAssociationRequest#AssociationId
   */
  readonly associationId?: string;

}

/**
 * Converts an object of type 'Ec2ReplaceIamInstanceProfileAssociationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceIamInstanceProfileAssociationRequest(obj: Ec2ReplaceIamInstanceProfileAssociationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IamInstanceProfile': toJson_Ec2IamInstanceProfileSpecification(obj.iamInstanceProfile),
    'AssociationId': obj.associationId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceIamInstanceProfileAssociationResult
 */
export interface Ec2ReplaceIamInstanceProfileAssociationResult {
  /**
   * @schema Ec2ReplaceIamInstanceProfileAssociationResult#IamInstanceProfileAssociation
   */
  readonly iamInstanceProfileAssociation?: Ec2IamInstanceProfileAssociation;

}

/**
 * Converts an object of type 'Ec2ReplaceIamInstanceProfileAssociationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceIamInstanceProfileAssociationResult(obj: Ec2ReplaceIamInstanceProfileAssociationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IamInstanceProfileAssociation': toJson_Ec2IamInstanceProfileAssociation(obj.iamInstanceProfileAssociation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceNetworkAclAssociationRequest
 */
export interface Ec2ReplaceNetworkAclAssociationRequest {
  /**
   * @schema Ec2ReplaceNetworkAclAssociationRequest#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2ReplaceNetworkAclAssociationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ReplaceNetworkAclAssociationRequest#NetworkAclId
   */
  readonly networkAclId?: string;

}

/**
 * Converts an object of type 'Ec2ReplaceNetworkAclAssociationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceNetworkAclAssociationRequest(obj: Ec2ReplaceNetworkAclAssociationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'DryRun': obj.dryRun,
    'NetworkAclId': obj.networkAclId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceNetworkAclAssociationResult
 */
export interface Ec2ReplaceNetworkAclAssociationResult {
  /**
   * @schema Ec2ReplaceNetworkAclAssociationResult#NewAssociationId
   */
  readonly newAssociationId?: string;

}

/**
 * Converts an object of type 'Ec2ReplaceNetworkAclAssociationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceNetworkAclAssociationResult(obj: Ec2ReplaceNetworkAclAssociationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NewAssociationId': obj.newAssociationId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceNetworkAclEntryRequest
 */
export interface Ec2ReplaceNetworkAclEntryRequest {
  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#Egress
   */
  readonly egress?: boolean;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#IcmpTypeCode
   */
  readonly icmpTypeCode?: Ec2IcmpTypeCode;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#NetworkAclId
   */
  readonly networkAclId?: string;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#PortRange
   */
  readonly portRange?: Ec2PortRange;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#Protocol
   */
  readonly protocol?: string;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#RuleAction
   */
  readonly ruleAction?: string;

  /**
   * @schema Ec2ReplaceNetworkAclEntryRequest#RuleNumber
   */
  readonly ruleNumber?: number;

}

/**
 * Converts an object of type 'Ec2ReplaceNetworkAclEntryRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceNetworkAclEntryRequest(obj: Ec2ReplaceNetworkAclEntryRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrBlock': obj.cidrBlock,
    'DryRun': obj.dryRun,
    'Egress': obj.egress,
    'IcmpTypeCode': toJson_Ec2IcmpTypeCode(obj.icmpTypeCode),
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
    'NetworkAclId': obj.networkAclId,
    'PortRange': toJson_Ec2PortRange(obj.portRange),
    'Protocol': obj.protocol,
    'RuleAction': obj.ruleAction,
    'RuleNumber': obj.ruleNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceRouteRequest
 */
export interface Ec2ReplaceRouteRequest {
  /**
   * @schema Ec2ReplaceRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#DestinationIpv6CidrBlock
   */
  readonly destinationIpv6CidrBlock?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#DestinationPrefixListId
   */
  readonly destinationPrefixListId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ReplaceRouteRequest#VpcEndpointId
   */
  readonly vpcEndpointId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#EgressOnlyInternetGatewayId
   */
  readonly egressOnlyInternetGatewayId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#GatewayId
   */
  readonly gatewayId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#LocalTarget
   */
  readonly localTarget?: boolean;

  /**
   * @schema Ec2ReplaceRouteRequest#NatGatewayId
   */
  readonly natGatewayId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#CarrierGatewayId
   */
  readonly carrierGatewayId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#RouteTableId
   */
  readonly routeTableId?: string;

  /**
   * @schema Ec2ReplaceRouteRequest#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2ReplaceRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceRouteRequest(obj: Ec2ReplaceRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'DestinationIpv6CidrBlock': obj.destinationIpv6CidrBlock,
    'DestinationPrefixListId': obj.destinationPrefixListId,
    'DryRun': obj.dryRun,
    'VpcEndpointId': obj.vpcEndpointId,
    'EgressOnlyInternetGatewayId': obj.egressOnlyInternetGatewayId,
    'GatewayId': obj.gatewayId,
    'InstanceId': obj.instanceId,
    'LocalTarget': obj.localTarget,
    'NatGatewayId': obj.natGatewayId,
    'TransitGatewayId': obj.transitGatewayId,
    'LocalGatewayId': obj.localGatewayId,
    'CarrierGatewayId': obj.carrierGatewayId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'RouteTableId': obj.routeTableId,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceRouteTableAssociationRequest
 */
export interface Ec2ReplaceRouteTableAssociationRequest {
  /**
   * @schema Ec2ReplaceRouteTableAssociationRequest#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2ReplaceRouteTableAssociationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ReplaceRouteTableAssociationRequest#RouteTableId
   */
  readonly routeTableId?: string;

}

/**
 * Converts an object of type 'Ec2ReplaceRouteTableAssociationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceRouteTableAssociationRequest(obj: Ec2ReplaceRouteTableAssociationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'DryRun': obj.dryRun,
    'RouteTableId': obj.routeTableId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceRouteTableAssociationResult
 */
export interface Ec2ReplaceRouteTableAssociationResult {
  /**
   * @schema Ec2ReplaceRouteTableAssociationResult#NewAssociationId
   */
  readonly newAssociationId?: string;

  /**
   * @schema Ec2ReplaceRouteTableAssociationResult#AssociationState
   */
  readonly associationState?: Ec2RouteTableAssociationState;

}

/**
 * Converts an object of type 'Ec2ReplaceRouteTableAssociationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceRouteTableAssociationResult(obj: Ec2ReplaceRouteTableAssociationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NewAssociationId': obj.newAssociationId,
    'AssociationState': toJson_Ec2RouteTableAssociationState(obj.associationState),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceTransitGatewayRouteRequest
 */
export interface Ec2ReplaceTransitGatewayRouteRequest {
  /**
   * @schema Ec2ReplaceTransitGatewayRouteRequest#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2ReplaceTransitGatewayRouteRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2ReplaceTransitGatewayRouteRequest#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2ReplaceTransitGatewayRouteRequest#Blackhole
   */
  readonly blackhole?: boolean;

  /**
   * @schema Ec2ReplaceTransitGatewayRouteRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ReplaceTransitGatewayRouteRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceTransitGatewayRouteRequest(obj: Ec2ReplaceTransitGatewayRouteRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'Blackhole': obj.blackhole,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceTransitGatewayRouteResult
 */
export interface Ec2ReplaceTransitGatewayRouteResult {
  /**
   * @schema Ec2ReplaceTransitGatewayRouteResult#Route
   */
  readonly route?: Ec2TransitGatewayRoute;

}

/**
 * Converts an object of type 'Ec2ReplaceTransitGatewayRouteResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceTransitGatewayRouteResult(obj: Ec2ReplaceTransitGatewayRouteResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Route': toJson_Ec2TransitGatewayRoute(obj.route),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReportInstanceStatusRequest
 */
export interface Ec2ReportInstanceStatusRequest {
  /**
   * @schema Ec2ReportInstanceStatusRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ReportInstanceStatusRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ReportInstanceStatusRequest#EndTime
   */
  readonly endTime?: string;

  /**
   * @schema Ec2ReportInstanceStatusRequest#Instances
   */
  readonly instances?: string[];

  /**
   * @schema Ec2ReportInstanceStatusRequest#ReasonCodes
   */
  readonly reasonCodes?: string[];

  /**
   * @schema Ec2ReportInstanceStatusRequest#StartTime
   */
  readonly startTime?: string;

  /**
   * @schema Ec2ReportInstanceStatusRequest#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2ReportInstanceStatusRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReportInstanceStatusRequest(obj: Ec2ReportInstanceStatusRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'DryRun': obj.dryRun,
    'EndTime': obj.endTime,
    'Instances': obj.instances?.map(y => y),
    'ReasonCodes': obj.reasonCodes?.map(y => y),
    'StartTime': obj.startTime,
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RequestSpotFleetRequest
 */
export interface Ec2RequestSpotFleetRequest {
  /**
   * @schema Ec2RequestSpotFleetRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RequestSpotFleetRequest#SpotFleetRequestConfig
   */
  readonly spotFleetRequestConfig?: Ec2SpotFleetRequestConfigData;

}

/**
 * Converts an object of type 'Ec2RequestSpotFleetRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RequestSpotFleetRequest(obj: Ec2RequestSpotFleetRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'SpotFleetRequestConfig': toJson_Ec2SpotFleetRequestConfigData(obj.spotFleetRequestConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RequestSpotFleetResponse
 */
export interface Ec2RequestSpotFleetResponse {
  /**
   * @schema Ec2RequestSpotFleetResponse#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

}

/**
 * Converts an object of type 'Ec2RequestSpotFleetResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RequestSpotFleetResponse(obj: Ec2RequestSpotFleetResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SpotFleetRequestId': obj.spotFleetRequestId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RequestSpotInstancesRequest
 */
export interface Ec2RequestSpotInstancesRequest {
  /**
   * @schema Ec2RequestSpotInstancesRequest#AvailabilityZoneGroup
   */
  readonly availabilityZoneGroup?: string;

  /**
   * @schema Ec2RequestSpotInstancesRequest#BlockDurationMinutes
   */
  readonly blockDurationMinutes?: number;

  /**
   * @schema Ec2RequestSpotInstancesRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2RequestSpotInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RequestSpotInstancesRequest#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2RequestSpotInstancesRequest#LaunchGroup
   */
  readonly launchGroup?: string;

  /**
   * @schema Ec2RequestSpotInstancesRequest#LaunchSpecification
   */
  readonly launchSpecification?: Ec2RequestSpotLaunchSpecification;

  /**
   * @schema Ec2RequestSpotInstancesRequest#SpotPrice
   */
  readonly spotPrice?: string;

  /**
   * @schema Ec2RequestSpotInstancesRequest#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2RequestSpotInstancesRequest#ValidFrom
   */
  readonly validFrom?: string;

  /**
   * @schema Ec2RequestSpotInstancesRequest#ValidUntil
   */
  readonly validUntil?: string;

  /**
   * @schema Ec2RequestSpotInstancesRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2RequestSpotInstancesRequest#InstanceInterruptionBehavior
   */
  readonly instanceInterruptionBehavior?: string;

}

/**
 * Converts an object of type 'Ec2RequestSpotInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RequestSpotInstancesRequest(obj: Ec2RequestSpotInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZoneGroup': obj.availabilityZoneGroup,
    'BlockDurationMinutes': obj.blockDurationMinutes,
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
    'InstanceCount': obj.instanceCount,
    'LaunchGroup': obj.launchGroup,
    'LaunchSpecification': toJson_Ec2RequestSpotLaunchSpecification(obj.launchSpecification),
    'SpotPrice': obj.spotPrice,
    'Type': obj.type,
    'ValidFrom': obj.validFrom,
    'ValidUntil': obj.validUntil,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'InstanceInterruptionBehavior': obj.instanceInterruptionBehavior,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RequestSpotInstancesResult
 */
export interface Ec2RequestSpotInstancesResult {
  /**
   * @schema Ec2RequestSpotInstancesResult#SpotInstanceRequests
   */
  readonly spotInstanceRequests?: Ec2SpotInstanceRequest[];

}

/**
 * Converts an object of type 'Ec2RequestSpotInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RequestSpotInstancesResult(obj: Ec2RequestSpotInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SpotInstanceRequests': obj.spotInstanceRequests?.map(y => toJson_Ec2SpotInstanceRequest(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetAddressAttributeRequest
 */
export interface Ec2ResetAddressAttributeRequest {
  /**
   * @schema Ec2ResetAddressAttributeRequest#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2ResetAddressAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2ResetAddressAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ResetAddressAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetAddressAttributeRequest(obj: Ec2ResetAddressAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'Attribute': obj.attribute,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetAddressAttributeResult
 */
export interface Ec2ResetAddressAttributeResult {
  /**
   * @schema Ec2ResetAddressAttributeResult#Address
   */
  readonly address?: Ec2AddressAttribute;

}

/**
 * Converts an object of type 'Ec2ResetAddressAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetAddressAttributeResult(obj: Ec2ResetAddressAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Address': toJson_Ec2AddressAttribute(obj.address),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetEbsDefaultKmsKeyIdRequest
 */
export interface Ec2ResetEbsDefaultKmsKeyIdRequest {
  /**
   * @schema Ec2ResetEbsDefaultKmsKeyIdRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ResetEbsDefaultKmsKeyIdRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetEbsDefaultKmsKeyIdRequest(obj: Ec2ResetEbsDefaultKmsKeyIdRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetEbsDefaultKmsKeyIdResult
 */
export interface Ec2ResetEbsDefaultKmsKeyIdResult {
  /**
   * @schema Ec2ResetEbsDefaultKmsKeyIdResult#KmsKeyId
   */
  readonly kmsKeyId?: string;

}

/**
 * Converts an object of type 'Ec2ResetEbsDefaultKmsKeyIdResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetEbsDefaultKmsKeyIdResult(obj: Ec2ResetEbsDefaultKmsKeyIdResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KmsKeyId': obj.kmsKeyId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetFpgaImageAttributeRequest
 */
export interface Ec2ResetFpgaImageAttributeRequest {
  /**
   * @schema Ec2ResetFpgaImageAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ResetFpgaImageAttributeRequest#FpgaImageId
   */
  readonly fpgaImageId?: string;

  /**
   * @schema Ec2ResetFpgaImageAttributeRequest#Attribute
   */
  readonly attribute?: string;

}

/**
 * Converts an object of type 'Ec2ResetFpgaImageAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetFpgaImageAttributeRequest(obj: Ec2ResetFpgaImageAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'FpgaImageId': obj.fpgaImageId,
    'Attribute': obj.attribute,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetFpgaImageAttributeResult
 */
export interface Ec2ResetFpgaImageAttributeResult {
  /**
   * @schema Ec2ResetFpgaImageAttributeResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2ResetFpgaImageAttributeResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetFpgaImageAttributeResult(obj: Ec2ResetFpgaImageAttributeResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetImageAttributeRequest
 */
export interface Ec2ResetImageAttributeRequest {
  /**
   * @schema Ec2ResetImageAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2ResetImageAttributeRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ResetImageAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ResetImageAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetImageAttributeRequest(obj: Ec2ResetImageAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'ImageId': obj.imageId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetInstanceAttributeRequest
 */
export interface Ec2ResetInstanceAttributeRequest {
  /**
   * @schema Ec2ResetInstanceAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2ResetInstanceAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ResetInstanceAttributeRequest#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2ResetInstanceAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetInstanceAttributeRequest(obj: Ec2ResetInstanceAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'DryRun': obj.dryRun,
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetNetworkInterfaceAttributeRequest
 */
export interface Ec2ResetNetworkInterfaceAttributeRequest {
  /**
   * @schema Ec2ResetNetworkInterfaceAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2ResetNetworkInterfaceAttributeRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2ResetNetworkInterfaceAttributeRequest#SourceDestCheck
   */
  readonly sourceDestCheck?: string;

}

/**
 * Converts an object of type 'Ec2ResetNetworkInterfaceAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetNetworkInterfaceAttributeRequest(obj: Ec2ResetNetworkInterfaceAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'SourceDestCheck': obj.sourceDestCheck,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResetSnapshotAttributeRequest
 */
export interface Ec2ResetSnapshotAttributeRequest {
  /**
   * @schema Ec2ResetSnapshotAttributeRequest#Attribute
   */
  readonly attribute?: string;

  /**
   * @schema Ec2ResetSnapshotAttributeRequest#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2ResetSnapshotAttributeRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2ResetSnapshotAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResetSnapshotAttributeRequest(obj: Ec2ResetSnapshotAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attribute': obj.attribute,
    'SnapshotId': obj.snapshotId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RestoreAddressToClassicRequest
 */
export interface Ec2RestoreAddressToClassicRequest {
  /**
   * @schema Ec2RestoreAddressToClassicRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RestoreAddressToClassicRequest#PublicIp
   */
  readonly publicIp?: string;

}

/**
 * Converts an object of type 'Ec2RestoreAddressToClassicRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RestoreAddressToClassicRequest(obj: Ec2RestoreAddressToClassicRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PublicIp': obj.publicIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RestoreAddressToClassicResult
 */
export interface Ec2RestoreAddressToClassicResult {
  /**
   * @schema Ec2RestoreAddressToClassicResult#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2RestoreAddressToClassicResult#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2RestoreAddressToClassicResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RestoreAddressToClassicResult(obj: Ec2RestoreAddressToClassicResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PublicIp': obj.publicIp,
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RestoreManagedPrefixListVersionRequest
 */
export interface Ec2RestoreManagedPrefixListVersionRequest {
  /**
   * @schema Ec2RestoreManagedPrefixListVersionRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RestoreManagedPrefixListVersionRequest#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2RestoreManagedPrefixListVersionRequest#PreviousVersion
   */
  readonly previousVersion?: number;

  /**
   * @schema Ec2RestoreManagedPrefixListVersionRequest#CurrentVersion
   */
  readonly currentVersion?: number;

}

/**
 * Converts an object of type 'Ec2RestoreManagedPrefixListVersionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RestoreManagedPrefixListVersionRequest(obj: Ec2RestoreManagedPrefixListVersionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'PrefixListId': obj.prefixListId,
    'PreviousVersion': obj.previousVersion,
    'CurrentVersion': obj.currentVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RestoreManagedPrefixListVersionResult
 */
export interface Ec2RestoreManagedPrefixListVersionResult {
  /**
   * @schema Ec2RestoreManagedPrefixListVersionResult#PrefixList
   */
  readonly prefixList?: Ec2ManagedPrefixList;

}

/**
 * Converts an object of type 'Ec2RestoreManagedPrefixListVersionResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RestoreManagedPrefixListVersionResult(obj: Ec2RestoreManagedPrefixListVersionResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrefixList': toJson_Ec2ManagedPrefixList(obj.prefixList),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RevokeClientVpnIngressRequest
 */
export interface Ec2RevokeClientVpnIngressRequest {
  /**
   * @schema Ec2RevokeClientVpnIngressRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2RevokeClientVpnIngressRequest#TargetNetworkCidr
   */
  readonly targetNetworkCidr?: string;

  /**
   * @schema Ec2RevokeClientVpnIngressRequest#AccessGroupId
   */
  readonly accessGroupId?: string;

  /**
   * @schema Ec2RevokeClientVpnIngressRequest#RevokeAllGroups
   */
  readonly revokeAllGroups?: boolean;

  /**
   * @schema Ec2RevokeClientVpnIngressRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2RevokeClientVpnIngressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RevokeClientVpnIngressRequest(obj: Ec2RevokeClientVpnIngressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'TargetNetworkCidr': obj.targetNetworkCidr,
    'AccessGroupId': obj.accessGroupId,
    'RevokeAllGroups': obj.revokeAllGroups,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RevokeClientVpnIngressResult
 */
export interface Ec2RevokeClientVpnIngressResult {
  /**
   * @schema Ec2RevokeClientVpnIngressResult#Status
   */
  readonly status?: Ec2ClientVpnAuthorizationRuleStatus;

}

/**
 * Converts an object of type 'Ec2RevokeClientVpnIngressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RevokeClientVpnIngressResult(obj: Ec2RevokeClientVpnIngressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Status': toJson_Ec2ClientVpnAuthorizationRuleStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RevokeSecurityGroupEgressRequest
 */
export interface Ec2RevokeSecurityGroupEgressRequest {
  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#IpPermissions
   */
  readonly ipPermissions?: Ec2IpPermission[];

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#SecurityGroupRuleIds
   */
  readonly securityGroupRuleIds?: string[];

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#CidrIp
   */
  readonly cidrIp?: string;

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#IpProtocol
   */
  readonly ipProtocol?: string;

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#ToPort
   */
  readonly toPort?: number;

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#SourceSecurityGroupName
   */
  readonly sourceSecurityGroupName?: string;

  /**
   * @schema Ec2RevokeSecurityGroupEgressRequest#SourceSecurityGroupOwnerId
   */
  readonly sourceSecurityGroupOwnerId?: string;

}

/**
 * Converts an object of type 'Ec2RevokeSecurityGroupEgressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RevokeSecurityGroupEgressRequest(obj: Ec2RevokeSecurityGroupEgressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'GroupId': obj.groupId,
    'IpPermissions': obj.ipPermissions?.map(y => toJson_Ec2IpPermission(y)),
    'SecurityGroupRuleIds': obj.securityGroupRuleIds?.map(y => y),
    'CidrIp': obj.cidrIp,
    'FromPort': obj.fromPort,
    'IpProtocol': obj.ipProtocol,
    'ToPort': obj.toPort,
    'SourceSecurityGroupName': obj.sourceSecurityGroupName,
    'SourceSecurityGroupOwnerId': obj.sourceSecurityGroupOwnerId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RevokeSecurityGroupEgressResult
 */
export interface Ec2RevokeSecurityGroupEgressResult {
  /**
   * @schema Ec2RevokeSecurityGroupEgressResult#Return
   */
  readonly return?: boolean;

  /**
   * @schema Ec2RevokeSecurityGroupEgressResult#UnknownIpPermissions
   */
  readonly unknownIpPermissions?: Ec2IpPermission[];

}

/**
 * Converts an object of type 'Ec2RevokeSecurityGroupEgressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RevokeSecurityGroupEgressResult(obj: Ec2RevokeSecurityGroupEgressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
    'UnknownIpPermissions': obj.unknownIpPermissions?.map(y => toJson_Ec2IpPermission(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RevokeSecurityGroupIngressRequest
 */
export interface Ec2RevokeSecurityGroupIngressRequest {
  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#CidrIp
   */
  readonly cidrIp?: string;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#IpPermissions
   */
  readonly ipPermissions?: Ec2IpPermission[];

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#IpProtocol
   */
  readonly ipProtocol?: string;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#SourceSecurityGroupName
   */
  readonly sourceSecurityGroupName?: string;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#SourceSecurityGroupOwnerId
   */
  readonly sourceSecurityGroupOwnerId?: string;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#ToPort
   */
  readonly toPort?: number;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RevokeSecurityGroupIngressRequest#SecurityGroupRuleIds
   */
  readonly securityGroupRuleIds?: string[];

}

/**
 * Converts an object of type 'Ec2RevokeSecurityGroupIngressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RevokeSecurityGroupIngressRequest(obj: Ec2RevokeSecurityGroupIngressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrIp': obj.cidrIp,
    'FromPort': obj.fromPort,
    'GroupId': obj.groupId,
    'GroupName': obj.groupName,
    'IpPermissions': obj.ipPermissions?.map(y => toJson_Ec2IpPermission(y)),
    'IpProtocol': obj.ipProtocol,
    'SourceSecurityGroupName': obj.sourceSecurityGroupName,
    'SourceSecurityGroupOwnerId': obj.sourceSecurityGroupOwnerId,
    'ToPort': obj.toPort,
    'DryRun': obj.dryRun,
    'SecurityGroupRuleIds': obj.securityGroupRuleIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RevokeSecurityGroupIngressResult
 */
export interface Ec2RevokeSecurityGroupIngressResult {
  /**
   * @schema Ec2RevokeSecurityGroupIngressResult#Return
   */
  readonly return?: boolean;

  /**
   * @schema Ec2RevokeSecurityGroupIngressResult#UnknownIpPermissions
   */
  readonly unknownIpPermissions?: Ec2IpPermission[];

}

/**
 * Converts an object of type 'Ec2RevokeSecurityGroupIngressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RevokeSecurityGroupIngressResult(obj: Ec2RevokeSecurityGroupIngressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
    'UnknownIpPermissions': obj.unknownIpPermissions?.map(y => toJson_Ec2IpPermission(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RunInstancesRequest
 */
export interface Ec2RunInstancesRequest {
  /**
   * @schema Ec2RunInstancesRequest#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2BlockDeviceMapping[];

  /**
   * @schema Ec2RunInstancesRequest#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2RunInstancesRequest#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2RunInstancesRequest#Ipv6AddressCount
   */
  readonly ipv6AddressCount?: number;

  /**
   * @schema Ec2RunInstancesRequest#Ipv6Addresses
   */
  readonly ipv6Addresses?: Ec2InstanceIpv6Address[];

  /**
   * @schema Ec2RunInstancesRequest#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2RunInstancesRequest#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2RunInstancesRequest#MaxCount
   */
  readonly maxCount?: number;

  /**
   * @schema Ec2RunInstancesRequest#MinCount
   */
  readonly minCount?: number;

  /**
   * @schema Ec2RunInstancesRequest#Monitoring
   */
  readonly monitoring?: Ec2RunInstancesMonitoringEnabled;

  /**
   * @schema Ec2RunInstancesRequest#Placement
   */
  readonly placement?: Ec2Placement;

  /**
   * @schema Ec2RunInstancesRequest#RamdiskId
   */
  readonly ramdiskId?: string;

  /**
   * @schema Ec2RunInstancesRequest#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2RunInstancesRequest#SecurityGroups
   */
  readonly securityGroups?: string[];

  /**
   * @schema Ec2RunInstancesRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2RunInstancesRequest#UserData
   */
  readonly userData?: string;

  /**
   * @schema Ec2RunInstancesRequest#AdditionalInfo
   */
  readonly additionalInfo?: string;

  /**
   * @schema Ec2RunInstancesRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2RunInstancesRequest#DisableApiTermination
   */
  readonly disableApiTermination?: boolean;

  /**
   * @schema Ec2RunInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RunInstancesRequest#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2RunInstancesRequest#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2IamInstanceProfileSpecification;

  /**
   * @schema Ec2RunInstancesRequest#InstanceInitiatedShutdownBehavior
   */
  readonly instanceInitiatedShutdownBehavior?: string;

  /**
   * @schema Ec2RunInstancesRequest#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2InstanceNetworkInterfaceSpecification[];

  /**
   * @schema Ec2RunInstancesRequest#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2RunInstancesRequest#ElasticGpuSpecification
   */
  readonly elasticGpuSpecification?: Ec2ElasticGpuSpecification[];

  /**
   * @schema Ec2RunInstancesRequest#ElasticInferenceAccelerators
   */
  readonly elasticInferenceAccelerators?: Ec2ElasticInferenceAccelerator[];

  /**
   * @schema Ec2RunInstancesRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2RunInstancesRequest#LaunchTemplate
   */
  readonly launchTemplate?: Ec2LaunchTemplateSpecification;

  /**
   * @schema Ec2RunInstancesRequest#InstanceMarketOptions
   */
  readonly instanceMarketOptions?: Ec2InstanceMarketOptionsRequest;

  /**
   * @schema Ec2RunInstancesRequest#CreditSpecification
   */
  readonly creditSpecification?: Ec2CreditSpecificationRequest;

  /**
   * @schema Ec2RunInstancesRequest#CpuOptions
   */
  readonly cpuOptions?: Ec2CpuOptionsRequest;

  /**
   * @schema Ec2RunInstancesRequest#CapacityReservationSpecification
   */
  readonly capacityReservationSpecification?: Ec2CapacityReservationSpecification;

  /**
   * @schema Ec2RunInstancesRequest#HibernationOptions
   */
  readonly hibernationOptions?: Ec2HibernationOptionsRequest;

  /**
   * @schema Ec2RunInstancesRequest#LicenseSpecifications
   */
  readonly licenseSpecifications?: Ec2LicenseConfigurationRequest[];

  /**
   * @schema Ec2RunInstancesRequest#MetadataOptions
   */
  readonly metadataOptions?: Ec2InstanceMetadataOptionsRequest;

  /**
   * @schema Ec2RunInstancesRequest#EnclaveOptions
   */
  readonly enclaveOptions?: Ec2EnclaveOptionsRequest;

}

/**
 * Converts an object of type 'Ec2RunInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RunInstancesRequest(obj: Ec2RunInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2BlockDeviceMapping(y)),
    'ImageId': obj.imageId,
    'InstanceType': obj.instanceType,
    'Ipv6AddressCount': obj.ipv6AddressCount,
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => toJson_Ec2InstanceIpv6Address(y)),
    'KernelId': obj.kernelId,
    'KeyName': obj.keyName,
    'MaxCount': obj.maxCount,
    'MinCount': obj.minCount,
    'Monitoring': toJson_Ec2RunInstancesMonitoringEnabled(obj.monitoring),
    'Placement': toJson_Ec2Placement(obj.placement),
    'RamdiskId': obj.ramdiskId,
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'SecurityGroups': obj.securityGroups?.map(y => y),
    'SubnetId': obj.subnetId,
    'UserData': obj.userData,
    'AdditionalInfo': obj.additionalInfo,
    'ClientToken': obj.clientToken,
    'DisableApiTermination': obj.disableApiTermination,
    'DryRun': obj.dryRun,
    'EbsOptimized': obj.ebsOptimized,
    'IamInstanceProfile': toJson_Ec2IamInstanceProfileSpecification(obj.iamInstanceProfile),
    'InstanceInitiatedShutdownBehavior': obj.instanceInitiatedShutdownBehavior,
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2InstanceNetworkInterfaceSpecification(y)),
    'PrivateIpAddress': obj.privateIpAddress,
    'ElasticGpuSpecification': obj.elasticGpuSpecification?.map(y => toJson_Ec2ElasticGpuSpecification(y)),
    'ElasticInferenceAccelerators': obj.elasticInferenceAccelerators?.map(y => toJson_Ec2ElasticInferenceAccelerator(y)),
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'LaunchTemplate': toJson_Ec2LaunchTemplateSpecification(obj.launchTemplate),
    'InstanceMarketOptions': toJson_Ec2InstanceMarketOptionsRequest(obj.instanceMarketOptions),
    'CreditSpecification': toJson_Ec2CreditSpecificationRequest(obj.creditSpecification),
    'CpuOptions': toJson_Ec2CpuOptionsRequest(obj.cpuOptions),
    'CapacityReservationSpecification': toJson_Ec2CapacityReservationSpecification(obj.capacityReservationSpecification),
    'HibernationOptions': toJson_Ec2HibernationOptionsRequest(obj.hibernationOptions),
    'LicenseSpecifications': obj.licenseSpecifications?.map(y => toJson_Ec2LicenseConfigurationRequest(y)),
    'MetadataOptions': toJson_Ec2InstanceMetadataOptionsRequest(obj.metadataOptions),
    'EnclaveOptions': toJson_Ec2EnclaveOptionsRequest(obj.enclaveOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Reservation
 */
export interface Ec2Reservation {
  /**
   * @schema Ec2Reservation#Groups
   */
  readonly groups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2Reservation#Instances
   */
  readonly instances?: Ec2Instance[];

  /**
   * @schema Ec2Reservation#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2Reservation#RequesterId
   */
  readonly requesterId?: string;

  /**
   * @schema Ec2Reservation#ReservationId
   */
  readonly reservationId?: string;

}

/**
 * Converts an object of type 'Ec2Reservation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Reservation(obj: Ec2Reservation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Groups': obj.groups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'Instances': obj.instances?.map(y => toJson_Ec2Instance(y)),
    'OwnerId': obj.ownerId,
    'RequesterId': obj.requesterId,
    'ReservationId': obj.reservationId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RunScheduledInstancesRequest
 */
export interface Ec2RunScheduledInstancesRequest {
  /**
   * @schema Ec2RunScheduledInstancesRequest#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2RunScheduledInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2RunScheduledInstancesRequest#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2RunScheduledInstancesRequest#LaunchSpecification
   */
  readonly launchSpecification?: Ec2ScheduledInstancesLaunchSpecification;

  /**
   * @schema Ec2RunScheduledInstancesRequest#ScheduledInstanceId
   */
  readonly scheduledInstanceId?: string;

}

/**
 * Converts an object of type 'Ec2RunScheduledInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RunScheduledInstancesRequest(obj: Ec2RunScheduledInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'DryRun': obj.dryRun,
    'InstanceCount': obj.instanceCount,
    'LaunchSpecification': toJson_Ec2ScheduledInstancesLaunchSpecification(obj.launchSpecification),
    'ScheduledInstanceId': obj.scheduledInstanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RunScheduledInstancesResult
 */
export interface Ec2RunScheduledInstancesResult {
  /**
   * @schema Ec2RunScheduledInstancesResult#InstanceIdSet
   */
  readonly instanceIdSet?: string[];

}

/**
 * Converts an object of type 'Ec2RunScheduledInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RunScheduledInstancesResult(obj: Ec2RunScheduledInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIdSet': obj.instanceIdSet?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SearchLocalGatewayRoutesRequest
 */
export interface Ec2SearchLocalGatewayRoutesRequest {
  /**
   * @schema Ec2SearchLocalGatewayRoutesRequest#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2SearchLocalGatewayRoutesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2SearchLocalGatewayRoutesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2SearchLocalGatewayRoutesRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2SearchLocalGatewayRoutesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2SearchLocalGatewayRoutesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SearchLocalGatewayRoutesRequest(obj: Ec2SearchLocalGatewayRoutesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SearchLocalGatewayRoutesResult
 */
export interface Ec2SearchLocalGatewayRoutesResult {
  /**
   * @schema Ec2SearchLocalGatewayRoutesResult#Routes
   */
  readonly routes?: Ec2LocalGatewayRoute[];

  /**
   * @schema Ec2SearchLocalGatewayRoutesResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2SearchLocalGatewayRoutesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SearchLocalGatewayRoutesResult(obj: Ec2SearchLocalGatewayRoutesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Routes': obj.routes?.map(y => toJson_Ec2LocalGatewayRoute(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SearchTransitGatewayMulticastGroupsRequest
 */
export interface Ec2SearchTransitGatewayMulticastGroupsRequest {
  /**
   * @schema Ec2SearchTransitGatewayMulticastGroupsRequest#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2SearchTransitGatewayMulticastGroupsRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2SearchTransitGatewayMulticastGroupsRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2SearchTransitGatewayMulticastGroupsRequest#NextToken
   */
  readonly nextToken?: string;

  /**
   * @schema Ec2SearchTransitGatewayMulticastGroupsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2SearchTransitGatewayMulticastGroupsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SearchTransitGatewayMulticastGroupsRequest(obj: Ec2SearchTransitGatewayMulticastGroupsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'NextToken': obj.nextToken,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SearchTransitGatewayMulticastGroupsResult
 */
export interface Ec2SearchTransitGatewayMulticastGroupsResult {
  /**
   * @schema Ec2SearchTransitGatewayMulticastGroupsResult#MulticastGroups
   */
  readonly multicastGroups?: Ec2TransitGatewayMulticastGroup[];

  /**
   * @schema Ec2SearchTransitGatewayMulticastGroupsResult#NextToken
   */
  readonly nextToken?: string;

}

/**
 * Converts an object of type 'Ec2SearchTransitGatewayMulticastGroupsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SearchTransitGatewayMulticastGroupsResult(obj: Ec2SearchTransitGatewayMulticastGroupsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MulticastGroups': obj.multicastGroups?.map(y => toJson_Ec2TransitGatewayMulticastGroup(y)),
    'NextToken': obj.nextToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SearchTransitGatewayRoutesRequest
 */
export interface Ec2SearchTransitGatewayRoutesRequest {
  /**
   * @schema Ec2SearchTransitGatewayRoutesRequest#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2SearchTransitGatewayRoutesRequest#Filters
   */
  readonly filters?: Ec2Filter[];

  /**
   * @schema Ec2SearchTransitGatewayRoutesRequest#MaxResults
   */
  readonly maxResults?: number;

  /**
   * @schema Ec2SearchTransitGatewayRoutesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2SearchTransitGatewayRoutesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SearchTransitGatewayRoutesRequest(obj: Ec2SearchTransitGatewayRoutesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'Filters': obj.filters?.map(y => toJson_Ec2Filter(y)),
    'MaxResults': obj.maxResults,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SearchTransitGatewayRoutesResult
 */
export interface Ec2SearchTransitGatewayRoutesResult {
  /**
   * @schema Ec2SearchTransitGatewayRoutesResult#Routes
   */
  readonly routes?: Ec2TransitGatewayRoute[];

  /**
   * @schema Ec2SearchTransitGatewayRoutesResult#AdditionalRoutesAvailable
   */
  readonly additionalRoutesAvailable?: boolean;

}

/**
 * Converts an object of type 'Ec2SearchTransitGatewayRoutesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SearchTransitGatewayRoutesResult(obj: Ec2SearchTransitGatewayRoutesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Routes': obj.routes?.map(y => toJson_Ec2TransitGatewayRoute(y)),
    'AdditionalRoutesAvailable': obj.additionalRoutesAvailable,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SendDiagnosticInterruptRequest
 */
export interface Ec2SendDiagnosticInterruptRequest {
  /**
   * @schema Ec2SendDiagnosticInterruptRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2SendDiagnosticInterruptRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2SendDiagnosticInterruptRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SendDiagnosticInterruptRequest(obj: Ec2SendDiagnosticInterruptRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StartInstancesRequest
 */
export interface Ec2StartInstancesRequest {
  /**
   * @schema Ec2StartInstancesRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2StartInstancesRequest#AdditionalInfo
   */
  readonly additionalInfo?: string;

  /**
   * @schema Ec2StartInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2StartInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StartInstancesRequest(obj: Ec2StartInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'AdditionalInfo': obj.additionalInfo,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StartInstancesResult
 */
export interface Ec2StartInstancesResult {
  /**
   * @schema Ec2StartInstancesResult#StartingInstances
   */
  readonly startingInstances?: Ec2InstanceStateChange[];

}

/**
 * Converts an object of type 'Ec2StartInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StartInstancesResult(obj: Ec2StartInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'StartingInstances': obj.startingInstances?.map(y => toJson_Ec2InstanceStateChange(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StartNetworkInsightsAnalysisRequest
 */
export interface Ec2StartNetworkInsightsAnalysisRequest {
  /**
   * @schema Ec2StartNetworkInsightsAnalysisRequest#NetworkInsightsPathId
   */
  readonly networkInsightsPathId?: string;

  /**
   * @schema Ec2StartNetworkInsightsAnalysisRequest#FilterInArns
   */
  readonly filterInArns?: string[];

  /**
   * @schema Ec2StartNetworkInsightsAnalysisRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2StartNetworkInsightsAnalysisRequest#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

  /**
   * @schema Ec2StartNetworkInsightsAnalysisRequest#ClientToken
   */
  readonly clientToken?: string;

}

/**
 * Converts an object of type 'Ec2StartNetworkInsightsAnalysisRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StartNetworkInsightsAnalysisRequest(obj: Ec2StartNetworkInsightsAnalysisRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsPathId': obj.networkInsightsPathId,
    'FilterInArns': obj.filterInArns?.map(y => y),
    'DryRun': obj.dryRun,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
    'ClientToken': obj.clientToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StartNetworkInsightsAnalysisResult
 */
export interface Ec2StartNetworkInsightsAnalysisResult {
  /**
   * @schema Ec2StartNetworkInsightsAnalysisResult#NetworkInsightsAnalysis
   */
  readonly networkInsightsAnalysis?: Ec2NetworkInsightsAnalysis;

}

/**
 * Converts an object of type 'Ec2StartNetworkInsightsAnalysisResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StartNetworkInsightsAnalysisResult(obj: Ec2StartNetworkInsightsAnalysisResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsAnalysis': toJson_Ec2NetworkInsightsAnalysis(obj.networkInsightsAnalysis),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StartVpcEndpointServicePrivateDnsVerificationRequest
 */
export interface Ec2StartVpcEndpointServicePrivateDnsVerificationRequest {
  /**
   * @schema Ec2StartVpcEndpointServicePrivateDnsVerificationRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2StartVpcEndpointServicePrivateDnsVerificationRequest#ServiceId
   */
  readonly serviceId?: string;

}

/**
 * Converts an object of type 'Ec2StartVpcEndpointServicePrivateDnsVerificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StartVpcEndpointServicePrivateDnsVerificationRequest(obj: Ec2StartVpcEndpointServicePrivateDnsVerificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'ServiceId': obj.serviceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StartVpcEndpointServicePrivateDnsVerificationResult
 */
export interface Ec2StartVpcEndpointServicePrivateDnsVerificationResult {
  /**
   * @schema Ec2StartVpcEndpointServicePrivateDnsVerificationResult#ReturnValue
   */
  readonly returnValue?: boolean;

}

/**
 * Converts an object of type 'Ec2StartVpcEndpointServicePrivateDnsVerificationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StartVpcEndpointServicePrivateDnsVerificationResult(obj: Ec2StartVpcEndpointServicePrivateDnsVerificationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReturnValue': obj.returnValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StopInstancesRequest
 */
export interface Ec2StopInstancesRequest {
  /**
   * @schema Ec2StopInstancesRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2StopInstancesRequest#Hibernate
   */
  readonly hibernate?: boolean;

  /**
   * @schema Ec2StopInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2StopInstancesRequest#Force
   */
  readonly force?: boolean;

}

/**
 * Converts an object of type 'Ec2StopInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StopInstancesRequest(obj: Ec2StopInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'Hibernate': obj.hibernate,
    'DryRun': obj.dryRun,
    'Force': obj.force,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StopInstancesResult
 */
export interface Ec2StopInstancesResult {
  /**
   * @schema Ec2StopInstancesResult#StoppingInstances
   */
  readonly stoppingInstances?: Ec2InstanceStateChange[];

}

/**
 * Converts an object of type 'Ec2StopInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StopInstancesResult(obj: Ec2StopInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'StoppingInstances': obj.stoppingInstances?.map(y => toJson_Ec2InstanceStateChange(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TerminateClientVpnConnectionsRequest
 */
export interface Ec2TerminateClientVpnConnectionsRequest {
  /**
   * @schema Ec2TerminateClientVpnConnectionsRequest#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2TerminateClientVpnConnectionsRequest#ConnectionId
   */
  readonly connectionId?: string;

  /**
   * @schema Ec2TerminateClientVpnConnectionsRequest#Username
   */
  readonly username?: string;

  /**
   * @schema Ec2TerminateClientVpnConnectionsRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2TerminateClientVpnConnectionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TerminateClientVpnConnectionsRequest(obj: Ec2TerminateClientVpnConnectionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'ConnectionId': obj.connectionId,
    'Username': obj.username,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TerminateClientVpnConnectionsResult
 */
export interface Ec2TerminateClientVpnConnectionsResult {
  /**
   * @schema Ec2TerminateClientVpnConnectionsResult#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2TerminateClientVpnConnectionsResult#Username
   */
  readonly username?: string;

  /**
   * @schema Ec2TerminateClientVpnConnectionsResult#ConnectionStatuses
   */
  readonly connectionStatuses?: Ec2TerminateConnectionStatus[];

}

/**
 * Converts an object of type 'Ec2TerminateClientVpnConnectionsResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TerminateClientVpnConnectionsResult(obj: Ec2TerminateClientVpnConnectionsResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'Username': obj.username,
    'ConnectionStatuses': obj.connectionStatuses?.map(y => toJson_Ec2TerminateConnectionStatus(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TerminateInstancesRequest
 */
export interface Ec2TerminateInstancesRequest {
  /**
   * @schema Ec2TerminateInstancesRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2TerminateInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2TerminateInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TerminateInstancesRequest(obj: Ec2TerminateInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TerminateInstancesResult
 */
export interface Ec2TerminateInstancesResult {
  /**
   * @schema Ec2TerminateInstancesResult#TerminatingInstances
   */
  readonly terminatingInstances?: Ec2InstanceStateChange[];

}

/**
 * Converts an object of type 'Ec2TerminateInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TerminateInstancesResult(obj: Ec2TerminateInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TerminatingInstances': obj.terminatingInstances?.map(y => toJson_Ec2InstanceStateChange(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnassignIpv6AddressesRequest
 */
export interface Ec2UnassignIpv6AddressesRequest {
  /**
   * @schema Ec2UnassignIpv6AddressesRequest#Ipv6Addresses
   */
  readonly ipv6Addresses?: string[];

  /**
   * @schema Ec2UnassignIpv6AddressesRequest#Ipv6Prefixes
   */
  readonly ipv6Prefixes?: string[];

  /**
   * @schema Ec2UnassignIpv6AddressesRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

}

/**
 * Converts an object of type 'Ec2UnassignIpv6AddressesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnassignIpv6AddressesRequest(obj: Ec2UnassignIpv6AddressesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => y),
    'Ipv6Prefixes': obj.ipv6Prefixes?.map(y => y),
    'NetworkInterfaceId': obj.networkInterfaceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnassignIpv6AddressesResult
 */
export interface Ec2UnassignIpv6AddressesResult {
  /**
   * @schema Ec2UnassignIpv6AddressesResult#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2UnassignIpv6AddressesResult#UnassignedIpv6Addresses
   */
  readonly unassignedIpv6Addresses?: string[];

  /**
   * @schema Ec2UnassignIpv6AddressesResult#UnassignedIpv6Prefixes
   */
  readonly unassignedIpv6Prefixes?: string[];

}

/**
 * Converts an object of type 'Ec2UnassignIpv6AddressesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnassignIpv6AddressesResult(obj: Ec2UnassignIpv6AddressesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfaceId': obj.networkInterfaceId,
    'UnassignedIpv6Addresses': obj.unassignedIpv6Addresses?.map(y => y),
    'UnassignedIpv6Prefixes': obj.unassignedIpv6Prefixes?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnassignPrivateIpAddressesRequest
 */
export interface Ec2UnassignPrivateIpAddressesRequest {
  /**
   * @schema Ec2UnassignPrivateIpAddressesRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2UnassignPrivateIpAddressesRequest#PrivateIpAddresses
   */
  readonly privateIpAddresses?: string[];

  /**
   * @schema Ec2UnassignPrivateIpAddressesRequest#Ipv4Prefixes
   */
  readonly ipv4Prefixes?: string[];

}

/**
 * Converts an object of type 'Ec2UnassignPrivateIpAddressesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnassignPrivateIpAddressesRequest(obj: Ec2UnassignPrivateIpAddressesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfaceId': obj.networkInterfaceId,
    'PrivateIpAddresses': obj.privateIpAddresses?.map(y => y),
    'Ipv4Prefixes': obj.ipv4Prefixes?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnmonitorInstancesRequest
 */
export interface Ec2UnmonitorInstancesRequest {
  /**
   * @schema Ec2UnmonitorInstancesRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2UnmonitorInstancesRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2UnmonitorInstancesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnmonitorInstancesRequest(obj: Ec2UnmonitorInstancesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnmonitorInstancesResult
 */
export interface Ec2UnmonitorInstancesResult {
  /**
   * @schema Ec2UnmonitorInstancesResult#InstanceMonitorings
   */
  readonly instanceMonitorings?: Ec2InstanceMonitoring[];

}

/**
 * Converts an object of type 'Ec2UnmonitorInstancesResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnmonitorInstancesResult(obj: Ec2UnmonitorInstancesResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceMonitorings': obj.instanceMonitorings?.map(y => toJson_Ec2InstanceMonitoring(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest
 */
export interface Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest {
  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest#IpPermissions
   */
  readonly ipPermissions?: Ec2IpPermission[];

  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest#SecurityGroupRuleDescriptions
   */
  readonly securityGroupRuleDescriptions?: Ec2SecurityGroupRuleDescription[];

}

/**
 * Converts an object of type 'Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest(obj: Ec2UpdateSecurityGroupRuleDescriptionsEgressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'GroupId': obj.groupId,
    'GroupName': obj.groupName,
    'IpPermissions': obj.ipPermissions?.map(y => toJson_Ec2IpPermission(y)),
    'SecurityGroupRuleDescriptions': obj.securityGroupRuleDescriptions?.map(y => toJson_Ec2SecurityGroupRuleDescription(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UpdateSecurityGroupRuleDescriptionsEgressResult
 */
export interface Ec2UpdateSecurityGroupRuleDescriptionsEgressResult {
  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsEgressResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2UpdateSecurityGroupRuleDescriptionsEgressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UpdateSecurityGroupRuleDescriptionsEgressResult(obj: Ec2UpdateSecurityGroupRuleDescriptionsEgressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest
 */
export interface Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest {
  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest#DryRun
   */
  readonly dryRun?: boolean;

  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest#IpPermissions
   */
  readonly ipPermissions?: Ec2IpPermission[];

  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest#SecurityGroupRuleDescriptions
   */
  readonly securityGroupRuleDescriptions?: Ec2SecurityGroupRuleDescription[];

}

/**
 * Converts an object of type 'Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest(obj: Ec2UpdateSecurityGroupRuleDescriptionsIngressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DryRun': obj.dryRun,
    'GroupId': obj.groupId,
    'GroupName': obj.groupName,
    'IpPermissions': obj.ipPermissions?.map(y => toJson_Ec2IpPermission(y)),
    'SecurityGroupRuleDescriptions': obj.securityGroupRuleDescriptions?.map(y => toJson_Ec2SecurityGroupRuleDescription(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UpdateSecurityGroupRuleDescriptionsIngressResult
 */
export interface Ec2UpdateSecurityGroupRuleDescriptionsIngressResult {
  /**
   * @schema Ec2UpdateSecurityGroupRuleDescriptionsIngressResult#Return
   */
  readonly return?: boolean;

}

/**
 * Converts an object of type 'Ec2UpdateSecurityGroupRuleDescriptionsIngressResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UpdateSecurityGroupRuleDescriptionsIngressResult(obj: Ec2UpdateSecurityGroupRuleDescriptionsIngressResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Return': obj.return,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2WithdrawByoipCidrRequest
 */
export interface Ec2WithdrawByoipCidrRequest {
  /**
   * @schema Ec2WithdrawByoipCidrRequest#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2WithdrawByoipCidrRequest#DryRun
   */
  readonly dryRun?: boolean;

}

/**
 * Converts an object of type 'Ec2WithdrawByoipCidrRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2WithdrawByoipCidrRequest(obj: Ec2WithdrawByoipCidrRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'DryRun': obj.dryRun,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2WithdrawByoipCidrResult
 */
export interface Ec2WithdrawByoipCidrResult {
  /**
   * @schema Ec2WithdrawByoipCidrResult#ByoipCidr
   */
  readonly byoipCidr?: Ec2ByoipCidr;

}

/**
 * Converts an object of type 'Ec2WithdrawByoipCidrResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2WithdrawByoipCidrResult(obj: Ec2WithdrawByoipCidrResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ByoipCidr': toJson_Ec2ByoipCidr(obj.byoipCidr),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TargetConfigurationRequest
 */
export interface Ec2TargetConfigurationRequest {
  /**
   * @schema Ec2TargetConfigurationRequest#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2TargetConfigurationRequest#OfferingId
   */
  readonly offeringId?: string;

}

/**
 * Converts an object of type 'Ec2TargetConfigurationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TargetConfigurationRequest(obj: Ec2TargetConfigurationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceCount': obj.instanceCount,
    'OfferingId': obj.offeringId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastDomainAssociations
 */
export interface Ec2TransitGatewayMulticastDomainAssociations {
  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociations#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociations#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociations#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociations#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociations#ResourceOwnerId
   */
  readonly resourceOwnerId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociations#Subnets
   */
  readonly subnets?: Ec2SubnetAssociation[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastDomainAssociations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastDomainAssociations(obj: Ec2TransitGatewayMulticastDomainAssociations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'ResourceId': obj.resourceId,
    'ResourceType': obj.resourceType,
    'ResourceOwnerId': obj.resourceOwnerId,
    'Subnets': obj.subnets?.map(y => toJson_Ec2SubnetAssociation(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayPeeringAttachment
 */
export interface Ec2TransitGatewayPeeringAttachment {
  /**
   * @schema Ec2TransitGatewayPeeringAttachment#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayPeeringAttachment#RequesterTgwInfo
   */
  readonly requesterTgwInfo?: Ec2PeeringTgwInfo;

  /**
   * @schema Ec2TransitGatewayPeeringAttachment#AccepterTgwInfo
   */
  readonly accepterTgwInfo?: Ec2PeeringTgwInfo;

  /**
   * @schema Ec2TransitGatewayPeeringAttachment#Status
   */
  readonly status?: Ec2PeeringAttachmentStatus;

  /**
   * @schema Ec2TransitGatewayPeeringAttachment#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGatewayPeeringAttachment#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2TransitGatewayPeeringAttachment#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayPeeringAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayPeeringAttachment(obj: Ec2TransitGatewayPeeringAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'RequesterTgwInfo': toJson_Ec2PeeringTgwInfo(obj.requesterTgwInfo),
    'AccepterTgwInfo': toJson_Ec2PeeringTgwInfo(obj.accepterTgwInfo),
    'Status': toJson_Ec2PeeringAttachmentStatus(obj.status),
    'State': obj.state,
    'CreationTime': obj.creationTime,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayVpcAttachment
 */
export interface Ec2TransitGatewayVpcAttachment {
  /**
   * @schema Ec2TransitGatewayVpcAttachment#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayVpcAttachment#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2TransitGatewayVpcAttachment#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2TransitGatewayVpcAttachment#VpcOwnerId
   */
  readonly vpcOwnerId?: string;

  /**
   * @schema Ec2TransitGatewayVpcAttachment#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGatewayVpcAttachment#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2TransitGatewayVpcAttachment#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2TransitGatewayVpcAttachment#Options
   */
  readonly options?: Ec2TransitGatewayVpcAttachmentOptions;

  /**
   * @schema Ec2TransitGatewayVpcAttachment#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayVpcAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayVpcAttachment(obj: Ec2TransitGatewayVpcAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'TransitGatewayId': obj.transitGatewayId,
    'VpcId': obj.vpcId,
    'VpcOwnerId': obj.vpcOwnerId,
    'State': obj.state,
    'SubnetIds': obj.subnetIds?.map(y => y),
    'CreationTime': obj.creationTime,
    'Options': toJson_Ec2TransitGatewayVpcAttachmentOptions(obj.options),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnsuccessfulItem
 */
export interface Ec2UnsuccessfulItem {
  /**
   * @schema Ec2UnsuccessfulItem#Error
   */
  readonly error?: Ec2UnsuccessfulItemError;

  /**
   * @schema Ec2UnsuccessfulItem#ResourceId
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'Ec2UnsuccessfulItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnsuccessfulItem(obj: Ec2UnsuccessfulItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Error': toJson_Ec2UnsuccessfulItemError(obj.error),
    'ResourceId': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcPeeringConnection
 */
export interface Ec2VpcPeeringConnection {
  /**
   * @schema Ec2VpcPeeringConnection#AccepterVpcInfo
   */
  readonly accepterVpcInfo?: Ec2VpcPeeringConnectionVpcInfo;

  /**
   * @schema Ec2VpcPeeringConnection#ExpirationTime
   */
  readonly expirationTime?: string;

  /**
   * @schema Ec2VpcPeeringConnection#RequesterVpcInfo
   */
  readonly requesterVpcInfo?: Ec2VpcPeeringConnectionVpcInfo;

  /**
   * @schema Ec2VpcPeeringConnection#Status
   */
  readonly status?: Ec2VpcPeeringConnectionStateReason;

  /**
   * @schema Ec2VpcPeeringConnection#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2VpcPeeringConnection#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2VpcPeeringConnection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcPeeringConnection(obj: Ec2VpcPeeringConnection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AccepterVpcInfo': toJson_Ec2VpcPeeringConnectionVpcInfo(obj.accepterVpcInfo),
    'ExpirationTime': obj.expirationTime,
    'RequesterVpcInfo': toJson_Ec2VpcPeeringConnectionVpcInfo(obj.requesterVpcInfo),
    'Status': toJson_Ec2VpcPeeringConnectionStateReason(obj.status),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ByoipCidr
 */
export interface Ec2ByoipCidr {
  /**
   * @schema Ec2ByoipCidr#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2ByoipCidr#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ByoipCidr#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ByoipCidr#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2ByoipCidr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ByoipCidr(obj: Ec2ByoipCidr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'Description': obj.description,
    'StatusMessage': obj.statusMessage,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TagSpecification
 */
export interface Ec2TagSpecification {
  /**
   * @schema Ec2TagSpecification#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TagSpecification#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TagSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TagSpecification(obj: Ec2TagSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ResourceType': obj.resourceType,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssignedPrivateIpAddress
 */
export interface Ec2AssignedPrivateIpAddress {
  /**
   * @schema Ec2AssignedPrivateIpAddress#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2AssignedPrivateIpAddress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssignedPrivateIpAddress(obj: Ec2AssignedPrivateIpAddress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateIpAddress': obj.privateIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv4PrefixSpecification
 */
export interface Ec2Ipv4PrefixSpecification {
  /**
   * @schema Ec2Ipv4PrefixSpecification#Ipv4Prefix
   */
  readonly ipv4Prefix?: string;

}

/**
 * Converts an object of type 'Ec2Ipv4PrefixSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv4PrefixSpecification(obj: Ec2Ipv4PrefixSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv4Prefix': obj.ipv4Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociationStatus
 */
export interface Ec2AssociationStatus {
  /**
   * @schema Ec2AssociationStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2AssociationStatus#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2AssociationStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociationStatus(obj: Ec2AssociationStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IamInstanceProfileSpecification
 */
export interface Ec2IamInstanceProfileSpecification {
  /**
   * @schema Ec2IamInstanceProfileSpecification#Arn
   */
  readonly arn?: string;

  /**
   * @schema Ec2IamInstanceProfileSpecification#Name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'Ec2IamInstanceProfileSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IamInstanceProfileSpecification(obj: Ec2IamInstanceProfileSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Arn': obj.arn,
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IamInstanceProfileAssociation
 */
export interface Ec2IamInstanceProfileAssociation {
  /**
   * @schema Ec2IamInstanceProfileAssociation#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2IamInstanceProfileAssociation#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2IamInstanceProfileAssociation#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2IamInstanceProfile;

  /**
   * @schema Ec2IamInstanceProfileAssociation#State
   */
  readonly state?: string;

  /**
   * @schema Ec2IamInstanceProfileAssociation#Timestamp
   */
  readonly timestamp?: string;

}

/**
 * Converts an object of type 'Ec2IamInstanceProfileAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IamInstanceProfileAssociation(obj: Ec2IamInstanceProfileAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'InstanceId': obj.instanceId,
    'IamInstanceProfile': toJson_Ec2IamInstanceProfile(obj.iamInstanceProfile),
    'State': obj.state,
    'Timestamp': obj.timestamp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceEventWindowAssociationRequest
 */
export interface Ec2InstanceEventWindowAssociationRequest {
  /**
   * @schema Ec2InstanceEventWindowAssociationRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2InstanceEventWindowAssociationRequest#InstanceTags
   */
  readonly instanceTags?: Ec2Tag[];

  /**
   * @schema Ec2InstanceEventWindowAssociationRequest#DedicatedHostIds
   */
  readonly dedicatedHostIds?: string[];

}

/**
 * Converts an object of type 'Ec2InstanceEventWindowAssociationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceEventWindowAssociationRequest(obj: Ec2InstanceEventWindowAssociationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'InstanceTags': obj.instanceTags?.map(y => toJson_Ec2Tag(y)),
    'DedicatedHostIds': obj.dedicatedHostIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceEventWindow
 */
export interface Ec2InstanceEventWindow {
  /**
   * @schema Ec2InstanceEventWindow#InstanceEventWindowId
   */
  readonly instanceEventWindowId?: string;

  /**
   * @schema Ec2InstanceEventWindow#TimeRanges
   */
  readonly timeRanges?: Ec2InstanceEventWindowTimeRange[];

  /**
   * @schema Ec2InstanceEventWindow#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2InstanceEventWindow#CronExpression
   */
  readonly cronExpression?: string;

  /**
   * @schema Ec2InstanceEventWindow#AssociationTarget
   */
  readonly associationTarget?: Ec2InstanceEventWindowAssociationTarget;

  /**
   * @schema Ec2InstanceEventWindow#State
   */
  readonly state?: string;

  /**
   * @schema Ec2InstanceEventWindow#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2InstanceEventWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceEventWindow(obj: Ec2InstanceEventWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventWindowId': obj.instanceEventWindowId,
    'TimeRanges': obj.timeRanges?.map(y => toJson_Ec2InstanceEventWindowTimeRange(y)),
    'Name': obj.name,
    'CronExpression': obj.cronExpression,
    'AssociationTarget': toJson_Ec2InstanceEventWindowAssociationTarget(obj.associationTarget),
    'State': obj.state,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RouteTableAssociationState
 */
export interface Ec2RouteTableAssociationState {
  /**
   * @schema Ec2RouteTableAssociationState#State
   */
  readonly state?: string;

  /**
   * @schema Ec2RouteTableAssociationState#StatusMessage
   */
  readonly statusMessage?: string;

}

/**
 * Converts an object of type 'Ec2RouteTableAssociationState' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RouteTableAssociationState(obj: Ec2RouteTableAssociationState | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'StatusMessage': obj.statusMessage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SubnetIpv6CidrBlockAssociation
 */
export interface Ec2SubnetIpv6CidrBlockAssociation {
  /**
   * @schema Ec2SubnetIpv6CidrBlockAssociation#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2SubnetIpv6CidrBlockAssociation#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

  /**
   * @schema Ec2SubnetIpv6CidrBlockAssociation#Ipv6CidrBlockState
   */
  readonly ipv6CidrBlockState?: Ec2SubnetCidrBlockState;

}

/**
 * Converts an object of type 'Ec2SubnetIpv6CidrBlockAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SubnetIpv6CidrBlockAssociation(obj: Ec2SubnetIpv6CidrBlockAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
    'Ipv6CidrBlockState': toJson_Ec2SubnetCidrBlockState(obj.ipv6CidrBlockState),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayAssociation
 */
export interface Ec2TransitGatewayAssociation {
  /**
   * @schema Ec2TransitGatewayAssociation#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2TransitGatewayAssociation#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayAssociation#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayAssociation#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayAssociation#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayAssociation(obj: Ec2TransitGatewayAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'ResourceId': obj.resourceId,
    'ResourceType': obj.resourceType,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TrunkInterfaceAssociation
 */
export interface Ec2TrunkInterfaceAssociation {
  /**
   * @schema Ec2TrunkInterfaceAssociation#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2TrunkInterfaceAssociation#BranchInterfaceId
   */
  readonly branchInterfaceId?: string;

  /**
   * @schema Ec2TrunkInterfaceAssociation#TrunkInterfaceId
   */
  readonly trunkInterfaceId?: string;

  /**
   * @schema Ec2TrunkInterfaceAssociation#InterfaceProtocol
   */
  readonly interfaceProtocol?: string;

  /**
   * @schema Ec2TrunkInterfaceAssociation#VlanId
   */
  readonly vlanId?: number;

  /**
   * @schema Ec2TrunkInterfaceAssociation#GreKey
   */
  readonly greKey?: number;

  /**
   * @schema Ec2TrunkInterfaceAssociation#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TrunkInterfaceAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TrunkInterfaceAssociation(obj: Ec2TrunkInterfaceAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'BranchInterfaceId': obj.branchInterfaceId,
    'TrunkInterfaceId': obj.trunkInterfaceId,
    'InterfaceProtocol': obj.interfaceProtocol,
    'VlanId': obj.vlanId,
    'GreKey': obj.greKey,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcIpv6CidrBlockAssociation
 */
export interface Ec2VpcIpv6CidrBlockAssociation {
  /**
   * @schema Ec2VpcIpv6CidrBlockAssociation#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2VpcIpv6CidrBlockAssociation#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

  /**
   * @schema Ec2VpcIpv6CidrBlockAssociation#Ipv6CidrBlockState
   */
  readonly ipv6CidrBlockState?: Ec2VpcCidrBlockState;

  /**
   * @schema Ec2VpcIpv6CidrBlockAssociation#NetworkBorderGroup
   */
  readonly networkBorderGroup?: string;

  /**
   * @schema Ec2VpcIpv6CidrBlockAssociation#Ipv6Pool
   */
  readonly ipv6Pool?: string;

}

/**
 * Converts an object of type 'Ec2VpcIpv6CidrBlockAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcIpv6CidrBlockAssociation(obj: Ec2VpcIpv6CidrBlockAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
    'Ipv6CidrBlockState': toJson_Ec2VpcCidrBlockState(obj.ipv6CidrBlockState),
    'NetworkBorderGroup': obj.networkBorderGroup,
    'Ipv6Pool': obj.ipv6Pool,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcCidrBlockAssociation
 */
export interface Ec2VpcCidrBlockAssociation {
  /**
   * @schema Ec2VpcCidrBlockAssociation#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2VpcCidrBlockAssociation#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2VpcCidrBlockAssociation#CidrBlockState
   */
  readonly cidrBlockState?: Ec2VpcCidrBlockState;

}

/**
 * Converts an object of type 'Ec2VpcCidrBlockAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcCidrBlockAssociation(obj: Ec2VpcCidrBlockAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'CidrBlock': obj.cidrBlock,
    'CidrBlockState': toJson_Ec2VpcCidrBlockState(obj.cidrBlockState),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcAttachment
 */
export interface Ec2VpcAttachment {
  /**
   * @schema Ec2VpcAttachment#State
   */
  readonly state?: string;

  /**
   * @schema Ec2VpcAttachment#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2VpcAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcAttachment(obj: Ec2VpcAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnAuthorizationRuleStatus
 */
export interface Ec2ClientVpnAuthorizationRuleStatus {
  /**
   * @schema Ec2ClientVpnAuthorizationRuleStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2ClientVpnAuthorizationRuleStatus#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2ClientVpnAuthorizationRuleStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnAuthorizationRuleStatus(obj: Ec2ClientVpnAuthorizationRuleStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IpPermission
 */
export interface Ec2IpPermission {
  /**
   * @schema Ec2IpPermission#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2IpPermission#IpProtocol
   */
  readonly ipProtocol?: string;

  /**
   * @schema Ec2IpPermission#IpRanges
   */
  readonly ipRanges?: Ec2IpRange[];

  /**
   * @schema Ec2IpPermission#Ipv6Ranges
   */
  readonly ipv6Ranges?: Ec2Ipv6Range[];

  /**
   * @schema Ec2IpPermission#PrefixListIds
   */
  readonly prefixListIds?: Ec2PrefixListId[];

  /**
   * @schema Ec2IpPermission#ToPort
   */
  readonly toPort?: number;

  /**
   * @schema Ec2IpPermission#UserIdGroupPairs
   */
  readonly userIdGroupPairs?: Ec2UserIdGroupPair[];

}

/**
 * Converts an object of type 'Ec2IpPermission' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IpPermission(obj: Ec2IpPermission | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FromPort': obj.fromPort,
    'IpProtocol': obj.ipProtocol,
    'IpRanges': obj.ipRanges?.map(y => toJson_Ec2IpRange(y)),
    'Ipv6Ranges': obj.ipv6Ranges?.map(y => toJson_Ec2Ipv6Range(y)),
    'PrefixListIds': obj.prefixListIds?.map(y => toJson_Ec2PrefixListId(y)),
    'ToPort': obj.toPort,
    'UserIdGroupPairs': obj.userIdGroupPairs?.map(y => toJson_Ec2UserIdGroupPair(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SecurityGroupRule
 */
export interface Ec2SecurityGroupRule {
  /**
   * @schema Ec2SecurityGroupRule#SecurityGroupRuleId
   */
  readonly securityGroupRuleId?: string;

  /**
   * @schema Ec2SecurityGroupRule#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2SecurityGroupRule#GroupOwnerId
   */
  readonly groupOwnerId?: string;

  /**
   * @schema Ec2SecurityGroupRule#IsEgress
   */
  readonly isEgress?: boolean;

  /**
   * @schema Ec2SecurityGroupRule#IpProtocol
   */
  readonly ipProtocol?: string;

  /**
   * @schema Ec2SecurityGroupRule#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2SecurityGroupRule#ToPort
   */
  readonly toPort?: number;

  /**
   * @schema Ec2SecurityGroupRule#CidrIpv4
   */
  readonly cidrIpv4?: string;

  /**
   * @schema Ec2SecurityGroupRule#CidrIpv6
   */
  readonly cidrIpv6?: string;

  /**
   * @schema Ec2SecurityGroupRule#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2SecurityGroupRule#ReferencedGroupInfo
   */
  readonly referencedGroupInfo?: Ec2ReferencedSecurityGroup;

  /**
   * @schema Ec2SecurityGroupRule#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2SecurityGroupRule#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2SecurityGroupRule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SecurityGroupRule(obj: Ec2SecurityGroupRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupRuleId': obj.securityGroupRuleId,
    'GroupId': obj.groupId,
    'GroupOwnerId': obj.groupOwnerId,
    'IsEgress': obj.isEgress,
    'IpProtocol': obj.ipProtocol,
    'FromPort': obj.fromPort,
    'ToPort': obj.toPort,
    'CidrIpv4': obj.cidrIpv4,
    'CidrIpv6': obj.cidrIpv6,
    'PrefixListId': obj.prefixListId,
    'ReferencedGroupInfo': toJson_Ec2ReferencedSecurityGroup(obj.referencedGroupInfo),
    'Description': obj.description,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Storage
 */
export interface Ec2Storage {
  /**
   * @schema Ec2Storage#S3
   */
  readonly s3?: Ec2S3Storage;

}

/**
 * Converts an object of type 'Ec2Storage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Storage(obj: Ec2Storage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'S3': toJson_Ec2S3Storage(obj.s3),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2BundleTask
 */
export interface Ec2BundleTask {
  /**
   * @schema Ec2BundleTask#BundleId
   */
  readonly bundleId?: string;

  /**
   * @schema Ec2BundleTask#BundleTaskError
   */
  readonly bundleTaskError?: Ec2BundleTaskError;

  /**
   * @schema Ec2BundleTask#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2BundleTask#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2BundleTask#StartTime
   */
  readonly startTime?: string;

  /**
   * @schema Ec2BundleTask#State
   */
  readonly state?: string;

  /**
   * @schema Ec2BundleTask#Storage
   */
  readonly storage?: Ec2Storage;

  /**
   * @schema Ec2BundleTask#UpdateTime
   */
  readonly updateTime?: string;

}

/**
 * Converts an object of type 'Ec2BundleTask' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2BundleTask(obj: Ec2BundleTask | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BundleId': obj.bundleId,
    'BundleTaskError': toJson_Ec2BundleTaskError(obj.bundleTaskError),
    'InstanceId': obj.instanceId,
    'Progress': obj.progress,
    'StartTime': obj.startTime,
    'State': obj.state,
    'Storage': toJson_Ec2Storage(obj.storage),
    'UpdateTime': obj.updateTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstancesListing
 */
export interface Ec2ReservedInstancesListing {
  /**
   * @schema Ec2ReservedInstancesListing#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2ReservedInstancesListing#CreateDate
   */
  readonly createDate?: string;

  /**
   * @schema Ec2ReservedInstancesListing#InstanceCounts
   */
  readonly instanceCounts?: Ec2InstanceCount[];

  /**
   * @schema Ec2ReservedInstancesListing#PriceSchedules
   */
  readonly priceSchedules?: Ec2PriceSchedule[];

  /**
   * @schema Ec2ReservedInstancesListing#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

  /**
   * @schema Ec2ReservedInstancesListing#ReservedInstancesListingId
   */
  readonly reservedInstancesListingId?: string;

  /**
   * @schema Ec2ReservedInstancesListing#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2ReservedInstancesListing#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ReservedInstancesListing#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2ReservedInstancesListing#UpdateDate
   */
  readonly updateDate?: string;

}

/**
 * Converts an object of type 'Ec2ReservedInstancesListing' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstancesListing(obj: Ec2ReservedInstancesListing | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'CreateDate': obj.createDate,
    'InstanceCounts': obj.instanceCounts?.map(y => toJson_Ec2InstanceCount(y)),
    'PriceSchedules': obj.priceSchedules?.map(y => toJson_Ec2PriceSchedule(y)),
    'ReservedInstancesId': obj.reservedInstancesId,
    'ReservedInstancesListingId': obj.reservedInstancesListingId,
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'UpdateDate': obj.updateDate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelSpotFleetRequestsSuccessItem
 */
export interface Ec2CancelSpotFleetRequestsSuccessItem {
  /**
   * @schema Ec2CancelSpotFleetRequestsSuccessItem#CurrentSpotFleetRequestState
   */
  readonly currentSpotFleetRequestState?: string;

  /**
   * @schema Ec2CancelSpotFleetRequestsSuccessItem#PreviousSpotFleetRequestState
   */
  readonly previousSpotFleetRequestState?: string;

  /**
   * @schema Ec2CancelSpotFleetRequestsSuccessItem#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

}

/**
 * Converts an object of type 'Ec2CancelSpotFleetRequestsSuccessItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelSpotFleetRequestsSuccessItem(obj: Ec2CancelSpotFleetRequestsSuccessItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CurrentSpotFleetRequestState': obj.currentSpotFleetRequestState,
    'PreviousSpotFleetRequestState': obj.previousSpotFleetRequestState,
    'SpotFleetRequestId': obj.spotFleetRequestId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelSpotFleetRequestsErrorItem
 */
export interface Ec2CancelSpotFleetRequestsErrorItem {
  /**
   * @schema Ec2CancelSpotFleetRequestsErrorItem#Error
   */
  readonly error?: Ec2CancelSpotFleetRequestsError;

  /**
   * @schema Ec2CancelSpotFleetRequestsErrorItem#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

}

/**
 * Converts an object of type 'Ec2CancelSpotFleetRequestsErrorItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelSpotFleetRequestsErrorItem(obj: Ec2CancelSpotFleetRequestsErrorItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Error': toJson_Ec2CancelSpotFleetRequestsError(obj.error),
    'SpotFleetRequestId': obj.spotFleetRequestId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelledSpotInstanceRequest
 */
export interface Ec2CancelledSpotInstanceRequest {
  /**
   * @schema Ec2CancelledSpotInstanceRequest#SpotInstanceRequestId
   */
  readonly spotInstanceRequestId?: string;

  /**
   * @schema Ec2CancelledSpotInstanceRequest#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2CancelledSpotInstanceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelledSpotInstanceRequest(obj: Ec2CancelledSpotInstanceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SpotInstanceRequestId': obj.spotInstanceRequestId,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Tag
 */
export interface Ec2Tag {
  /**
   * @schema Ec2Tag#Key
   */
  readonly key?: string;

  /**
   * @schema Ec2Tag#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Tag' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Tag(obj: Ec2Tag | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CapacityReservation
 */
export interface Ec2CapacityReservation {
  /**
   * @schema Ec2CapacityReservation#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2CapacityReservation#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2CapacityReservation#CapacityReservationArn
   */
  readonly capacityReservationArn?: string;

  /**
   * @schema Ec2CapacityReservation#AvailabilityZoneId
   */
  readonly availabilityZoneId?: string;

  /**
   * @schema Ec2CapacityReservation#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2CapacityReservation#InstancePlatform
   */
  readonly instancePlatform?: string;

  /**
   * @schema Ec2CapacityReservation#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2CapacityReservation#Tenancy
   */
  readonly tenancy?: string;

  /**
   * @schema Ec2CapacityReservation#TotalInstanceCount
   */
  readonly totalInstanceCount?: number;

  /**
   * @schema Ec2CapacityReservation#AvailableInstanceCount
   */
  readonly availableInstanceCount?: number;

  /**
   * @schema Ec2CapacityReservation#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2CapacityReservation#EphemeralStorage
   */
  readonly ephemeralStorage?: boolean;

  /**
   * @schema Ec2CapacityReservation#State
   */
  readonly state?: string;

  /**
   * @schema Ec2CapacityReservation#StartDate
   */
  readonly startDate?: string;

  /**
   * @schema Ec2CapacityReservation#EndDate
   */
  readonly endDate?: string;

  /**
   * @schema Ec2CapacityReservation#EndDateType
   */
  readonly endDateType?: string;

  /**
   * @schema Ec2CapacityReservation#InstanceMatchCriteria
   */
  readonly instanceMatchCriteria?: string;

  /**
   * @schema Ec2CapacityReservation#CreateDate
   */
  readonly createDate?: string;

  /**
   * @schema Ec2CapacityReservation#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2CapacityReservation#OutpostArn
   */
  readonly outpostArn?: string;

}

/**
 * Converts an object of type 'Ec2CapacityReservation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CapacityReservation(obj: Ec2CapacityReservation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationId': obj.capacityReservationId,
    'OwnerId': obj.ownerId,
    'CapacityReservationArn': obj.capacityReservationArn,
    'AvailabilityZoneId': obj.availabilityZoneId,
    'InstanceType': obj.instanceType,
    'InstancePlatform': obj.instancePlatform,
    'AvailabilityZone': obj.availabilityZone,
    'Tenancy': obj.tenancy,
    'TotalInstanceCount': obj.totalInstanceCount,
    'AvailableInstanceCount': obj.availableInstanceCount,
    'EbsOptimized': obj.ebsOptimized,
    'EphemeralStorage': obj.ephemeralStorage,
    'State': obj.state,
    'StartDate': obj.startDate,
    'EndDate': obj.endDate,
    'EndDateType': obj.endDateType,
    'InstanceMatchCriteria': obj.instanceMatchCriteria,
    'CreateDate': obj.createDate,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'OutpostArn': obj.outpostArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CarrierGateway
 */
export interface Ec2CarrierGateway {
  /**
   * @schema Ec2CarrierGateway#CarrierGatewayId
   */
  readonly carrierGatewayId?: string;

  /**
   * @schema Ec2CarrierGateway#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2CarrierGateway#State
   */
  readonly state?: string;

  /**
   * @schema Ec2CarrierGateway#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2CarrierGateway#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2CarrierGateway' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CarrierGateway(obj: Ec2CarrierGateway | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CarrierGatewayId': obj.carrierGatewayId,
    'VpcId': obj.vpcId,
    'State': obj.state,
    'OwnerId': obj.ownerId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnAuthenticationRequest
 */
export interface Ec2ClientVpnAuthenticationRequest {
  /**
   * @schema Ec2ClientVpnAuthenticationRequest#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2ClientVpnAuthenticationRequest#ActiveDirectory
   */
  readonly activeDirectory?: Ec2DirectoryServiceAuthenticationRequest;

  /**
   * @schema Ec2ClientVpnAuthenticationRequest#MutualAuthentication
   */
  readonly mutualAuthentication?: Ec2CertificateAuthenticationRequest;

  /**
   * @schema Ec2ClientVpnAuthenticationRequest#FederatedAuthentication
   */
  readonly federatedAuthentication?: Ec2FederatedAuthenticationRequest;

}

/**
 * Converts an object of type 'Ec2ClientVpnAuthenticationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnAuthenticationRequest(obj: Ec2ClientVpnAuthenticationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'ActiveDirectory': toJson_Ec2DirectoryServiceAuthenticationRequest(obj.activeDirectory),
    'MutualAuthentication': toJson_Ec2CertificateAuthenticationRequest(obj.mutualAuthentication),
    'FederatedAuthentication': toJson_Ec2FederatedAuthenticationRequest(obj.federatedAuthentication),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ConnectionLogOptions
 */
export interface Ec2ConnectionLogOptions {
  /**
   * @schema Ec2ConnectionLogOptions#Enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema Ec2ConnectionLogOptions#CloudwatchLogGroup
   */
  readonly cloudwatchLogGroup?: string;

  /**
   * @schema Ec2ConnectionLogOptions#CloudwatchLogStream
   */
  readonly cloudwatchLogStream?: string;

}

/**
 * Converts an object of type 'Ec2ConnectionLogOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ConnectionLogOptions(obj: Ec2ConnectionLogOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
    'CloudwatchLogGroup': obj.cloudwatchLogGroup,
    'CloudwatchLogStream': obj.cloudwatchLogStream,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientConnectOptions
 */
export interface Ec2ClientConnectOptions {
  /**
   * @schema Ec2ClientConnectOptions#Enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema Ec2ClientConnectOptions#LambdaFunctionArn
   */
  readonly lambdaFunctionArn?: string;

}

/**
 * Converts an object of type 'Ec2ClientConnectOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientConnectOptions(obj: Ec2ClientConnectOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
    'LambdaFunctionArn': obj.lambdaFunctionArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnEndpointStatus
 */
export interface Ec2ClientVpnEndpointStatus {
  /**
   * @schema Ec2ClientVpnEndpointStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2ClientVpnEndpointStatus#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2ClientVpnEndpointStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnEndpointStatus(obj: Ec2ClientVpnEndpointStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnRouteStatus
 */
export interface Ec2ClientVpnRouteStatus {
  /**
   * @schema Ec2ClientVpnRouteStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2ClientVpnRouteStatus#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2ClientVpnRouteStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnRouteStatus(obj: Ec2ClientVpnRouteStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CustomerGateway
 */
export interface Ec2CustomerGateway {
  /**
   * @schema Ec2CustomerGateway#BgpAsn
   */
  readonly bgpAsn?: string;

  /**
   * @schema Ec2CustomerGateway#CustomerGatewayId
   */
  readonly customerGatewayId?: string;

  /**
   * @schema Ec2CustomerGateway#IpAddress
   */
  readonly ipAddress?: string;

  /**
   * @schema Ec2CustomerGateway#CertificateArn
   */
  readonly certificateArn?: string;

  /**
   * @schema Ec2CustomerGateway#State
   */
  readonly state?: string;

  /**
   * @schema Ec2CustomerGateway#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2CustomerGateway#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2CustomerGateway#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2CustomerGateway' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CustomerGateway(obj: Ec2CustomerGateway | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BgpAsn': obj.bgpAsn,
    'CustomerGatewayId': obj.customerGatewayId,
    'IpAddress': obj.ipAddress,
    'CertificateArn': obj.certificateArn,
    'State': obj.state,
    'Type': obj.type,
    'DeviceName': obj.deviceName,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Subnet
 */
export interface Ec2Subnet {
  /**
   * @schema Ec2Subnet#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2Subnet#AvailabilityZoneId
   */
  readonly availabilityZoneId?: string;

  /**
   * @schema Ec2Subnet#AvailableIpAddressCount
   */
  readonly availableIpAddressCount?: number;

  /**
   * @schema Ec2Subnet#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2Subnet#DefaultForAz
   */
  readonly defaultForAz?: boolean;

  /**
   * @schema Ec2Subnet#MapPublicIpOnLaunch
   */
  readonly mapPublicIpOnLaunch?: boolean;

  /**
   * @schema Ec2Subnet#MapCustomerOwnedIpOnLaunch
   */
  readonly mapCustomerOwnedIpOnLaunch?: boolean;

  /**
   * @schema Ec2Subnet#CustomerOwnedIpv4Pool
   */
  readonly customerOwnedIpv4Pool?: string;

  /**
   * @schema Ec2Subnet#State
   */
  readonly state?: string;

  /**
   * @schema Ec2Subnet#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2Subnet#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2Subnet#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2Subnet#AssignIpv6AddressOnCreation
   */
  readonly assignIpv6AddressOnCreation?: boolean;

  /**
   * @schema Ec2Subnet#Ipv6CidrBlockAssociationSet
   */
  readonly ipv6CidrBlockAssociationSet?: Ec2SubnetIpv6CidrBlockAssociation[];

  /**
   * @schema Ec2Subnet#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2Subnet#SubnetArn
   */
  readonly subnetArn?: string;

  /**
   * @schema Ec2Subnet#OutpostArn
   */
  readonly outpostArn?: string;

}

/**
 * Converts an object of type 'Ec2Subnet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Subnet(obj: Ec2Subnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'AvailabilityZoneId': obj.availabilityZoneId,
    'AvailableIpAddressCount': obj.availableIpAddressCount,
    'CidrBlock': obj.cidrBlock,
    'DefaultForAz': obj.defaultForAz,
    'MapPublicIpOnLaunch': obj.mapPublicIpOnLaunch,
    'MapCustomerOwnedIpOnLaunch': obj.mapCustomerOwnedIpOnLaunch,
    'CustomerOwnedIpv4Pool': obj.customerOwnedIpv4Pool,
    'State': obj.state,
    'SubnetId': obj.subnetId,
    'VpcId': obj.vpcId,
    'OwnerId': obj.ownerId,
    'AssignIpv6AddressOnCreation': obj.assignIpv6AddressOnCreation,
    'Ipv6CidrBlockAssociationSet': obj.ipv6CidrBlockAssociationSet?.map(y => toJson_Ec2SubnetIpv6CidrBlockAssociation(y)),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'SubnetArn': obj.subnetArn,
    'OutpostArn': obj.outpostArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Vpc
 */
export interface Ec2Vpc {
  /**
   * @schema Ec2Vpc#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2Vpc#DhcpOptionsId
   */
  readonly dhcpOptionsId?: string;

  /**
   * @schema Ec2Vpc#State
   */
  readonly state?: string;

  /**
   * @schema Ec2Vpc#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2Vpc#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2Vpc#InstanceTenancy
   */
  readonly instanceTenancy?: string;

  /**
   * @schema Ec2Vpc#Ipv6CidrBlockAssociationSet
   */
  readonly ipv6CidrBlockAssociationSet?: Ec2VpcIpv6CidrBlockAssociation[];

  /**
   * @schema Ec2Vpc#CidrBlockAssociationSet
   */
  readonly cidrBlockAssociationSet?: Ec2VpcCidrBlockAssociation[];

  /**
   * @schema Ec2Vpc#IsDefault
   */
  readonly isDefault?: boolean;

  /**
   * @schema Ec2Vpc#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2Vpc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Vpc(obj: Ec2Vpc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrBlock': obj.cidrBlock,
    'DhcpOptionsId': obj.dhcpOptionsId,
    'State': obj.state,
    'VpcId': obj.vpcId,
    'OwnerId': obj.ownerId,
    'InstanceTenancy': obj.instanceTenancy,
    'Ipv6CidrBlockAssociationSet': obj.ipv6CidrBlockAssociationSet?.map(y => toJson_Ec2VpcIpv6CidrBlockAssociation(y)),
    'CidrBlockAssociationSet': obj.cidrBlockAssociationSet?.map(y => toJson_Ec2VpcCidrBlockAssociation(y)),
    'IsDefault': obj.isDefault,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NewDhcpConfiguration
 */
export interface Ec2NewDhcpConfiguration {
  /**
   * @schema Ec2NewDhcpConfiguration#Key
   */
  readonly key?: string;

  /**
   * @schema Ec2NewDhcpConfiguration#Values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'Ec2NewDhcpConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NewDhcpConfiguration(obj: Ec2NewDhcpConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'Values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DhcpOptions
 */
export interface Ec2DhcpOptions {
  /**
   * @schema Ec2DhcpOptions#DhcpConfigurations
   */
  readonly dhcpConfigurations?: Ec2DhcpConfiguration[];

  /**
   * @schema Ec2DhcpOptions#DhcpOptionsId
   */
  readonly dhcpOptionsId?: string;

  /**
   * @schema Ec2DhcpOptions#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2DhcpOptions#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2DhcpOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DhcpOptions(obj: Ec2DhcpOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DhcpConfigurations': obj.dhcpConfigurations?.map(y => toJson_Ec2DhcpConfiguration(y)),
    'DhcpOptionsId': obj.dhcpOptionsId,
    'OwnerId': obj.ownerId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EgressOnlyInternetGateway
 */
export interface Ec2EgressOnlyInternetGateway {
  /**
   * @schema Ec2EgressOnlyInternetGateway#Attachments
   */
  readonly attachments?: Ec2InternetGatewayAttachment[];

  /**
   * @schema Ec2EgressOnlyInternetGateway#EgressOnlyInternetGatewayId
   */
  readonly egressOnlyInternetGatewayId?: string;

  /**
   * @schema Ec2EgressOnlyInternetGateway#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2EgressOnlyInternetGateway' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EgressOnlyInternetGateway(obj: Ec2EgressOnlyInternetGateway | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attachments': obj.attachments?.map(y => toJson_Ec2InternetGatewayAttachment(y)),
    'EgressOnlyInternetGatewayId': obj.egressOnlyInternetGatewayId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotOptionsRequest
 */
export interface Ec2SpotOptionsRequest {
  /**
   * @schema Ec2SpotOptionsRequest#AllocationStrategy
   */
  readonly allocationStrategy?: string;

  /**
   * @schema Ec2SpotOptionsRequest#MaintenanceStrategies
   */
  readonly maintenanceStrategies?: Ec2FleetSpotMaintenanceStrategiesRequest;

  /**
   * @schema Ec2SpotOptionsRequest#InstanceInterruptionBehavior
   */
  readonly instanceInterruptionBehavior?: string;

  /**
   * @schema Ec2SpotOptionsRequest#InstancePoolsToUseCount
   */
  readonly instancePoolsToUseCount?: number;

  /**
   * @schema Ec2SpotOptionsRequest#SingleInstanceType
   */
  readonly singleInstanceType?: boolean;

  /**
   * @schema Ec2SpotOptionsRequest#SingleAvailabilityZone
   */
  readonly singleAvailabilityZone?: boolean;

  /**
   * @schema Ec2SpotOptionsRequest#MinTargetCapacity
   */
  readonly minTargetCapacity?: number;

  /**
   * @schema Ec2SpotOptionsRequest#MaxTotalPrice
   */
  readonly maxTotalPrice?: string;

}

/**
 * Converts an object of type 'Ec2SpotOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotOptionsRequest(obj: Ec2SpotOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationStrategy': obj.allocationStrategy,
    'MaintenanceStrategies': toJson_Ec2FleetSpotMaintenanceStrategiesRequest(obj.maintenanceStrategies),
    'InstanceInterruptionBehavior': obj.instanceInterruptionBehavior,
    'InstancePoolsToUseCount': obj.instancePoolsToUseCount,
    'SingleInstanceType': obj.singleInstanceType,
    'SingleAvailabilityZone': obj.singleAvailabilityZone,
    'MinTargetCapacity': obj.minTargetCapacity,
    'MaxTotalPrice': obj.maxTotalPrice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2OnDemandOptionsRequest
 */
export interface Ec2OnDemandOptionsRequest {
  /**
   * @schema Ec2OnDemandOptionsRequest#AllocationStrategy
   */
  readonly allocationStrategy?: string;

  /**
   * @schema Ec2OnDemandOptionsRequest#CapacityReservationOptions
   */
  readonly capacityReservationOptions?: Ec2CapacityReservationOptionsRequest;

  /**
   * @schema Ec2OnDemandOptionsRequest#SingleInstanceType
   */
  readonly singleInstanceType?: boolean;

  /**
   * @schema Ec2OnDemandOptionsRequest#SingleAvailabilityZone
   */
  readonly singleAvailabilityZone?: boolean;

  /**
   * @schema Ec2OnDemandOptionsRequest#MinTargetCapacity
   */
  readonly minTargetCapacity?: number;

  /**
   * @schema Ec2OnDemandOptionsRequest#MaxTotalPrice
   */
  readonly maxTotalPrice?: string;

}

/**
 * Converts an object of type 'Ec2OnDemandOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2OnDemandOptionsRequest(obj: Ec2OnDemandOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationStrategy': obj.allocationStrategy,
    'CapacityReservationOptions': toJson_Ec2CapacityReservationOptionsRequest(obj.capacityReservationOptions),
    'SingleInstanceType': obj.singleInstanceType,
    'SingleAvailabilityZone': obj.singleAvailabilityZone,
    'MinTargetCapacity': obj.minTargetCapacity,
    'MaxTotalPrice': obj.maxTotalPrice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetLaunchTemplateConfigRequest
 */
export interface Ec2FleetLaunchTemplateConfigRequest {
  /**
   * @schema Ec2FleetLaunchTemplateConfigRequest#LaunchTemplateSpecification
   */
  readonly launchTemplateSpecification?: Ec2FleetLaunchTemplateSpecificationRequest;

  /**
   * @schema Ec2FleetLaunchTemplateConfigRequest#Overrides
   */
  readonly overrides?: Ec2FleetLaunchTemplateOverridesRequest[];

}

/**
 * Converts an object of type 'Ec2FleetLaunchTemplateConfigRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetLaunchTemplateConfigRequest(obj: Ec2FleetLaunchTemplateConfigRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateSpecification': toJson_Ec2FleetLaunchTemplateSpecificationRequest(obj.launchTemplateSpecification),
    'Overrides': obj.overrides?.map(y => toJson_Ec2FleetLaunchTemplateOverridesRequest(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TargetCapacitySpecificationRequest
 */
export interface Ec2TargetCapacitySpecificationRequest {
  /**
   * @schema Ec2TargetCapacitySpecificationRequest#TotalTargetCapacity
   */
  readonly totalTargetCapacity?: number;

  /**
   * @schema Ec2TargetCapacitySpecificationRequest#OnDemandTargetCapacity
   */
  readonly onDemandTargetCapacity?: number;

  /**
   * @schema Ec2TargetCapacitySpecificationRequest#SpotTargetCapacity
   */
  readonly spotTargetCapacity?: number;

  /**
   * @schema Ec2TargetCapacitySpecificationRequest#DefaultTargetCapacityType
   */
  readonly defaultTargetCapacityType?: string;

}

/**
 * Converts an object of type 'Ec2TargetCapacitySpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TargetCapacitySpecificationRequest(obj: Ec2TargetCapacitySpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TotalTargetCapacity': obj.totalTargetCapacity,
    'OnDemandTargetCapacity': obj.onDemandTargetCapacity,
    'SpotTargetCapacity': obj.spotTargetCapacity,
    'DefaultTargetCapacityType': obj.defaultTargetCapacityType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateFleetError
 */
export interface Ec2CreateFleetError {
  /**
   * @schema Ec2CreateFleetError#LaunchTemplateAndOverrides
   */
  readonly launchTemplateAndOverrides?: Ec2LaunchTemplateAndOverridesResponse;

  /**
   * @schema Ec2CreateFleetError#Lifecycle
   */
  readonly lifecycle?: string;

  /**
   * @schema Ec2CreateFleetError#ErrorCode
   */
  readonly errorCode?: string;

  /**
   * @schema Ec2CreateFleetError#ErrorMessage
   */
  readonly errorMessage?: string;

}

/**
 * Converts an object of type 'Ec2CreateFleetError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateFleetError(obj: Ec2CreateFleetError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateAndOverrides': toJson_Ec2LaunchTemplateAndOverridesResponse(obj.launchTemplateAndOverrides),
    'Lifecycle': obj.lifecycle,
    'ErrorCode': obj.errorCode,
    'ErrorMessage': obj.errorMessage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateFleetInstance
 */
export interface Ec2CreateFleetInstance {
  /**
   * @schema Ec2CreateFleetInstance#LaunchTemplateAndOverrides
   */
  readonly launchTemplateAndOverrides?: Ec2LaunchTemplateAndOverridesResponse;

  /**
   * @schema Ec2CreateFleetInstance#Lifecycle
   */
  readonly lifecycle?: string;

  /**
   * @schema Ec2CreateFleetInstance#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2CreateFleetInstance#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2CreateFleetInstance#Platform
   */
  readonly platform?: string;

}

/**
 * Converts an object of type 'Ec2CreateFleetInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateFleetInstance(obj: Ec2CreateFleetInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateAndOverrides': toJson_Ec2LaunchTemplateAndOverridesResponse(obj.launchTemplateAndOverrides),
    'Lifecycle': obj.lifecycle,
    'InstanceIds': obj.instanceIds?.map(y => y),
    'InstanceType': obj.instanceType,
    'Platform': obj.platform,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StorageLocation
 */
export interface Ec2StorageLocation {
  /**
   * @schema Ec2StorageLocation#Bucket
   */
  readonly bucket?: string;

  /**
   * @schema Ec2StorageLocation#Key
   */
  readonly key?: string;

}

/**
 * Converts an object of type 'Ec2StorageLocation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StorageLocation(obj: Ec2StorageLocation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Bucket': obj.bucket,
    'Key': obj.key,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2BlockDeviceMapping
 */
export interface Ec2BlockDeviceMapping {
  /**
   * @schema Ec2BlockDeviceMapping#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2BlockDeviceMapping#VirtualName
   */
  readonly virtualName?: string;

  /**
   * @schema Ec2BlockDeviceMapping#Ebs
   */
  readonly ebs?: Ec2EbsBlockDevice;

  /**
   * @schema Ec2BlockDeviceMapping#NoDevice
   */
  readonly noDevice?: string;

}

/**
 * Converts an object of type 'Ec2BlockDeviceMapping' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2BlockDeviceMapping(obj: Ec2BlockDeviceMapping | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeviceName': obj.deviceName,
    'VirtualName': obj.virtualName,
    'Ebs': toJson_Ec2EbsBlockDevice(obj.ebs),
    'NoDevice': obj.noDevice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceEventWindowTimeRangeRequest
 */
export interface Ec2InstanceEventWindowTimeRangeRequest {
  /**
   * @schema Ec2InstanceEventWindowTimeRangeRequest#StartWeekDay
   */
  readonly startWeekDay?: string;

  /**
   * @schema Ec2InstanceEventWindowTimeRangeRequest#StartHour
   */
  readonly startHour?: number;

  /**
   * @schema Ec2InstanceEventWindowTimeRangeRequest#EndWeekDay
   */
  readonly endWeekDay?: string;

  /**
   * @schema Ec2InstanceEventWindowTimeRangeRequest#EndHour
   */
  readonly endHour?: number;

}

/**
 * Converts an object of type 'Ec2InstanceEventWindowTimeRangeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceEventWindowTimeRangeRequest(obj: Ec2InstanceEventWindowTimeRangeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'StartWeekDay': obj.startWeekDay,
    'StartHour': obj.startHour,
    'EndWeekDay': obj.endWeekDay,
    'EndHour': obj.endHour,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportToS3TaskSpecification
 */
export interface Ec2ExportToS3TaskSpecification {
  /**
   * @schema Ec2ExportToS3TaskSpecification#ContainerFormat
   */
  readonly containerFormat?: string;

  /**
   * @schema Ec2ExportToS3TaskSpecification#DiskImageFormat
   */
  readonly diskImageFormat?: string;

  /**
   * @schema Ec2ExportToS3TaskSpecification#S3Bucket
   */
  readonly s3Bucket?: string;

  /**
   * @schema Ec2ExportToS3TaskSpecification#S3Prefix
   */
  readonly s3Prefix?: string;

}

/**
 * Converts an object of type 'Ec2ExportToS3TaskSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportToS3TaskSpecification(obj: Ec2ExportToS3TaskSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ContainerFormat': obj.containerFormat,
    'DiskImageFormat': obj.diskImageFormat,
    'S3Bucket': obj.s3Bucket,
    'S3Prefix': obj.s3Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportTask
 */
export interface Ec2ExportTask {
  /**
   * @schema Ec2ExportTask#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ExportTask#ExportTaskId
   */
  readonly exportTaskId?: string;

  /**
   * @schema Ec2ExportTask#ExportToS3Task
   */
  readonly exportToS3Task?: Ec2ExportToS3Task;

  /**
   * @schema Ec2ExportTask#InstanceExportDetails
   */
  readonly instanceExportDetails?: Ec2InstanceExportDetails;

  /**
   * @schema Ec2ExportTask#State
   */
  readonly state?: string;

  /**
   * @schema Ec2ExportTask#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ExportTask#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ExportTask' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportTask(obj: Ec2ExportTask | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'ExportTaskId': obj.exportTaskId,
    'ExportToS3Task': toJson_Ec2ExportToS3Task(obj.exportToS3Task),
    'InstanceExportDetails': toJson_Ec2InstanceExportDetails(obj.instanceExportDetails),
    'State': obj.state,
    'StatusMessage': obj.statusMessage,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InternetGateway
 */
export interface Ec2InternetGateway {
  /**
   * @schema Ec2InternetGateway#Attachments
   */
  readonly attachments?: Ec2InternetGatewayAttachment[];

  /**
   * @schema Ec2InternetGateway#InternetGatewayId
   */
  readonly internetGatewayId?: string;

  /**
   * @schema Ec2InternetGateway#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2InternetGateway#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2InternetGateway' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InternetGateway(obj: Ec2InternetGateway | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Attachments': obj.attachments?.map(y => toJson_Ec2InternetGatewayAttachment(y)),
    'InternetGatewayId': obj.internetGatewayId,
    'OwnerId': obj.ownerId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RequestLaunchTemplateData
 */
export interface Ec2RequestLaunchTemplateData {
  /**
   * @schema Ec2RequestLaunchTemplateData#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2RequestLaunchTemplateData#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2RequestLaunchTemplateData#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2LaunchTemplateIamInstanceProfileSpecificationRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2LaunchTemplateBlockDeviceMappingRequest[];

  /**
   * @schema Ec2RequestLaunchTemplateData#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest[];

  /**
   * @schema Ec2RequestLaunchTemplateData#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2RequestLaunchTemplateData#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2RequestLaunchTemplateData#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2RequestLaunchTemplateData#Monitoring
   */
  readonly monitoring?: Ec2LaunchTemplatesMonitoringRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#Placement
   */
  readonly placement?: Ec2LaunchTemplatePlacementRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#RamDiskId
   */
  readonly ramDiskId?: string;

  /**
   * @schema Ec2RequestLaunchTemplateData#DisableApiTermination
   */
  readonly disableApiTermination?: boolean;

  /**
   * @schema Ec2RequestLaunchTemplateData#InstanceInitiatedShutdownBehavior
   */
  readonly instanceInitiatedShutdownBehavior?: string;

  /**
   * @schema Ec2RequestLaunchTemplateData#UserData
   */
  readonly userData?: string;

  /**
   * @schema Ec2RequestLaunchTemplateData#TagSpecifications
   */
  readonly tagSpecifications?: Ec2LaunchTemplateTagSpecificationRequest[];

  /**
   * @schema Ec2RequestLaunchTemplateData#ElasticGpuSpecifications
   */
  readonly elasticGpuSpecifications?: Ec2ElasticGpuSpecification[];

  /**
   * @schema Ec2RequestLaunchTemplateData#ElasticInferenceAccelerators
   */
  readonly elasticInferenceAccelerators?: Ec2LaunchTemplateElasticInferenceAccelerator[];

  /**
   * @schema Ec2RequestLaunchTemplateData#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2RequestLaunchTemplateData#SecurityGroups
   */
  readonly securityGroups?: string[];

  /**
   * @schema Ec2RequestLaunchTemplateData#InstanceMarketOptions
   */
  readonly instanceMarketOptions?: Ec2LaunchTemplateInstanceMarketOptionsRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#CreditSpecification
   */
  readonly creditSpecification?: Ec2CreditSpecificationRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#CpuOptions
   */
  readonly cpuOptions?: Ec2LaunchTemplateCpuOptionsRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#CapacityReservationSpecification
   */
  readonly capacityReservationSpecification?: Ec2LaunchTemplateCapacityReservationSpecificationRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#LicenseSpecifications
   */
  readonly licenseSpecifications?: Ec2LaunchTemplateLicenseConfigurationRequest[];

  /**
   * @schema Ec2RequestLaunchTemplateData#HibernationOptions
   */
  readonly hibernationOptions?: Ec2LaunchTemplateHibernationOptionsRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#MetadataOptions
   */
  readonly metadataOptions?: Ec2LaunchTemplateInstanceMetadataOptionsRequest;

  /**
   * @schema Ec2RequestLaunchTemplateData#EnclaveOptions
   */
  readonly enclaveOptions?: Ec2LaunchTemplateEnclaveOptionsRequest;

}

/**
 * Converts an object of type 'Ec2RequestLaunchTemplateData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RequestLaunchTemplateData(obj: Ec2RequestLaunchTemplateData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KernelId': obj.kernelId,
    'EbsOptimized': obj.ebsOptimized,
    'IamInstanceProfile': toJson_Ec2LaunchTemplateIamInstanceProfileSpecificationRequest(obj.iamInstanceProfile),
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2LaunchTemplateBlockDeviceMappingRequest(y)),
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(y)),
    'ImageId': obj.imageId,
    'InstanceType': obj.instanceType,
    'KeyName': obj.keyName,
    'Monitoring': toJson_Ec2LaunchTemplatesMonitoringRequest(obj.monitoring),
    'Placement': toJson_Ec2LaunchTemplatePlacementRequest(obj.placement),
    'RamDiskId': obj.ramDiskId,
    'DisableApiTermination': obj.disableApiTermination,
    'InstanceInitiatedShutdownBehavior': obj.instanceInitiatedShutdownBehavior,
    'UserData': obj.userData,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2LaunchTemplateTagSpecificationRequest(y)),
    'ElasticGpuSpecifications': obj.elasticGpuSpecifications?.map(y => toJson_Ec2ElasticGpuSpecification(y)),
    'ElasticInferenceAccelerators': obj.elasticInferenceAccelerators?.map(y => toJson_Ec2LaunchTemplateElasticInferenceAccelerator(y)),
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'SecurityGroups': obj.securityGroups?.map(y => y),
    'InstanceMarketOptions': toJson_Ec2LaunchTemplateInstanceMarketOptionsRequest(obj.instanceMarketOptions),
    'CreditSpecification': toJson_Ec2CreditSpecificationRequest(obj.creditSpecification),
    'CpuOptions': toJson_Ec2LaunchTemplateCpuOptionsRequest(obj.cpuOptions),
    'CapacityReservationSpecification': toJson_Ec2LaunchTemplateCapacityReservationSpecificationRequest(obj.capacityReservationSpecification),
    'LicenseSpecifications': obj.licenseSpecifications?.map(y => toJson_Ec2LaunchTemplateLicenseConfigurationRequest(y)),
    'HibernationOptions': toJson_Ec2LaunchTemplateHibernationOptionsRequest(obj.hibernationOptions),
    'MetadataOptions': toJson_Ec2LaunchTemplateInstanceMetadataOptionsRequest(obj.metadataOptions),
    'EnclaveOptions': toJson_Ec2LaunchTemplateEnclaveOptionsRequest(obj.enclaveOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplate
 */
export interface Ec2LaunchTemplate {
  /**
   * @schema Ec2LaunchTemplate#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2LaunchTemplate#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2LaunchTemplate#CreateTime
   */
  readonly createTime?: string;

  /**
   * @schema Ec2LaunchTemplate#CreatedBy
   */
  readonly createdBy?: string;

  /**
   * @schema Ec2LaunchTemplate#DefaultVersionNumber
   */
  readonly defaultVersionNumber?: number;

  /**
   * @schema Ec2LaunchTemplate#LatestVersionNumber
   */
  readonly latestVersionNumber?: number;

  /**
   * @schema Ec2LaunchTemplate#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LaunchTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplate(obj: Ec2LaunchTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'CreateTime': obj.createTime,
    'CreatedBy': obj.createdBy,
    'DefaultVersionNumber': obj.defaultVersionNumber,
    'LatestVersionNumber': obj.latestVersionNumber,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ValidationWarning
 */
export interface Ec2ValidationWarning {
  /**
   * @schema Ec2ValidationWarning#Errors
   */
  readonly errors?: Ec2ValidationError[];

}

/**
 * Converts an object of type 'Ec2ValidationWarning' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ValidationWarning(obj: Ec2ValidationWarning | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Errors': obj.errors?.map(y => toJson_Ec2ValidationError(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateVersion
 */
export interface Ec2LaunchTemplateVersion {
  /**
   * @schema Ec2LaunchTemplateVersion#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2LaunchTemplateVersion#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2LaunchTemplateVersion#VersionNumber
   */
  readonly versionNumber?: number;

  /**
   * @schema Ec2LaunchTemplateVersion#VersionDescription
   */
  readonly versionDescription?: string;

  /**
   * @schema Ec2LaunchTemplateVersion#CreateTime
   */
  readonly createTime?: string;

  /**
   * @schema Ec2LaunchTemplateVersion#CreatedBy
   */
  readonly createdBy?: string;

  /**
   * @schema Ec2LaunchTemplateVersion#DefaultVersion
   */
  readonly defaultVersion?: boolean;

  /**
   * @schema Ec2LaunchTemplateVersion#LaunchTemplateData
   */
  readonly launchTemplateData?: Ec2ResponseLaunchTemplateData;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateVersion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateVersion(obj: Ec2LaunchTemplateVersion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'VersionNumber': obj.versionNumber,
    'VersionDescription': obj.versionDescription,
    'CreateTime': obj.createTime,
    'CreatedBy': obj.createdBy,
    'DefaultVersion': obj.defaultVersion,
    'LaunchTemplateData': toJson_Ec2ResponseLaunchTemplateData(obj.launchTemplateData),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LocalGatewayRoute
 */
export interface Ec2LocalGatewayRoute {
  /**
   * @schema Ec2LocalGatewayRoute#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2LocalGatewayRoute#LocalGatewayVirtualInterfaceGroupId
   */
  readonly localGatewayVirtualInterfaceGroupId?: string;

  /**
   * @schema Ec2LocalGatewayRoute#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2LocalGatewayRoute#State
   */
  readonly state?: string;

  /**
   * @schema Ec2LocalGatewayRoute#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2LocalGatewayRoute#LocalGatewayRouteTableArn
   */
  readonly localGatewayRouteTableArn?: string;

  /**
   * @schema Ec2LocalGatewayRoute#OwnerId
   */
  readonly ownerId?: string;

}

/**
 * Converts an object of type 'Ec2LocalGatewayRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LocalGatewayRoute(obj: Ec2LocalGatewayRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'LocalGatewayVirtualInterfaceGroupId': obj.localGatewayVirtualInterfaceGroupId,
    'Type': obj.type,
    'State': obj.state,
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'LocalGatewayRouteTableArn': obj.localGatewayRouteTableArn,
    'OwnerId': obj.ownerId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LocalGatewayRouteTableVpcAssociation
 */
export interface Ec2LocalGatewayRouteTableVpcAssociation {
  /**
   * @schema Ec2LocalGatewayRouteTableVpcAssociation#LocalGatewayRouteTableVpcAssociationId
   */
  readonly localGatewayRouteTableVpcAssociationId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVpcAssociation#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVpcAssociation#LocalGatewayRouteTableArn
   */
  readonly localGatewayRouteTableArn?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVpcAssociation#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVpcAssociation#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVpcAssociation#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVpcAssociation#State
   */
  readonly state?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVpcAssociation#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LocalGatewayRouteTableVpcAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LocalGatewayRouteTableVpcAssociation(obj: Ec2LocalGatewayRouteTableVpcAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVpcAssociationId': obj.localGatewayRouteTableVpcAssociationId,
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'LocalGatewayRouteTableArn': obj.localGatewayRouteTableArn,
    'LocalGatewayId': obj.localGatewayId,
    'VpcId': obj.vpcId,
    'OwnerId': obj.ownerId,
    'State': obj.state,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AddPrefixListEntry
 */
export interface Ec2AddPrefixListEntry {
  /**
   * @schema Ec2AddPrefixListEntry#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2AddPrefixListEntry#Description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'Ec2AddPrefixListEntry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AddPrefixListEntry(obj: Ec2AddPrefixListEntry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ManagedPrefixList
 */
export interface Ec2ManagedPrefixList {
  /**
   * @schema Ec2ManagedPrefixList#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2ManagedPrefixList#AddressFamily
   */
  readonly addressFamily?: string;

  /**
   * @schema Ec2ManagedPrefixList#State
   */
  readonly state?: string;

  /**
   * @schema Ec2ManagedPrefixList#StateMessage
   */
  readonly stateMessage?: string;

  /**
   * @schema Ec2ManagedPrefixList#PrefixListArn
   */
  readonly prefixListArn?: string;

  /**
   * @schema Ec2ManagedPrefixList#PrefixListName
   */
  readonly prefixListName?: string;

  /**
   * @schema Ec2ManagedPrefixList#MaxEntries
   */
  readonly maxEntries?: number;

  /**
   * @schema Ec2ManagedPrefixList#Version
   */
  readonly version?: number;

  /**
   * @schema Ec2ManagedPrefixList#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2ManagedPrefixList#OwnerId
   */
  readonly ownerId?: string;

}

/**
 * Converts an object of type 'Ec2ManagedPrefixList' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ManagedPrefixList(obj: Ec2ManagedPrefixList | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrefixListId': obj.prefixListId,
    'AddressFamily': obj.addressFamily,
    'State': obj.state,
    'StateMessage': obj.stateMessage,
    'PrefixListArn': obj.prefixListArn,
    'PrefixListName': obj.prefixListName,
    'MaxEntries': obj.maxEntries,
    'Version': obj.version,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'OwnerId': obj.ownerId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NatGateway
 */
export interface Ec2NatGateway {
  /**
   * @schema Ec2NatGateway#CreateTime
   */
  readonly createTime?: string;

  /**
   * @schema Ec2NatGateway#DeleteTime
   */
  readonly deleteTime?: string;

  /**
   * @schema Ec2NatGateway#FailureCode
   */
  readonly failureCode?: string;

  /**
   * @schema Ec2NatGateway#FailureMessage
   */
  readonly failureMessage?: string;

  /**
   * @schema Ec2NatGateway#NatGatewayAddresses
   */
  readonly natGatewayAddresses?: Ec2NatGatewayAddress[];

  /**
   * @schema Ec2NatGateway#NatGatewayId
   */
  readonly natGatewayId?: string;

  /**
   * @schema Ec2NatGateway#ProvisionedBandwidth
   */
  readonly provisionedBandwidth?: Ec2ProvisionedBandwidth;

  /**
   * @schema Ec2NatGateway#State
   */
  readonly state?: string;

  /**
   * @schema Ec2NatGateway#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2NatGateway#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2NatGateway#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2NatGateway#ConnectivityType
   */
  readonly connectivityType?: string;

}

/**
 * Converts an object of type 'Ec2NatGateway' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NatGateway(obj: Ec2NatGateway | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CreateTime': obj.createTime,
    'DeleteTime': obj.deleteTime,
    'FailureCode': obj.failureCode,
    'FailureMessage': obj.failureMessage,
    'NatGatewayAddresses': obj.natGatewayAddresses?.map(y => toJson_Ec2NatGatewayAddress(y)),
    'NatGatewayId': obj.natGatewayId,
    'ProvisionedBandwidth': toJson_Ec2ProvisionedBandwidth(obj.provisionedBandwidth),
    'State': obj.state,
    'SubnetId': obj.subnetId,
    'VpcId': obj.vpcId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'ConnectivityType': obj.connectivityType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkAcl
 */
export interface Ec2NetworkAcl {
  /**
   * @schema Ec2NetworkAcl#Associations
   */
  readonly associations?: Ec2NetworkAclAssociation[];

  /**
   * @schema Ec2NetworkAcl#Entries
   */
  readonly entries?: Ec2NetworkAclEntry[];

  /**
   * @schema Ec2NetworkAcl#IsDefault
   */
  readonly isDefault?: boolean;

  /**
   * @schema Ec2NetworkAcl#NetworkAclId
   */
  readonly networkAclId?: string;

  /**
   * @schema Ec2NetworkAcl#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2NetworkAcl#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2NetworkAcl#OwnerId
   */
  readonly ownerId?: string;

}

/**
 * Converts an object of type 'Ec2NetworkAcl' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkAcl(obj: Ec2NetworkAcl | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Associations': obj.associations?.map(y => toJson_Ec2NetworkAclAssociation(y)),
    'Entries': obj.entries?.map(y => toJson_Ec2NetworkAclEntry(y)),
    'IsDefault': obj.isDefault,
    'NetworkAclId': obj.networkAclId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VpcId': obj.vpcId,
    'OwnerId': obj.ownerId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IcmpTypeCode
 */
export interface Ec2IcmpTypeCode {
  /**
   * @schema Ec2IcmpTypeCode#Code
   */
  readonly code?: number;

  /**
   * @schema Ec2IcmpTypeCode#Type
   */
  readonly type?: number;

}

/**
 * Converts an object of type 'Ec2IcmpTypeCode' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IcmpTypeCode(obj: Ec2IcmpTypeCode | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PortRange
 */
export interface Ec2PortRange {
  /**
   * @schema Ec2PortRange#From
   */
  readonly from?: number;

  /**
   * @schema Ec2PortRange#To
   */
  readonly to?: number;

}

/**
 * Converts an object of type 'Ec2PortRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PortRange(obj: Ec2PortRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'From': obj.from,
    'To': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInsightsPath
 */
export interface Ec2NetworkInsightsPath {
  /**
   * @schema Ec2NetworkInsightsPath#NetworkInsightsPathId
   */
  readonly networkInsightsPathId?: string;

  /**
   * @schema Ec2NetworkInsightsPath#NetworkInsightsPathArn
   */
  readonly networkInsightsPathArn?: string;

  /**
   * @schema Ec2NetworkInsightsPath#CreatedDate
   */
  readonly createdDate?: string;

  /**
   * @schema Ec2NetworkInsightsPath#Source
   */
  readonly source?: string;

  /**
   * @schema Ec2NetworkInsightsPath#Destination
   */
  readonly destination?: string;

  /**
   * @schema Ec2NetworkInsightsPath#SourceIp
   */
  readonly sourceIp?: string;

  /**
   * @schema Ec2NetworkInsightsPath#DestinationIp
   */
  readonly destinationIp?: string;

  /**
   * @schema Ec2NetworkInsightsPath#Protocol
   */
  readonly protocol?: string;

  /**
   * @schema Ec2NetworkInsightsPath#DestinationPort
   */
  readonly destinationPort?: number;

  /**
   * @schema Ec2NetworkInsightsPath#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2NetworkInsightsPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInsightsPath(obj: Ec2NetworkInsightsPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsPathId': obj.networkInsightsPathId,
    'NetworkInsightsPathArn': obj.networkInsightsPathArn,
    'CreatedDate': obj.createdDate,
    'Source': obj.source,
    'Destination': obj.destination,
    'SourceIp': obj.sourceIp,
    'DestinationIp': obj.destinationIp,
    'Protocol': obj.protocol,
    'DestinationPort': obj.destinationPort,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceIpv6Address
 */
export interface Ec2InstanceIpv6Address {
  /**
   * @schema Ec2InstanceIpv6Address#Ipv6Address
   */
  readonly ipv6Address?: string;

}

/**
 * Converts an object of type 'Ec2InstanceIpv6Address' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceIpv6Address(obj: Ec2InstanceIpv6Address | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Address': obj.ipv6Address,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PrivateIpAddressSpecification
 */
export interface Ec2PrivateIpAddressSpecification {
  /**
   * @schema Ec2PrivateIpAddressSpecification#Primary
   */
  readonly primary?: boolean;

  /**
   * @schema Ec2PrivateIpAddressSpecification#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2PrivateIpAddressSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PrivateIpAddressSpecification(obj: Ec2PrivateIpAddressSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Primary': obj.primary,
    'PrivateIpAddress': obj.privateIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv4PrefixSpecificationRequest
 */
export interface Ec2Ipv4PrefixSpecificationRequest {
  /**
   * @schema Ec2Ipv4PrefixSpecificationRequest#Ipv4Prefix
   */
  readonly ipv4Prefix?: string;

}

/**
 * Converts an object of type 'Ec2Ipv4PrefixSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv4PrefixSpecificationRequest(obj: Ec2Ipv4PrefixSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv4Prefix': obj.ipv4Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv6PrefixSpecificationRequest
 */
export interface Ec2Ipv6PrefixSpecificationRequest {
  /**
   * @schema Ec2Ipv6PrefixSpecificationRequest#Ipv6Prefix
   */
  readonly ipv6Prefix?: string;

}

/**
 * Converts an object of type 'Ec2Ipv6PrefixSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv6PrefixSpecificationRequest(obj: Ec2Ipv6PrefixSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Prefix': obj.ipv6Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInterface
 */
export interface Ec2NetworkInterface {
  /**
   * @schema Ec2NetworkInterface#Association
   */
  readonly association?: Ec2NetworkInterfaceAssociation;

  /**
   * @schema Ec2NetworkInterface#Attachment
   */
  readonly attachment?: Ec2NetworkInterfaceAttachment;

  /**
   * @schema Ec2NetworkInterface#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2NetworkInterface#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2NetworkInterface#Groups
   */
  readonly groups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2NetworkInterface#InterfaceType
   */
  readonly interfaceType?: string;

  /**
   * @schema Ec2NetworkInterface#Ipv6Addresses
   */
  readonly ipv6Addresses?: Ec2NetworkInterfaceIpv6Address[];

  /**
   * @schema Ec2NetworkInterface#MacAddress
   */
  readonly macAddress?: string;

  /**
   * @schema Ec2NetworkInterface#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2NetworkInterface#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2NetworkInterface#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2NetworkInterface#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2NetworkInterface#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2NetworkInterface#PrivateIpAddresses
   */
  readonly privateIpAddresses?: Ec2NetworkInterfacePrivateIpAddress[];

  /**
   * @schema Ec2NetworkInterface#Ipv4Prefixes
   */
  readonly ipv4Prefixes?: Ec2Ipv4PrefixSpecification[];

  /**
   * @schema Ec2NetworkInterface#Ipv6Prefixes
   */
  readonly ipv6Prefixes?: Ec2Ipv6PrefixSpecification[];

  /**
   * @schema Ec2NetworkInterface#RequesterId
   */
  readonly requesterId?: string;

  /**
   * @schema Ec2NetworkInterface#RequesterManaged
   */
  readonly requesterManaged?: boolean;

  /**
   * @schema Ec2NetworkInterface#SourceDestCheck
   */
  readonly sourceDestCheck?: boolean;

  /**
   * @schema Ec2NetworkInterface#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2NetworkInterface#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2NetworkInterface#TagSet
   */
  readonly tagSet?: Ec2Tag[];

  /**
   * @schema Ec2NetworkInterface#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2NetworkInterface' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInterface(obj: Ec2NetworkInterface | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Association': toJson_Ec2NetworkInterfaceAssociation(obj.association),
    'Attachment': toJson_Ec2NetworkInterfaceAttachment(obj.attachment),
    'AvailabilityZone': obj.availabilityZone,
    'Description': obj.description,
    'Groups': obj.groups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'InterfaceType': obj.interfaceType,
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => toJson_Ec2NetworkInterfaceIpv6Address(y)),
    'MacAddress': obj.macAddress,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'OutpostArn': obj.outpostArn,
    'OwnerId': obj.ownerId,
    'PrivateDnsName': obj.privateDnsName,
    'PrivateIpAddress': obj.privateIpAddress,
    'PrivateIpAddresses': obj.privateIpAddresses?.map(y => toJson_Ec2NetworkInterfacePrivateIpAddress(y)),
    'Ipv4Prefixes': obj.ipv4Prefixes?.map(y => toJson_Ec2Ipv4PrefixSpecification(y)),
    'Ipv6Prefixes': obj.ipv6Prefixes?.map(y => toJson_Ec2Ipv6PrefixSpecification(y)),
    'RequesterId': obj.requesterId,
    'RequesterManaged': obj.requesterManaged,
    'SourceDestCheck': obj.sourceDestCheck,
    'Status': obj.status,
    'SubnetId': obj.subnetId,
    'TagSet': obj.tagSet?.map(y => toJson_Ec2Tag(y)),
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInterfacePermission
 */
export interface Ec2NetworkInterfacePermission {
  /**
   * @schema Ec2NetworkInterfacePermission#NetworkInterfacePermissionId
   */
  readonly networkInterfacePermissionId?: string;

  /**
   * @schema Ec2NetworkInterfacePermission#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2NetworkInterfacePermission#AwsAccountId
   */
  readonly awsAccountId?: string;

  /**
   * @schema Ec2NetworkInterfacePermission#AwsService
   */
  readonly awsService?: string;

  /**
   * @schema Ec2NetworkInterfacePermission#Permission
   */
  readonly permission?: string;

  /**
   * @schema Ec2NetworkInterfacePermission#PermissionState
   */
  readonly permissionState?: Ec2NetworkInterfacePermissionState;

}

/**
 * Converts an object of type 'Ec2NetworkInterfacePermission' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInterfacePermission(obj: Ec2NetworkInterfacePermission | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInterfacePermissionId': obj.networkInterfacePermissionId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'AwsAccountId': obj.awsAccountId,
    'AwsService': obj.awsService,
    'Permission': obj.permission,
    'PermissionState': toJson_Ec2NetworkInterfacePermissionState(obj.permissionState),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PlacementGroup
 */
export interface Ec2PlacementGroup {
  /**
   * @schema Ec2PlacementGroup#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2PlacementGroup#State
   */
  readonly state?: string;

  /**
   * @schema Ec2PlacementGroup#Strategy
   */
  readonly strategy?: string;

  /**
   * @schema Ec2PlacementGroup#PartitionCount
   */
  readonly partitionCount?: number;

  /**
   * @schema Ec2PlacementGroup#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2PlacementGroup#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2PlacementGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PlacementGroup(obj: Ec2PlacementGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupName': obj.groupName,
    'State': obj.state,
    'Strategy': obj.strategy,
    'PartitionCount': obj.partitionCount,
    'GroupId': obj.groupId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReplaceRootVolumeTask
 */
export interface Ec2ReplaceRootVolumeTask {
  /**
   * @schema Ec2ReplaceRootVolumeTask#ReplaceRootVolumeTaskId
   */
  readonly replaceRootVolumeTaskId?: string;

  /**
   * @schema Ec2ReplaceRootVolumeTask#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ReplaceRootVolumeTask#TaskState
   */
  readonly taskState?: string;

  /**
   * @schema Ec2ReplaceRootVolumeTask#StartTime
   */
  readonly startTime?: string;

  /**
   * @schema Ec2ReplaceRootVolumeTask#CompleteTime
   */
  readonly completeTime?: string;

  /**
   * @schema Ec2ReplaceRootVolumeTask#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ReplaceRootVolumeTask' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReplaceRootVolumeTask(obj: Ec2ReplaceRootVolumeTask | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReplaceRootVolumeTaskId': obj.replaceRootVolumeTaskId,
    'InstanceId': obj.instanceId,
    'TaskState': obj.taskState,
    'StartTime': obj.startTime,
    'CompleteTime': obj.completeTime,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PriceScheduleSpecification
 */
export interface Ec2PriceScheduleSpecification {
  /**
   * @schema Ec2PriceScheduleSpecification#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2PriceScheduleSpecification#Price
   */
  readonly price?: number;

  /**
   * @schema Ec2PriceScheduleSpecification#Term
   */
  readonly term?: number;

}

/**
 * Converts an object of type 'Ec2PriceScheduleSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PriceScheduleSpecification(obj: Ec2PriceScheduleSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CurrencyCode': obj.currencyCode,
    'Price': obj.price,
    'Term': obj.term,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RouteTable
 */
export interface Ec2RouteTable {
  /**
   * @schema Ec2RouteTable#Associations
   */
  readonly associations?: Ec2RouteTableAssociation[];

  /**
   * @schema Ec2RouteTable#PropagatingVgws
   */
  readonly propagatingVgws?: Ec2PropagatingVgw[];

  /**
   * @schema Ec2RouteTable#RouteTableId
   */
  readonly routeTableId?: string;

  /**
   * @schema Ec2RouteTable#Routes
   */
  readonly routes?: Ec2Route[];

  /**
   * @schema Ec2RouteTable#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2RouteTable#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2RouteTable#OwnerId
   */
  readonly ownerId?: string;

}

/**
 * Converts an object of type 'Ec2RouteTable' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RouteTable(obj: Ec2RouteTable | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Associations': obj.associations?.map(y => toJson_Ec2RouteTableAssociation(y)),
    'PropagatingVgws': obj.propagatingVgws?.map(y => toJson_Ec2PropagatingVgw(y)),
    'RouteTableId': obj.routeTableId,
    'Routes': obj.routes?.map(y => toJson_Ec2Route(y)),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VpcId': obj.vpcId,
    'OwnerId': obj.ownerId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceSpecification
 */
export interface Ec2InstanceSpecification {
  /**
   * @schema Ec2InstanceSpecification#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2InstanceSpecification#ExcludeBootVolume
   */
  readonly excludeBootVolume?: boolean;

}

/**
 * Converts an object of type 'Ec2InstanceSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceSpecification(obj: Ec2InstanceSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'ExcludeBootVolume': obj.excludeBootVolume,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SnapshotInfo
 */
export interface Ec2SnapshotInfo {
  /**
   * @schema Ec2SnapshotInfo#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2SnapshotInfo#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2SnapshotInfo#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2SnapshotInfo#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2SnapshotInfo#State
   */
  readonly state?: string;

  /**
   * @schema Ec2SnapshotInfo#VolumeSize
   */
  readonly volumeSize?: number;

  /**
   * @schema Ec2SnapshotInfo#StartTime
   */
  readonly startTime?: string;

  /**
   * @schema Ec2SnapshotInfo#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2SnapshotInfo#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2SnapshotInfo#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2SnapshotInfo#OutpostArn
   */
  readonly outpostArn?: string;

}

/**
 * Converts an object of type 'Ec2SnapshotInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SnapshotInfo(obj: Ec2SnapshotInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'Encrypted': obj.encrypted,
    'VolumeId': obj.volumeId,
    'State': obj.state,
    'VolumeSize': obj.volumeSize,
    'StartTime': obj.startTime,
    'Progress': obj.progress,
    'OwnerId': obj.ownerId,
    'SnapshotId': obj.snapshotId,
    'OutpostArn': obj.outpostArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotDatafeedSubscription
 */
export interface Ec2SpotDatafeedSubscription {
  /**
   * @schema Ec2SpotDatafeedSubscription#Bucket
   */
  readonly bucket?: string;

  /**
   * @schema Ec2SpotDatafeedSubscription#Fault
   */
  readonly fault?: Ec2SpotInstanceStateFault;

  /**
   * @schema Ec2SpotDatafeedSubscription#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2SpotDatafeedSubscription#Prefix
   */
  readonly prefix?: string;

  /**
   * @schema Ec2SpotDatafeedSubscription#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2SpotDatafeedSubscription' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotDatafeedSubscription(obj: Ec2SpotDatafeedSubscription | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Bucket': obj.bucket,
    'Fault': toJson_Ec2SpotInstanceStateFault(obj.fault),
    'OwnerId': obj.ownerId,
    'Prefix': obj.prefix,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2S3ObjectTag
 */
export interface Ec2S3ObjectTag {
  /**
   * @schema Ec2S3ObjectTag#Key
   */
  readonly key?: string;

  /**
   * @schema Ec2S3ObjectTag#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2S3ObjectTag' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2S3ObjectTag(obj: Ec2S3ObjectTag | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SubnetCidrReservation
 */
export interface Ec2SubnetCidrReservation {
  /**
   * @schema Ec2SubnetCidrReservation#SubnetCidrReservationId
   */
  readonly subnetCidrReservationId?: string;

  /**
   * @schema Ec2SubnetCidrReservation#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2SubnetCidrReservation#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2SubnetCidrReservation#ReservationType
   */
  readonly reservationType?: string;

  /**
   * @schema Ec2SubnetCidrReservation#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2SubnetCidrReservation#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2SubnetCidrReservation#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2SubnetCidrReservation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SubnetCidrReservation(obj: Ec2SubnetCidrReservation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SubnetCidrReservationId': obj.subnetCidrReservationId,
    'SubnetId': obj.subnetId,
    'Cidr': obj.cidr,
    'ReservationType': obj.reservationType,
    'OwnerId': obj.ownerId,
    'Description': obj.description,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TrafficMirrorFilter
 */
export interface Ec2TrafficMirrorFilter {
  /**
   * @schema Ec2TrafficMirrorFilter#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

  /**
   * @schema Ec2TrafficMirrorFilter#IngressFilterRules
   */
  readonly ingressFilterRules?: Ec2TrafficMirrorFilterRule[];

  /**
   * @schema Ec2TrafficMirrorFilter#EgressFilterRules
   */
  readonly egressFilterRules?: Ec2TrafficMirrorFilterRule[];

  /**
   * @schema Ec2TrafficMirrorFilter#NetworkServices
   */
  readonly networkServices?: string[];

  /**
   * @schema Ec2TrafficMirrorFilter#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2TrafficMirrorFilter#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TrafficMirrorFilter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TrafficMirrorFilter(obj: Ec2TrafficMirrorFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
    'IngressFilterRules': obj.ingressFilterRules?.map(y => toJson_Ec2TrafficMirrorFilterRule(y)),
    'EgressFilterRules': obj.egressFilterRules?.map(y => toJson_Ec2TrafficMirrorFilterRule(y)),
    'NetworkServices': obj.networkServices?.map(y => y),
    'Description': obj.description,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TrafficMirrorPortRangeRequest
 */
export interface Ec2TrafficMirrorPortRangeRequest {
  /**
   * @schema Ec2TrafficMirrorPortRangeRequest#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2TrafficMirrorPortRangeRequest#ToPort
   */
  readonly toPort?: number;

}

/**
 * Converts an object of type 'Ec2TrafficMirrorPortRangeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TrafficMirrorPortRangeRequest(obj: Ec2TrafficMirrorPortRangeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FromPort': obj.fromPort,
    'ToPort': obj.toPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TrafficMirrorFilterRule
 */
export interface Ec2TrafficMirrorFilterRule {
  /**
   * @schema Ec2TrafficMirrorFilterRule#TrafficMirrorFilterRuleId
   */
  readonly trafficMirrorFilterRuleId?: string;

  /**
   * @schema Ec2TrafficMirrorFilterRule#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

  /**
   * @schema Ec2TrafficMirrorFilterRule#TrafficDirection
   */
  readonly trafficDirection?: string;

  /**
   * @schema Ec2TrafficMirrorFilterRule#RuleNumber
   */
  readonly ruleNumber?: number;

  /**
   * @schema Ec2TrafficMirrorFilterRule#RuleAction
   */
  readonly ruleAction?: string;

  /**
   * @schema Ec2TrafficMirrorFilterRule#Protocol
   */
  readonly protocol?: number;

  /**
   * @schema Ec2TrafficMirrorFilterRule#DestinationPortRange
   */
  readonly destinationPortRange?: Ec2TrafficMirrorPortRange;

  /**
   * @schema Ec2TrafficMirrorFilterRule#SourcePortRange
   */
  readonly sourcePortRange?: Ec2TrafficMirrorPortRange;

  /**
   * @schema Ec2TrafficMirrorFilterRule#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2TrafficMirrorFilterRule#SourceCidrBlock
   */
  readonly sourceCidrBlock?: string;

  /**
   * @schema Ec2TrafficMirrorFilterRule#Description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'Ec2TrafficMirrorFilterRule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TrafficMirrorFilterRule(obj: Ec2TrafficMirrorFilterRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorFilterRuleId': obj.trafficMirrorFilterRuleId,
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
    'TrafficDirection': obj.trafficDirection,
    'RuleNumber': obj.ruleNumber,
    'RuleAction': obj.ruleAction,
    'Protocol': obj.protocol,
    'DestinationPortRange': toJson_Ec2TrafficMirrorPortRange(obj.destinationPortRange),
    'SourcePortRange': toJson_Ec2TrafficMirrorPortRange(obj.sourcePortRange),
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'SourceCidrBlock': obj.sourceCidrBlock,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TrafficMirrorSession
 */
export interface Ec2TrafficMirrorSession {
  /**
   * @schema Ec2TrafficMirrorSession#TrafficMirrorSessionId
   */
  readonly trafficMirrorSessionId?: string;

  /**
   * @schema Ec2TrafficMirrorSession#TrafficMirrorTargetId
   */
  readonly trafficMirrorTargetId?: string;

  /**
   * @schema Ec2TrafficMirrorSession#TrafficMirrorFilterId
   */
  readonly trafficMirrorFilterId?: string;

  /**
   * @schema Ec2TrafficMirrorSession#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2TrafficMirrorSession#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2TrafficMirrorSession#PacketLength
   */
  readonly packetLength?: number;

  /**
   * @schema Ec2TrafficMirrorSession#SessionNumber
   */
  readonly sessionNumber?: number;

  /**
   * @schema Ec2TrafficMirrorSession#VirtualNetworkId
   */
  readonly virtualNetworkId?: number;

  /**
   * @schema Ec2TrafficMirrorSession#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2TrafficMirrorSession#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TrafficMirrorSession' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TrafficMirrorSession(obj: Ec2TrafficMirrorSession | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorSessionId': obj.trafficMirrorSessionId,
    'TrafficMirrorTargetId': obj.trafficMirrorTargetId,
    'TrafficMirrorFilterId': obj.trafficMirrorFilterId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'OwnerId': obj.ownerId,
    'PacketLength': obj.packetLength,
    'SessionNumber': obj.sessionNumber,
    'VirtualNetworkId': obj.virtualNetworkId,
    'Description': obj.description,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TrafficMirrorTarget
 */
export interface Ec2TrafficMirrorTarget {
  /**
   * @schema Ec2TrafficMirrorTarget#TrafficMirrorTargetId
   */
  readonly trafficMirrorTargetId?: string;

  /**
   * @schema Ec2TrafficMirrorTarget#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2TrafficMirrorTarget#NetworkLoadBalancerArn
   */
  readonly networkLoadBalancerArn?: string;

  /**
   * @schema Ec2TrafficMirrorTarget#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2TrafficMirrorTarget#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2TrafficMirrorTarget#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2TrafficMirrorTarget#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TrafficMirrorTarget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TrafficMirrorTarget(obj: Ec2TrafficMirrorTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TrafficMirrorTargetId': obj.trafficMirrorTargetId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'NetworkLoadBalancerArn': obj.networkLoadBalancerArn,
    'Type': obj.type,
    'Description': obj.description,
    'OwnerId': obj.ownerId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayRequestOptions
 */
export interface Ec2TransitGatewayRequestOptions {
  /**
   * @schema Ec2TransitGatewayRequestOptions#AmazonSideAsn
   */
  readonly amazonSideAsn?: number;

  /**
   * @schema Ec2TransitGatewayRequestOptions#AutoAcceptSharedAttachments
   */
  readonly autoAcceptSharedAttachments?: string;

  /**
   * @schema Ec2TransitGatewayRequestOptions#DefaultRouteTableAssociation
   */
  readonly defaultRouteTableAssociation?: string;

  /**
   * @schema Ec2TransitGatewayRequestOptions#DefaultRouteTablePropagation
   */
  readonly defaultRouteTablePropagation?: string;

  /**
   * @schema Ec2TransitGatewayRequestOptions#VpnEcmpSupport
   */
  readonly vpnEcmpSupport?: string;

  /**
   * @schema Ec2TransitGatewayRequestOptions#DnsSupport
   */
  readonly dnsSupport?: string;

  /**
   * @schema Ec2TransitGatewayRequestOptions#MulticastSupport
   */
  readonly multicastSupport?: string;

  /**
   * @schema Ec2TransitGatewayRequestOptions#TransitGatewayCidrBlocks
   */
  readonly transitGatewayCidrBlocks?: string[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayRequestOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayRequestOptions(obj: Ec2TransitGatewayRequestOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AmazonSideAsn': obj.amazonSideAsn,
    'AutoAcceptSharedAttachments': obj.autoAcceptSharedAttachments,
    'DefaultRouteTableAssociation': obj.defaultRouteTableAssociation,
    'DefaultRouteTablePropagation': obj.defaultRouteTablePropagation,
    'VpnEcmpSupport': obj.vpnEcmpSupport,
    'DnsSupport': obj.dnsSupport,
    'MulticastSupport': obj.multicastSupport,
    'TransitGatewayCidrBlocks': obj.transitGatewayCidrBlocks?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGateway
 */
export interface Ec2TransitGateway {
  /**
   * @schema Ec2TransitGateway#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2TransitGateway#TransitGatewayArn
   */
  readonly transitGatewayArn?: string;

  /**
   * @schema Ec2TransitGateway#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGateway#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2TransitGateway#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2TransitGateway#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2TransitGateway#Options
   */
  readonly options?: Ec2TransitGatewayOptions;

  /**
   * @schema Ec2TransitGateway#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TransitGateway' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGateway(obj: Ec2TransitGateway | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayId': obj.transitGatewayId,
    'TransitGatewayArn': obj.transitGatewayArn,
    'State': obj.state,
    'OwnerId': obj.ownerId,
    'Description': obj.description,
    'CreationTime': obj.creationTime,
    'Options': toJson_Ec2TransitGatewayOptions(obj.options),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayConnectRequestOptions
 */
export interface Ec2CreateTransitGatewayConnectRequestOptions {
  /**
   * @schema Ec2CreateTransitGatewayConnectRequestOptions#Protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayConnectRequestOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayConnectRequestOptions(obj: Ec2CreateTransitGatewayConnectRequestOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayConnect
 */
export interface Ec2TransitGatewayConnect {
  /**
   * @schema Ec2TransitGatewayConnect#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayConnect#TransportTransitGatewayAttachmentId
   */
  readonly transportTransitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayConnect#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2TransitGatewayConnect#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGatewayConnect#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2TransitGatewayConnect#Options
   */
  readonly options?: Ec2TransitGatewayConnectOptions;

  /**
   * @schema Ec2TransitGatewayConnect#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayConnect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayConnect(obj: Ec2TransitGatewayConnect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'TransportTransitGatewayAttachmentId': obj.transportTransitGatewayAttachmentId,
    'TransitGatewayId': obj.transitGatewayId,
    'State': obj.state,
    'CreationTime': obj.creationTime,
    'Options': toJson_Ec2TransitGatewayConnectOptions(obj.options),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayConnectRequestBgpOptions
 */
export interface Ec2TransitGatewayConnectRequestBgpOptions {
  /**
   * @schema Ec2TransitGatewayConnectRequestBgpOptions#PeerAsn
   */
  readonly peerAsn?: number;

}

/**
 * Converts an object of type 'Ec2TransitGatewayConnectRequestBgpOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayConnectRequestBgpOptions(obj: Ec2TransitGatewayConnectRequestBgpOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PeerAsn': obj.peerAsn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayConnectPeer
 */
export interface Ec2TransitGatewayConnectPeer {
  /**
   * @schema Ec2TransitGatewayConnectPeer#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayConnectPeer#TransitGatewayConnectPeerId
   */
  readonly transitGatewayConnectPeerId?: string;

  /**
   * @schema Ec2TransitGatewayConnectPeer#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGatewayConnectPeer#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2TransitGatewayConnectPeer#ConnectPeerConfiguration
   */
  readonly connectPeerConfiguration?: Ec2TransitGatewayConnectPeerConfiguration;

  /**
   * @schema Ec2TransitGatewayConnectPeer#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayConnectPeer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayConnectPeer(obj: Ec2TransitGatewayConnectPeer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'TransitGatewayConnectPeerId': obj.transitGatewayConnectPeerId,
    'State': obj.state,
    'CreationTime': obj.creationTime,
    'ConnectPeerConfiguration': toJson_Ec2TransitGatewayConnectPeerConfiguration(obj.connectPeerConfiguration),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayMulticastDomainRequestOptions
 */
export interface Ec2CreateTransitGatewayMulticastDomainRequestOptions {
  /**
   * @schema Ec2CreateTransitGatewayMulticastDomainRequestOptions#Igmpv2Support
   */
  readonly igmpv2Support?: string;

  /**
   * @schema Ec2CreateTransitGatewayMulticastDomainRequestOptions#StaticSourcesSupport
   */
  readonly staticSourcesSupport?: string;

  /**
   * @schema Ec2CreateTransitGatewayMulticastDomainRequestOptions#AutoAcceptSharedAssociations
   */
  readonly autoAcceptSharedAssociations?: string;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayMulticastDomainRequestOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayMulticastDomainRequestOptions(obj: Ec2CreateTransitGatewayMulticastDomainRequestOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Igmpv2Support': obj.igmpv2Support,
    'StaticSourcesSupport': obj.staticSourcesSupport,
    'AutoAcceptSharedAssociations': obj.autoAcceptSharedAssociations,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastDomain
 */
export interface Ec2TransitGatewayMulticastDomain {
  /**
   * @schema Ec2TransitGatewayMulticastDomain#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomain#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomain#TransitGatewayMulticastDomainArn
   */
  readonly transitGatewayMulticastDomainArn?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomain#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomain#Options
   */
  readonly options?: Ec2TransitGatewayMulticastDomainOptions;

  /**
   * @schema Ec2TransitGatewayMulticastDomain#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomain#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomain#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastDomain' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastDomain(obj: Ec2TransitGatewayMulticastDomain | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'TransitGatewayId': obj.transitGatewayId,
    'TransitGatewayMulticastDomainArn': obj.transitGatewayMulticastDomainArn,
    'OwnerId': obj.ownerId,
    'Options': toJson_Ec2TransitGatewayMulticastDomainOptions(obj.options),
    'State': obj.state,
    'CreationTime': obj.creationTime,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayPrefixListReference
 */
export interface Ec2TransitGatewayPrefixListReference {
  /**
   * @schema Ec2TransitGatewayPrefixListReference#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2TransitGatewayPrefixListReference#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2TransitGatewayPrefixListReference#PrefixListOwnerId
   */
  readonly prefixListOwnerId?: string;

  /**
   * @schema Ec2TransitGatewayPrefixListReference#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGatewayPrefixListReference#Blackhole
   */
  readonly blackhole?: boolean;

  /**
   * @schema Ec2TransitGatewayPrefixListReference#TransitGatewayAttachment
   */
  readonly transitGatewayAttachment?: Ec2TransitGatewayPrefixListAttachment;

}

/**
 * Converts an object of type 'Ec2TransitGatewayPrefixListReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayPrefixListReference(obj: Ec2TransitGatewayPrefixListReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'PrefixListId': obj.prefixListId,
    'PrefixListOwnerId': obj.prefixListOwnerId,
    'State': obj.state,
    'Blackhole': obj.blackhole,
    'TransitGatewayAttachment': toJson_Ec2TransitGatewayPrefixListAttachment(obj.transitGatewayAttachment),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayRoute
 */
export interface Ec2TransitGatewayRoute {
  /**
   * @schema Ec2TransitGatewayRoute#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2TransitGatewayRoute#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2TransitGatewayRoute#TransitGatewayAttachments
   */
  readonly transitGatewayAttachments?: Ec2TransitGatewayRouteAttachment[];

  /**
   * @schema Ec2TransitGatewayRoute#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2TransitGatewayRoute#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayRoute(obj: Ec2TransitGatewayRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'PrefixListId': obj.prefixListId,
    'TransitGatewayAttachments': obj.transitGatewayAttachments?.map(y => toJson_Ec2TransitGatewayRouteAttachment(y)),
    'Type': obj.type,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayRouteTable
 */
export interface Ec2TransitGatewayRouteTable {
  /**
   * @schema Ec2TransitGatewayRouteTable#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2TransitGatewayRouteTable#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2TransitGatewayRouteTable#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGatewayRouteTable#DefaultAssociationRouteTable
   */
  readonly defaultAssociationRouteTable?: boolean;

  /**
   * @schema Ec2TransitGatewayRouteTable#DefaultPropagationRouteTable
   */
  readonly defaultPropagationRouteTable?: boolean;

  /**
   * @schema Ec2TransitGatewayRouteTable#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2TransitGatewayRouteTable#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayRouteTable' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayRouteTable(obj: Ec2TransitGatewayRouteTable | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'TransitGatewayId': obj.transitGatewayId,
    'State': obj.state,
    'DefaultAssociationRouteTable': obj.defaultAssociationRouteTable,
    'DefaultPropagationRouteTable': obj.defaultPropagationRouteTable,
    'CreationTime': obj.creationTime,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateTransitGatewayVpcAttachmentRequestOptions
 */
export interface Ec2CreateTransitGatewayVpcAttachmentRequestOptions {
  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequestOptions#DnsSupport
   */
  readonly dnsSupport?: string;

  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequestOptions#Ipv6Support
   */
  readonly ipv6Support?: string;

  /**
   * @schema Ec2CreateTransitGatewayVpcAttachmentRequestOptions#ApplianceModeSupport
   */
  readonly applianceModeSupport?: string;

}

/**
 * Converts an object of type 'Ec2CreateTransitGatewayVpcAttachmentRequestOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateTransitGatewayVpcAttachmentRequestOptions(obj: Ec2CreateTransitGatewayVpcAttachmentRequestOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DnsSupport': obj.dnsSupport,
    'Ipv6Support': obj.ipv6Support,
    'ApplianceModeSupport': obj.applianceModeSupport,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcEndpoint
 */
export interface Ec2VpcEndpoint {
  /**
   * @schema Ec2VpcEndpoint#VpcEndpointId
   */
  readonly vpcEndpointId?: string;

  /**
   * @schema Ec2VpcEndpoint#VpcEndpointType
   */
  readonly vpcEndpointType?: string;

  /**
   * @schema Ec2VpcEndpoint#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2VpcEndpoint#ServiceName
   */
  readonly serviceName?: string;

  /**
   * @schema Ec2VpcEndpoint#State
   */
  readonly state?: string;

  /**
   * @schema Ec2VpcEndpoint#PolicyDocument
   */
  readonly policyDocument?: string;

  /**
   * @schema Ec2VpcEndpoint#RouteTableIds
   */
  readonly routeTableIds?: string[];

  /**
   * @schema Ec2VpcEndpoint#SubnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema Ec2VpcEndpoint#Groups
   */
  readonly groups?: Ec2SecurityGroupIdentifier[];

  /**
   * @schema Ec2VpcEndpoint#PrivateDnsEnabled
   */
  readonly privateDnsEnabled?: boolean;

  /**
   * @schema Ec2VpcEndpoint#RequesterManaged
   */
  readonly requesterManaged?: boolean;

  /**
   * @schema Ec2VpcEndpoint#NetworkInterfaceIds
   */
  readonly networkInterfaceIds?: string[];

  /**
   * @schema Ec2VpcEndpoint#DnsEntries
   */
  readonly dnsEntries?: Ec2DnsEntry[];

  /**
   * @schema Ec2VpcEndpoint#CreationTimestamp
   */
  readonly creationTimestamp?: string;

  /**
   * @schema Ec2VpcEndpoint#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2VpcEndpoint#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2VpcEndpoint#LastError
   */
  readonly lastError?: Ec2LastError;

}

/**
 * Converts an object of type 'Ec2VpcEndpoint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcEndpoint(obj: Ec2VpcEndpoint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VpcEndpointId': obj.vpcEndpointId,
    'VpcEndpointType': obj.vpcEndpointType,
    'VpcId': obj.vpcId,
    'ServiceName': obj.serviceName,
    'State': obj.state,
    'PolicyDocument': obj.policyDocument,
    'RouteTableIds': obj.routeTableIds?.map(y => y),
    'SubnetIds': obj.subnetIds?.map(y => y),
    'Groups': obj.groups?.map(y => toJson_Ec2SecurityGroupIdentifier(y)),
    'PrivateDnsEnabled': obj.privateDnsEnabled,
    'RequesterManaged': obj.requesterManaged,
    'NetworkInterfaceIds': obj.networkInterfaceIds?.map(y => y),
    'DnsEntries': obj.dnsEntries?.map(y => toJson_Ec2DnsEntry(y)),
    'CreationTimestamp': obj.creationTimestamp,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'OwnerId': obj.ownerId,
    'LastError': toJson_Ec2LastError(obj.lastError),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ConnectionNotification
 */
export interface Ec2ConnectionNotification {
  /**
   * @schema Ec2ConnectionNotification#ConnectionNotificationId
   */
  readonly connectionNotificationId?: string;

  /**
   * @schema Ec2ConnectionNotification#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2ConnectionNotification#VpcEndpointId
   */
  readonly vpcEndpointId?: string;

  /**
   * @schema Ec2ConnectionNotification#ConnectionNotificationType
   */
  readonly connectionNotificationType?: string;

  /**
   * @schema Ec2ConnectionNotification#ConnectionNotificationArn
   */
  readonly connectionNotificationArn?: string;

  /**
   * @schema Ec2ConnectionNotification#ConnectionEvents
   */
  readonly connectionEvents?: string[];

  /**
   * @schema Ec2ConnectionNotification#ConnectionNotificationState
   */
  readonly connectionNotificationState?: string;

}

/**
 * Converts an object of type 'Ec2ConnectionNotification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ConnectionNotification(obj: Ec2ConnectionNotification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConnectionNotificationId': obj.connectionNotificationId,
    'ServiceId': obj.serviceId,
    'VpcEndpointId': obj.vpcEndpointId,
    'ConnectionNotificationType': obj.connectionNotificationType,
    'ConnectionNotificationArn': obj.connectionNotificationArn,
    'ConnectionEvents': obj.connectionEvents?.map(y => y),
    'ConnectionNotificationState': obj.connectionNotificationState,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ServiceConfiguration
 */
export interface Ec2ServiceConfiguration {
  /**
   * @schema Ec2ServiceConfiguration#ServiceType
   */
  readonly serviceType?: Ec2ServiceTypeDetail[];

  /**
   * @schema Ec2ServiceConfiguration#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2ServiceConfiguration#ServiceName
   */
  readonly serviceName?: string;

  /**
   * @schema Ec2ServiceConfiguration#ServiceState
   */
  readonly serviceState?: string;

  /**
   * @schema Ec2ServiceConfiguration#AvailabilityZones
   */
  readonly availabilityZones?: string[];

  /**
   * @schema Ec2ServiceConfiguration#AcceptanceRequired
   */
  readonly acceptanceRequired?: boolean;

  /**
   * @schema Ec2ServiceConfiguration#ManagesVpcEndpoints
   */
  readonly managesVpcEndpoints?: boolean;

  /**
   * @schema Ec2ServiceConfiguration#NetworkLoadBalancerArns
   */
  readonly networkLoadBalancerArns?: string[];

  /**
   * @schema Ec2ServiceConfiguration#GatewayLoadBalancerArns
   */
  readonly gatewayLoadBalancerArns?: string[];

  /**
   * @schema Ec2ServiceConfiguration#BaseEndpointDnsNames
   */
  readonly baseEndpointDnsNames?: string[];

  /**
   * @schema Ec2ServiceConfiguration#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2ServiceConfiguration#PrivateDnsNameConfiguration
   */
  readonly privateDnsNameConfiguration?: Ec2PrivateDnsNameConfiguration;

  /**
   * @schema Ec2ServiceConfiguration#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ServiceConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ServiceConfiguration(obj: Ec2ServiceConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ServiceType': obj.serviceType?.map(y => toJson_Ec2ServiceTypeDetail(y)),
    'ServiceId': obj.serviceId,
    'ServiceName': obj.serviceName,
    'ServiceState': obj.serviceState,
    'AvailabilityZones': obj.availabilityZones?.map(y => y),
    'AcceptanceRequired': obj.acceptanceRequired,
    'ManagesVpcEndpoints': obj.managesVpcEndpoints,
    'NetworkLoadBalancerArns': obj.networkLoadBalancerArns?.map(y => y),
    'GatewayLoadBalancerArns': obj.gatewayLoadBalancerArns?.map(y => y),
    'BaseEndpointDnsNames': obj.baseEndpointDnsNames?.map(y => y),
    'PrivateDnsName': obj.privateDnsName,
    'PrivateDnsNameConfiguration': toJson_Ec2PrivateDnsNameConfiguration(obj.privateDnsNameConfiguration),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpnConnectionOptionsSpecification
 */
export interface Ec2VpnConnectionOptionsSpecification {
  /**
   * @schema Ec2VpnConnectionOptionsSpecification#EnableAcceleration
   */
  readonly enableAcceleration?: boolean;

  /**
   * @schema Ec2VpnConnectionOptionsSpecification#StaticRoutesOnly
   */
  readonly staticRoutesOnly?: boolean;

  /**
   * @schema Ec2VpnConnectionOptionsSpecification#TunnelInsideIpVersion
   */
  readonly tunnelInsideIpVersion?: string;

  /**
   * @schema Ec2VpnConnectionOptionsSpecification#TunnelOptions
   */
  readonly tunnelOptions?: Ec2VpnTunnelOptionsSpecification[];

  /**
   * @schema Ec2VpnConnectionOptionsSpecification#LocalIpv4NetworkCidr
   */
  readonly localIpv4NetworkCidr?: string;

  /**
   * @schema Ec2VpnConnectionOptionsSpecification#RemoteIpv4NetworkCidr
   */
  readonly remoteIpv4NetworkCidr?: string;

  /**
   * @schema Ec2VpnConnectionOptionsSpecification#LocalIpv6NetworkCidr
   */
  readonly localIpv6NetworkCidr?: string;

  /**
   * @schema Ec2VpnConnectionOptionsSpecification#RemoteIpv6NetworkCidr
   */
  readonly remoteIpv6NetworkCidr?: string;

}

/**
 * Converts an object of type 'Ec2VpnConnectionOptionsSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpnConnectionOptionsSpecification(obj: Ec2VpnConnectionOptionsSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EnableAcceleration': obj.enableAcceleration,
    'StaticRoutesOnly': obj.staticRoutesOnly,
    'TunnelInsideIpVersion': obj.tunnelInsideIpVersion,
    'TunnelOptions': obj.tunnelOptions?.map(y => toJson_Ec2VpnTunnelOptionsSpecification(y)),
    'LocalIpv4NetworkCidr': obj.localIpv4NetworkCidr,
    'RemoteIpv4NetworkCidr': obj.remoteIpv4NetworkCidr,
    'LocalIpv6NetworkCidr': obj.localIpv6NetworkCidr,
    'RemoteIpv6NetworkCidr': obj.remoteIpv6NetworkCidr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpnConnection
 */
export interface Ec2VpnConnection {
  /**
   * @schema Ec2VpnConnection#CustomerGatewayConfiguration
   */
  readonly customerGatewayConfiguration?: string;

  /**
   * @schema Ec2VpnConnection#CustomerGatewayId
   */
  readonly customerGatewayId?: string;

  /**
   * @schema Ec2VpnConnection#Category
   */
  readonly category?: string;

  /**
   * @schema Ec2VpnConnection#State
   */
  readonly state?: string;

  /**
   * @schema Ec2VpnConnection#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2VpnConnection#VpnConnectionId
   */
  readonly vpnConnectionId?: string;

  /**
   * @schema Ec2VpnConnection#VpnGatewayId
   */
  readonly vpnGatewayId?: string;

  /**
   * @schema Ec2VpnConnection#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2VpnConnection#Options
   */
  readonly options?: Ec2VpnConnectionOptions;

  /**
   * @schema Ec2VpnConnection#Routes
   */
  readonly routes?: Ec2VpnStaticRoute[];

  /**
   * @schema Ec2VpnConnection#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2VpnConnection#VgwTelemetry
   */
  readonly vgwTelemetry?: Ec2VgwTelemetry[];

}

/**
 * Converts an object of type 'Ec2VpnConnection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpnConnection(obj: Ec2VpnConnection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CustomerGatewayConfiguration': obj.customerGatewayConfiguration,
    'CustomerGatewayId': obj.customerGatewayId,
    'Category': obj.category,
    'State': obj.state,
    'Type': obj.type,
    'VpnConnectionId': obj.vpnConnectionId,
    'VpnGatewayId': obj.vpnGatewayId,
    'TransitGatewayId': obj.transitGatewayId,
    'Options': toJson_Ec2VpnConnectionOptions(obj.options),
    'Routes': obj.routes?.map(y => toJson_Ec2VpnStaticRoute(y)),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VgwTelemetry': obj.vgwTelemetry?.map(y => toJson_Ec2VgwTelemetry(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpnGateway
 */
export interface Ec2VpnGateway {
  /**
   * @schema Ec2VpnGateway#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2VpnGateway#State
   */
  readonly state?: string;

  /**
   * @schema Ec2VpnGateway#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2VpnGateway#VpcAttachments
   */
  readonly vpcAttachments?: Ec2VpcAttachment[];

  /**
   * @schema Ec2VpnGateway#VpnGatewayId
   */
  readonly vpnGatewayId?: string;

  /**
   * @schema Ec2VpnGateway#AmazonSideAsn
   */
  readonly amazonSideAsn?: number;

  /**
   * @schema Ec2VpnGateway#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2VpnGateway' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpnGateway(obj: Ec2VpnGateway | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'State': obj.state,
    'Type': obj.type,
    'VpcAttachments': obj.vpcAttachments?.map(y => toJson_Ec2VpcAttachment(y)),
    'VpnGatewayId': obj.vpnGatewayId,
    'AmazonSideAsn': obj.amazonSideAsn,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFleetSuccessItem
 */
export interface Ec2DeleteFleetSuccessItem {
  /**
   * @schema Ec2DeleteFleetSuccessItem#CurrentFleetState
   */
  readonly currentFleetState?: string;

  /**
   * @schema Ec2DeleteFleetSuccessItem#PreviousFleetState
   */
  readonly previousFleetState?: string;

  /**
   * @schema Ec2DeleteFleetSuccessItem#FleetId
   */
  readonly fleetId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteFleetSuccessItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFleetSuccessItem(obj: Ec2DeleteFleetSuccessItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CurrentFleetState': obj.currentFleetState,
    'PreviousFleetState': obj.previousFleetState,
    'FleetId': obj.fleetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFleetErrorItem
 */
export interface Ec2DeleteFleetErrorItem {
  /**
   * @schema Ec2DeleteFleetErrorItem#Error
   */
  readonly error?: Ec2DeleteFleetError;

  /**
   * @schema Ec2DeleteFleetErrorItem#FleetId
   */
  readonly fleetId?: string;

}

/**
 * Converts an object of type 'Ec2DeleteFleetErrorItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFleetErrorItem(obj: Ec2DeleteFleetErrorItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Error': toJson_Ec2DeleteFleetError(obj.error),
    'FleetId': obj.fleetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceEventWindowStateChange
 */
export interface Ec2InstanceEventWindowStateChange {
  /**
   * @schema Ec2InstanceEventWindowStateChange#InstanceEventWindowId
   */
  readonly instanceEventWindowId?: string;

  /**
   * @schema Ec2InstanceEventWindowStateChange#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2InstanceEventWindowStateChange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceEventWindowStateChange(obj: Ec2InstanceEventWindowStateChange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventWindowId': obj.instanceEventWindowId,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLaunchTemplateVersionsResponseSuccessItem
 */
export interface Ec2DeleteLaunchTemplateVersionsResponseSuccessItem {
  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResponseSuccessItem#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResponseSuccessItem#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResponseSuccessItem#VersionNumber
   */
  readonly versionNumber?: number;

}

/**
 * Converts an object of type 'Ec2DeleteLaunchTemplateVersionsResponseSuccessItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLaunchTemplateVersionsResponseSuccessItem(obj: Ec2DeleteLaunchTemplateVersionsResponseSuccessItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'VersionNumber': obj.versionNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteLaunchTemplateVersionsResponseErrorItem
 */
export interface Ec2DeleteLaunchTemplateVersionsResponseErrorItem {
  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResponseErrorItem#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResponseErrorItem#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResponseErrorItem#VersionNumber
   */
  readonly versionNumber?: number;

  /**
   * @schema Ec2DeleteLaunchTemplateVersionsResponseErrorItem#ResponseError
   */
  readonly responseError?: Ec2ResponseError;

}

/**
 * Converts an object of type 'Ec2DeleteLaunchTemplateVersionsResponseErrorItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteLaunchTemplateVersionsResponseErrorItem(obj: Ec2DeleteLaunchTemplateVersionsResponseErrorItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'VersionNumber': obj.versionNumber,
    'ResponseError': toJson_Ec2ResponseError(obj.responseError),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SuccessfulQueuedPurchaseDeletion
 */
export interface Ec2SuccessfulQueuedPurchaseDeletion {
  /**
   * @schema Ec2SuccessfulQueuedPurchaseDeletion#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

}

/**
 * Converts an object of type 'Ec2SuccessfulQueuedPurchaseDeletion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SuccessfulQueuedPurchaseDeletion(obj: Ec2SuccessfulQueuedPurchaseDeletion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesId': obj.reservedInstancesId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FailedQueuedPurchaseDeletion
 */
export interface Ec2FailedQueuedPurchaseDeletion {
  /**
   * @schema Ec2FailedQueuedPurchaseDeletion#Error
   */
  readonly error?: Ec2DeleteQueuedReservedInstancesError;

  /**
   * @schema Ec2FailedQueuedPurchaseDeletion#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

}

/**
 * Converts an object of type 'Ec2FailedQueuedPurchaseDeletion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FailedQueuedPurchaseDeletion(obj: Ec2FailedQueuedPurchaseDeletion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Error': toJson_Ec2DeleteQueuedReservedInstancesError(obj.error),
    'ReservedInstancesId': obj.reservedInstancesId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeregisterInstanceTagAttributeRequest
 */
export interface Ec2DeregisterInstanceTagAttributeRequest {
  /**
   * @schema Ec2DeregisterInstanceTagAttributeRequest#IncludeAllTagsOfInstance
   */
  readonly includeAllTagsOfInstance?: boolean;

  /**
   * @schema Ec2DeregisterInstanceTagAttributeRequest#InstanceTagKeys
   */
  readonly instanceTagKeys?: string[];

}

/**
 * Converts an object of type 'Ec2DeregisterInstanceTagAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeregisterInstanceTagAttributeRequest(obj: Ec2DeregisterInstanceTagAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IncludeAllTagsOfInstance': obj.includeAllTagsOfInstance,
    'InstanceTagKeys': obj.instanceTagKeys?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceTagNotificationAttribute
 */
export interface Ec2InstanceTagNotificationAttribute {
  /**
   * @schema Ec2InstanceTagNotificationAttribute#InstanceTagKeys
   */
  readonly instanceTagKeys?: string[];

  /**
   * @schema Ec2InstanceTagNotificationAttribute#IncludeAllTagsOfInstance
   */
  readonly includeAllTagsOfInstance?: boolean;

}

/**
 * Converts an object of type 'Ec2InstanceTagNotificationAttribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceTagNotificationAttribute(obj: Ec2InstanceTagNotificationAttribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceTagKeys': obj.instanceTagKeys?.map(y => y),
    'IncludeAllTagsOfInstance': obj.includeAllTagsOfInstance,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastDeregisteredGroupMembers
 */
export interface Ec2TransitGatewayMulticastDeregisteredGroupMembers {
  /**
   * @schema Ec2TransitGatewayMulticastDeregisteredGroupMembers#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDeregisteredGroupMembers#DeregisteredNetworkInterfaceIds
   */
  readonly deregisteredNetworkInterfaceIds?: string[];

  /**
   * @schema Ec2TransitGatewayMulticastDeregisteredGroupMembers#GroupIpAddress
   */
  readonly groupIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastDeregisteredGroupMembers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastDeregisteredGroupMembers(obj: Ec2TransitGatewayMulticastDeregisteredGroupMembers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'DeregisteredNetworkInterfaceIds': obj.deregisteredNetworkInterfaceIds?.map(y => y),
    'GroupIpAddress': obj.groupIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastDeregisteredGroupSources
 */
export interface Ec2TransitGatewayMulticastDeregisteredGroupSources {
  /**
   * @schema Ec2TransitGatewayMulticastDeregisteredGroupSources#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDeregisteredGroupSources#DeregisteredNetworkInterfaceIds
   */
  readonly deregisteredNetworkInterfaceIds?: string[];

  /**
   * @schema Ec2TransitGatewayMulticastDeregisteredGroupSources#GroupIpAddress
   */
  readonly groupIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastDeregisteredGroupSources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastDeregisteredGroupSources(obj: Ec2TransitGatewayMulticastDeregisteredGroupSources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'DeregisteredNetworkInterfaceIds': obj.deregisteredNetworkInterfaceIds?.map(y => y),
    'GroupIpAddress': obj.groupIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AccountAttribute
 */
export interface Ec2AccountAttribute {
  /**
   * @schema Ec2AccountAttribute#AttributeName
   */
  readonly attributeName?: string;

  /**
   * @schema Ec2AccountAttribute#AttributeValues
   */
  readonly attributeValues?: Ec2AccountAttributeValue[];

}

/**
 * Converts an object of type 'Ec2AccountAttribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AccountAttribute(obj: Ec2AccountAttribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttributeName': obj.attributeName,
    'AttributeValues': obj.attributeValues?.map(y => toJson_Ec2AccountAttributeValue(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Filter
 */
export interface Ec2Filter {
  /**
   * @schema Ec2Filter#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2Filter#Values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'Ec2Filter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Filter(obj: Ec2Filter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Address
 */
export interface Ec2Address {
  /**
   * @schema Ec2Address#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2Address#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2Address#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2Address#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2Address#Domain
   */
  readonly domain?: string;

  /**
   * @schema Ec2Address#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2Address#NetworkInterfaceOwnerId
   */
  readonly networkInterfaceOwnerId?: string;

  /**
   * @schema Ec2Address#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2Address#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2Address#PublicIpv4Pool
   */
  readonly publicIpv4Pool?: string;

  /**
   * @schema Ec2Address#NetworkBorderGroup
   */
  readonly networkBorderGroup?: string;

  /**
   * @schema Ec2Address#CustomerOwnedIp
   */
  readonly customerOwnedIp?: string;

  /**
   * @schema Ec2Address#CustomerOwnedIpv4Pool
   */
  readonly customerOwnedIpv4Pool?: string;

  /**
   * @schema Ec2Address#CarrierIp
   */
  readonly carrierIp?: string;

}

/**
 * Converts an object of type 'Ec2Address' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Address(obj: Ec2Address | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'PublicIp': obj.publicIp,
    'AllocationId': obj.allocationId,
    'AssociationId': obj.associationId,
    'Domain': obj.domain,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'NetworkInterfaceOwnerId': obj.networkInterfaceOwnerId,
    'PrivateIpAddress': obj.privateIpAddress,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'PublicIpv4Pool': obj.publicIpv4Pool,
    'NetworkBorderGroup': obj.networkBorderGroup,
    'CustomerOwnedIp': obj.customerOwnedIp,
    'CustomerOwnedIpv4Pool': obj.customerOwnedIpv4Pool,
    'CarrierIp': obj.carrierIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AddressAttribute
 */
export interface Ec2AddressAttribute {
  /**
   * @schema Ec2AddressAttribute#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2AddressAttribute#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2AddressAttribute#PtrRecord
   */
  readonly ptrRecord?: string;

  /**
   * @schema Ec2AddressAttribute#PtrRecordUpdate
   */
  readonly ptrRecordUpdate?: Ec2PtrUpdateStatus;

}

/**
 * Converts an object of type 'Ec2AddressAttribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AddressAttribute(obj: Ec2AddressAttribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PublicIp': obj.publicIp,
    'AllocationId': obj.allocationId,
    'PtrRecord': obj.ptrRecord,
    'PtrRecordUpdate': toJson_Ec2PtrUpdateStatus(obj.ptrRecordUpdate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IdFormat
 */
export interface Ec2IdFormat {
  /**
   * @schema Ec2IdFormat#Deadline
   */
  readonly deadline?: string;

  /**
   * @schema Ec2IdFormat#Resource
   */
  readonly resource?: string;

  /**
   * @schema Ec2IdFormat#UseLongIds
   */
  readonly useLongIds?: boolean;

}

/**
 * Converts an object of type 'Ec2IdFormat' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IdFormat(obj: Ec2IdFormat | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Deadline': obj.deadline,
    'Resource': obj.resource,
    'UseLongIds': obj.useLongIds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AvailabilityZone
 */
export interface Ec2AvailabilityZone {
  /**
   * @schema Ec2AvailabilityZone#State
   */
  readonly state?: string;

  /**
   * @schema Ec2AvailabilityZone#OptInStatus
   */
  readonly optInStatus?: string;

  /**
   * @schema Ec2AvailabilityZone#Messages
   */
  readonly messages?: Ec2AvailabilityZoneMessage[];

  /**
   * @schema Ec2AvailabilityZone#RegionName
   */
  readonly regionName?: string;

  /**
   * @schema Ec2AvailabilityZone#ZoneName
   */
  readonly zoneName?: string;

  /**
   * @schema Ec2AvailabilityZone#ZoneId
   */
  readonly zoneId?: string;

  /**
   * @schema Ec2AvailabilityZone#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2AvailabilityZone#NetworkBorderGroup
   */
  readonly networkBorderGroup?: string;

  /**
   * @schema Ec2AvailabilityZone#ZoneType
   */
  readonly zoneType?: string;

  /**
   * @schema Ec2AvailabilityZone#ParentZoneName
   */
  readonly parentZoneName?: string;

  /**
   * @schema Ec2AvailabilityZone#ParentZoneId
   */
  readonly parentZoneId?: string;

}

/**
 * Converts an object of type 'Ec2AvailabilityZone' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AvailabilityZone(obj: Ec2AvailabilityZone | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'OptInStatus': obj.optInStatus,
    'Messages': obj.messages?.map(y => toJson_Ec2AvailabilityZoneMessage(y)),
    'RegionName': obj.regionName,
    'ZoneName': obj.zoneName,
    'ZoneId': obj.zoneId,
    'GroupName': obj.groupName,
    'NetworkBorderGroup': obj.networkBorderGroup,
    'ZoneType': obj.zoneType,
    'ParentZoneName': obj.parentZoneName,
    'ParentZoneId': obj.parentZoneId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClassicLinkInstance
 */
export interface Ec2ClassicLinkInstance {
  /**
   * @schema Ec2ClassicLinkInstance#Groups
   */
  readonly groups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2ClassicLinkInstance#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ClassicLinkInstance#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2ClassicLinkInstance#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2ClassicLinkInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClassicLinkInstance(obj: Ec2ClassicLinkInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Groups': obj.groups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'InstanceId': obj.instanceId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AuthorizationRule
 */
export interface Ec2AuthorizationRule {
  /**
   * @schema Ec2AuthorizationRule#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2AuthorizationRule#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2AuthorizationRule#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2AuthorizationRule#AccessAll
   */
  readonly accessAll?: boolean;

  /**
   * @schema Ec2AuthorizationRule#DestinationCidr
   */
  readonly destinationCidr?: string;

  /**
   * @schema Ec2AuthorizationRule#Status
   */
  readonly status?: Ec2ClientVpnAuthorizationRuleStatus;

}

/**
 * Converts an object of type 'Ec2AuthorizationRule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AuthorizationRule(obj: Ec2AuthorizationRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'Description': obj.description,
    'GroupId': obj.groupId,
    'AccessAll': obj.accessAll,
    'DestinationCidr': obj.destinationCidr,
    'Status': toJson_Ec2ClientVpnAuthorizationRuleStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnConnection
 */
export interface Ec2ClientVpnConnection {
  /**
   * @schema Ec2ClientVpnConnection#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2ClientVpnConnection#Timestamp
   */
  readonly timestamp?: string;

  /**
   * @schema Ec2ClientVpnConnection#ConnectionId
   */
  readonly connectionId?: string;

  /**
   * @schema Ec2ClientVpnConnection#Username
   */
  readonly username?: string;

  /**
   * @schema Ec2ClientVpnConnection#ConnectionEstablishedTime
   */
  readonly connectionEstablishedTime?: string;

  /**
   * @schema Ec2ClientVpnConnection#IngressBytes
   */
  readonly ingressBytes?: string;

  /**
   * @schema Ec2ClientVpnConnection#EgressBytes
   */
  readonly egressBytes?: string;

  /**
   * @schema Ec2ClientVpnConnection#IngressPackets
   */
  readonly ingressPackets?: string;

  /**
   * @schema Ec2ClientVpnConnection#EgressPackets
   */
  readonly egressPackets?: string;

  /**
   * @schema Ec2ClientVpnConnection#ClientIp
   */
  readonly clientIp?: string;

  /**
   * @schema Ec2ClientVpnConnection#CommonName
   */
  readonly commonName?: string;

  /**
   * @schema Ec2ClientVpnConnection#Status
   */
  readonly status?: Ec2ClientVpnConnectionStatus;

  /**
   * @schema Ec2ClientVpnConnection#ConnectionEndTime
   */
  readonly connectionEndTime?: string;

  /**
   * @schema Ec2ClientVpnConnection#PostureComplianceStatuses
   */
  readonly postureComplianceStatuses?: string[];

}

/**
 * Converts an object of type 'Ec2ClientVpnConnection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnConnection(obj: Ec2ClientVpnConnection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'Timestamp': obj.timestamp,
    'ConnectionId': obj.connectionId,
    'Username': obj.username,
    'ConnectionEstablishedTime': obj.connectionEstablishedTime,
    'IngressBytes': obj.ingressBytes,
    'EgressBytes': obj.egressBytes,
    'IngressPackets': obj.ingressPackets,
    'EgressPackets': obj.egressPackets,
    'ClientIp': obj.clientIp,
    'CommonName': obj.commonName,
    'Status': toJson_Ec2ClientVpnConnectionStatus(obj.status),
    'ConnectionEndTime': obj.connectionEndTime,
    'PostureComplianceStatuses': obj.postureComplianceStatuses?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnEndpoint
 */
export interface Ec2ClientVpnEndpoint {
  /**
   * @schema Ec2ClientVpnEndpoint#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#Status
   */
  readonly status?: Ec2ClientVpnEndpointStatus;

  /**
   * @schema Ec2ClientVpnEndpoint#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#DeletionTime
   */
  readonly deletionTime?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#DnsName
   */
  readonly dnsName?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#ClientCidrBlock
   */
  readonly clientCidrBlock?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#DnsServers
   */
  readonly dnsServers?: string[];

  /**
   * @schema Ec2ClientVpnEndpoint#SplitTunnel
   */
  readonly splitTunnel?: boolean;

  /**
   * @schema Ec2ClientVpnEndpoint#VpnProtocol
   */
  readonly vpnProtocol?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#TransportProtocol
   */
  readonly transportProtocol?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#VpnPort
   */
  readonly vpnPort?: number;

  /**
   * @schema Ec2ClientVpnEndpoint#AssociatedTargetNetworks
   */
  readonly associatedTargetNetworks?: Ec2AssociatedTargetNetwork[];

  /**
   * @schema Ec2ClientVpnEndpoint#ServerCertificateArn
   */
  readonly serverCertificateArn?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#AuthenticationOptions
   */
  readonly authenticationOptions?: Ec2ClientVpnAuthentication[];

  /**
   * @schema Ec2ClientVpnEndpoint#ConnectionLogOptions
   */
  readonly connectionLogOptions?: Ec2ConnectionLogResponseOptions;

  /**
   * @schema Ec2ClientVpnEndpoint#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2ClientVpnEndpoint#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2ClientVpnEndpoint#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#SelfServicePortalUrl
   */
  readonly selfServicePortalUrl?: string;

  /**
   * @schema Ec2ClientVpnEndpoint#ClientConnectOptions
   */
  readonly clientConnectOptions?: Ec2ClientConnectResponseOptions;

}

/**
 * Converts an object of type 'Ec2ClientVpnEndpoint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnEndpoint(obj: Ec2ClientVpnEndpoint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'Description': obj.description,
    'Status': toJson_Ec2ClientVpnEndpointStatus(obj.status),
    'CreationTime': obj.creationTime,
    'DeletionTime': obj.deletionTime,
    'DnsName': obj.dnsName,
    'ClientCidrBlock': obj.clientCidrBlock,
    'DnsServers': obj.dnsServers?.map(y => y),
    'SplitTunnel': obj.splitTunnel,
    'VpnProtocol': obj.vpnProtocol,
    'TransportProtocol': obj.transportProtocol,
    'VpnPort': obj.vpnPort,
    'AssociatedTargetNetworks': obj.associatedTargetNetworks?.map(y => toJson_Ec2AssociatedTargetNetwork(y)),
    'ServerCertificateArn': obj.serverCertificateArn,
    'AuthenticationOptions': obj.authenticationOptions?.map(y => toJson_Ec2ClientVpnAuthentication(y)),
    'ConnectionLogOptions': toJson_Ec2ConnectionLogResponseOptions(obj.connectionLogOptions),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'VpcId': obj.vpcId,
    'SelfServicePortalUrl': obj.selfServicePortalUrl,
    'ClientConnectOptions': toJson_Ec2ClientConnectResponseOptions(obj.clientConnectOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnRoute
 */
export interface Ec2ClientVpnRoute {
  /**
   * @schema Ec2ClientVpnRoute#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2ClientVpnRoute#DestinationCidr
   */
  readonly destinationCidr?: string;

  /**
   * @schema Ec2ClientVpnRoute#TargetSubnet
   */
  readonly targetSubnet?: string;

  /**
   * @schema Ec2ClientVpnRoute#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2ClientVpnRoute#Origin
   */
  readonly origin?: string;

  /**
   * @schema Ec2ClientVpnRoute#Status
   */
  readonly status?: Ec2ClientVpnRouteStatus;

  /**
   * @schema Ec2ClientVpnRoute#Description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'Ec2ClientVpnRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnRoute(obj: Ec2ClientVpnRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'DestinationCidr': obj.destinationCidr,
    'TargetSubnet': obj.targetSubnet,
    'Type': obj.type,
    'Origin': obj.origin,
    'Status': toJson_Ec2ClientVpnRouteStatus(obj.status),
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TargetNetwork
 */
export interface Ec2TargetNetwork {
  /**
   * @schema Ec2TargetNetwork#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2TargetNetwork#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2TargetNetwork#TargetNetworkId
   */
  readonly targetNetworkId?: string;

  /**
   * @schema Ec2TargetNetwork#ClientVpnEndpointId
   */
  readonly clientVpnEndpointId?: string;

  /**
   * @schema Ec2TargetNetwork#Status
   */
  readonly status?: Ec2AssociationStatus;

  /**
   * @schema Ec2TargetNetwork#SecurityGroups
   */
  readonly securityGroups?: string[];

}

/**
 * Converts an object of type 'Ec2TargetNetwork' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TargetNetwork(obj: Ec2TargetNetwork | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociationId': obj.associationId,
    'VpcId': obj.vpcId,
    'TargetNetworkId': obj.targetNetworkId,
    'ClientVpnEndpointId': obj.clientVpnEndpointId,
    'Status': toJson_Ec2AssociationStatus(obj.status),
    'SecurityGroups': obj.securityGroups?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CoipPool
 */
export interface Ec2CoipPool {
  /**
   * @schema Ec2CoipPool#PoolId
   */
  readonly poolId?: string;

  /**
   * @schema Ec2CoipPool#PoolCidrs
   */
  readonly poolCidrs?: string[];

  /**
   * @schema Ec2CoipPool#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2CoipPool#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2CoipPool#PoolArn
   */
  readonly poolArn?: string;

}

/**
 * Converts an object of type 'Ec2CoipPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CoipPool(obj: Ec2CoipPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PoolId': obj.poolId,
    'PoolCidrs': obj.poolCidrs?.map(y => y),
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'PoolArn': obj.poolArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ConversionTask
 */
export interface Ec2ConversionTask {
  /**
   * @schema Ec2ConversionTask#ConversionTaskId
   */
  readonly conversionTaskId?: string;

  /**
   * @schema Ec2ConversionTask#ExpirationTime
   */
  readonly expirationTime?: string;

  /**
   * @schema Ec2ConversionTask#ImportInstance
   */
  readonly importInstance?: Ec2ImportInstanceTaskDetails;

  /**
   * @schema Ec2ConversionTask#ImportVolume
   */
  readonly importVolume?: Ec2ImportVolumeTaskDetails;

  /**
   * @schema Ec2ConversionTask#State
   */
  readonly state?: string;

  /**
   * @schema Ec2ConversionTask#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ConversionTask#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ConversionTask' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ConversionTask(obj: Ec2ConversionTask | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConversionTaskId': obj.conversionTaskId,
    'ExpirationTime': obj.expirationTime,
    'ImportInstance': toJson_Ec2ImportInstanceTaskDetails(obj.importInstance),
    'ImportVolume': toJson_Ec2ImportVolumeTaskDetails(obj.importVolume),
    'State': obj.state,
    'StatusMessage': obj.statusMessage,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ElasticGpus
 */
export interface Ec2ElasticGpus {
  /**
   * @schema Ec2ElasticGpus#ElasticGpuId
   */
  readonly elasticGpuId?: string;

  /**
   * @schema Ec2ElasticGpus#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ElasticGpus#ElasticGpuType
   */
  readonly elasticGpuType?: string;

  /**
   * @schema Ec2ElasticGpus#ElasticGpuHealth
   */
  readonly elasticGpuHealth?: Ec2ElasticGpuHealth;

  /**
   * @schema Ec2ElasticGpus#ElasticGpuState
   */
  readonly elasticGpuState?: string;

  /**
   * @schema Ec2ElasticGpus#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ElasticGpus#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ElasticGpus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ElasticGpus(obj: Ec2ElasticGpus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ElasticGpuId': obj.elasticGpuId,
    'AvailabilityZone': obj.availabilityZone,
    'ElasticGpuType': obj.elasticGpuType,
    'ElasticGpuHealth': toJson_Ec2ElasticGpuHealth(obj.elasticGpuHealth),
    'ElasticGpuState': obj.elasticGpuState,
    'InstanceId': obj.instanceId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportImageTask
 */
export interface Ec2ExportImageTask {
  /**
   * @schema Ec2ExportImageTask#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ExportImageTask#ExportImageTaskId
   */
  readonly exportImageTaskId?: string;

  /**
   * @schema Ec2ExportImageTask#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ExportImageTask#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2ExportImageTask#S3ExportLocation
   */
  readonly s3ExportLocation?: Ec2ExportTaskS3Location;

  /**
   * @schema Ec2ExportImageTask#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2ExportImageTask#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ExportImageTask#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ExportImageTask' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportImageTask(obj: Ec2ExportImageTask | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'ExportImageTaskId': obj.exportImageTaskId,
    'ImageId': obj.imageId,
    'Progress': obj.progress,
    'S3ExportLocation': toJson_Ec2ExportTaskS3Location(obj.s3ExportLocation),
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFastSnapshotRestoreSuccessItem
 */
export interface Ec2DescribeFastSnapshotRestoreSuccessItem {
  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#State
   */
  readonly state?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#StateTransitionReason
   */
  readonly stateTransitionReason?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#OwnerAlias
   */
  readonly ownerAlias?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#EnablingTime
   */
  readonly enablingTime?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#OptimizingTime
   */
  readonly optimizingTime?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#EnabledTime
   */
  readonly enabledTime?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#DisablingTime
   */
  readonly disablingTime?: string;

  /**
   * @schema Ec2DescribeFastSnapshotRestoreSuccessItem#DisabledTime
   */
  readonly disabledTime?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFastSnapshotRestoreSuccessItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFastSnapshotRestoreSuccessItem(obj: Ec2DescribeFastSnapshotRestoreSuccessItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SnapshotId': obj.snapshotId,
    'AvailabilityZone': obj.availabilityZone,
    'State': obj.state,
    'StateTransitionReason': obj.stateTransitionReason,
    'OwnerId': obj.ownerId,
    'OwnerAlias': obj.ownerAlias,
    'EnablingTime': obj.enablingTime,
    'OptimizingTime': obj.optimizingTime,
    'EnabledTime': obj.enabledTime,
    'DisablingTime': obj.disablingTime,
    'DisabledTime': obj.disabledTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2HistoryRecordEntry
 */
export interface Ec2HistoryRecordEntry {
  /**
   * @schema Ec2HistoryRecordEntry#EventInformation
   */
  readonly eventInformation?: Ec2EventInformation;

  /**
   * @schema Ec2HistoryRecordEntry#EventType
   */
  readonly eventType?: string;

  /**
   * @schema Ec2HistoryRecordEntry#Timestamp
   */
  readonly timestamp?: string;

}

/**
 * Converts an object of type 'Ec2HistoryRecordEntry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2HistoryRecordEntry(obj: Ec2HistoryRecordEntry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EventInformation': toJson_Ec2EventInformation(obj.eventInformation),
    'EventType': obj.eventType,
    'Timestamp': obj.timestamp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ActiveInstance
 */
export interface Ec2ActiveInstance {
  /**
   * @schema Ec2ActiveInstance#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ActiveInstance#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ActiveInstance#SpotInstanceRequestId
   */
  readonly spotInstanceRequestId?: string;

  /**
   * @schema Ec2ActiveInstance#InstanceHealth
   */
  readonly instanceHealth?: string;

}

/**
 * Converts an object of type 'Ec2ActiveInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ActiveInstance(obj: Ec2ActiveInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'InstanceType': obj.instanceType,
    'SpotInstanceRequestId': obj.spotInstanceRequestId,
    'InstanceHealth': obj.instanceHealth,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetData
 */
export interface Ec2FleetData {
  /**
   * @schema Ec2FleetData#ActivityStatus
   */
  readonly activityStatus?: string;

  /**
   * @schema Ec2FleetData#CreateTime
   */
  readonly createTime?: string;

  /**
   * @schema Ec2FleetData#FleetId
   */
  readonly fleetId?: string;

  /**
   * @schema Ec2FleetData#FleetState
   */
  readonly fleetState?: string;

  /**
   * @schema Ec2FleetData#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2FleetData#ExcessCapacityTerminationPolicy
   */
  readonly excessCapacityTerminationPolicy?: string;

  /**
   * @schema Ec2FleetData#FulfilledCapacity
   */
  readonly fulfilledCapacity?: number;

  /**
   * @schema Ec2FleetData#FulfilledOnDemandCapacity
   */
  readonly fulfilledOnDemandCapacity?: number;

  /**
   * @schema Ec2FleetData#LaunchTemplateConfigs
   */
  readonly launchTemplateConfigs?: Ec2FleetLaunchTemplateConfig[];

  /**
   * @schema Ec2FleetData#TargetCapacitySpecification
   */
  readonly targetCapacitySpecification?: Ec2TargetCapacitySpecification;

  /**
   * @schema Ec2FleetData#TerminateInstancesWithExpiration
   */
  readonly terminateInstancesWithExpiration?: boolean;

  /**
   * @schema Ec2FleetData#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2FleetData#ValidFrom
   */
  readonly validFrom?: string;

  /**
   * @schema Ec2FleetData#ValidUntil
   */
  readonly validUntil?: string;

  /**
   * @schema Ec2FleetData#ReplaceUnhealthyInstances
   */
  readonly replaceUnhealthyInstances?: boolean;

  /**
   * @schema Ec2FleetData#SpotOptions
   */
  readonly spotOptions?: Ec2SpotOptions;

  /**
   * @schema Ec2FleetData#OnDemandOptions
   */
  readonly onDemandOptions?: Ec2OnDemandOptions;

  /**
   * @schema Ec2FleetData#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2FleetData#Errors
   */
  readonly errors?: Ec2DescribeFleetError[];

  /**
   * @schema Ec2FleetData#Instances
   */
  readonly instances?: Ec2DescribeFleetsInstances[];

  /**
   * @schema Ec2FleetData#Context
   */
  readonly context?: string;

}

/**
 * Converts an object of type 'Ec2FleetData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetData(obj: Ec2FleetData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ActivityStatus': obj.activityStatus,
    'CreateTime': obj.createTime,
    'FleetId': obj.fleetId,
    'FleetState': obj.fleetState,
    'ClientToken': obj.clientToken,
    'ExcessCapacityTerminationPolicy': obj.excessCapacityTerminationPolicy,
    'FulfilledCapacity': obj.fulfilledCapacity,
    'FulfilledOnDemandCapacity': obj.fulfilledOnDemandCapacity,
    'LaunchTemplateConfigs': obj.launchTemplateConfigs?.map(y => toJson_Ec2FleetLaunchTemplateConfig(y)),
    'TargetCapacitySpecification': toJson_Ec2TargetCapacitySpecification(obj.targetCapacitySpecification),
    'TerminateInstancesWithExpiration': obj.terminateInstancesWithExpiration,
    'Type': obj.type,
    'ValidFrom': obj.validFrom,
    'ValidUntil': obj.validUntil,
    'ReplaceUnhealthyInstances': obj.replaceUnhealthyInstances,
    'SpotOptions': toJson_Ec2SpotOptions(obj.spotOptions),
    'OnDemandOptions': toJson_Ec2OnDemandOptions(obj.onDemandOptions),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'Errors': obj.errors?.map(y => toJson_Ec2DescribeFleetError(y)),
    'Instances': obj.instances?.map(y => toJson_Ec2DescribeFleetsInstances(y)),
    'Context': obj.context,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FlowLog
 */
export interface Ec2FlowLog {
  /**
   * @schema Ec2FlowLog#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2FlowLog#DeliverLogsErrorMessage
   */
  readonly deliverLogsErrorMessage?: string;

  /**
   * @schema Ec2FlowLog#DeliverLogsPermissionArn
   */
  readonly deliverLogsPermissionArn?: string;

  /**
   * @schema Ec2FlowLog#DeliverLogsStatus
   */
  readonly deliverLogsStatus?: string;

  /**
   * @schema Ec2FlowLog#FlowLogId
   */
  readonly flowLogId?: string;

  /**
   * @schema Ec2FlowLog#FlowLogStatus
   */
  readonly flowLogStatus?: string;

  /**
   * @schema Ec2FlowLog#LogGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema Ec2FlowLog#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2FlowLog#TrafficType
   */
  readonly trafficType?: string;

  /**
   * @schema Ec2FlowLog#LogDestinationType
   */
  readonly logDestinationType?: string;

  /**
   * @schema Ec2FlowLog#LogDestination
   */
  readonly logDestination?: string;

  /**
   * @schema Ec2FlowLog#LogFormat
   */
  readonly logFormat?: string;

  /**
   * @schema Ec2FlowLog#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2FlowLog#MaxAggregationInterval
   */
  readonly maxAggregationInterval?: number;

}

/**
 * Converts an object of type 'Ec2FlowLog' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FlowLog(obj: Ec2FlowLog | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CreationTime': obj.creationTime,
    'DeliverLogsErrorMessage': obj.deliverLogsErrorMessage,
    'DeliverLogsPermissionArn': obj.deliverLogsPermissionArn,
    'DeliverLogsStatus': obj.deliverLogsStatus,
    'FlowLogId': obj.flowLogId,
    'FlowLogStatus': obj.flowLogStatus,
    'LogGroupName': obj.logGroupName,
    'ResourceId': obj.resourceId,
    'TrafficType': obj.trafficType,
    'LogDestinationType': obj.logDestinationType,
    'LogDestination': obj.logDestination,
    'LogFormat': obj.logFormat,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'MaxAggregationInterval': obj.maxAggregationInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FpgaImageAttribute
 */
export interface Ec2FpgaImageAttribute {
  /**
   * @schema Ec2FpgaImageAttribute#FpgaImageId
   */
  readonly fpgaImageId?: string;

  /**
   * @schema Ec2FpgaImageAttribute#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2FpgaImageAttribute#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2FpgaImageAttribute#LoadPermissions
   */
  readonly loadPermissions?: Ec2LoadPermission[];

  /**
   * @schema Ec2FpgaImageAttribute#ProductCodes
   */
  readonly productCodes?: Ec2ProductCode[];

}

/**
 * Converts an object of type 'Ec2FpgaImageAttribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FpgaImageAttribute(obj: Ec2FpgaImageAttribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FpgaImageId': obj.fpgaImageId,
    'Name': obj.name,
    'Description': obj.description,
    'LoadPermissions': obj.loadPermissions?.map(y => toJson_Ec2LoadPermission(y)),
    'ProductCodes': obj.productCodes?.map(y => toJson_Ec2ProductCode(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FpgaImage
 */
export interface Ec2FpgaImage {
  /**
   * @schema Ec2FpgaImage#FpgaImageId
   */
  readonly fpgaImageId?: string;

  /**
   * @schema Ec2FpgaImage#FpgaImageGlobalId
   */
  readonly fpgaImageGlobalId?: string;

  /**
   * @schema Ec2FpgaImage#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2FpgaImage#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2FpgaImage#ShellVersion
   */
  readonly shellVersion?: string;

  /**
   * @schema Ec2FpgaImage#PciId
   */
  readonly pciId?: Ec2PciId;

  /**
   * @schema Ec2FpgaImage#State
   */
  readonly state?: Ec2FpgaImageState;

  /**
   * @schema Ec2FpgaImage#CreateTime
   */
  readonly createTime?: string;

  /**
   * @schema Ec2FpgaImage#UpdateTime
   */
  readonly updateTime?: string;

  /**
   * @schema Ec2FpgaImage#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2FpgaImage#OwnerAlias
   */
  readonly ownerAlias?: string;

  /**
   * @schema Ec2FpgaImage#ProductCodes
   */
  readonly productCodes?: Ec2ProductCode[];

  /**
   * @schema Ec2FpgaImage#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2FpgaImage#Public
   */
  readonly public?: boolean;

  /**
   * @schema Ec2FpgaImage#DataRetentionSupport
   */
  readonly dataRetentionSupport?: boolean;

}

/**
 * Converts an object of type 'Ec2FpgaImage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FpgaImage(obj: Ec2FpgaImage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FpgaImageId': obj.fpgaImageId,
    'FpgaImageGlobalId': obj.fpgaImageGlobalId,
    'Name': obj.name,
    'Description': obj.description,
    'ShellVersion': obj.shellVersion,
    'PciId': toJson_Ec2PciId(obj.pciId),
    'State': toJson_Ec2FpgaImageState(obj.state),
    'CreateTime': obj.createTime,
    'UpdateTime': obj.updateTime,
    'OwnerId': obj.ownerId,
    'OwnerAlias': obj.ownerAlias,
    'ProductCodes': obj.productCodes?.map(y => toJson_Ec2ProductCode(y)),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'Public': obj.public,
    'DataRetentionSupport': obj.dataRetentionSupport,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2HostOffering
 */
export interface Ec2HostOffering {
  /**
   * @schema Ec2HostOffering#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2HostOffering#Duration
   */
  readonly duration?: number;

  /**
   * @schema Ec2HostOffering#HourlyPrice
   */
  readonly hourlyPrice?: string;

  /**
   * @schema Ec2HostOffering#InstanceFamily
   */
  readonly instanceFamily?: string;

  /**
   * @schema Ec2HostOffering#OfferingId
   */
  readonly offeringId?: string;

  /**
   * @schema Ec2HostOffering#PaymentOption
   */
  readonly paymentOption?: string;

  /**
   * @schema Ec2HostOffering#UpfrontPrice
   */
  readonly upfrontPrice?: string;

}

/**
 * Converts an object of type 'Ec2HostOffering' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2HostOffering(obj: Ec2HostOffering | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CurrencyCode': obj.currencyCode,
    'Duration': obj.duration,
    'HourlyPrice': obj.hourlyPrice,
    'InstanceFamily': obj.instanceFamily,
    'OfferingId': obj.offeringId,
    'PaymentOption': obj.paymentOption,
    'UpfrontPrice': obj.upfrontPrice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2HostReservation
 */
export interface Ec2HostReservation {
  /**
   * @schema Ec2HostReservation#Count
   */
  readonly count?: number;

  /**
   * @schema Ec2HostReservation#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2HostReservation#Duration
   */
  readonly duration?: number;

  /**
   * @schema Ec2HostReservation#End
   */
  readonly end?: string;

  /**
   * @schema Ec2HostReservation#HostIdSet
   */
  readonly hostIdSet?: string[];

  /**
   * @schema Ec2HostReservation#HostReservationId
   */
  readonly hostReservationId?: string;

  /**
   * @schema Ec2HostReservation#HourlyPrice
   */
  readonly hourlyPrice?: string;

  /**
   * @schema Ec2HostReservation#InstanceFamily
   */
  readonly instanceFamily?: string;

  /**
   * @schema Ec2HostReservation#OfferingId
   */
  readonly offeringId?: string;

  /**
   * @schema Ec2HostReservation#PaymentOption
   */
  readonly paymentOption?: string;

  /**
   * @schema Ec2HostReservation#Start
   */
  readonly start?: string;

  /**
   * @schema Ec2HostReservation#State
   */
  readonly state?: string;

  /**
   * @schema Ec2HostReservation#UpfrontPrice
   */
  readonly upfrontPrice?: string;

  /**
   * @schema Ec2HostReservation#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2HostReservation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2HostReservation(obj: Ec2HostReservation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Count': obj.count,
    'CurrencyCode': obj.currencyCode,
    'Duration': obj.duration,
    'End': obj.end,
    'HostIdSet': obj.hostIdSet?.map(y => y),
    'HostReservationId': obj.hostReservationId,
    'HourlyPrice': obj.hourlyPrice,
    'InstanceFamily': obj.instanceFamily,
    'OfferingId': obj.offeringId,
    'PaymentOption': obj.paymentOption,
    'Start': obj.start,
    'State': obj.state,
    'UpfrontPrice': obj.upfrontPrice,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Host
 */
export interface Ec2Host {
  /**
   * @schema Ec2Host#AutoPlacement
   */
  readonly autoPlacement?: string;

  /**
   * @schema Ec2Host#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2Host#AvailableCapacity
   */
  readonly availableCapacity?: Ec2AvailableCapacity;

  /**
   * @schema Ec2Host#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2Host#HostId
   */
  readonly hostId?: string;

  /**
   * @schema Ec2Host#HostProperties
   */
  readonly hostProperties?: Ec2HostProperties;

  /**
   * @schema Ec2Host#HostReservationId
   */
  readonly hostReservationId?: string;

  /**
   * @schema Ec2Host#Instances
   */
  readonly instances?: Ec2HostInstance[];

  /**
   * @schema Ec2Host#State
   */
  readonly state?: string;

  /**
   * @schema Ec2Host#AllocationTime
   */
  readonly allocationTime?: string;

  /**
   * @schema Ec2Host#ReleaseTime
   */
  readonly releaseTime?: string;

  /**
   * @schema Ec2Host#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2Host#HostRecovery
   */
  readonly hostRecovery?: string;

  /**
   * @schema Ec2Host#AllowsMultipleInstanceTypes
   */
  readonly allowsMultipleInstanceTypes?: string;

  /**
   * @schema Ec2Host#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2Host#AvailabilityZoneId
   */
  readonly availabilityZoneId?: string;

  /**
   * @schema Ec2Host#MemberOfServiceLinkedResourceGroup
   */
  readonly memberOfServiceLinkedResourceGroup?: boolean;

}

/**
 * Converts an object of type 'Ec2Host' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Host(obj: Ec2Host | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AutoPlacement': obj.autoPlacement,
    'AvailabilityZone': obj.availabilityZone,
    'AvailableCapacity': toJson_Ec2AvailableCapacity(obj.availableCapacity),
    'ClientToken': obj.clientToken,
    'HostId': obj.hostId,
    'HostProperties': toJson_Ec2HostProperties(obj.hostProperties),
    'HostReservationId': obj.hostReservationId,
    'Instances': obj.instances?.map(y => toJson_Ec2HostInstance(y)),
    'State': obj.state,
    'AllocationTime': obj.allocationTime,
    'ReleaseTime': obj.releaseTime,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'HostRecovery': obj.hostRecovery,
    'AllowsMultipleInstanceTypes': obj.allowsMultipleInstanceTypes,
    'OwnerId': obj.ownerId,
    'AvailabilityZoneId': obj.availabilityZoneId,
    'MemberOfServiceLinkedResourceGroup': obj.memberOfServiceLinkedResourceGroup,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchPermission
 */
export interface Ec2LaunchPermission {
  /**
   * @schema Ec2LaunchPermission#Group
   */
  readonly group?: string;

  /**
   * @schema Ec2LaunchPermission#UserId
   */
  readonly userId?: string;

}

/**
 * Converts an object of type 'Ec2LaunchPermission' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchPermission(obj: Ec2LaunchPermission | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Group': obj.group,
    'UserId': obj.userId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ProductCode
 */
export interface Ec2ProductCode {
  /**
   * @schema Ec2ProductCode#ProductCodeId
   */
  readonly productCodeId?: string;

  /**
   * @schema Ec2ProductCode#ProductCodeType
   */
  readonly productCodeType?: string;

}

/**
 * Converts an object of type 'Ec2ProductCode' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ProductCode(obj: Ec2ProductCode | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ProductCodeId': obj.productCodeId,
    'ProductCodeType': obj.productCodeType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttributeValue
 */
export interface Ec2AttributeValue {
  /**
   * @schema Ec2AttributeValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2AttributeValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttributeValue(obj: Ec2AttributeValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Image
 */
export interface Ec2Image {
  /**
   * @schema Ec2Image#Architecture
   */
  readonly architecture?: string;

  /**
   * @schema Ec2Image#CreationDate
   */
  readonly creationDate?: string;

  /**
   * @schema Ec2Image#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2Image#ImageLocation
   */
  readonly imageLocation?: string;

  /**
   * @schema Ec2Image#ImageType
   */
  readonly imageType?: string;

  /**
   * @schema Ec2Image#Public
   */
  readonly public?: boolean;

  /**
   * @schema Ec2Image#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2Image#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2Image#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2Image#PlatformDetails
   */
  readonly platformDetails?: string;

  /**
   * @schema Ec2Image#UsageOperation
   */
  readonly usageOperation?: string;

  /**
   * @schema Ec2Image#ProductCodes
   */
  readonly productCodes?: Ec2ProductCode[];

  /**
   * @schema Ec2Image#RamdiskId
   */
  readonly ramdiskId?: string;

  /**
   * @schema Ec2Image#State
   */
  readonly state?: string;

  /**
   * @schema Ec2Image#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2BlockDeviceMapping[];

  /**
   * @schema Ec2Image#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2Image#EnaSupport
   */
  readonly enaSupport?: boolean;

  /**
   * @schema Ec2Image#Hypervisor
   */
  readonly hypervisor?: string;

  /**
   * @schema Ec2Image#ImageOwnerAlias
   */
  readonly imageOwnerAlias?: string;

  /**
   * @schema Ec2Image#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2Image#RootDeviceName
   */
  readonly rootDeviceName?: string;

  /**
   * @schema Ec2Image#RootDeviceType
   */
  readonly rootDeviceType?: string;

  /**
   * @schema Ec2Image#SriovNetSupport
   */
  readonly sriovNetSupport?: string;

  /**
   * @schema Ec2Image#StateReason
   */
  readonly stateReason?: Ec2StateReason;

  /**
   * @schema Ec2Image#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2Image#VirtualizationType
   */
  readonly virtualizationType?: string;

  /**
   * @schema Ec2Image#BootMode
   */
  readonly bootMode?: string;

  /**
   * @schema Ec2Image#DeprecationTime
   */
  readonly deprecationTime?: string;

}

/**
 * Converts an object of type 'Ec2Image' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Image(obj: Ec2Image | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Architecture': obj.architecture,
    'CreationDate': obj.creationDate,
    'ImageId': obj.imageId,
    'ImageLocation': obj.imageLocation,
    'ImageType': obj.imageType,
    'Public': obj.public,
    'KernelId': obj.kernelId,
    'OwnerId': obj.ownerId,
    'Platform': obj.platform,
    'PlatformDetails': obj.platformDetails,
    'UsageOperation': obj.usageOperation,
    'ProductCodes': obj.productCodes?.map(y => toJson_Ec2ProductCode(y)),
    'RamdiskId': obj.ramdiskId,
    'State': obj.state,
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2BlockDeviceMapping(y)),
    'Description': obj.description,
    'EnaSupport': obj.enaSupport,
    'Hypervisor': obj.hypervisor,
    'ImageOwnerAlias': obj.imageOwnerAlias,
    'Name': obj.name,
    'RootDeviceName': obj.rootDeviceName,
    'RootDeviceType': obj.rootDeviceType,
    'SriovNetSupport': obj.sriovNetSupport,
    'StateReason': toJson_Ec2StateReason(obj.stateReason),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VirtualizationType': obj.virtualizationType,
    'BootMode': obj.bootMode,
    'DeprecationTime': obj.deprecationTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportImageTask
 */
export interface Ec2ImportImageTask {
  /**
   * @schema Ec2ImportImageTask#Architecture
   */
  readonly architecture?: string;

  /**
   * @schema Ec2ImportImageTask#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportImageTask#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2ImportImageTask#Hypervisor
   */
  readonly hypervisor?: string;

  /**
   * @schema Ec2ImportImageTask#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ImportImageTask#ImportTaskId
   */
  readonly importTaskId?: string;

  /**
   * @schema Ec2ImportImageTask#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2ImportImageTask#LicenseType
   */
  readonly licenseType?: string;

  /**
   * @schema Ec2ImportImageTask#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2ImportImageTask#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2ImportImageTask#SnapshotDetails
   */
  readonly snapshotDetails?: Ec2SnapshotDetail[];

  /**
   * @schema Ec2ImportImageTask#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2ImportImageTask#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ImportImageTask#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2ImportImageTask#LicenseSpecifications
   */
  readonly licenseSpecifications?: Ec2ImportImageLicenseConfigurationResponse[];

}

/**
 * Converts an object of type 'Ec2ImportImageTask' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportImageTask(obj: Ec2ImportImageTask | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Architecture': obj.architecture,
    'Description': obj.description,
    'Encrypted': obj.encrypted,
    'Hypervisor': obj.hypervisor,
    'ImageId': obj.imageId,
    'ImportTaskId': obj.importTaskId,
    'KmsKeyId': obj.kmsKeyId,
    'LicenseType': obj.licenseType,
    'Platform': obj.platform,
    'Progress': obj.progress,
    'SnapshotDetails': obj.snapshotDetails?.map(y => toJson_Ec2SnapshotDetail(y)),
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'LicenseSpecifications': obj.licenseSpecifications?.map(y => toJson_Ec2ImportImageLicenseConfigurationResponse(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportSnapshotTask
 */
export interface Ec2ImportSnapshotTask {
  /**
   * @schema Ec2ImportSnapshotTask#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportSnapshotTask#ImportTaskId
   */
  readonly importTaskId?: string;

  /**
   * @schema Ec2ImportSnapshotTask#SnapshotTaskDetail
   */
  readonly snapshotTaskDetail?: Ec2SnapshotTaskDetail;

  /**
   * @schema Ec2ImportSnapshotTask#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ImportSnapshotTask' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportSnapshotTask(obj: Ec2ImportSnapshotTask | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'ImportTaskId': obj.importTaskId,
    'SnapshotTaskDetail': toJson_Ec2SnapshotTaskDetail(obj.snapshotTaskDetail),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GroupIdentifier
 */
export interface Ec2GroupIdentifier {
  /**
   * @schema Ec2GroupIdentifier#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2GroupIdentifier#GroupId
   */
  readonly groupId?: string;

}

/**
 * Converts an object of type 'Ec2GroupIdentifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GroupIdentifier(obj: Ec2GroupIdentifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupName': obj.groupName,
    'GroupId': obj.groupId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceBlockDeviceMapping
 */
export interface Ec2InstanceBlockDeviceMapping {
  /**
   * @schema Ec2InstanceBlockDeviceMapping#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2InstanceBlockDeviceMapping#Ebs
   */
  readonly ebs?: Ec2EbsInstanceBlockDevice;

}

/**
 * Converts an object of type 'Ec2InstanceBlockDeviceMapping' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceBlockDeviceMapping(obj: Ec2InstanceBlockDeviceMapping | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeviceName': obj.deviceName,
    'Ebs': toJson_Ec2EbsInstanceBlockDevice(obj.ebs),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AttributeBooleanValue
 */
export interface Ec2AttributeBooleanValue {
  /**
   * @schema Ec2AttributeBooleanValue#Value
   */
  readonly value?: boolean;

}

/**
 * Converts an object of type 'Ec2AttributeBooleanValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AttributeBooleanValue(obj: Ec2AttributeBooleanValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnclaveOptions
 */
export interface Ec2EnclaveOptions {
  /**
   * @schema Ec2EnclaveOptions#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2EnclaveOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnclaveOptions(obj: Ec2EnclaveOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceCreditSpecification
 */
export interface Ec2InstanceCreditSpecification {
  /**
   * @schema Ec2InstanceCreditSpecification#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2InstanceCreditSpecification#CpuCredits
   */
  readonly cpuCredits?: string;

}

/**
 * Converts an object of type 'Ec2InstanceCreditSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceCreditSpecification(obj: Ec2InstanceCreditSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'CpuCredits': obj.cpuCredits,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceStatus
 */
export interface Ec2InstanceStatus {
  /**
   * @schema Ec2InstanceStatus#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2InstanceStatus#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2InstanceStatus#Events
   */
  readonly events?: Ec2InstanceStatusEvent[];

  /**
   * @schema Ec2InstanceStatus#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2InstanceStatus#InstanceState
   */
  readonly instanceState?: Ec2InstanceState;

  /**
   * @schema Ec2InstanceStatus#InstanceStatus
   */
  readonly instanceStatus?: Ec2InstanceStatusSummary;

  /**
   * @schema Ec2InstanceStatus#SystemStatus
   */
  readonly systemStatus?: Ec2InstanceStatusSummary;

}

/**
 * Converts an object of type 'Ec2InstanceStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceStatus(obj: Ec2InstanceStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'OutpostArn': obj.outpostArn,
    'Events': obj.events?.map(y => toJson_Ec2InstanceStatusEvent(y)),
    'InstanceId': obj.instanceId,
    'InstanceState': toJson_Ec2InstanceState(obj.instanceState),
    'InstanceStatus': toJson_Ec2InstanceStatusSummary(obj.instanceStatus),
    'SystemStatus': toJson_Ec2InstanceStatusSummary(obj.systemStatus),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceTypeOffering
 */
export interface Ec2InstanceTypeOffering {
  /**
   * @schema Ec2InstanceTypeOffering#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2InstanceTypeOffering#LocationType
   */
  readonly locationType?: string;

  /**
   * @schema Ec2InstanceTypeOffering#Location
   */
  readonly location?: string;

}

/**
 * Converts an object of type 'Ec2InstanceTypeOffering' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceTypeOffering(obj: Ec2InstanceTypeOffering | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceType': obj.instanceType,
    'LocationType': obj.locationType,
    'Location': obj.location,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceTypeInfo
 */
export interface Ec2InstanceTypeInfo {
  /**
   * @schema Ec2InstanceTypeInfo#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2InstanceTypeInfo#CurrentGeneration
   */
  readonly currentGeneration?: boolean;

  /**
   * @schema Ec2InstanceTypeInfo#FreeTierEligible
   */
  readonly freeTierEligible?: boolean;

  /**
   * @schema Ec2InstanceTypeInfo#SupportedUsageClasses
   */
  readonly supportedUsageClasses?: string[];

  /**
   * @schema Ec2InstanceTypeInfo#SupportedRootDeviceTypes
   */
  readonly supportedRootDeviceTypes?: string[];

  /**
   * @schema Ec2InstanceTypeInfo#SupportedVirtualizationTypes
   */
  readonly supportedVirtualizationTypes?: string[];

  /**
   * @schema Ec2InstanceTypeInfo#BareMetal
   */
  readonly bareMetal?: boolean;

  /**
   * @schema Ec2InstanceTypeInfo#Hypervisor
   */
  readonly hypervisor?: string;

  /**
   * @schema Ec2InstanceTypeInfo#ProcessorInfo
   */
  readonly processorInfo?: Ec2ProcessorInfo;

  /**
   * @schema Ec2InstanceTypeInfo#VCpuInfo
   */
  readonly vCpuInfo?: Ec2VCpuInfo;

  /**
   * @schema Ec2InstanceTypeInfo#MemoryInfo
   */
  readonly memoryInfo?: Ec2MemoryInfo;

  /**
   * @schema Ec2InstanceTypeInfo#InstanceStorageSupported
   */
  readonly instanceStorageSupported?: boolean;

  /**
   * @schema Ec2InstanceTypeInfo#InstanceStorageInfo
   */
  readonly instanceStorageInfo?: Ec2InstanceStorageInfo;

  /**
   * @schema Ec2InstanceTypeInfo#EbsInfo
   */
  readonly ebsInfo?: Ec2EbsInfo;

  /**
   * @schema Ec2InstanceTypeInfo#NetworkInfo
   */
  readonly networkInfo?: Ec2NetworkInfo;

  /**
   * @schema Ec2InstanceTypeInfo#GpuInfo
   */
  readonly gpuInfo?: Ec2GpuInfo;

  /**
   * @schema Ec2InstanceTypeInfo#FpgaInfo
   */
  readonly fpgaInfo?: Ec2FpgaInfo;

  /**
   * @schema Ec2InstanceTypeInfo#PlacementGroupInfo
   */
  readonly placementGroupInfo?: Ec2PlacementGroupInfo;

  /**
   * @schema Ec2InstanceTypeInfo#InferenceAcceleratorInfo
   */
  readonly inferenceAcceleratorInfo?: Ec2InferenceAcceleratorInfo;

  /**
   * @schema Ec2InstanceTypeInfo#HibernationSupported
   */
  readonly hibernationSupported?: boolean;

  /**
   * @schema Ec2InstanceTypeInfo#BurstablePerformanceSupported
   */
  readonly burstablePerformanceSupported?: boolean;

  /**
   * @schema Ec2InstanceTypeInfo#DedicatedHostsSupported
   */
  readonly dedicatedHostsSupported?: boolean;

  /**
   * @schema Ec2InstanceTypeInfo#AutoRecoverySupported
   */
  readonly autoRecoverySupported?: boolean;

  /**
   * @schema Ec2InstanceTypeInfo#SupportedBootModes
   */
  readonly supportedBootModes?: string[];

}

/**
 * Converts an object of type 'Ec2InstanceTypeInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceTypeInfo(obj: Ec2InstanceTypeInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceType': obj.instanceType,
    'CurrentGeneration': obj.currentGeneration,
    'FreeTierEligible': obj.freeTierEligible,
    'SupportedUsageClasses': obj.supportedUsageClasses?.map(y => y),
    'SupportedRootDeviceTypes': obj.supportedRootDeviceTypes?.map(y => y),
    'SupportedVirtualizationTypes': obj.supportedVirtualizationTypes?.map(y => y),
    'BareMetal': obj.bareMetal,
    'Hypervisor': obj.hypervisor,
    'ProcessorInfo': toJson_Ec2ProcessorInfo(obj.processorInfo),
    'VCpuInfo': toJson_Ec2VCpuInfo(obj.vCpuInfo),
    'MemoryInfo': toJson_Ec2MemoryInfo(obj.memoryInfo),
    'InstanceStorageSupported': obj.instanceStorageSupported,
    'InstanceStorageInfo': toJson_Ec2InstanceStorageInfo(obj.instanceStorageInfo),
    'EbsInfo': toJson_Ec2EbsInfo(obj.ebsInfo),
    'NetworkInfo': toJson_Ec2NetworkInfo(obj.networkInfo),
    'GpuInfo': toJson_Ec2GpuInfo(obj.gpuInfo),
    'FpgaInfo': toJson_Ec2FpgaInfo(obj.fpgaInfo),
    'PlacementGroupInfo': toJson_Ec2PlacementGroupInfo(obj.placementGroupInfo),
    'InferenceAcceleratorInfo': toJson_Ec2InferenceAcceleratorInfo(obj.inferenceAcceleratorInfo),
    'HibernationSupported': obj.hibernationSupported,
    'BurstablePerformanceSupported': obj.burstablePerformanceSupported,
    'DedicatedHostsSupported': obj.dedicatedHostsSupported,
    'AutoRecoverySupported': obj.autoRecoverySupported,
    'SupportedBootModes': obj.supportedBootModes?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv6Pool
 */
export interface Ec2Ipv6Pool {
  /**
   * @schema Ec2Ipv6Pool#PoolId
   */
  readonly poolId?: string;

  /**
   * @schema Ec2Ipv6Pool#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2Ipv6Pool#PoolCidrBlocks
   */
  readonly poolCidrBlocks?: Ec2PoolCidrBlock[];

  /**
   * @schema Ec2Ipv6Pool#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2Ipv6Pool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv6Pool(obj: Ec2Ipv6Pool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PoolId': obj.poolId,
    'Description': obj.description,
    'PoolCidrBlocks': obj.poolCidrBlocks?.map(y => toJson_Ec2PoolCidrBlock(y)),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2KeyPairInfo
 */
export interface Ec2KeyPairInfo {
  /**
   * @schema Ec2KeyPairInfo#KeyPairId
   */
  readonly keyPairId?: string;

  /**
   * @schema Ec2KeyPairInfo#KeyFingerprint
   */
  readonly keyFingerprint?: string;

  /**
   * @schema Ec2KeyPairInfo#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2KeyPairInfo#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2KeyPairInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2KeyPairInfo(obj: Ec2KeyPairInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KeyPairId': obj.keyPairId,
    'KeyFingerprint': obj.keyFingerprint,
    'KeyName': obj.keyName,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation
 */
export interface Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation {
  /**
   * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation#LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
   */
  readonly localGatewayRouteTableVirtualInterfaceGroupAssociationId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation#LocalGatewayVirtualInterfaceGroupId
   */
  readonly localGatewayVirtualInterfaceGroupId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation#LocalGatewayRouteTableArn
   */
  readonly localGatewayRouteTableArn?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation#State
   */
  readonly state?: string;

  /**
   * @schema Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation(obj: Ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableVirtualInterfaceGroupAssociationId': obj.localGatewayRouteTableVirtualInterfaceGroupAssociationId,
    'LocalGatewayVirtualInterfaceGroupId': obj.localGatewayVirtualInterfaceGroupId,
    'LocalGatewayId': obj.localGatewayId,
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'LocalGatewayRouteTableArn': obj.localGatewayRouteTableArn,
    'OwnerId': obj.ownerId,
    'State': obj.state,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LocalGatewayRouteTable
 */
export interface Ec2LocalGatewayRouteTable {
  /**
   * @schema Ec2LocalGatewayRouteTable#LocalGatewayRouteTableId
   */
  readonly localGatewayRouteTableId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTable#LocalGatewayRouteTableArn
   */
  readonly localGatewayRouteTableArn?: string;

  /**
   * @schema Ec2LocalGatewayRouteTable#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTable#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2LocalGatewayRouteTable#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2LocalGatewayRouteTable#State
   */
  readonly state?: string;

  /**
   * @schema Ec2LocalGatewayRouteTable#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LocalGatewayRouteTable' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LocalGatewayRouteTable(obj: Ec2LocalGatewayRouteTable | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayRouteTableId': obj.localGatewayRouteTableId,
    'LocalGatewayRouteTableArn': obj.localGatewayRouteTableArn,
    'LocalGatewayId': obj.localGatewayId,
    'OutpostArn': obj.outpostArn,
    'OwnerId': obj.ownerId,
    'State': obj.state,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LocalGatewayVirtualInterfaceGroup
 */
export interface Ec2LocalGatewayVirtualInterfaceGroup {
  /**
   * @schema Ec2LocalGatewayVirtualInterfaceGroup#LocalGatewayVirtualInterfaceGroupId
   */
  readonly localGatewayVirtualInterfaceGroupId?: string;

  /**
   * @schema Ec2LocalGatewayVirtualInterfaceGroup#LocalGatewayVirtualInterfaceIds
   */
  readonly localGatewayVirtualInterfaceIds?: string[];

  /**
   * @schema Ec2LocalGatewayVirtualInterfaceGroup#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2LocalGatewayVirtualInterfaceGroup#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2LocalGatewayVirtualInterfaceGroup#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LocalGatewayVirtualInterfaceGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LocalGatewayVirtualInterfaceGroup(obj: Ec2LocalGatewayVirtualInterfaceGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayVirtualInterfaceGroupId': obj.localGatewayVirtualInterfaceGroupId,
    'LocalGatewayVirtualInterfaceIds': obj.localGatewayVirtualInterfaceIds?.map(y => y),
    'LocalGatewayId': obj.localGatewayId,
    'OwnerId': obj.ownerId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LocalGatewayVirtualInterface
 */
export interface Ec2LocalGatewayVirtualInterface {
  /**
   * @schema Ec2LocalGatewayVirtualInterface#LocalGatewayVirtualInterfaceId
   */
  readonly localGatewayVirtualInterfaceId?: string;

  /**
   * @schema Ec2LocalGatewayVirtualInterface#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2LocalGatewayVirtualInterface#Vlan
   */
  readonly vlan?: number;

  /**
   * @schema Ec2LocalGatewayVirtualInterface#LocalAddress
   */
  readonly localAddress?: string;

  /**
   * @schema Ec2LocalGatewayVirtualInterface#PeerAddress
   */
  readonly peerAddress?: string;

  /**
   * @schema Ec2LocalGatewayVirtualInterface#LocalBgpAsn
   */
  readonly localBgpAsn?: number;

  /**
   * @schema Ec2LocalGatewayVirtualInterface#PeerBgpAsn
   */
  readonly peerBgpAsn?: number;

  /**
   * @schema Ec2LocalGatewayVirtualInterface#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2LocalGatewayVirtualInterface#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LocalGatewayVirtualInterface' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LocalGatewayVirtualInterface(obj: Ec2LocalGatewayVirtualInterface | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayVirtualInterfaceId': obj.localGatewayVirtualInterfaceId,
    'LocalGatewayId': obj.localGatewayId,
    'Vlan': obj.vlan,
    'LocalAddress': obj.localAddress,
    'PeerAddress': obj.peerAddress,
    'LocalBgpAsn': obj.localBgpAsn,
    'PeerBgpAsn': obj.peerBgpAsn,
    'OwnerId': obj.ownerId,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LocalGateway
 */
export interface Ec2LocalGateway {
  /**
   * @schema Ec2LocalGateway#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2LocalGateway#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2LocalGateway#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2LocalGateway#State
   */
  readonly state?: string;

  /**
   * @schema Ec2LocalGateway#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LocalGateway' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LocalGateway(obj: Ec2LocalGateway | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LocalGatewayId': obj.localGatewayId,
    'OutpostArn': obj.outpostArn,
    'OwnerId': obj.ownerId,
    'State': obj.state,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2MovingAddressStatus
 */
export interface Ec2MovingAddressStatus {
  /**
   * @schema Ec2MovingAddressStatus#MoveStatus
   */
  readonly moveStatus?: string;

  /**
   * @schema Ec2MovingAddressStatus#PublicIp
   */
  readonly publicIp?: string;

}

/**
 * Converts an object of type 'Ec2MovingAddressStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2MovingAddressStatus(obj: Ec2MovingAddressStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MoveStatus': obj.moveStatus,
    'PublicIp': obj.publicIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInsightsAnalysis
 */
export interface Ec2NetworkInsightsAnalysis {
  /**
   * @schema Ec2NetworkInsightsAnalysis#NetworkInsightsAnalysisId
   */
  readonly networkInsightsAnalysisId?: string;

  /**
   * @schema Ec2NetworkInsightsAnalysis#NetworkInsightsAnalysisArn
   */
  readonly networkInsightsAnalysisArn?: string;

  /**
   * @schema Ec2NetworkInsightsAnalysis#NetworkInsightsPathId
   */
  readonly networkInsightsPathId?: string;

  /**
   * @schema Ec2NetworkInsightsAnalysis#FilterInArns
   */
  readonly filterInArns?: string[];

  /**
   * @schema Ec2NetworkInsightsAnalysis#StartDate
   */
  readonly startDate?: string;

  /**
   * @schema Ec2NetworkInsightsAnalysis#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2NetworkInsightsAnalysis#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2NetworkInsightsAnalysis#NetworkPathFound
   */
  readonly networkPathFound?: boolean;

  /**
   * @schema Ec2NetworkInsightsAnalysis#ForwardPathComponents
   */
  readonly forwardPathComponents?: Ec2PathComponent[];

  /**
   * @schema Ec2NetworkInsightsAnalysis#ReturnPathComponents
   */
  readonly returnPathComponents?: Ec2PathComponent[];

  /**
   * @schema Ec2NetworkInsightsAnalysis#Explanations
   */
  readonly explanations?: Ec2Explanation[];

  /**
   * @schema Ec2NetworkInsightsAnalysis#AlternatePathHints
   */
  readonly alternatePathHints?: Ec2AlternatePathHint[];

  /**
   * @schema Ec2NetworkInsightsAnalysis#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2NetworkInsightsAnalysis' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInsightsAnalysis(obj: Ec2NetworkInsightsAnalysis | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkInsightsAnalysisId': obj.networkInsightsAnalysisId,
    'NetworkInsightsAnalysisArn': obj.networkInsightsAnalysisArn,
    'NetworkInsightsPathId': obj.networkInsightsPathId,
    'FilterInArns': obj.filterInArns?.map(y => y),
    'StartDate': obj.startDate,
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'NetworkPathFound': obj.networkPathFound,
    'ForwardPathComponents': obj.forwardPathComponents?.map(y => toJson_Ec2PathComponent(y)),
    'ReturnPathComponents': obj.returnPathComponents?.map(y => toJson_Ec2PathComponent(y)),
    'Explanations': obj.explanations?.map(y => toJson_Ec2Explanation(y)),
    'AlternatePathHints': obj.alternatePathHints?.map(y => toJson_Ec2AlternatePathHint(y)),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInterfaceAttachment
 */
export interface Ec2NetworkInterfaceAttachment {
  /**
   * @schema Ec2NetworkInterfaceAttachment#AttachTime
   */
  readonly attachTime?: string;

  /**
   * @schema Ec2NetworkInterfaceAttachment#AttachmentId
   */
  readonly attachmentId?: string;

  /**
   * @schema Ec2NetworkInterfaceAttachment#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2NetworkInterfaceAttachment#DeviceIndex
   */
  readonly deviceIndex?: number;

  /**
   * @schema Ec2NetworkInterfaceAttachment#NetworkCardIndex
   */
  readonly networkCardIndex?: number;

  /**
   * @schema Ec2NetworkInterfaceAttachment#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2NetworkInterfaceAttachment#InstanceOwnerId
   */
  readonly instanceOwnerId?: string;

  /**
   * @schema Ec2NetworkInterfaceAttachment#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2NetworkInterfaceAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInterfaceAttachment(obj: Ec2NetworkInterfaceAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttachTime': obj.attachTime,
    'AttachmentId': obj.attachmentId,
    'DeleteOnTermination': obj.deleteOnTermination,
    'DeviceIndex': obj.deviceIndex,
    'NetworkCardIndex': obj.networkCardIndex,
    'InstanceId': obj.instanceId,
    'InstanceOwnerId': obj.instanceOwnerId,
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PrefixList
 */
export interface Ec2PrefixList {
  /**
   * @schema Ec2PrefixList#Cidrs
   */
  readonly cidrs?: string[];

  /**
   * @schema Ec2PrefixList#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2PrefixList#PrefixListName
   */
  readonly prefixListName?: string;

}

/**
 * Converts an object of type 'Ec2PrefixList' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PrefixList(obj: Ec2PrefixList | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidrs': obj.cidrs?.map(y => y),
    'PrefixListId': obj.prefixListId,
    'PrefixListName': obj.prefixListName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PrincipalIdFormat
 */
export interface Ec2PrincipalIdFormat {
  /**
   * @schema Ec2PrincipalIdFormat#Arn
   */
  readonly arn?: string;

  /**
   * @schema Ec2PrincipalIdFormat#Statuses
   */
  readonly statuses?: Ec2IdFormat[];

}

/**
 * Converts an object of type 'Ec2PrincipalIdFormat' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PrincipalIdFormat(obj: Ec2PrincipalIdFormat | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Arn': obj.arn,
    'Statuses': obj.statuses?.map(y => toJson_Ec2IdFormat(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PublicIpv4Pool
 */
export interface Ec2PublicIpv4Pool {
  /**
   * @schema Ec2PublicIpv4Pool#PoolId
   */
  readonly poolId?: string;

  /**
   * @schema Ec2PublicIpv4Pool#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2PublicIpv4Pool#PoolAddressRanges
   */
  readonly poolAddressRanges?: Ec2PublicIpv4PoolRange[];

  /**
   * @schema Ec2PublicIpv4Pool#TotalAddressCount
   */
  readonly totalAddressCount?: number;

  /**
   * @schema Ec2PublicIpv4Pool#TotalAvailableAddressCount
   */
  readonly totalAvailableAddressCount?: number;

  /**
   * @schema Ec2PublicIpv4Pool#NetworkBorderGroup
   */
  readonly networkBorderGroup?: string;

  /**
   * @schema Ec2PublicIpv4Pool#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2PublicIpv4Pool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PublicIpv4Pool(obj: Ec2PublicIpv4Pool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PoolId': obj.poolId,
    'Description': obj.description,
    'PoolAddressRanges': obj.poolAddressRanges?.map(y => toJson_Ec2PublicIpv4PoolRange(y)),
    'TotalAddressCount': obj.totalAddressCount,
    'TotalAvailableAddressCount': obj.totalAvailableAddressCount,
    'NetworkBorderGroup': obj.networkBorderGroup,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Region
 */
export interface Ec2Region {
  /**
   * @schema Ec2Region#Endpoint
   */
  readonly endpoint?: string;

  /**
   * @schema Ec2Region#RegionName
   */
  readonly regionName?: string;

  /**
   * @schema Ec2Region#OptInStatus
   */
  readonly optInStatus?: string;

}

/**
 * Converts an object of type 'Ec2Region' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Region(obj: Ec2Region | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Endpoint': obj.endpoint,
    'RegionName': obj.regionName,
    'OptInStatus': obj.optInStatus,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstances
 */
export interface Ec2ReservedInstances {
  /**
   * @schema Ec2ReservedInstances#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ReservedInstances#Duration
   */
  readonly duration?: number;

  /**
   * @schema Ec2ReservedInstances#End
   */
  readonly end?: string;

  /**
   * @schema Ec2ReservedInstances#FixedPrice
   */
  readonly fixedPrice?: number;

  /**
   * @schema Ec2ReservedInstances#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2ReservedInstances#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ReservedInstances#ProductDescription
   */
  readonly productDescription?: string;

  /**
   * @schema Ec2ReservedInstances#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

  /**
   * @schema Ec2ReservedInstances#Start
   */
  readonly start?: string;

  /**
   * @schema Ec2ReservedInstances#State
   */
  readonly state?: string;

  /**
   * @schema Ec2ReservedInstances#UsagePrice
   */
  readonly usagePrice?: number;

  /**
   * @schema Ec2ReservedInstances#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2ReservedInstances#InstanceTenancy
   */
  readonly instanceTenancy?: string;

  /**
   * @schema Ec2ReservedInstances#OfferingClass
   */
  readonly offeringClass?: string;

  /**
   * @schema Ec2ReservedInstances#OfferingType
   */
  readonly offeringType?: string;

  /**
   * @schema Ec2ReservedInstances#RecurringCharges
   */
  readonly recurringCharges?: Ec2RecurringCharge[];

  /**
   * @schema Ec2ReservedInstances#Scope
   */
  readonly scope?: string;

  /**
   * @schema Ec2ReservedInstances#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2ReservedInstances' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstances(obj: Ec2ReservedInstances | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Duration': obj.duration,
    'End': obj.end,
    'FixedPrice': obj.fixedPrice,
    'InstanceCount': obj.instanceCount,
    'InstanceType': obj.instanceType,
    'ProductDescription': obj.productDescription,
    'ReservedInstancesId': obj.reservedInstancesId,
    'Start': obj.start,
    'State': obj.state,
    'UsagePrice': obj.usagePrice,
    'CurrencyCode': obj.currencyCode,
    'InstanceTenancy': obj.instanceTenancy,
    'OfferingClass': obj.offeringClass,
    'OfferingType': obj.offeringType,
    'RecurringCharges': obj.recurringCharges?.map(y => toJson_Ec2RecurringCharge(y)),
    'Scope': obj.scope,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstancesModification
 */
export interface Ec2ReservedInstancesModification {
  /**
   * @schema Ec2ReservedInstancesModification#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2ReservedInstancesModification#CreateDate
   */
  readonly createDate?: string;

  /**
   * @schema Ec2ReservedInstancesModification#EffectiveDate
   */
  readonly effectiveDate?: string;

  /**
   * @schema Ec2ReservedInstancesModification#ModificationResults
   */
  readonly modificationResults?: Ec2ReservedInstancesModificationResult[];

  /**
   * @schema Ec2ReservedInstancesModification#ReservedInstancesIds
   */
  readonly reservedInstancesIds?: Ec2ReservedInstancesId[];

  /**
   * @schema Ec2ReservedInstancesModification#ReservedInstancesModificationId
   */
  readonly reservedInstancesModificationId?: string;

  /**
   * @schema Ec2ReservedInstancesModification#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2ReservedInstancesModification#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ReservedInstancesModification#UpdateDate
   */
  readonly updateDate?: string;

}

/**
 * Converts an object of type 'Ec2ReservedInstancesModification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstancesModification(obj: Ec2ReservedInstancesModification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientToken': obj.clientToken,
    'CreateDate': obj.createDate,
    'EffectiveDate': obj.effectiveDate,
    'ModificationResults': obj.modificationResults?.map(y => toJson_Ec2ReservedInstancesModificationResult(y)),
    'ReservedInstancesIds': obj.reservedInstancesIds?.map(y => toJson_Ec2ReservedInstancesId(y)),
    'ReservedInstancesModificationId': obj.reservedInstancesModificationId,
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'UpdateDate': obj.updateDate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstancesOffering
 */
export interface Ec2ReservedInstancesOffering {
  /**
   * @schema Ec2ReservedInstancesOffering#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ReservedInstancesOffering#Duration
   */
  readonly duration?: number;

  /**
   * @schema Ec2ReservedInstancesOffering#FixedPrice
   */
  readonly fixedPrice?: number;

  /**
   * @schema Ec2ReservedInstancesOffering#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ReservedInstancesOffering#ProductDescription
   */
  readonly productDescription?: string;

  /**
   * @schema Ec2ReservedInstancesOffering#ReservedInstancesOfferingId
   */
  readonly reservedInstancesOfferingId?: string;

  /**
   * @schema Ec2ReservedInstancesOffering#UsagePrice
   */
  readonly usagePrice?: number;

  /**
   * @schema Ec2ReservedInstancesOffering#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2ReservedInstancesOffering#InstanceTenancy
   */
  readonly instanceTenancy?: string;

  /**
   * @schema Ec2ReservedInstancesOffering#Marketplace
   */
  readonly marketplace?: boolean;

  /**
   * @schema Ec2ReservedInstancesOffering#OfferingClass
   */
  readonly offeringClass?: string;

  /**
   * @schema Ec2ReservedInstancesOffering#OfferingType
   */
  readonly offeringType?: string;

  /**
   * @schema Ec2ReservedInstancesOffering#PricingDetails
   */
  readonly pricingDetails?: Ec2PricingDetail[];

  /**
   * @schema Ec2ReservedInstancesOffering#RecurringCharges
   */
  readonly recurringCharges?: Ec2RecurringCharge[];

  /**
   * @schema Ec2ReservedInstancesOffering#Scope
   */
  readonly scope?: string;

}

/**
 * Converts an object of type 'Ec2ReservedInstancesOffering' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstancesOffering(obj: Ec2ReservedInstancesOffering | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Duration': obj.duration,
    'FixedPrice': obj.fixedPrice,
    'InstanceType': obj.instanceType,
    'ProductDescription': obj.productDescription,
    'ReservedInstancesOfferingId': obj.reservedInstancesOfferingId,
    'UsagePrice': obj.usagePrice,
    'CurrencyCode': obj.currencyCode,
    'InstanceTenancy': obj.instanceTenancy,
    'Marketplace': obj.marketplace,
    'OfferingClass': obj.offeringClass,
    'OfferingType': obj.offeringType,
    'PricingDetails': obj.pricingDetails?.map(y => toJson_Ec2PricingDetail(y)),
    'RecurringCharges': obj.recurringCharges?.map(y => toJson_Ec2RecurringCharge(y)),
    'Scope': obj.scope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SlotDateTimeRangeRequest
 */
export interface Ec2SlotDateTimeRangeRequest {
  /**
   * @schema Ec2SlotDateTimeRangeRequest#EarliestTime
   */
  readonly earliestTime?: string;

  /**
   * @schema Ec2SlotDateTimeRangeRequest#LatestTime
   */
  readonly latestTime?: string;

}

/**
 * Converts an object of type 'Ec2SlotDateTimeRangeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SlotDateTimeRangeRequest(obj: Ec2SlotDateTimeRangeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EarliestTime': obj.earliestTime,
    'LatestTime': obj.latestTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstanceRecurrenceRequest
 */
export interface Ec2ScheduledInstanceRecurrenceRequest {
  /**
   * @schema Ec2ScheduledInstanceRecurrenceRequest#Frequency
   */
  readonly frequency?: string;

  /**
   * @schema Ec2ScheduledInstanceRecurrenceRequest#Interval
   */
  readonly interval?: number;

  /**
   * @schema Ec2ScheduledInstanceRecurrenceRequest#OccurrenceDays
   */
  readonly occurrenceDays?: number[];

  /**
   * @schema Ec2ScheduledInstanceRecurrenceRequest#OccurrenceRelativeToEnd
   */
  readonly occurrenceRelativeToEnd?: boolean;

  /**
   * @schema Ec2ScheduledInstanceRecurrenceRequest#OccurrenceUnit
   */
  readonly occurrenceUnit?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstanceRecurrenceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstanceRecurrenceRequest(obj: Ec2ScheduledInstanceRecurrenceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Frequency': obj.frequency,
    'Interval': obj.interval,
    'OccurrenceDays': obj.occurrenceDays?.map(y => y),
    'OccurrenceRelativeToEnd': obj.occurrenceRelativeToEnd,
    'OccurrenceUnit': obj.occurrenceUnit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstanceAvailability
 */
export interface Ec2ScheduledInstanceAvailability {
  /**
   * @schema Ec2ScheduledInstanceAvailability#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ScheduledInstanceAvailability#AvailableInstanceCount
   */
  readonly availableInstanceCount?: number;

  /**
   * @schema Ec2ScheduledInstanceAvailability#FirstSlotStartTime
   */
  readonly firstSlotStartTime?: string;

  /**
   * @schema Ec2ScheduledInstanceAvailability#HourlyPrice
   */
  readonly hourlyPrice?: string;

  /**
   * @schema Ec2ScheduledInstanceAvailability#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ScheduledInstanceAvailability#MaxTermDurationInDays
   */
  readonly maxTermDurationInDays?: number;

  /**
   * @schema Ec2ScheduledInstanceAvailability#MinTermDurationInDays
   */
  readonly minTermDurationInDays?: number;

  /**
   * @schema Ec2ScheduledInstanceAvailability#NetworkPlatform
   */
  readonly networkPlatform?: string;

  /**
   * @schema Ec2ScheduledInstanceAvailability#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2ScheduledInstanceAvailability#PurchaseToken
   */
  readonly purchaseToken?: string;

  /**
   * @schema Ec2ScheduledInstanceAvailability#Recurrence
   */
  readonly recurrence?: Ec2ScheduledInstanceRecurrence;

  /**
   * @schema Ec2ScheduledInstanceAvailability#SlotDurationInHours
   */
  readonly slotDurationInHours?: number;

  /**
   * @schema Ec2ScheduledInstanceAvailability#TotalScheduledInstanceHours
   */
  readonly totalScheduledInstanceHours?: number;

}

/**
 * Converts an object of type 'Ec2ScheduledInstanceAvailability' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstanceAvailability(obj: Ec2ScheduledInstanceAvailability | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'AvailableInstanceCount': obj.availableInstanceCount,
    'FirstSlotStartTime': obj.firstSlotStartTime,
    'HourlyPrice': obj.hourlyPrice,
    'InstanceType': obj.instanceType,
    'MaxTermDurationInDays': obj.maxTermDurationInDays,
    'MinTermDurationInDays': obj.minTermDurationInDays,
    'NetworkPlatform': obj.networkPlatform,
    'Platform': obj.platform,
    'PurchaseToken': obj.purchaseToken,
    'Recurrence': toJson_Ec2ScheduledInstanceRecurrence(obj.recurrence),
    'SlotDurationInHours': obj.slotDurationInHours,
    'TotalScheduledInstanceHours': obj.totalScheduledInstanceHours,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SlotStartTimeRangeRequest
 */
export interface Ec2SlotStartTimeRangeRequest {
  /**
   * @schema Ec2SlotStartTimeRangeRequest#EarliestTime
   */
  readonly earliestTime?: string;

  /**
   * @schema Ec2SlotStartTimeRangeRequest#LatestTime
   */
  readonly latestTime?: string;

}

/**
 * Converts an object of type 'Ec2SlotStartTimeRangeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SlotStartTimeRangeRequest(obj: Ec2SlotStartTimeRangeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EarliestTime': obj.earliestTime,
    'LatestTime': obj.latestTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstance
 */
export interface Ec2ScheduledInstance {
  /**
   * @schema Ec2ScheduledInstance#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ScheduledInstance#CreateDate
   */
  readonly createDate?: string;

  /**
   * @schema Ec2ScheduledInstance#HourlyPrice
   */
  readonly hourlyPrice?: string;

  /**
   * @schema Ec2ScheduledInstance#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2ScheduledInstance#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ScheduledInstance#NetworkPlatform
   */
  readonly networkPlatform?: string;

  /**
   * @schema Ec2ScheduledInstance#NextSlotStartTime
   */
  readonly nextSlotStartTime?: string;

  /**
   * @schema Ec2ScheduledInstance#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2ScheduledInstance#PreviousSlotEndTime
   */
  readonly previousSlotEndTime?: string;

  /**
   * @schema Ec2ScheduledInstance#Recurrence
   */
  readonly recurrence?: Ec2ScheduledInstanceRecurrence;

  /**
   * @schema Ec2ScheduledInstance#ScheduledInstanceId
   */
  readonly scheduledInstanceId?: string;

  /**
   * @schema Ec2ScheduledInstance#SlotDurationInHours
   */
  readonly slotDurationInHours?: number;

  /**
   * @schema Ec2ScheduledInstance#TermEndDate
   */
  readonly termEndDate?: string;

  /**
   * @schema Ec2ScheduledInstance#TermStartDate
   */
  readonly termStartDate?: string;

  /**
   * @schema Ec2ScheduledInstance#TotalScheduledInstanceHours
   */
  readonly totalScheduledInstanceHours?: number;

}

/**
 * Converts an object of type 'Ec2ScheduledInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstance(obj: Ec2ScheduledInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'CreateDate': obj.createDate,
    'HourlyPrice': obj.hourlyPrice,
    'InstanceCount': obj.instanceCount,
    'InstanceType': obj.instanceType,
    'NetworkPlatform': obj.networkPlatform,
    'NextSlotStartTime': obj.nextSlotStartTime,
    'Platform': obj.platform,
    'PreviousSlotEndTime': obj.previousSlotEndTime,
    'Recurrence': toJson_Ec2ScheduledInstanceRecurrence(obj.recurrence),
    'ScheduledInstanceId': obj.scheduledInstanceId,
    'SlotDurationInHours': obj.slotDurationInHours,
    'TermEndDate': obj.termEndDate,
    'TermStartDate': obj.termStartDate,
    'TotalScheduledInstanceHours': obj.totalScheduledInstanceHours,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SecurityGroupReference
 */
export interface Ec2SecurityGroupReference {
  /**
   * @schema Ec2SecurityGroupReference#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2SecurityGroupReference#ReferencingVpcId
   */
  readonly referencingVpcId?: string;

  /**
   * @schema Ec2SecurityGroupReference#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2SecurityGroupReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SecurityGroupReference(obj: Ec2SecurityGroupReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupId': obj.groupId,
    'ReferencingVpcId': obj.referencingVpcId,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SecurityGroup
 */
export interface Ec2SecurityGroup {
  /**
   * @schema Ec2SecurityGroup#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2SecurityGroup#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2SecurityGroup#IpPermissions
   */
  readonly ipPermissions?: Ec2IpPermission[];

  /**
   * @schema Ec2SecurityGroup#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2SecurityGroup#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2SecurityGroup#IpPermissionsEgress
   */
  readonly ipPermissionsEgress?: Ec2IpPermission[];

  /**
   * @schema Ec2SecurityGroup#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2SecurityGroup#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2SecurityGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SecurityGroup(obj: Ec2SecurityGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'GroupName': obj.groupName,
    'IpPermissions': obj.ipPermissions?.map(y => toJson_Ec2IpPermission(y)),
    'OwnerId': obj.ownerId,
    'GroupId': obj.groupId,
    'IpPermissionsEgress': obj.ipPermissionsEgress?.map(y => toJson_Ec2IpPermission(y)),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVolumePermission
 */
export interface Ec2CreateVolumePermission {
  /**
   * @schema Ec2CreateVolumePermission#Group
   */
  readonly group?: string;

  /**
   * @schema Ec2CreateVolumePermission#UserId
   */
  readonly userId?: string;

}

/**
 * Converts an object of type 'Ec2CreateVolumePermission' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVolumePermission(obj: Ec2CreateVolumePermission | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Group': obj.group,
    'UserId': obj.userId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2HistoryRecord
 */
export interface Ec2HistoryRecord {
  /**
   * @schema Ec2HistoryRecord#EventInformation
   */
  readonly eventInformation?: Ec2EventInformation;

  /**
   * @schema Ec2HistoryRecord#EventType
   */
  readonly eventType?: string;

  /**
   * @schema Ec2HistoryRecord#Timestamp
   */
  readonly timestamp?: string;

}

/**
 * Converts an object of type 'Ec2HistoryRecord' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2HistoryRecord(obj: Ec2HistoryRecord | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EventInformation': toJson_Ec2EventInformation(obj.eventInformation),
    'EventType': obj.eventType,
    'Timestamp': obj.timestamp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotFleetRequestConfig
 */
export interface Ec2SpotFleetRequestConfig {
  /**
   * @schema Ec2SpotFleetRequestConfig#ActivityStatus
   */
  readonly activityStatus?: string;

  /**
   * @schema Ec2SpotFleetRequestConfig#CreateTime
   */
  readonly createTime?: string;

  /**
   * @schema Ec2SpotFleetRequestConfig#SpotFleetRequestConfig
   */
  readonly spotFleetRequestConfig?: Ec2SpotFleetRequestConfigData;

  /**
   * @schema Ec2SpotFleetRequestConfig#SpotFleetRequestId
   */
  readonly spotFleetRequestId?: string;

  /**
   * @schema Ec2SpotFleetRequestConfig#SpotFleetRequestState
   */
  readonly spotFleetRequestState?: string;

  /**
   * @schema Ec2SpotFleetRequestConfig#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2SpotFleetRequestConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotFleetRequestConfig(obj: Ec2SpotFleetRequestConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ActivityStatus': obj.activityStatus,
    'CreateTime': obj.createTime,
    'SpotFleetRequestConfig': toJson_Ec2SpotFleetRequestConfigData(obj.spotFleetRequestConfig),
    'SpotFleetRequestId': obj.spotFleetRequestId,
    'SpotFleetRequestState': obj.spotFleetRequestState,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotInstanceRequest
 */
export interface Ec2SpotInstanceRequest {
  /**
   * @schema Ec2SpotInstanceRequest#ActualBlockHourlyPrice
   */
  readonly actualBlockHourlyPrice?: string;

  /**
   * @schema Ec2SpotInstanceRequest#AvailabilityZoneGroup
   */
  readonly availabilityZoneGroup?: string;

  /**
   * @schema Ec2SpotInstanceRequest#BlockDurationMinutes
   */
  readonly blockDurationMinutes?: number;

  /**
   * @schema Ec2SpotInstanceRequest#CreateTime
   */
  readonly createTime?: string;

  /**
   * @schema Ec2SpotInstanceRequest#Fault
   */
  readonly fault?: Ec2SpotInstanceStateFault;

  /**
   * @schema Ec2SpotInstanceRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2SpotInstanceRequest#LaunchGroup
   */
  readonly launchGroup?: string;

  /**
   * @schema Ec2SpotInstanceRequest#LaunchSpecification
   */
  readonly launchSpecification?: Ec2LaunchSpecification;

  /**
   * @schema Ec2SpotInstanceRequest#LaunchedAvailabilityZone
   */
  readonly launchedAvailabilityZone?: string;

  /**
   * @schema Ec2SpotInstanceRequest#ProductDescription
   */
  readonly productDescription?: string;

  /**
   * @schema Ec2SpotInstanceRequest#SpotInstanceRequestId
   */
  readonly spotInstanceRequestId?: string;

  /**
   * @schema Ec2SpotInstanceRequest#SpotPrice
   */
  readonly spotPrice?: string;

  /**
   * @schema Ec2SpotInstanceRequest#State
   */
  readonly state?: string;

  /**
   * @schema Ec2SpotInstanceRequest#Status
   */
  readonly status?: Ec2SpotInstanceStatus;

  /**
   * @schema Ec2SpotInstanceRequest#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2SpotInstanceRequest#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2SpotInstanceRequest#ValidFrom
   */
  readonly validFrom?: string;

  /**
   * @schema Ec2SpotInstanceRequest#ValidUntil
   */
  readonly validUntil?: string;

  /**
   * @schema Ec2SpotInstanceRequest#InstanceInterruptionBehavior
   */
  readonly instanceInterruptionBehavior?: string;

}

/**
 * Converts an object of type 'Ec2SpotInstanceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotInstanceRequest(obj: Ec2SpotInstanceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ActualBlockHourlyPrice': obj.actualBlockHourlyPrice,
    'AvailabilityZoneGroup': obj.availabilityZoneGroup,
    'BlockDurationMinutes': obj.blockDurationMinutes,
    'CreateTime': obj.createTime,
    'Fault': toJson_Ec2SpotInstanceStateFault(obj.fault),
    'InstanceId': obj.instanceId,
    'LaunchGroup': obj.launchGroup,
    'LaunchSpecification': toJson_Ec2LaunchSpecification(obj.launchSpecification),
    'LaunchedAvailabilityZone': obj.launchedAvailabilityZone,
    'ProductDescription': obj.productDescription,
    'SpotInstanceRequestId': obj.spotInstanceRequestId,
    'SpotPrice': obj.spotPrice,
    'State': obj.state,
    'Status': toJson_Ec2SpotInstanceStatus(obj.status),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'Type': obj.type,
    'ValidFrom': obj.validFrom,
    'ValidUntil': obj.validUntil,
    'InstanceInterruptionBehavior': obj.instanceInterruptionBehavior,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotPrice
 */
export interface Ec2SpotPrice {
  /**
   * @schema Ec2SpotPrice#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2SpotPrice#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2SpotPrice#ProductDescription
   */
  readonly productDescription?: string;

  /**
   * @schema Ec2SpotPrice#SpotPrice
   */
  readonly spotPrice?: string;

  /**
   * @schema Ec2SpotPrice#Timestamp
   */
  readonly timestamp?: string;

}

/**
 * Converts an object of type 'Ec2SpotPrice' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotPrice(obj: Ec2SpotPrice | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'InstanceType': obj.instanceType,
    'ProductDescription': obj.productDescription,
    'SpotPrice': obj.spotPrice,
    'Timestamp': obj.timestamp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StaleSecurityGroup
 */
export interface Ec2StaleSecurityGroup {
  /**
   * @schema Ec2StaleSecurityGroup#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2StaleSecurityGroup#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2StaleSecurityGroup#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2StaleSecurityGroup#StaleIpPermissions
   */
  readonly staleIpPermissions?: Ec2StaleIpPermission[];

  /**
   * @schema Ec2StaleSecurityGroup#StaleIpPermissionsEgress
   */
  readonly staleIpPermissionsEgress?: Ec2StaleIpPermission[];

  /**
   * @schema Ec2StaleSecurityGroup#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2StaleSecurityGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StaleSecurityGroup(obj: Ec2StaleSecurityGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'GroupId': obj.groupId,
    'GroupName': obj.groupName,
    'StaleIpPermissions': obj.staleIpPermissions?.map(y => toJson_Ec2StaleIpPermission(y)),
    'StaleIpPermissionsEgress': obj.staleIpPermissionsEgress?.map(y => toJson_Ec2StaleIpPermission(y)),
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StoreImageTaskResult
 */
export interface Ec2StoreImageTaskResult {
  /**
   * @schema Ec2StoreImageTaskResult#AmiId
   */
  readonly amiId?: string;

  /**
   * @schema Ec2StoreImageTaskResult#TaskStartTime
   */
  readonly taskStartTime?: string;

  /**
   * @schema Ec2StoreImageTaskResult#Bucket
   */
  readonly bucket?: string;

  /**
   * @schema Ec2StoreImageTaskResult#S3objectKey
   */
  readonly s3ObjectKey?: string;

  /**
   * @schema Ec2StoreImageTaskResult#ProgressPercentage
   */
  readonly progressPercentage?: number;

  /**
   * @schema Ec2StoreImageTaskResult#StoreTaskState
   */
  readonly storeTaskState?: string;

  /**
   * @schema Ec2StoreImageTaskResult#StoreTaskFailureReason
   */
  readonly storeTaskFailureReason?: string;

}

/**
 * Converts an object of type 'Ec2StoreImageTaskResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StoreImageTaskResult(obj: Ec2StoreImageTaskResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AmiId': obj.amiId,
    'TaskStartTime': obj.taskStartTime,
    'Bucket': obj.bucket,
    'S3objectKey': obj.s3ObjectKey,
    'ProgressPercentage': obj.progressPercentage,
    'StoreTaskState': obj.storeTaskState,
    'StoreTaskFailureReason': obj.storeTaskFailureReason,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TagDescription
 */
export interface Ec2TagDescription {
  /**
   * @schema Ec2TagDescription#Key
   */
  readonly key?: string;

  /**
   * @schema Ec2TagDescription#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TagDescription#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TagDescription#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2TagDescription' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TagDescription(obj: Ec2TagDescription | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'ResourceId': obj.resourceId,
    'ResourceType': obj.resourceType,
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayAttachment
 */
export interface Ec2TransitGatewayAttachment {
  /**
   * @schema Ec2TransitGatewayAttachment#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayAttachment#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2TransitGatewayAttachment#TransitGatewayOwnerId
   */
  readonly transitGatewayOwnerId?: string;

  /**
   * @schema Ec2TransitGatewayAttachment#ResourceOwnerId
   */
  readonly resourceOwnerId?: string;

  /**
   * @schema Ec2TransitGatewayAttachment#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayAttachment#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayAttachment#State
   */
  readonly state?: string;

  /**
   * @schema Ec2TransitGatewayAttachment#Association
   */
  readonly association?: Ec2TransitGatewayAttachmentAssociation;

  /**
   * @schema Ec2TransitGatewayAttachment#CreationTime
   */
  readonly creationTime?: string;

  /**
   * @schema Ec2TransitGatewayAttachment#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayAttachment(obj: Ec2TransitGatewayAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'TransitGatewayId': obj.transitGatewayId,
    'TransitGatewayOwnerId': obj.transitGatewayOwnerId,
    'ResourceOwnerId': obj.resourceOwnerId,
    'ResourceType': obj.resourceType,
    'ResourceId': obj.resourceId,
    'State': obj.state,
    'Association': toJson_Ec2TransitGatewayAttachmentAssociation(obj.association),
    'CreationTime': obj.creationTime,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeStatusItem
 */
export interface Ec2VolumeStatusItem {
  /**
   * @schema Ec2VolumeStatusItem#Actions
   */
  readonly actions?: Ec2VolumeStatusAction[];

  /**
   * @schema Ec2VolumeStatusItem#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2VolumeStatusItem#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2VolumeStatusItem#Events
   */
  readonly events?: Ec2VolumeStatusEvent[];

  /**
   * @schema Ec2VolumeStatusItem#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2VolumeStatusItem#VolumeStatus
   */
  readonly volumeStatus?: Ec2VolumeStatusInfo;

  /**
   * @schema Ec2VolumeStatusItem#AttachmentStatuses
   */
  readonly attachmentStatuses?: Ec2VolumeStatusAttachmentStatus[];

}

/**
 * Converts an object of type 'Ec2VolumeStatusItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeStatusItem(obj: Ec2VolumeStatusItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Actions': obj.actions?.map(y => toJson_Ec2VolumeStatusAction(y)),
    'AvailabilityZone': obj.availabilityZone,
    'OutpostArn': obj.outpostArn,
    'Events': obj.events?.map(y => toJson_Ec2VolumeStatusEvent(y)),
    'VolumeId': obj.volumeId,
    'VolumeStatus': toJson_Ec2VolumeStatusInfo(obj.volumeStatus),
    'AttachmentStatuses': obj.attachmentStatuses?.map(y => toJson_Ec2VolumeStatusAttachmentStatus(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeModification
 */
export interface Ec2VolumeModification {
  /**
   * @schema Ec2VolumeModification#VolumeId
   */
  readonly volumeId?: string;

  /**
   * @schema Ec2VolumeModification#ModificationState
   */
  readonly modificationState?: string;

  /**
   * @schema Ec2VolumeModification#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2VolumeModification#TargetSize
   */
  readonly targetSize?: number;

  /**
   * @schema Ec2VolumeModification#TargetIops
   */
  readonly targetIops?: number;

  /**
   * @schema Ec2VolumeModification#TargetVolumeType
   */
  readonly targetVolumeType?: string;

  /**
   * @schema Ec2VolumeModification#TargetThroughput
   */
  readonly targetThroughput?: number;

  /**
   * @schema Ec2VolumeModification#TargetMultiAttachEnabled
   */
  readonly targetMultiAttachEnabled?: boolean;

  /**
   * @schema Ec2VolumeModification#OriginalSize
   */
  readonly originalSize?: number;

  /**
   * @schema Ec2VolumeModification#OriginalIops
   */
  readonly originalIops?: number;

  /**
   * @schema Ec2VolumeModification#OriginalVolumeType
   */
  readonly originalVolumeType?: string;

  /**
   * @schema Ec2VolumeModification#OriginalThroughput
   */
  readonly originalThroughput?: number;

  /**
   * @schema Ec2VolumeModification#OriginalMultiAttachEnabled
   */
  readonly originalMultiAttachEnabled?: boolean;

  /**
   * @schema Ec2VolumeModification#Progress
   */
  readonly progress?: number;

  /**
   * @schema Ec2VolumeModification#StartTime
   */
  readonly startTime?: string;

  /**
   * @schema Ec2VolumeModification#EndTime
   */
  readonly endTime?: string;

}

/**
 * Converts an object of type 'Ec2VolumeModification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeModification(obj: Ec2VolumeModification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'VolumeId': obj.volumeId,
    'ModificationState': obj.modificationState,
    'StatusMessage': obj.statusMessage,
    'TargetSize': obj.targetSize,
    'TargetIops': obj.targetIops,
    'TargetVolumeType': obj.targetVolumeType,
    'TargetThroughput': obj.targetThroughput,
    'TargetMultiAttachEnabled': obj.targetMultiAttachEnabled,
    'OriginalSize': obj.originalSize,
    'OriginalIops': obj.originalIops,
    'OriginalVolumeType': obj.originalVolumeType,
    'OriginalThroughput': obj.originalThroughput,
    'OriginalMultiAttachEnabled': obj.originalMultiAttachEnabled,
    'Progress': obj.progress,
    'StartTime': obj.startTime,
    'EndTime': obj.endTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcClassicLink
 */
export interface Ec2VpcClassicLink {
  /**
   * @schema Ec2VpcClassicLink#ClassicLinkEnabled
   */
  readonly classicLinkEnabled?: boolean;

  /**
   * @schema Ec2VpcClassicLink#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2VpcClassicLink#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2VpcClassicLink' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcClassicLink(obj: Ec2VpcClassicLink | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClassicLinkEnabled': obj.classicLinkEnabled,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClassicLinkDnsSupport
 */
export interface Ec2ClassicLinkDnsSupport {
  /**
   * @schema Ec2ClassicLinkDnsSupport#ClassicLinkDnsSupported
   */
  readonly classicLinkDnsSupported?: boolean;

  /**
   * @schema Ec2ClassicLinkDnsSupport#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2ClassicLinkDnsSupport' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClassicLinkDnsSupport(obj: Ec2ClassicLinkDnsSupport | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClassicLinkDnsSupported': obj.classicLinkDnsSupported,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcEndpointConnection
 */
export interface Ec2VpcEndpointConnection {
  /**
   * @schema Ec2VpcEndpointConnection#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2VpcEndpointConnection#VpcEndpointId
   */
  readonly vpcEndpointId?: string;

  /**
   * @schema Ec2VpcEndpointConnection#VpcEndpointOwner
   */
  readonly vpcEndpointOwner?: string;

  /**
   * @schema Ec2VpcEndpointConnection#VpcEndpointState
   */
  readonly vpcEndpointState?: string;

  /**
   * @schema Ec2VpcEndpointConnection#CreationTimestamp
   */
  readonly creationTimestamp?: string;

  /**
   * @schema Ec2VpcEndpointConnection#DnsEntries
   */
  readonly dnsEntries?: Ec2DnsEntry[];

  /**
   * @schema Ec2VpcEndpointConnection#NetworkLoadBalancerArns
   */
  readonly networkLoadBalancerArns?: string[];

  /**
   * @schema Ec2VpcEndpointConnection#GatewayLoadBalancerArns
   */
  readonly gatewayLoadBalancerArns?: string[];

}

/**
 * Converts an object of type 'Ec2VpcEndpointConnection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcEndpointConnection(obj: Ec2VpcEndpointConnection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ServiceId': obj.serviceId,
    'VpcEndpointId': obj.vpcEndpointId,
    'VpcEndpointOwner': obj.vpcEndpointOwner,
    'VpcEndpointState': obj.vpcEndpointState,
    'CreationTimestamp': obj.creationTimestamp,
    'DnsEntries': obj.dnsEntries?.map(y => toJson_Ec2DnsEntry(y)),
    'NetworkLoadBalancerArns': obj.networkLoadBalancerArns?.map(y => y),
    'GatewayLoadBalancerArns': obj.gatewayLoadBalancerArns?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AllowedPrincipal
 */
export interface Ec2AllowedPrincipal {
  /**
   * @schema Ec2AllowedPrincipal#PrincipalType
   */
  readonly principalType?: string;

  /**
   * @schema Ec2AllowedPrincipal#Principal
   */
  readonly principal?: string;

}

/**
 * Converts an object of type 'Ec2AllowedPrincipal' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AllowedPrincipal(obj: Ec2AllowedPrincipal | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrincipalType': obj.principalType,
    'Principal': obj.principal,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ServiceDetail
 */
export interface Ec2ServiceDetail {
  /**
   * @schema Ec2ServiceDetail#ServiceName
   */
  readonly serviceName?: string;

  /**
   * @schema Ec2ServiceDetail#ServiceId
   */
  readonly serviceId?: string;

  /**
   * @schema Ec2ServiceDetail#ServiceType
   */
  readonly serviceType?: Ec2ServiceTypeDetail[];

  /**
   * @schema Ec2ServiceDetail#AvailabilityZones
   */
  readonly availabilityZones?: string[];

  /**
   * @schema Ec2ServiceDetail#Owner
   */
  readonly owner?: string;

  /**
   * @schema Ec2ServiceDetail#BaseEndpointDnsNames
   */
  readonly baseEndpointDnsNames?: string[];

  /**
   * @schema Ec2ServiceDetail#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2ServiceDetail#PrivateDnsNames
   */
  readonly privateDnsNames?: Ec2PrivateDnsDetails[];

  /**
   * @schema Ec2ServiceDetail#VpcEndpointPolicySupported
   */
  readonly vpcEndpointPolicySupported?: boolean;

  /**
   * @schema Ec2ServiceDetail#AcceptanceRequired
   */
  readonly acceptanceRequired?: boolean;

  /**
   * @schema Ec2ServiceDetail#ManagesVpcEndpoints
   */
  readonly managesVpcEndpoints?: boolean;

  /**
   * @schema Ec2ServiceDetail#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2ServiceDetail#PrivateDnsNameVerificationState
   */
  readonly privateDnsNameVerificationState?: string;

}

/**
 * Converts an object of type 'Ec2ServiceDetail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ServiceDetail(obj: Ec2ServiceDetail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ServiceName': obj.serviceName,
    'ServiceId': obj.serviceId,
    'ServiceType': obj.serviceType?.map(y => toJson_Ec2ServiceTypeDetail(y)),
    'AvailabilityZones': obj.availabilityZones?.map(y => y),
    'Owner': obj.owner,
    'BaseEndpointDnsNames': obj.baseEndpointDnsNames?.map(y => y),
    'PrivateDnsName': obj.privateDnsName,
    'PrivateDnsNames': obj.privateDnsNames?.map(y => toJson_Ec2PrivateDnsDetails(y)),
    'VpcEndpointPolicySupported': obj.vpcEndpointPolicySupported,
    'AcceptanceRequired': obj.acceptanceRequired,
    'ManagesVpcEndpoints': obj.managesVpcEndpoints,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'PrivateDnsNameVerificationState': obj.privateDnsNameVerificationState,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableFastSnapshotRestoreSuccessItem
 */
export interface Ec2DisableFastSnapshotRestoreSuccessItem {
  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#State
   */
  readonly state?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#StateTransitionReason
   */
  readonly stateTransitionReason?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#OwnerAlias
   */
  readonly ownerAlias?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#EnablingTime
   */
  readonly enablingTime?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#OptimizingTime
   */
  readonly optimizingTime?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#EnabledTime
   */
  readonly enabledTime?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#DisablingTime
   */
  readonly disablingTime?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreSuccessItem#DisabledTime
   */
  readonly disabledTime?: string;

}

/**
 * Converts an object of type 'Ec2DisableFastSnapshotRestoreSuccessItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableFastSnapshotRestoreSuccessItem(obj: Ec2DisableFastSnapshotRestoreSuccessItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SnapshotId': obj.snapshotId,
    'AvailabilityZone': obj.availabilityZone,
    'State': obj.state,
    'StateTransitionReason': obj.stateTransitionReason,
    'OwnerId': obj.ownerId,
    'OwnerAlias': obj.ownerAlias,
    'EnablingTime': obj.enablingTime,
    'OptimizingTime': obj.optimizingTime,
    'EnabledTime': obj.enabledTime,
    'DisablingTime': obj.disablingTime,
    'DisabledTime': obj.disabledTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableFastSnapshotRestoreErrorItem
 */
export interface Ec2DisableFastSnapshotRestoreErrorItem {
  /**
   * @schema Ec2DisableFastSnapshotRestoreErrorItem#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreErrorItem#FastSnapshotRestoreStateErrors
   */
  readonly fastSnapshotRestoreStateErrors?: Ec2DisableFastSnapshotRestoreStateErrorItem[];

}

/**
 * Converts an object of type 'Ec2DisableFastSnapshotRestoreErrorItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableFastSnapshotRestoreErrorItem(obj: Ec2DisableFastSnapshotRestoreErrorItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SnapshotId': obj.snapshotId,
    'FastSnapshotRestoreStateErrors': obj.fastSnapshotRestoreStateErrors?.map(y => toJson_Ec2DisableFastSnapshotRestoreStateErrorItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayPropagation
 */
export interface Ec2TransitGatewayPropagation {
  /**
   * @schema Ec2TransitGatewayPropagation#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayPropagation#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayPropagation#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayPropagation#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2TransitGatewayPropagation#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayPropagation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayPropagation(obj: Ec2TransitGatewayPropagation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'ResourceId': obj.resourceId,
    'ResourceType': obj.resourceType,
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceEventWindowDisassociationRequest
 */
export interface Ec2InstanceEventWindowDisassociationRequest {
  /**
   * @schema Ec2InstanceEventWindowDisassociationRequest#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2InstanceEventWindowDisassociationRequest#InstanceTags
   */
  readonly instanceTags?: Ec2Tag[];

  /**
   * @schema Ec2InstanceEventWindowDisassociationRequest#DedicatedHostIds
   */
  readonly dedicatedHostIds?: string[];

}

/**
 * Converts an object of type 'Ec2InstanceEventWindowDisassociationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceEventWindowDisassociationRequest(obj: Ec2InstanceEventWindowDisassociationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'InstanceTags': obj.instanceTags?.map(y => toJson_Ec2Tag(y)),
    'DedicatedHostIds': obj.dedicatedHostIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableFastSnapshotRestoreSuccessItem
 */
export interface Ec2EnableFastSnapshotRestoreSuccessItem {
  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#State
   */
  readonly state?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#StateTransitionReason
   */
  readonly stateTransitionReason?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#OwnerAlias
   */
  readonly ownerAlias?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#EnablingTime
   */
  readonly enablingTime?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#OptimizingTime
   */
  readonly optimizingTime?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#EnabledTime
   */
  readonly enabledTime?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#DisablingTime
   */
  readonly disablingTime?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreSuccessItem#DisabledTime
   */
  readonly disabledTime?: string;

}

/**
 * Converts an object of type 'Ec2EnableFastSnapshotRestoreSuccessItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableFastSnapshotRestoreSuccessItem(obj: Ec2EnableFastSnapshotRestoreSuccessItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SnapshotId': obj.snapshotId,
    'AvailabilityZone': obj.availabilityZone,
    'State': obj.state,
    'StateTransitionReason': obj.stateTransitionReason,
    'OwnerId': obj.ownerId,
    'OwnerAlias': obj.ownerAlias,
    'EnablingTime': obj.enablingTime,
    'OptimizingTime': obj.optimizingTime,
    'EnabledTime': obj.enabledTime,
    'DisablingTime': obj.disablingTime,
    'DisabledTime': obj.disabledTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableFastSnapshotRestoreErrorItem
 */
export interface Ec2EnableFastSnapshotRestoreErrorItem {
  /**
   * @schema Ec2EnableFastSnapshotRestoreErrorItem#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreErrorItem#FastSnapshotRestoreStateErrors
   */
  readonly fastSnapshotRestoreStateErrors?: Ec2EnableFastSnapshotRestoreStateErrorItem[];

}

/**
 * Converts an object of type 'Ec2EnableFastSnapshotRestoreErrorItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableFastSnapshotRestoreErrorItem(obj: Ec2EnableFastSnapshotRestoreErrorItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SnapshotId': obj.snapshotId,
    'FastSnapshotRestoreStateErrors': obj.fastSnapshotRestoreStateErrors?.map(y => toJson_Ec2EnableFastSnapshotRestoreStateErrorItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientCertificateRevocationListStatus
 */
export interface Ec2ClientCertificateRevocationListStatus {
  /**
   * @schema Ec2ClientCertificateRevocationListStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2ClientCertificateRevocationListStatus#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2ClientCertificateRevocationListStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientCertificateRevocationListStatus(obj: Ec2ClientCertificateRevocationListStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportTaskS3LocationRequest
 */
export interface Ec2ExportTaskS3LocationRequest {
  /**
   * @schema Ec2ExportTaskS3LocationRequest#S3Bucket
   */
  readonly s3Bucket?: string;

  /**
   * @schema Ec2ExportTaskS3LocationRequest#S3Prefix
   */
  readonly s3Prefix?: string;

}

/**
 * Converts an object of type 'Ec2ExportTaskS3LocationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportTaskS3LocationRequest(obj: Ec2ExportTaskS3LocationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'S3Bucket': obj.s3Bucket,
    'S3Prefix': obj.s3Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportTaskS3Location
 */
export interface Ec2ExportTaskS3Location {
  /**
   * @schema Ec2ExportTaskS3Location#S3Bucket
   */
  readonly s3Bucket?: string;

  /**
   * @schema Ec2ExportTaskS3Location#S3Prefix
   */
  readonly s3Prefix?: string;

}

/**
 * Converts an object of type 'Ec2ExportTaskS3Location' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportTaskS3Location(obj: Ec2ExportTaskS3Location | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'S3Bucket': obj.s3Bucket,
    'S3Prefix': obj.s3Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociatedRole
 */
export interface Ec2AssociatedRole {
  /**
   * @schema Ec2AssociatedRole#AssociatedRoleArn
   */
  readonly associatedRoleArn?: string;

  /**
   * @schema Ec2AssociatedRole#CertificateS3BucketName
   */
  readonly certificateS3BucketName?: string;

  /**
   * @schema Ec2AssociatedRole#CertificateS3ObjectKey
   */
  readonly certificateS3ObjectKey?: string;

  /**
   * @schema Ec2AssociatedRole#EncryptionKmsKeyId
   */
  readonly encryptionKmsKeyId?: string;

}

/**
 * Converts an object of type 'Ec2AssociatedRole' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociatedRole(obj: Ec2AssociatedRole | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociatedRoleArn': obj.associatedRoleArn,
    'CertificateS3BucketName': obj.certificateS3BucketName,
    'CertificateS3ObjectKey': obj.certificateS3ObjectKey,
    'EncryptionKmsKeyId': obj.encryptionKmsKeyId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv6CidrAssociation
 */
export interface Ec2Ipv6CidrAssociation {
  /**
   * @schema Ec2Ipv6CidrAssociation#Ipv6Cidr
   */
  readonly ipv6Cidr?: string;

  /**
   * @schema Ec2Ipv6CidrAssociation#AssociatedResource
   */
  readonly associatedResource?: string;

}

/**
 * Converts an object of type 'Ec2Ipv6CidrAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv6CidrAssociation(obj: Ec2Ipv6CidrAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Cidr': obj.ipv6Cidr,
    'AssociatedResource': obj.associatedResource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceUsage
 */
export interface Ec2InstanceUsage {
  /**
   * @schema Ec2InstanceUsage#AccountId
   */
  readonly accountId?: string;

  /**
   * @schema Ec2InstanceUsage#UsedInstanceCount
   */
  readonly usedInstanceCount?: number;

}

/**
 * Converts an object of type 'Ec2InstanceUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceUsage(obj: Ec2InstanceUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AccountId': obj.accountId,
    'UsedInstanceCount': obj.usedInstanceCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CoipAddressUsage
 */
export interface Ec2CoipAddressUsage {
  /**
   * @schema Ec2CoipAddressUsage#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2CoipAddressUsage#AwsAccountId
   */
  readonly awsAccountId?: string;

  /**
   * @schema Ec2CoipAddressUsage#AwsService
   */
  readonly awsService?: string;

  /**
   * @schema Ec2CoipAddressUsage#CoIp
   */
  readonly coIp?: string;

}

/**
 * Converts an object of type 'Ec2CoipAddressUsage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CoipAddressUsage(obj: Ec2CoipAddressUsage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'AwsAccountId': obj.awsAccountId,
    'AwsService': obj.awsService,
    'CoIp': obj.coIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceFamilyCreditSpecification
 */
export interface Ec2InstanceFamilyCreditSpecification {
  /**
   * @schema Ec2InstanceFamilyCreditSpecification#InstanceFamily
   */
  readonly instanceFamily?: string;

  /**
   * @schema Ec2InstanceFamilyCreditSpecification#CpuCredits
   */
  readonly cpuCredits?: string;

}

/**
 * Converts an object of type 'Ec2InstanceFamilyCreditSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceFamilyCreditSpecification(obj: Ec2InstanceFamilyCreditSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceFamily': obj.instanceFamily,
    'CpuCredits': obj.cpuCredits,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IntegrateServices
 */
export interface Ec2IntegrateServices {
  /**
   * @schema Ec2IntegrateServices#AthenaIntegrations
   */
  readonly athenaIntegrations?: Ec2AthenaIntegration[];

}

/**
 * Converts an object of type 'Ec2IntegrateServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IntegrateServices(obj: Ec2IntegrateServices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AthenaIntegrations': obj.athenaIntegrations?.map(y => toJson_Ec2AthenaIntegration(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CapacityReservationGroup
 */
export interface Ec2CapacityReservationGroup {
  /**
   * @schema Ec2CapacityReservationGroup#GroupArn
   */
  readonly groupArn?: string;

  /**
   * @schema Ec2CapacityReservationGroup#OwnerId
   */
  readonly ownerId?: string;

}

/**
 * Converts an object of type 'Ec2CapacityReservationGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CapacityReservationGroup(obj: Ec2CapacityReservationGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupArn': obj.groupArn,
    'OwnerId': obj.ownerId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Purchase
 */
export interface Ec2Purchase {
  /**
   * @schema Ec2Purchase#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2Purchase#Duration
   */
  readonly duration?: number;

  /**
   * @schema Ec2Purchase#HostIdSet
   */
  readonly hostIdSet?: string[];

  /**
   * @schema Ec2Purchase#HostReservationId
   */
  readonly hostReservationId?: string;

  /**
   * @schema Ec2Purchase#HourlyPrice
   */
  readonly hourlyPrice?: string;

  /**
   * @schema Ec2Purchase#InstanceFamily
   */
  readonly instanceFamily?: string;

  /**
   * @schema Ec2Purchase#PaymentOption
   */
  readonly paymentOption?: string;

  /**
   * @schema Ec2Purchase#UpfrontPrice
   */
  readonly upfrontPrice?: string;

}

/**
 * Converts an object of type 'Ec2Purchase' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Purchase(obj: Ec2Purchase | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CurrencyCode': obj.currencyCode,
    'Duration': obj.duration,
    'HostIdSet': obj.hostIdSet?.map(y => y),
    'HostReservationId': obj.hostReservationId,
    'HourlyPrice': obj.hourlyPrice,
    'InstanceFamily': obj.instanceFamily,
    'PaymentOption': obj.paymentOption,
    'UpfrontPrice': obj.upfrontPrice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResponseLaunchTemplateData
 */
export interface Ec2ResponseLaunchTemplateData {
  /**
   * @schema Ec2ResponseLaunchTemplateData#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2ResponseLaunchTemplateData#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2ResponseLaunchTemplateData#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2LaunchTemplateIamInstanceProfileSpecification;

  /**
   * @schema Ec2ResponseLaunchTemplateData#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2LaunchTemplateBlockDeviceMapping[];

  /**
   * @schema Ec2ResponseLaunchTemplateData#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2LaunchTemplateInstanceNetworkInterfaceSpecification[];

  /**
   * @schema Ec2ResponseLaunchTemplateData#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ResponseLaunchTemplateData#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ResponseLaunchTemplateData#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2ResponseLaunchTemplateData#Monitoring
   */
  readonly monitoring?: Ec2LaunchTemplatesMonitoring;

  /**
   * @schema Ec2ResponseLaunchTemplateData#Placement
   */
  readonly placement?: Ec2LaunchTemplatePlacement;

  /**
   * @schema Ec2ResponseLaunchTemplateData#RamDiskId
   */
  readonly ramDiskId?: string;

  /**
   * @schema Ec2ResponseLaunchTemplateData#DisableApiTermination
   */
  readonly disableApiTermination?: boolean;

  /**
   * @schema Ec2ResponseLaunchTemplateData#InstanceInitiatedShutdownBehavior
   */
  readonly instanceInitiatedShutdownBehavior?: string;

  /**
   * @schema Ec2ResponseLaunchTemplateData#UserData
   */
  readonly userData?: string;

  /**
   * @schema Ec2ResponseLaunchTemplateData#TagSpecifications
   */
  readonly tagSpecifications?: Ec2LaunchTemplateTagSpecification[];

  /**
   * @schema Ec2ResponseLaunchTemplateData#ElasticGpuSpecifications
   */
  readonly elasticGpuSpecifications?: Ec2ElasticGpuSpecificationResponse[];

  /**
   * @schema Ec2ResponseLaunchTemplateData#ElasticInferenceAccelerators
   */
  readonly elasticInferenceAccelerators?: Ec2LaunchTemplateElasticInferenceAcceleratorResponse[];

  /**
   * @schema Ec2ResponseLaunchTemplateData#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2ResponseLaunchTemplateData#SecurityGroups
   */
  readonly securityGroups?: string[];

  /**
   * @schema Ec2ResponseLaunchTemplateData#InstanceMarketOptions
   */
  readonly instanceMarketOptions?: Ec2LaunchTemplateInstanceMarketOptions;

  /**
   * @schema Ec2ResponseLaunchTemplateData#CreditSpecification
   */
  readonly creditSpecification?: Ec2CreditSpecification;

  /**
   * @schema Ec2ResponseLaunchTemplateData#CpuOptions
   */
  readonly cpuOptions?: Ec2LaunchTemplateCpuOptions;

  /**
   * @schema Ec2ResponseLaunchTemplateData#CapacityReservationSpecification
   */
  readonly capacityReservationSpecification?: Ec2LaunchTemplateCapacityReservationSpecificationResponse;

  /**
   * @schema Ec2ResponseLaunchTemplateData#LicenseSpecifications
   */
  readonly licenseSpecifications?: Ec2LaunchTemplateLicenseConfiguration[];

  /**
   * @schema Ec2ResponseLaunchTemplateData#HibernationOptions
   */
  readonly hibernationOptions?: Ec2LaunchTemplateHibernationOptions;

  /**
   * @schema Ec2ResponseLaunchTemplateData#MetadataOptions
   */
  readonly metadataOptions?: Ec2LaunchTemplateInstanceMetadataOptions;

  /**
   * @schema Ec2ResponseLaunchTemplateData#EnclaveOptions
   */
  readonly enclaveOptions?: Ec2LaunchTemplateEnclaveOptions;

}

/**
 * Converts an object of type 'Ec2ResponseLaunchTemplateData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResponseLaunchTemplateData(obj: Ec2ResponseLaunchTemplateData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KernelId': obj.kernelId,
    'EbsOptimized': obj.ebsOptimized,
    'IamInstanceProfile': toJson_Ec2LaunchTemplateIamInstanceProfileSpecification(obj.iamInstanceProfile),
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2LaunchTemplateBlockDeviceMapping(y)),
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2LaunchTemplateInstanceNetworkInterfaceSpecification(y)),
    'ImageId': obj.imageId,
    'InstanceType': obj.instanceType,
    'KeyName': obj.keyName,
    'Monitoring': toJson_Ec2LaunchTemplatesMonitoring(obj.monitoring),
    'Placement': toJson_Ec2LaunchTemplatePlacement(obj.placement),
    'RamDiskId': obj.ramDiskId,
    'DisableApiTermination': obj.disableApiTermination,
    'InstanceInitiatedShutdownBehavior': obj.instanceInitiatedShutdownBehavior,
    'UserData': obj.userData,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2LaunchTemplateTagSpecification(y)),
    'ElasticGpuSpecifications': obj.elasticGpuSpecifications?.map(y => toJson_Ec2ElasticGpuSpecificationResponse(y)),
    'ElasticInferenceAccelerators': obj.elasticInferenceAccelerators?.map(y => toJson_Ec2LaunchTemplateElasticInferenceAcceleratorResponse(y)),
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'SecurityGroups': obj.securityGroups?.map(y => y),
    'InstanceMarketOptions': toJson_Ec2LaunchTemplateInstanceMarketOptions(obj.instanceMarketOptions),
    'CreditSpecification': toJson_Ec2CreditSpecification(obj.creditSpecification),
    'CpuOptions': toJson_Ec2LaunchTemplateCpuOptions(obj.cpuOptions),
    'CapacityReservationSpecification': toJson_Ec2LaunchTemplateCapacityReservationSpecificationResponse(obj.capacityReservationSpecification),
    'LicenseSpecifications': obj.licenseSpecifications?.map(y => toJson_Ec2LaunchTemplateLicenseConfiguration(y)),
    'HibernationOptions': toJson_Ec2LaunchTemplateHibernationOptions(obj.hibernationOptions),
    'MetadataOptions': toJson_Ec2LaunchTemplateInstanceMetadataOptions(obj.metadataOptions),
    'EnclaveOptions': toJson_Ec2LaunchTemplateEnclaveOptions(obj.enclaveOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PrefixListAssociation
 */
export interface Ec2PrefixListAssociation {
  /**
   * @schema Ec2PrefixListAssociation#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2PrefixListAssociation#ResourceOwner
   */
  readonly resourceOwner?: string;

}

/**
 * Converts an object of type 'Ec2PrefixListAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PrefixListAssociation(obj: Ec2PrefixListAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ResourceId': obj.resourceId,
    'ResourceOwner': obj.resourceOwner,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PrefixListEntry
 */
export interface Ec2PrefixListEntry {
  /**
   * @schema Ec2PrefixListEntry#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2PrefixListEntry#Description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'Ec2PrefixListEntry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PrefixListEntry(obj: Ec2PrefixListEntry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservationValue
 */
export interface Ec2ReservationValue {
  /**
   * @schema Ec2ReservationValue#HourlyPrice
   */
  readonly hourlyPrice?: string;

  /**
   * @schema Ec2ReservationValue#RemainingTotalValue
   */
  readonly remainingTotalValue?: string;

  /**
   * @schema Ec2ReservationValue#RemainingUpfrontValue
   */
  readonly remainingUpfrontValue?: string;

}

/**
 * Converts an object of type 'Ec2ReservationValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservationValue(obj: Ec2ReservationValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HourlyPrice': obj.hourlyPrice,
    'RemainingTotalValue': obj.remainingTotalValue,
    'RemainingUpfrontValue': obj.remainingUpfrontValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstanceReservationValue
 */
export interface Ec2ReservedInstanceReservationValue {
  /**
   * @schema Ec2ReservedInstanceReservationValue#ReservationValue
   */
  readonly reservationValue?: Ec2ReservationValue;

  /**
   * @schema Ec2ReservedInstanceReservationValue#ReservedInstanceId
   */
  readonly reservedInstanceId?: string;

}

/**
 * Converts an object of type 'Ec2ReservedInstanceReservationValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstanceReservationValue(obj: Ec2ReservedInstanceReservationValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservationValue': toJson_Ec2ReservationValue(obj.reservationValue),
    'ReservedInstanceId': obj.reservedInstanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TargetReservationValue
 */
export interface Ec2TargetReservationValue {
  /**
   * @schema Ec2TargetReservationValue#ReservationValue
   */
  readonly reservationValue?: Ec2ReservationValue;

  /**
   * @schema Ec2TargetReservationValue#TargetConfiguration
   */
  readonly targetConfiguration?: Ec2TargetConfiguration;

}

/**
 * Converts an object of type 'Ec2TargetReservationValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TargetReservationValue(obj: Ec2TargetReservationValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservationValue': toJson_Ec2ReservationValue(obj.reservationValue),
    'TargetConfiguration': toJson_Ec2TargetConfiguration(obj.targetConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayAttachmentPropagation
 */
export interface Ec2TransitGatewayAttachmentPropagation {
  /**
   * @schema Ec2TransitGatewayAttachmentPropagation#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2TransitGatewayAttachmentPropagation#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayAttachmentPropagation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayAttachmentPropagation(obj: Ec2TransitGatewayAttachmentPropagation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastDomainAssociation
 */
export interface Ec2TransitGatewayMulticastDomainAssociation {
  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociation#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociation#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociation#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociation#ResourceOwnerId
   */
  readonly resourceOwnerId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainAssociation#Subnet
   */
  readonly subnet?: Ec2SubnetAssociation;

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastDomainAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastDomainAssociation(obj: Ec2TransitGatewayMulticastDomainAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'ResourceId': obj.resourceId,
    'ResourceType': obj.resourceType,
    'ResourceOwnerId': obj.resourceOwnerId,
    'Subnet': toJson_Ec2SubnetAssociation(obj.subnet),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayRouteTableAssociation
 */
export interface Ec2TransitGatewayRouteTableAssociation {
  /**
   * @schema Ec2TransitGatewayRouteTableAssociation#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayRouteTableAssociation#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayRouteTableAssociation#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayRouteTableAssociation#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayRouteTableAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayRouteTableAssociation(obj: Ec2TransitGatewayRouteTableAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'ResourceId': obj.resourceId,
    'ResourceType': obj.resourceType,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayRouteTablePropagation
 */
export interface Ec2TransitGatewayRouteTablePropagation {
  /**
   * @schema Ec2TransitGatewayRouteTablePropagation#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayRouteTablePropagation#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayRouteTablePropagation#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayRouteTablePropagation#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayRouteTablePropagation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayRouteTablePropagation(obj: Ec2TransitGatewayRouteTablePropagation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'ResourceId': obj.resourceId,
    'ResourceType': obj.resourceType,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientData
 */
export interface Ec2ClientData {
  /**
   * @schema Ec2ClientData#Comment
   */
  readonly comment?: string;

  /**
   * @schema Ec2ClientData#UploadEnd
   */
  readonly uploadEnd?: string;

  /**
   * @schema Ec2ClientData#UploadSize
   */
  readonly uploadSize?: number;

  /**
   * @schema Ec2ClientData#UploadStart
   */
  readonly uploadStart?: string;

}

/**
 * Converts an object of type 'Ec2ClientData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientData(obj: Ec2ClientData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Comment': obj.comment,
    'UploadEnd': obj.uploadEnd,
    'UploadSize': obj.uploadSize,
    'UploadStart': obj.uploadStart,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImageDiskContainer
 */
export interface Ec2ImageDiskContainer {
  /**
   * @schema Ec2ImageDiskContainer#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImageDiskContainer#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2ImageDiskContainer#Format
   */
  readonly format?: string;

  /**
   * @schema Ec2ImageDiskContainer#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2ImageDiskContainer#Url
   */
  readonly url?: string;

  /**
   * @schema Ec2ImageDiskContainer#UserBucket
   */
  readonly userBucket?: Ec2UserBucket;

}

/**
 * Converts an object of type 'Ec2ImageDiskContainer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImageDiskContainer(obj: Ec2ImageDiskContainer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'DeviceName': obj.deviceName,
    'Format': obj.format,
    'SnapshotId': obj.snapshotId,
    'Url': obj.url,
    'UserBucket': toJson_Ec2UserBucket(obj.userBucket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportImageLicenseConfigurationRequest
 */
export interface Ec2ImportImageLicenseConfigurationRequest {
  /**
   * @schema Ec2ImportImageLicenseConfigurationRequest#LicenseConfigurationArn
   */
  readonly licenseConfigurationArn?: string;

}

/**
 * Converts an object of type 'Ec2ImportImageLicenseConfigurationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportImageLicenseConfigurationRequest(obj: Ec2ImportImageLicenseConfigurationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LicenseConfigurationArn': obj.licenseConfigurationArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SnapshotDetail
 */
export interface Ec2SnapshotDetail {
  /**
   * @schema Ec2SnapshotDetail#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2SnapshotDetail#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2SnapshotDetail#DiskImageSize
   */
  readonly diskImageSize?: number;

  /**
   * @schema Ec2SnapshotDetail#Format
   */
  readonly format?: string;

  /**
   * @schema Ec2SnapshotDetail#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2SnapshotDetail#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2SnapshotDetail#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2SnapshotDetail#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2SnapshotDetail#Url
   */
  readonly url?: string;

  /**
   * @schema Ec2SnapshotDetail#UserBucket
   */
  readonly userBucket?: Ec2UserBucketDetails;

}

/**
 * Converts an object of type 'Ec2SnapshotDetail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SnapshotDetail(obj: Ec2SnapshotDetail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'DeviceName': obj.deviceName,
    'DiskImageSize': obj.diskImageSize,
    'Format': obj.format,
    'Progress': obj.progress,
    'SnapshotId': obj.snapshotId,
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'Url': obj.url,
    'UserBucket': toJson_Ec2UserBucketDetails(obj.userBucket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportImageLicenseConfigurationResponse
 */
export interface Ec2ImportImageLicenseConfigurationResponse {
  /**
   * @schema Ec2ImportImageLicenseConfigurationResponse#LicenseConfigurationArn
   */
  readonly licenseConfigurationArn?: string;

}

/**
 * Converts an object of type 'Ec2ImportImageLicenseConfigurationResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportImageLicenseConfigurationResponse(obj: Ec2ImportImageLicenseConfigurationResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LicenseConfigurationArn': obj.licenseConfigurationArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DiskImage
 */
export interface Ec2DiskImage {
  /**
   * @schema Ec2DiskImage#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2DiskImage#Image
   */
  readonly image?: Ec2DiskImageDetail;

  /**
   * @schema Ec2DiskImage#Volume
   */
  readonly volume?: Ec2VolumeDetail;

}

/**
 * Converts an object of type 'Ec2DiskImage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DiskImage(obj: Ec2DiskImage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'Image': toJson_Ec2DiskImageDetail(obj.image),
    'Volume': toJson_Ec2VolumeDetail(obj.volume),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportInstanceLaunchSpecification
 */
export interface Ec2ImportInstanceLaunchSpecification {
  /**
   * @schema Ec2ImportInstanceLaunchSpecification#AdditionalInfo
   */
  readonly additionalInfo?: string;

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#Architecture
   */
  readonly architecture?: string;

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#GroupIds
   */
  readonly groupIds?: string[];

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#GroupNames
   */
  readonly groupNames?: string[];

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#InstanceInitiatedShutdownBehavior
   */
  readonly instanceInitiatedShutdownBehavior?: string;

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#Monitoring
   */
  readonly monitoring?: boolean;

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#Placement
   */
  readonly placement?: Ec2Placement;

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2ImportInstanceLaunchSpecification#UserData
   */
  readonly userData?: Ec2UserData;

}

/**
 * Converts an object of type 'Ec2ImportInstanceLaunchSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportInstanceLaunchSpecification(obj: Ec2ImportInstanceLaunchSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AdditionalInfo': obj.additionalInfo,
    'Architecture': obj.architecture,
    'GroupIds': obj.groupIds?.map(y => y),
    'GroupNames': obj.groupNames?.map(y => y),
    'InstanceInitiatedShutdownBehavior': obj.instanceInitiatedShutdownBehavior,
    'InstanceType': obj.instanceType,
    'Monitoring': obj.monitoring,
    'Placement': toJson_Ec2Placement(obj.placement),
    'PrivateIpAddress': obj.privateIpAddress,
    'SubnetId': obj.subnetId,
    'UserData': toJson_Ec2UserData(obj.userData),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SnapshotDiskContainer
 */
export interface Ec2SnapshotDiskContainer {
  /**
   * @schema Ec2SnapshotDiskContainer#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2SnapshotDiskContainer#Format
   */
  readonly format?: string;

  /**
   * @schema Ec2SnapshotDiskContainer#Url
   */
  readonly url?: string;

  /**
   * @schema Ec2SnapshotDiskContainer#UserBucket
   */
  readonly userBucket?: Ec2UserBucket;

}

/**
 * Converts an object of type 'Ec2SnapshotDiskContainer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SnapshotDiskContainer(obj: Ec2SnapshotDiskContainer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'Format': obj.format,
    'Url': obj.url,
    'UserBucket': toJson_Ec2UserBucket(obj.userBucket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SnapshotTaskDetail
 */
export interface Ec2SnapshotTaskDetail {
  /**
   * @schema Ec2SnapshotTaskDetail#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2SnapshotTaskDetail#DiskImageSize
   */
  readonly diskImageSize?: number;

  /**
   * @schema Ec2SnapshotTaskDetail#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2SnapshotTaskDetail#Format
   */
  readonly format?: string;

  /**
   * @schema Ec2SnapshotTaskDetail#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2SnapshotTaskDetail#Progress
   */
  readonly progress?: string;

  /**
   * @schema Ec2SnapshotTaskDetail#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2SnapshotTaskDetail#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2SnapshotTaskDetail#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2SnapshotTaskDetail#Url
   */
  readonly url?: string;

  /**
   * @schema Ec2SnapshotTaskDetail#UserBucket
   */
  readonly userBucket?: Ec2UserBucketDetails;

}

/**
 * Converts an object of type 'Ec2SnapshotTaskDetail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SnapshotTaskDetail(obj: Ec2SnapshotTaskDetail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'DiskImageSize': obj.diskImageSize,
    'Encrypted': obj.encrypted,
    'Format': obj.format,
    'KmsKeyId': obj.kmsKeyId,
    'Progress': obj.progress,
    'SnapshotId': obj.snapshotId,
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'Url': obj.url,
    'UserBucket': toJson_Ec2UserBucketDetails(obj.userBucket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DiskImageDetail
 */
export interface Ec2DiskImageDetail {
  /**
   * @schema Ec2DiskImageDetail#Bytes
   */
  readonly bytes?: number;

  /**
   * @schema Ec2DiskImageDetail#Format
   */
  readonly format?: string;

  /**
   * @schema Ec2DiskImageDetail#ImportManifestUrl
   */
  readonly importManifestUrl?: string;

}

/**
 * Converts an object of type 'Ec2DiskImageDetail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DiskImageDetail(obj: Ec2DiskImageDetail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Bytes': obj.bytes,
    'Format': obj.format,
    'ImportManifestUrl': obj.importManifestUrl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeDetail
 */
export interface Ec2VolumeDetail {
  /**
   * @schema Ec2VolumeDetail#Size
   */
  readonly size?: number;

}

/**
 * Converts an object of type 'Ec2VolumeDetail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeDetail(obj: Ec2VolumeDetail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Size': obj.size,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DnsServersOptionsModifyStructure
 */
export interface Ec2DnsServersOptionsModifyStructure {
  /**
   * @schema Ec2DnsServersOptionsModifyStructure#CustomDnsServers
   */
  readonly customDnsServers?: string[];

  /**
   * @schema Ec2DnsServersOptionsModifyStructure#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2DnsServersOptionsModifyStructure' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DnsServersOptionsModifyStructure(obj: Ec2DnsServersOptionsModifyStructure | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CustomDnsServers': obj.customDnsServers?.map(y => y),
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LoadPermissionModifications
 */
export interface Ec2LoadPermissionModifications {
  /**
   * @schema Ec2LoadPermissionModifications#Add
   */
  readonly add?: Ec2LoadPermissionRequest[];

  /**
   * @schema Ec2LoadPermissionModifications#Remove
   */
  readonly remove?: Ec2LoadPermissionRequest[];

}

/**
 * Converts an object of type 'Ec2LoadPermissionModifications' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LoadPermissionModifications(obj: Ec2LoadPermissionModifications | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Add': obj.add?.map(y => toJson_Ec2LoadPermissionRequest(y)),
    'Remove': obj.remove?.map(y => toJson_Ec2LoadPermissionRequest(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchPermissionModifications
 */
export interface Ec2LaunchPermissionModifications {
  /**
   * @schema Ec2LaunchPermissionModifications#Add
   */
  readonly add?: Ec2LaunchPermission[];

  /**
   * @schema Ec2LaunchPermissionModifications#Remove
   */
  readonly remove?: Ec2LaunchPermission[];

}

/**
 * Converts an object of type 'Ec2LaunchPermissionModifications' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchPermissionModifications(obj: Ec2LaunchPermissionModifications | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Add': obj.add?.map(y => toJson_Ec2LaunchPermission(y)),
    'Remove': obj.remove?.map(y => toJson_Ec2LaunchPermission(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceBlockDeviceMappingSpecification
 */
export interface Ec2InstanceBlockDeviceMappingSpecification {
  /**
   * @schema Ec2InstanceBlockDeviceMappingSpecification#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2InstanceBlockDeviceMappingSpecification#Ebs
   */
  readonly ebs?: Ec2EbsInstanceBlockDeviceSpecification;

  /**
   * @schema Ec2InstanceBlockDeviceMappingSpecification#NoDevice
   */
  readonly noDevice?: string;

  /**
   * @schema Ec2InstanceBlockDeviceMappingSpecification#VirtualName
   */
  readonly virtualName?: string;

}

/**
 * Converts an object of type 'Ec2InstanceBlockDeviceMappingSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceBlockDeviceMappingSpecification(obj: Ec2InstanceBlockDeviceMappingSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeviceName': obj.deviceName,
    'Ebs': toJson_Ec2EbsInstanceBlockDeviceSpecification(obj.ebs),
    'NoDevice': obj.noDevice,
    'VirtualName': obj.virtualName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2BlobAttributeValue
 */
export interface Ec2BlobAttributeValue {
  /**
   * @schema Ec2BlobAttributeValue#Value
   */
  readonly value?: any;

}

/**
 * Converts an object of type 'Ec2BlobAttributeValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2BlobAttributeValue(obj: Ec2BlobAttributeValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CapacityReservationSpecification
 */
export interface Ec2CapacityReservationSpecification {
  /**
   * @schema Ec2CapacityReservationSpecification#CapacityReservationPreference
   */
  readonly capacityReservationPreference?: string;

  /**
   * @schema Ec2CapacityReservationSpecification#CapacityReservationTarget
   */
  readonly capacityReservationTarget?: Ec2CapacityReservationTarget;

}

/**
 * Converts an object of type 'Ec2CapacityReservationSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CapacityReservationSpecification(obj: Ec2CapacityReservationSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationPreference': obj.capacityReservationPreference,
    'CapacityReservationTarget': toJson_Ec2CapacityReservationTarget(obj.capacityReservationTarget),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceCreditSpecificationRequest
 */
export interface Ec2InstanceCreditSpecificationRequest {
  /**
   * @schema Ec2InstanceCreditSpecificationRequest#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2InstanceCreditSpecificationRequest#CpuCredits
   */
  readonly cpuCredits?: string;

}

/**
 * Converts an object of type 'Ec2InstanceCreditSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceCreditSpecificationRequest(obj: Ec2InstanceCreditSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'CpuCredits': obj.cpuCredits,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SuccessfulInstanceCreditSpecificationItem
 */
export interface Ec2SuccessfulInstanceCreditSpecificationItem {
  /**
   * @schema Ec2SuccessfulInstanceCreditSpecificationItem#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2SuccessfulInstanceCreditSpecificationItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SuccessfulInstanceCreditSpecificationItem(obj: Ec2SuccessfulInstanceCreditSpecificationItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnsuccessfulInstanceCreditSpecificationItem
 */
export interface Ec2UnsuccessfulInstanceCreditSpecificationItem {
  /**
   * @schema Ec2UnsuccessfulInstanceCreditSpecificationItem#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2UnsuccessfulInstanceCreditSpecificationItem#Error
   */
  readonly error?: Ec2UnsuccessfulInstanceCreditSpecificationItemError;

}

/**
 * Converts an object of type 'Ec2UnsuccessfulInstanceCreditSpecificationItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnsuccessfulInstanceCreditSpecificationItem(obj: Ec2UnsuccessfulInstanceCreditSpecificationItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'Error': toJson_Ec2UnsuccessfulInstanceCreditSpecificationItemError(obj.error),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceStatusEvent
 */
export interface Ec2InstanceStatusEvent {
  /**
   * @schema Ec2InstanceStatusEvent#InstanceEventId
   */
  readonly instanceEventId?: string;

  /**
   * @schema Ec2InstanceStatusEvent#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2InstanceStatusEvent#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2InstanceStatusEvent#NotAfter
   */
  readonly notAfter?: string;

  /**
   * @schema Ec2InstanceStatusEvent#NotBefore
   */
  readonly notBefore?: string;

  /**
   * @schema Ec2InstanceStatusEvent#NotBeforeDeadline
   */
  readonly notBeforeDeadline?: string;

}

/**
 * Converts an object of type 'Ec2InstanceStatusEvent' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceStatusEvent(obj: Ec2InstanceStatusEvent | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceEventId': obj.instanceEventId,
    'Code': obj.code,
    'Description': obj.description,
    'NotAfter': obj.notAfter,
    'NotBefore': obj.notBefore,
    'NotBeforeDeadline': obj.notBeforeDeadline,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceMetadataOptionsResponse
 */
export interface Ec2InstanceMetadataOptionsResponse {
  /**
   * @schema Ec2InstanceMetadataOptionsResponse#State
   */
  readonly state?: string;

  /**
   * @schema Ec2InstanceMetadataOptionsResponse#HttpTokens
   */
  readonly httpTokens?: string;

  /**
   * @schema Ec2InstanceMetadataOptionsResponse#HttpPutResponseHopLimit
   */
  readonly httpPutResponseHopLimit?: number;

  /**
   * @schema Ec2InstanceMetadataOptionsResponse#HttpEndpoint
   */
  readonly httpEndpoint?: string;

}

/**
 * Converts an object of type 'Ec2InstanceMetadataOptionsResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceMetadataOptionsResponse(obj: Ec2InstanceMetadataOptionsResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'HttpTokens': obj.httpTokens,
    'HttpPutResponseHopLimit': obj.httpPutResponseHopLimit,
    'HttpEndpoint': obj.httpEndpoint,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RemovePrefixListEntry
 */
export interface Ec2RemovePrefixListEntry {
  /**
   * @schema Ec2RemovePrefixListEntry#Cidr
   */
  readonly cidr?: string;

}

/**
 * Converts an object of type 'Ec2RemovePrefixListEntry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RemovePrefixListEntry(obj: Ec2RemovePrefixListEntry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInterfaceAttachmentChanges
 */
export interface Ec2NetworkInterfaceAttachmentChanges {
  /**
   * @schema Ec2NetworkInterfaceAttachmentChanges#AttachmentId
   */
  readonly attachmentId?: string;

  /**
   * @schema Ec2NetworkInterfaceAttachmentChanges#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

}

/**
 * Converts an object of type 'Ec2NetworkInterfaceAttachmentChanges' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInterfaceAttachmentChanges(obj: Ec2NetworkInterfaceAttachmentChanges | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttachmentId': obj.attachmentId,
    'DeleteOnTermination': obj.deleteOnTermination,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstancesConfiguration
 */
export interface Ec2ReservedInstancesConfiguration {
  /**
   * @schema Ec2ReservedInstancesConfiguration#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ReservedInstancesConfiguration#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2ReservedInstancesConfiguration#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ReservedInstancesConfiguration#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2ReservedInstancesConfiguration#Scope
   */
  readonly scope?: string;

}

/**
 * Converts an object of type 'Ec2ReservedInstancesConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstancesConfiguration(obj: Ec2ReservedInstancesConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'InstanceCount': obj.instanceCount,
    'InstanceType': obj.instanceType,
    'Platform': obj.platform,
    'Scope': obj.scope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SecurityGroupRuleUpdate
 */
export interface Ec2SecurityGroupRuleUpdate {
  /**
   * @schema Ec2SecurityGroupRuleUpdate#SecurityGroupRuleId
   */
  readonly securityGroupRuleId?: string;

  /**
   * @schema Ec2SecurityGroupRuleUpdate#SecurityGroupRule
   */
  readonly securityGroupRule?: Ec2SecurityGroupRuleRequest;

}

/**
 * Converts an object of type 'Ec2SecurityGroupRuleUpdate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SecurityGroupRuleUpdate(obj: Ec2SecurityGroupRuleUpdate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupRuleId': obj.securityGroupRuleId,
    'SecurityGroupRule': toJson_Ec2SecurityGroupRuleRequest(obj.securityGroupRule),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreateVolumePermissionModifications
 */
export interface Ec2CreateVolumePermissionModifications {
  /**
   * @schema Ec2CreateVolumePermissionModifications#Add
   */
  readonly add?: Ec2CreateVolumePermission[];

  /**
   * @schema Ec2CreateVolumePermissionModifications#Remove
   */
  readonly remove?: Ec2CreateVolumePermission[];

}

/**
 * Converts an object of type 'Ec2CreateVolumePermissionModifications' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreateVolumePermissionModifications(obj: Ec2CreateVolumePermissionModifications | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Add': obj.add?.map(y => toJson_Ec2CreateVolumePermission(y)),
    'Remove': obj.remove?.map(y => toJson_Ec2CreateVolumePermission(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateConfig
 */
export interface Ec2LaunchTemplateConfig {
  /**
   * @schema Ec2LaunchTemplateConfig#LaunchTemplateSpecification
   */
  readonly launchTemplateSpecification?: Ec2FleetLaunchTemplateSpecification;

  /**
   * @schema Ec2LaunchTemplateConfig#Overrides
   */
  readonly overrides?: Ec2LaunchTemplateOverrides[];

}

/**
 * Converts an object of type 'Ec2LaunchTemplateConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateConfig(obj: Ec2LaunchTemplateConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateSpecification': toJson_Ec2FleetLaunchTemplateSpecification(obj.launchTemplateSpecification),
    'Overrides': obj.overrides?.map(y => toJson_Ec2LaunchTemplateOverrides(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTransitGatewayOptions
 */
export interface Ec2ModifyTransitGatewayOptions {
  /**
   * @schema Ec2ModifyTransitGatewayOptions#AddTransitGatewayCidrBlocks
   */
  readonly addTransitGatewayCidrBlocks?: string[];

  /**
   * @schema Ec2ModifyTransitGatewayOptions#RemoveTransitGatewayCidrBlocks
   */
  readonly removeTransitGatewayCidrBlocks?: string[];

  /**
   * @schema Ec2ModifyTransitGatewayOptions#VpnEcmpSupport
   */
  readonly vpnEcmpSupport?: string;

  /**
   * @schema Ec2ModifyTransitGatewayOptions#DnsSupport
   */
  readonly dnsSupport?: string;

  /**
   * @schema Ec2ModifyTransitGatewayOptions#AutoAcceptSharedAttachments
   */
  readonly autoAcceptSharedAttachments?: string;

  /**
   * @schema Ec2ModifyTransitGatewayOptions#DefaultRouteTableAssociation
   */
  readonly defaultRouteTableAssociation?: string;

  /**
   * @schema Ec2ModifyTransitGatewayOptions#AssociationDefaultRouteTableId
   */
  readonly associationDefaultRouteTableId?: string;

  /**
   * @schema Ec2ModifyTransitGatewayOptions#DefaultRouteTablePropagation
   */
  readonly defaultRouteTablePropagation?: string;

  /**
   * @schema Ec2ModifyTransitGatewayOptions#PropagationDefaultRouteTableId
   */
  readonly propagationDefaultRouteTableId?: string;

}

/**
 * Converts an object of type 'Ec2ModifyTransitGatewayOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTransitGatewayOptions(obj: Ec2ModifyTransitGatewayOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AddTransitGatewayCidrBlocks': obj.addTransitGatewayCidrBlocks?.map(y => y),
    'RemoveTransitGatewayCidrBlocks': obj.removeTransitGatewayCidrBlocks?.map(y => y),
    'VpnEcmpSupport': obj.vpnEcmpSupport,
    'DnsSupport': obj.dnsSupport,
    'AutoAcceptSharedAttachments': obj.autoAcceptSharedAttachments,
    'DefaultRouteTableAssociation': obj.defaultRouteTableAssociation,
    'AssociationDefaultRouteTableId': obj.associationDefaultRouteTableId,
    'DefaultRouteTablePropagation': obj.defaultRouteTablePropagation,
    'PropagationDefaultRouteTableId': obj.propagationDefaultRouteTableId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyTransitGatewayVpcAttachmentRequestOptions
 */
export interface Ec2ModifyTransitGatewayVpcAttachmentRequestOptions {
  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentRequestOptions#DnsSupport
   */
  readonly dnsSupport?: string;

  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentRequestOptions#Ipv6Support
   */
  readonly ipv6Support?: string;

  /**
   * @schema Ec2ModifyTransitGatewayVpcAttachmentRequestOptions#ApplianceModeSupport
   */
  readonly applianceModeSupport?: string;

}

/**
 * Converts an object of type 'Ec2ModifyTransitGatewayVpcAttachmentRequestOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyTransitGatewayVpcAttachmentRequestOptions(obj: Ec2ModifyTransitGatewayVpcAttachmentRequestOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DnsSupport': obj.dnsSupport,
    'Ipv6Support': obj.ipv6Support,
    'ApplianceModeSupport': obj.applianceModeSupport,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PeeringConnectionOptionsRequest
 */
export interface Ec2PeeringConnectionOptionsRequest {
  /**
   * @schema Ec2PeeringConnectionOptionsRequest#AllowDnsResolutionFromRemoteVpc
   */
  readonly allowDnsResolutionFromRemoteVpc?: boolean;

  /**
   * @schema Ec2PeeringConnectionOptionsRequest#AllowEgressFromLocalClassicLinkToRemoteVpc
   */
  readonly allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  /**
   * @schema Ec2PeeringConnectionOptionsRequest#AllowEgressFromLocalVpcToRemoteClassicLink
   */
  readonly allowEgressFromLocalVpcToRemoteClassicLink?: boolean;

}

/**
 * Converts an object of type 'Ec2PeeringConnectionOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PeeringConnectionOptionsRequest(obj: Ec2PeeringConnectionOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllowDnsResolutionFromRemoteVpc': obj.allowDnsResolutionFromRemoteVpc,
    'AllowEgressFromLocalClassicLinkToRemoteVpc': obj.allowEgressFromLocalClassicLinkToRemoteVpc,
    'AllowEgressFromLocalVpcToRemoteClassicLink': obj.allowEgressFromLocalVpcToRemoteClassicLink,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PeeringConnectionOptions
 */
export interface Ec2PeeringConnectionOptions {
  /**
   * @schema Ec2PeeringConnectionOptions#AllowDnsResolutionFromRemoteVpc
   */
  readonly allowDnsResolutionFromRemoteVpc?: boolean;

  /**
   * @schema Ec2PeeringConnectionOptions#AllowEgressFromLocalClassicLinkToRemoteVpc
   */
  readonly allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  /**
   * @schema Ec2PeeringConnectionOptions#AllowEgressFromLocalVpcToRemoteClassicLink
   */
  readonly allowEgressFromLocalVpcToRemoteClassicLink?: boolean;

}

/**
 * Converts an object of type 'Ec2PeeringConnectionOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PeeringConnectionOptions(obj: Ec2PeeringConnectionOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllowDnsResolutionFromRemoteVpc': obj.allowDnsResolutionFromRemoteVpc,
    'AllowEgressFromLocalClassicLinkToRemoteVpc': obj.allowEgressFromLocalClassicLinkToRemoteVpc,
    'AllowEgressFromLocalVpcToRemoteClassicLink': obj.allowEgressFromLocalVpcToRemoteClassicLink,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ModifyVpnTunnelOptionsSpecification
 */
export interface Ec2ModifyVpnTunnelOptionsSpecification {
  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#TunnelInsideCidr
   */
  readonly tunnelInsideCidr?: string;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#TunnelInsideIpv6Cidr
   */
  readonly tunnelInsideIpv6Cidr?: string;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#PreSharedKey
   */
  readonly preSharedKey?: string;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#Phase1LifetimeSeconds
   */
  readonly phase1LifetimeSeconds?: number;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#Phase2LifetimeSeconds
   */
  readonly phase2LifetimeSeconds?: number;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#RekeyMarginTimeSeconds
   */
  readonly rekeyMarginTimeSeconds?: number;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#RekeyFuzzPercentage
   */
  readonly rekeyFuzzPercentage?: number;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#ReplayWindowSize
   */
  readonly replayWindowSize?: number;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#DPDTimeoutSeconds
   */
  readonly dpdTimeoutSeconds?: number;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#DPDTimeoutAction
   */
  readonly dpdTimeoutAction?: string;

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#Phase1EncryptionAlgorithms
   */
  readonly phase1EncryptionAlgorithms?: Ec2Phase1EncryptionAlgorithmsRequestListValue[];

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#Phase2EncryptionAlgorithms
   */
  readonly phase2EncryptionAlgorithms?: Ec2Phase2EncryptionAlgorithmsRequestListValue[];

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#Phase1IntegrityAlgorithms
   */
  readonly phase1IntegrityAlgorithms?: Ec2Phase1IntegrityAlgorithmsRequestListValue[];

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#Phase2IntegrityAlgorithms
   */
  readonly phase2IntegrityAlgorithms?: Ec2Phase2IntegrityAlgorithmsRequestListValue[];

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#Phase1DHGroupNumbers
   */
  readonly phase1DhGroupNumbers?: Ec2Phase1DhGroupNumbersRequestListValue[];

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#Phase2DHGroupNumbers
   */
  readonly phase2DhGroupNumbers?: Ec2Phase2DhGroupNumbersRequestListValue[];

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#IKEVersions
   */
  readonly ikeVersions?: Ec2IkeVersionsRequestListValue[];

  /**
   * @schema Ec2ModifyVpnTunnelOptionsSpecification#StartupAction
   */
  readonly startupAction?: string;

}

/**
 * Converts an object of type 'Ec2ModifyVpnTunnelOptionsSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ModifyVpnTunnelOptionsSpecification(obj: Ec2ModifyVpnTunnelOptionsSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TunnelInsideCidr': obj.tunnelInsideCidr,
    'TunnelInsideIpv6Cidr': obj.tunnelInsideIpv6Cidr,
    'PreSharedKey': obj.preSharedKey,
    'Phase1LifetimeSeconds': obj.phase1LifetimeSeconds,
    'Phase2LifetimeSeconds': obj.phase2LifetimeSeconds,
    'RekeyMarginTimeSeconds': obj.rekeyMarginTimeSeconds,
    'RekeyFuzzPercentage': obj.rekeyFuzzPercentage,
    'ReplayWindowSize': obj.replayWindowSize,
    'DPDTimeoutSeconds': obj.dpdTimeoutSeconds,
    'DPDTimeoutAction': obj.dpdTimeoutAction,
    'Phase1EncryptionAlgorithms': obj.phase1EncryptionAlgorithms?.map(y => toJson_Ec2Phase1EncryptionAlgorithmsRequestListValue(y)),
    'Phase2EncryptionAlgorithms': obj.phase2EncryptionAlgorithms?.map(y => toJson_Ec2Phase2EncryptionAlgorithmsRequestListValue(y)),
    'Phase1IntegrityAlgorithms': obj.phase1IntegrityAlgorithms?.map(y => toJson_Ec2Phase1IntegrityAlgorithmsRequestListValue(y)),
    'Phase2IntegrityAlgorithms': obj.phase2IntegrityAlgorithms?.map(y => toJson_Ec2Phase2IntegrityAlgorithmsRequestListValue(y)),
    'Phase1DHGroupNumbers': obj.phase1DhGroupNumbers?.map(y => toJson_Ec2Phase1DhGroupNumbersRequestListValue(y)),
    'Phase2DHGroupNumbers': obj.phase2DhGroupNumbers?.map(y => toJson_Ec2Phase2DhGroupNumbersRequestListValue(y)),
    'IKEVersions': obj.ikeVersions?.map(y => toJson_Ec2IkeVersionsRequestListValue(y)),
    'StartupAction': obj.startupAction,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceMonitoring
 */
export interface Ec2InstanceMonitoring {
  /**
   * @schema Ec2InstanceMonitoring#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2InstanceMonitoring#Monitoring
   */
  readonly monitoring?: Ec2Monitoring;

}

/**
 * Converts an object of type 'Ec2InstanceMonitoring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceMonitoring(obj: Ec2InstanceMonitoring | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'Monitoring': toJson_Ec2Monitoring(obj.monitoring),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CidrAuthorizationContext
 */
export interface Ec2CidrAuthorizationContext {
  /**
   * @schema Ec2CidrAuthorizationContext#Message
   */
  readonly message?: string;

  /**
   * @schema Ec2CidrAuthorizationContext#Signature
   */
  readonly signature?: string;

}

/**
 * Converts an object of type 'Ec2CidrAuthorizationContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CidrAuthorizationContext(obj: Ec2CidrAuthorizationContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Message': obj.message,
    'Signature': obj.signature,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstanceLimitPrice
 */
export interface Ec2ReservedInstanceLimitPrice {
  /**
   * @schema Ec2ReservedInstanceLimitPrice#Amount
   */
  readonly amount?: number;

  /**
   * @schema Ec2ReservedInstanceLimitPrice#CurrencyCode
   */
  readonly currencyCode?: string;

}

/**
 * Converts an object of type 'Ec2ReservedInstanceLimitPrice' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstanceLimitPrice(obj: Ec2ReservedInstanceLimitPrice | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Amount': obj.amount,
    'CurrencyCode': obj.currencyCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PurchaseRequest
 */
export interface Ec2PurchaseRequest {
  /**
   * @schema Ec2PurchaseRequest#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2PurchaseRequest#PurchaseToken
   */
  readonly purchaseToken?: string;

}

/**
 * Converts an object of type 'Ec2PurchaseRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PurchaseRequest(obj: Ec2PurchaseRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceCount': obj.instanceCount,
    'PurchaseToken': obj.purchaseToken,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RegisterInstanceTagAttributeRequest
 */
export interface Ec2RegisterInstanceTagAttributeRequest {
  /**
   * @schema Ec2RegisterInstanceTagAttributeRequest#IncludeAllTagsOfInstance
   */
  readonly includeAllTagsOfInstance?: boolean;

  /**
   * @schema Ec2RegisterInstanceTagAttributeRequest#InstanceTagKeys
   */
  readonly instanceTagKeys?: string[];

}

/**
 * Converts an object of type 'Ec2RegisterInstanceTagAttributeRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RegisterInstanceTagAttributeRequest(obj: Ec2RegisterInstanceTagAttributeRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IncludeAllTagsOfInstance': obj.includeAllTagsOfInstance,
    'InstanceTagKeys': obj.instanceTagKeys?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastRegisteredGroupMembers
 */
export interface Ec2TransitGatewayMulticastRegisteredGroupMembers {
  /**
   * @schema Ec2TransitGatewayMulticastRegisteredGroupMembers#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastRegisteredGroupMembers#RegisteredNetworkInterfaceIds
   */
  readonly registeredNetworkInterfaceIds?: string[];

  /**
   * @schema Ec2TransitGatewayMulticastRegisteredGroupMembers#GroupIpAddress
   */
  readonly groupIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastRegisteredGroupMembers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastRegisteredGroupMembers(obj: Ec2TransitGatewayMulticastRegisteredGroupMembers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'RegisteredNetworkInterfaceIds': obj.registeredNetworkInterfaceIds?.map(y => y),
    'GroupIpAddress': obj.groupIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastRegisteredGroupSources
 */
export interface Ec2TransitGatewayMulticastRegisteredGroupSources {
  /**
   * @schema Ec2TransitGatewayMulticastRegisteredGroupSources#TransitGatewayMulticastDomainId
   */
  readonly transitGatewayMulticastDomainId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastRegisteredGroupSources#RegisteredNetworkInterfaceIds
   */
  readonly registeredNetworkInterfaceIds?: string[];

  /**
   * @schema Ec2TransitGatewayMulticastRegisteredGroupSources#GroupIpAddress
   */
  readonly groupIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastRegisteredGroupSources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastRegisteredGroupSources(obj: Ec2TransitGatewayMulticastRegisteredGroupSources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayMulticastDomainId': obj.transitGatewayMulticastDomainId,
    'RegisteredNetworkInterfaceIds': obj.registeredNetworkInterfaceIds?.map(y => y),
    'GroupIpAddress': obj.groupIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotFleetRequestConfigData
 */
export interface Ec2SpotFleetRequestConfigData {
  /**
   * @schema Ec2SpotFleetRequestConfigData#AllocationStrategy
   */
  readonly allocationStrategy?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#OnDemandAllocationStrategy
   */
  readonly onDemandAllocationStrategy?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#SpotMaintenanceStrategies
   */
  readonly spotMaintenanceStrategies?: Ec2SpotMaintenanceStrategies;

  /**
   * @schema Ec2SpotFleetRequestConfigData#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#ExcessCapacityTerminationPolicy
   */
  readonly excessCapacityTerminationPolicy?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#FulfilledCapacity
   */
  readonly fulfilledCapacity?: number;

  /**
   * @schema Ec2SpotFleetRequestConfigData#OnDemandFulfilledCapacity
   */
  readonly onDemandFulfilledCapacity?: number;

  /**
   * @schema Ec2SpotFleetRequestConfigData#IamFleetRole
   */
  readonly iamFleetRole?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#LaunchSpecifications
   */
  readonly launchSpecifications?: Ec2SpotFleetLaunchSpecification[];

  /**
   * @schema Ec2SpotFleetRequestConfigData#LaunchTemplateConfigs
   */
  readonly launchTemplateConfigs?: Ec2LaunchTemplateConfig[];

  /**
   * @schema Ec2SpotFleetRequestConfigData#SpotPrice
   */
  readonly spotPrice?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#TargetCapacity
   */
  readonly targetCapacity?: number;

  /**
   * @schema Ec2SpotFleetRequestConfigData#OnDemandTargetCapacity
   */
  readonly onDemandTargetCapacity?: number;

  /**
   * @schema Ec2SpotFleetRequestConfigData#OnDemandMaxTotalPrice
   */
  readonly onDemandMaxTotalPrice?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#SpotMaxTotalPrice
   */
  readonly spotMaxTotalPrice?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#TerminateInstancesWithExpiration
   */
  readonly terminateInstancesWithExpiration?: boolean;

  /**
   * @schema Ec2SpotFleetRequestConfigData#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#ValidFrom
   */
  readonly validFrom?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#ValidUntil
   */
  readonly validUntil?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#ReplaceUnhealthyInstances
   */
  readonly replaceUnhealthyInstances?: boolean;

  /**
   * @schema Ec2SpotFleetRequestConfigData#InstanceInterruptionBehavior
   */
  readonly instanceInterruptionBehavior?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#LoadBalancersConfig
   */
  readonly loadBalancersConfig?: Ec2LoadBalancersConfig;

  /**
   * @schema Ec2SpotFleetRequestConfigData#InstancePoolsToUseCount
   */
  readonly instancePoolsToUseCount?: number;

  /**
   * @schema Ec2SpotFleetRequestConfigData#Context
   */
  readonly context?: string;

  /**
   * @schema Ec2SpotFleetRequestConfigData#TagSpecifications
   */
  readonly tagSpecifications?: Ec2TagSpecification[];

}

/**
 * Converts an object of type 'Ec2SpotFleetRequestConfigData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotFleetRequestConfigData(obj: Ec2SpotFleetRequestConfigData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationStrategy': obj.allocationStrategy,
    'OnDemandAllocationStrategy': obj.onDemandAllocationStrategy,
    'SpotMaintenanceStrategies': toJson_Ec2SpotMaintenanceStrategies(obj.spotMaintenanceStrategies),
    'ClientToken': obj.clientToken,
    'ExcessCapacityTerminationPolicy': obj.excessCapacityTerminationPolicy,
    'FulfilledCapacity': obj.fulfilledCapacity,
    'OnDemandFulfilledCapacity': obj.onDemandFulfilledCapacity,
    'IamFleetRole': obj.iamFleetRole,
    'LaunchSpecifications': obj.launchSpecifications?.map(y => toJson_Ec2SpotFleetLaunchSpecification(y)),
    'LaunchTemplateConfigs': obj.launchTemplateConfigs?.map(y => toJson_Ec2LaunchTemplateConfig(y)),
    'SpotPrice': obj.spotPrice,
    'TargetCapacity': obj.targetCapacity,
    'OnDemandTargetCapacity': obj.onDemandTargetCapacity,
    'OnDemandMaxTotalPrice': obj.onDemandMaxTotalPrice,
    'SpotMaxTotalPrice': obj.spotMaxTotalPrice,
    'TerminateInstancesWithExpiration': obj.terminateInstancesWithExpiration,
    'Type': obj.type,
    'ValidFrom': obj.validFrom,
    'ValidUntil': obj.validUntil,
    'ReplaceUnhealthyInstances': obj.replaceUnhealthyInstances,
    'InstanceInterruptionBehavior': obj.instanceInterruptionBehavior,
    'LoadBalancersConfig': toJson_Ec2LoadBalancersConfig(obj.loadBalancersConfig),
    'InstancePoolsToUseCount': obj.instancePoolsToUseCount,
    'Context': obj.context,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2TagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RequestSpotLaunchSpecification
 */
export interface Ec2RequestSpotLaunchSpecification {
  /**
   * @schema Ec2RequestSpotLaunchSpecification#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2RequestSpotLaunchSpecification#SecurityGroups
   */
  readonly securityGroups?: string[];

  /**
   * @schema Ec2RequestSpotLaunchSpecification#AddressingType
   */
  readonly addressingType?: string;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2BlockDeviceMapping[];

  /**
   * @schema Ec2RequestSpotLaunchSpecification#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2IamInstanceProfileSpecification;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#Monitoring
   */
  readonly monitoring?: Ec2RunInstancesMonitoringEnabled;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2InstanceNetworkInterfaceSpecification[];

  /**
   * @schema Ec2RequestSpotLaunchSpecification#Placement
   */
  readonly placement?: Ec2SpotPlacement;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#RamdiskId
   */
  readonly ramdiskId?: string;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2RequestSpotLaunchSpecification#UserData
   */
  readonly userData?: string;

}

/**
 * Converts an object of type 'Ec2RequestSpotLaunchSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RequestSpotLaunchSpecification(obj: Ec2RequestSpotLaunchSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'SecurityGroups': obj.securityGroups?.map(y => y),
    'AddressingType': obj.addressingType,
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2BlockDeviceMapping(y)),
    'EbsOptimized': obj.ebsOptimized,
    'IamInstanceProfile': toJson_Ec2IamInstanceProfileSpecification(obj.iamInstanceProfile),
    'ImageId': obj.imageId,
    'InstanceType': obj.instanceType,
    'KernelId': obj.kernelId,
    'KeyName': obj.keyName,
    'Monitoring': toJson_Ec2RunInstancesMonitoringEnabled(obj.monitoring),
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2InstanceNetworkInterfaceSpecification(y)),
    'Placement': toJson_Ec2SpotPlacement(obj.placement),
    'RamdiskId': obj.ramdiskId,
    'SubnetId': obj.subnetId,
    'UserData': obj.userData,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RunInstancesMonitoringEnabled
 */
export interface Ec2RunInstancesMonitoringEnabled {
  /**
   * @schema Ec2RunInstancesMonitoringEnabled#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2RunInstancesMonitoringEnabled' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RunInstancesMonitoringEnabled(obj: Ec2RunInstancesMonitoringEnabled | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Placement
 */
export interface Ec2Placement {
  /**
   * @schema Ec2Placement#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2Placement#Affinity
   */
  readonly affinity?: string;

  /**
   * @schema Ec2Placement#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2Placement#PartitionNumber
   */
  readonly partitionNumber?: number;

  /**
   * @schema Ec2Placement#HostId
   */
  readonly hostId?: string;

  /**
   * @schema Ec2Placement#Tenancy
   */
  readonly tenancy?: string;

  /**
   * @schema Ec2Placement#SpreadDomain
   */
  readonly spreadDomain?: string;

  /**
   * @schema Ec2Placement#HostResourceGroupArn
   */
  readonly hostResourceGroupArn?: string;

}

/**
 * Converts an object of type 'Ec2Placement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Placement(obj: Ec2Placement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Affinity': obj.affinity,
    'GroupName': obj.groupName,
    'PartitionNumber': obj.partitionNumber,
    'HostId': obj.hostId,
    'Tenancy': obj.tenancy,
    'SpreadDomain': obj.spreadDomain,
    'HostResourceGroupArn': obj.hostResourceGroupArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceNetworkInterfaceSpecification
 */
export interface Ec2InstanceNetworkInterfaceSpecification {
  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#AssociatePublicIpAddress
   */
  readonly associatePublicIpAddress?: boolean;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#DeviceIndex
   */
  readonly deviceIndex?: number;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#Groups
   */
  readonly groups?: string[];

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#Ipv6AddressCount
   */
  readonly ipv6AddressCount?: number;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#Ipv6Addresses
   */
  readonly ipv6Addresses?: Ec2InstanceIpv6Address[];

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#PrivateIpAddresses
   */
  readonly privateIpAddresses?: Ec2PrivateIpAddressSpecification[];

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#SecondaryPrivateIpAddressCount
   */
  readonly secondaryPrivateIpAddressCount?: number;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#AssociateCarrierIpAddress
   */
  readonly associateCarrierIpAddress?: boolean;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#InterfaceType
   */
  readonly interfaceType?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#NetworkCardIndex
   */
  readonly networkCardIndex?: number;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#Ipv4Prefixes
   */
  readonly ipv4Prefixes?: Ec2Ipv4PrefixSpecificationRequest[];

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#Ipv4PrefixCount
   */
  readonly ipv4PrefixCount?: number;

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#Ipv6Prefixes
   */
  readonly ipv6Prefixes?: Ec2Ipv6PrefixSpecificationRequest[];

  /**
   * @schema Ec2InstanceNetworkInterfaceSpecification#Ipv6PrefixCount
   */
  readonly ipv6PrefixCount?: number;

}

/**
 * Converts an object of type 'Ec2InstanceNetworkInterfaceSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceNetworkInterfaceSpecification(obj: Ec2InstanceNetworkInterfaceSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociatePublicIpAddress': obj.associatePublicIpAddress,
    'DeleteOnTermination': obj.deleteOnTermination,
    'Description': obj.description,
    'DeviceIndex': obj.deviceIndex,
    'Groups': obj.groups?.map(y => y),
    'Ipv6AddressCount': obj.ipv6AddressCount,
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => toJson_Ec2InstanceIpv6Address(y)),
    'NetworkInterfaceId': obj.networkInterfaceId,
    'PrivateIpAddress': obj.privateIpAddress,
    'PrivateIpAddresses': obj.privateIpAddresses?.map(y => toJson_Ec2PrivateIpAddressSpecification(y)),
    'SecondaryPrivateIpAddressCount': obj.secondaryPrivateIpAddressCount,
    'SubnetId': obj.subnetId,
    'AssociateCarrierIpAddress': obj.associateCarrierIpAddress,
    'InterfaceType': obj.interfaceType,
    'NetworkCardIndex': obj.networkCardIndex,
    'Ipv4Prefixes': obj.ipv4Prefixes?.map(y => toJson_Ec2Ipv4PrefixSpecificationRequest(y)),
    'Ipv4PrefixCount': obj.ipv4PrefixCount,
    'Ipv6Prefixes': obj.ipv6Prefixes?.map(y => toJson_Ec2Ipv6PrefixSpecificationRequest(y)),
    'Ipv6PrefixCount': obj.ipv6PrefixCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ElasticGpuSpecification
 */
export interface Ec2ElasticGpuSpecification {
  /**
   * @schema Ec2ElasticGpuSpecification#Type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'Ec2ElasticGpuSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ElasticGpuSpecification(obj: Ec2ElasticGpuSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ElasticInferenceAccelerator
 */
export interface Ec2ElasticInferenceAccelerator {
  /**
   * @schema Ec2ElasticInferenceAccelerator#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2ElasticInferenceAccelerator#Count
   */
  readonly count?: number;

}

/**
 * Converts an object of type 'Ec2ElasticInferenceAccelerator' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ElasticInferenceAccelerator(obj: Ec2ElasticInferenceAccelerator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Count': obj.count,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateSpecification
 */
export interface Ec2LaunchTemplateSpecification {
  /**
   * @schema Ec2LaunchTemplateSpecification#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2LaunchTemplateSpecification#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2LaunchTemplateSpecification#Version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateSpecification(obj: Ec2LaunchTemplateSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'Version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceMarketOptionsRequest
 */
export interface Ec2InstanceMarketOptionsRequest {
  /**
   * @schema Ec2InstanceMarketOptionsRequest#MarketType
   */
  readonly marketType?: string;

  /**
   * @schema Ec2InstanceMarketOptionsRequest#SpotOptions
   */
  readonly spotOptions?: Ec2SpotMarketOptions;

}

/**
 * Converts an object of type 'Ec2InstanceMarketOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceMarketOptionsRequest(obj: Ec2InstanceMarketOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MarketType': obj.marketType,
    'SpotOptions': toJson_Ec2SpotMarketOptions(obj.spotOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreditSpecificationRequest
 */
export interface Ec2CreditSpecificationRequest {
  /**
   * @schema Ec2CreditSpecificationRequest#CpuCredits
   */
  readonly cpuCredits?: string;

}

/**
 * Converts an object of type 'Ec2CreditSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreditSpecificationRequest(obj: Ec2CreditSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CpuCredits': obj.cpuCredits,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CpuOptionsRequest
 */
export interface Ec2CpuOptionsRequest {
  /**
   * @schema Ec2CpuOptionsRequest#CoreCount
   */
  readonly coreCount?: number;

  /**
   * @schema Ec2CpuOptionsRequest#ThreadsPerCore
   */
  readonly threadsPerCore?: number;

}

/**
 * Converts an object of type 'Ec2CpuOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CpuOptionsRequest(obj: Ec2CpuOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CoreCount': obj.coreCount,
    'ThreadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2HibernationOptionsRequest
 */
export interface Ec2HibernationOptionsRequest {
  /**
   * @schema Ec2HibernationOptionsRequest#Configured
   */
  readonly configured?: boolean;

}

/**
 * Converts an object of type 'Ec2HibernationOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2HibernationOptionsRequest(obj: Ec2HibernationOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Configured': obj.configured,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LicenseConfigurationRequest
 */
export interface Ec2LicenseConfigurationRequest {
  /**
   * @schema Ec2LicenseConfigurationRequest#LicenseConfigurationArn
   */
  readonly licenseConfigurationArn?: string;

}

/**
 * Converts an object of type 'Ec2LicenseConfigurationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LicenseConfigurationRequest(obj: Ec2LicenseConfigurationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LicenseConfigurationArn': obj.licenseConfigurationArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceMetadataOptionsRequest
 */
export interface Ec2InstanceMetadataOptionsRequest {
  /**
   * @schema Ec2InstanceMetadataOptionsRequest#HttpTokens
   */
  readonly httpTokens?: string;

  /**
   * @schema Ec2InstanceMetadataOptionsRequest#HttpPutResponseHopLimit
   */
  readonly httpPutResponseHopLimit?: number;

  /**
   * @schema Ec2InstanceMetadataOptionsRequest#HttpEndpoint
   */
  readonly httpEndpoint?: string;

}

/**
 * Converts an object of type 'Ec2InstanceMetadataOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceMetadataOptionsRequest(obj: Ec2InstanceMetadataOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HttpTokens': obj.httpTokens,
    'HttpPutResponseHopLimit': obj.httpPutResponseHopLimit,
    'HttpEndpoint': obj.httpEndpoint,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnclaveOptionsRequest
 */
export interface Ec2EnclaveOptionsRequest {
  /**
   * @schema Ec2EnclaveOptionsRequest#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2EnclaveOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnclaveOptionsRequest(obj: Ec2EnclaveOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Instance
 */
export interface Ec2Instance {
  /**
   * @schema Ec2Instance#AmiLaunchIndex
   */
  readonly amiLaunchIndex?: number;

  /**
   * @schema Ec2Instance#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2Instance#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2Instance#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2Instance#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2Instance#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2Instance#LaunchTime
   */
  readonly launchTime?: string;

  /**
   * @schema Ec2Instance#Monitoring
   */
  readonly monitoring?: Ec2Monitoring;

  /**
   * @schema Ec2Instance#Placement
   */
  readonly placement?: Ec2Placement;

  /**
   * @schema Ec2Instance#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2Instance#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2Instance#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2Instance#ProductCodes
   */
  readonly productCodes?: Ec2ProductCode[];

  /**
   * @schema Ec2Instance#PublicDnsName
   */
  readonly publicDnsName?: string;

  /**
   * @schema Ec2Instance#PublicIpAddress
   */
  readonly publicIpAddress?: string;

  /**
   * @schema Ec2Instance#RamdiskId
   */
  readonly ramdiskId?: string;

  /**
   * @schema Ec2Instance#State
   */
  readonly state?: Ec2InstanceState;

  /**
   * @schema Ec2Instance#StateTransitionReason
   */
  readonly stateTransitionReason?: string;

  /**
   * @schema Ec2Instance#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2Instance#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2Instance#Architecture
   */
  readonly architecture?: string;

  /**
   * @schema Ec2Instance#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2InstanceBlockDeviceMapping[];

  /**
   * @schema Ec2Instance#ClientToken
   */
  readonly clientToken?: string;

  /**
   * @schema Ec2Instance#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2Instance#EnaSupport
   */
  readonly enaSupport?: boolean;

  /**
   * @schema Ec2Instance#Hypervisor
   */
  readonly hypervisor?: string;

  /**
   * @schema Ec2Instance#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2IamInstanceProfile;

  /**
   * @schema Ec2Instance#InstanceLifecycle
   */
  readonly instanceLifecycle?: string;

  /**
   * @schema Ec2Instance#ElasticGpuAssociations
   */
  readonly elasticGpuAssociations?: Ec2ElasticGpuAssociation[];

  /**
   * @schema Ec2Instance#ElasticInferenceAcceleratorAssociations
   */
  readonly elasticInferenceAcceleratorAssociations?: Ec2ElasticInferenceAcceleratorAssociation[];

  /**
   * @schema Ec2Instance#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2InstanceNetworkInterface[];

  /**
   * @schema Ec2Instance#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2Instance#RootDeviceName
   */
  readonly rootDeviceName?: string;

  /**
   * @schema Ec2Instance#RootDeviceType
   */
  readonly rootDeviceType?: string;

  /**
   * @schema Ec2Instance#SecurityGroups
   */
  readonly securityGroups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2Instance#SourceDestCheck
   */
  readonly sourceDestCheck?: boolean;

  /**
   * @schema Ec2Instance#SpotInstanceRequestId
   */
  readonly spotInstanceRequestId?: string;

  /**
   * @schema Ec2Instance#SriovNetSupport
   */
  readonly sriovNetSupport?: string;

  /**
   * @schema Ec2Instance#StateReason
   */
  readonly stateReason?: Ec2StateReason;

  /**
   * @schema Ec2Instance#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2Instance#VirtualizationType
   */
  readonly virtualizationType?: string;

  /**
   * @schema Ec2Instance#CpuOptions
   */
  readonly cpuOptions?: Ec2CpuOptions;

  /**
   * @schema Ec2Instance#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2Instance#CapacityReservationSpecification
   */
  readonly capacityReservationSpecification?: Ec2CapacityReservationSpecificationResponse;

  /**
   * @schema Ec2Instance#HibernationOptions
   */
  readonly hibernationOptions?: Ec2HibernationOptions;

  /**
   * @schema Ec2Instance#Licenses
   */
  readonly licenses?: Ec2LicenseConfiguration[];

  /**
   * @schema Ec2Instance#MetadataOptions
   */
  readonly metadataOptions?: Ec2InstanceMetadataOptionsResponse;

  /**
   * @schema Ec2Instance#EnclaveOptions
   */
  readonly enclaveOptions?: Ec2EnclaveOptions;

  /**
   * @schema Ec2Instance#BootMode
   */
  readonly bootMode?: string;

}

/**
 * Converts an object of type 'Ec2Instance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Instance(obj: Ec2Instance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AmiLaunchIndex': obj.amiLaunchIndex,
    'ImageId': obj.imageId,
    'InstanceId': obj.instanceId,
    'InstanceType': obj.instanceType,
    'KernelId': obj.kernelId,
    'KeyName': obj.keyName,
    'LaunchTime': obj.launchTime,
    'Monitoring': toJson_Ec2Monitoring(obj.monitoring),
    'Placement': toJson_Ec2Placement(obj.placement),
    'Platform': obj.platform,
    'PrivateDnsName': obj.privateDnsName,
    'PrivateIpAddress': obj.privateIpAddress,
    'ProductCodes': obj.productCodes?.map(y => toJson_Ec2ProductCode(y)),
    'PublicDnsName': obj.publicDnsName,
    'PublicIpAddress': obj.publicIpAddress,
    'RamdiskId': obj.ramdiskId,
    'State': toJson_Ec2InstanceState(obj.state),
    'StateTransitionReason': obj.stateTransitionReason,
    'SubnetId': obj.subnetId,
    'VpcId': obj.vpcId,
    'Architecture': obj.architecture,
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2InstanceBlockDeviceMapping(y)),
    'ClientToken': obj.clientToken,
    'EbsOptimized': obj.ebsOptimized,
    'EnaSupport': obj.enaSupport,
    'Hypervisor': obj.hypervisor,
    'IamInstanceProfile': toJson_Ec2IamInstanceProfile(obj.iamInstanceProfile),
    'InstanceLifecycle': obj.instanceLifecycle,
    'ElasticGpuAssociations': obj.elasticGpuAssociations?.map(y => toJson_Ec2ElasticGpuAssociation(y)),
    'ElasticInferenceAcceleratorAssociations': obj.elasticInferenceAcceleratorAssociations?.map(y => toJson_Ec2ElasticInferenceAcceleratorAssociation(y)),
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2InstanceNetworkInterface(y)),
    'OutpostArn': obj.outpostArn,
    'RootDeviceName': obj.rootDeviceName,
    'RootDeviceType': obj.rootDeviceType,
    'SecurityGroups': obj.securityGroups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'SourceDestCheck': obj.sourceDestCheck,
    'SpotInstanceRequestId': obj.spotInstanceRequestId,
    'SriovNetSupport': obj.sriovNetSupport,
    'StateReason': toJson_Ec2StateReason(obj.stateReason),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'VirtualizationType': obj.virtualizationType,
    'CpuOptions': toJson_Ec2CpuOptions(obj.cpuOptions),
    'CapacityReservationId': obj.capacityReservationId,
    'CapacityReservationSpecification': toJson_Ec2CapacityReservationSpecificationResponse(obj.capacityReservationSpecification),
    'HibernationOptions': toJson_Ec2HibernationOptions(obj.hibernationOptions),
    'Licenses': obj.licenses?.map(y => toJson_Ec2LicenseConfiguration(y)),
    'MetadataOptions': toJson_Ec2InstanceMetadataOptionsResponse(obj.metadataOptions),
    'EnclaveOptions': toJson_Ec2EnclaveOptions(obj.enclaveOptions),
    'BootMode': obj.bootMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesLaunchSpecification
 */
export interface Ec2ScheduledInstancesLaunchSpecification {
  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2ScheduledInstancesBlockDeviceMapping[];

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2ScheduledInstancesIamInstanceProfile;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#Monitoring
   */
  readonly monitoring?: Ec2ScheduledInstancesMonitoring;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2ScheduledInstancesNetworkInterface[];

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#Placement
   */
  readonly placement?: Ec2ScheduledInstancesPlacement;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#RamdiskId
   */
  readonly ramdiskId?: string;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2ScheduledInstancesLaunchSpecification#UserData
   */
  readonly userData?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesLaunchSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesLaunchSpecification(obj: Ec2ScheduledInstancesLaunchSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2ScheduledInstancesBlockDeviceMapping(y)),
    'EbsOptimized': obj.ebsOptimized,
    'IamInstanceProfile': toJson_Ec2ScheduledInstancesIamInstanceProfile(obj.iamInstanceProfile),
    'ImageId': obj.imageId,
    'InstanceType': obj.instanceType,
    'KernelId': obj.kernelId,
    'KeyName': obj.keyName,
    'Monitoring': toJson_Ec2ScheduledInstancesMonitoring(obj.monitoring),
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2ScheduledInstancesNetworkInterface(y)),
    'Placement': toJson_Ec2ScheduledInstancesPlacement(obj.placement),
    'RamdiskId': obj.ramdiskId,
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'SubnetId': obj.subnetId,
    'UserData': obj.userData,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastGroup
 */
export interface Ec2TransitGatewayMulticastGroup {
  /**
   * @schema Ec2TransitGatewayMulticastGroup#GroupIpAddress
   */
  readonly groupIpAddress?: string;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#ResourceOwnerId
   */
  readonly resourceOwnerId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#GroupMember
   */
  readonly groupMember?: boolean;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#GroupSource
   */
  readonly groupSource?: boolean;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#MemberType
   */
  readonly memberType?: string;

  /**
   * @schema Ec2TransitGatewayMulticastGroup#SourceType
   */
  readonly sourceType?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastGroup(obj: Ec2TransitGatewayMulticastGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupIpAddress': obj.groupIpAddress,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'SubnetId': obj.subnetId,
    'ResourceId': obj.resourceId,
    'ResourceType': obj.resourceType,
    'ResourceOwnerId': obj.resourceOwnerId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'GroupMember': obj.groupMember,
    'GroupSource': obj.groupSource,
    'MemberType': obj.memberType,
    'SourceType': obj.sourceType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceStateChange
 */
export interface Ec2InstanceStateChange {
  /**
   * @schema Ec2InstanceStateChange#CurrentState
   */
  readonly currentState?: Ec2InstanceState;

  /**
   * @schema Ec2InstanceStateChange#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2InstanceStateChange#PreviousState
   */
  readonly previousState?: Ec2InstanceState;

}

/**
 * Converts an object of type 'Ec2InstanceStateChange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceStateChange(obj: Ec2InstanceStateChange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CurrentState': toJson_Ec2InstanceState(obj.currentState),
    'InstanceId': obj.instanceId,
    'PreviousState': toJson_Ec2InstanceState(obj.previousState),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TerminateConnectionStatus
 */
export interface Ec2TerminateConnectionStatus {
  /**
   * @schema Ec2TerminateConnectionStatus#ConnectionId
   */
  readonly connectionId?: string;

  /**
   * @schema Ec2TerminateConnectionStatus#PreviousStatus
   */
  readonly previousStatus?: Ec2ClientVpnConnectionStatus;

  /**
   * @schema Ec2TerminateConnectionStatus#CurrentStatus
   */
  readonly currentStatus?: Ec2ClientVpnConnectionStatus;

}

/**
 * Converts an object of type 'Ec2TerminateConnectionStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TerminateConnectionStatus(obj: Ec2TerminateConnectionStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ConnectionId': obj.connectionId,
    'PreviousStatus': toJson_Ec2ClientVpnConnectionStatus(obj.previousStatus),
    'CurrentStatus': toJson_Ec2ClientVpnConnectionStatus(obj.currentStatus),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SecurityGroupRuleDescription
 */
export interface Ec2SecurityGroupRuleDescription {
  /**
   * @schema Ec2SecurityGroupRuleDescription#SecurityGroupRuleId
   */
  readonly securityGroupRuleId?: string;

  /**
   * @schema Ec2SecurityGroupRuleDescription#Description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'Ec2SecurityGroupRuleDescription' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SecurityGroupRuleDescription(obj: Ec2SecurityGroupRuleDescription | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupRuleId': obj.securityGroupRuleId,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SubnetAssociation
 */
export interface Ec2SubnetAssociation {
  /**
   * @schema Ec2SubnetAssociation#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2SubnetAssociation#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2SubnetAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SubnetAssociation(obj: Ec2SubnetAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SubnetId': obj.subnetId,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PeeringTgwInfo
 */
export interface Ec2PeeringTgwInfo {
  /**
   * @schema Ec2PeeringTgwInfo#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2PeeringTgwInfo#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2PeeringTgwInfo#Region
   */
  readonly region?: string;

}

/**
 * Converts an object of type 'Ec2PeeringTgwInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PeeringTgwInfo(obj: Ec2PeeringTgwInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayId': obj.transitGatewayId,
    'OwnerId': obj.ownerId,
    'Region': obj.region,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PeeringAttachmentStatus
 */
export interface Ec2PeeringAttachmentStatus {
  /**
   * @schema Ec2PeeringAttachmentStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2PeeringAttachmentStatus#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2PeeringAttachmentStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PeeringAttachmentStatus(obj: Ec2PeeringAttachmentStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayVpcAttachmentOptions
 */
export interface Ec2TransitGatewayVpcAttachmentOptions {
  /**
   * @schema Ec2TransitGatewayVpcAttachmentOptions#DnsSupport
   */
  readonly dnsSupport?: string;

  /**
   * @schema Ec2TransitGatewayVpcAttachmentOptions#Ipv6Support
   */
  readonly ipv6Support?: string;

  /**
   * @schema Ec2TransitGatewayVpcAttachmentOptions#ApplianceModeSupport
   */
  readonly applianceModeSupport?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayVpcAttachmentOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayVpcAttachmentOptions(obj: Ec2TransitGatewayVpcAttachmentOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DnsSupport': obj.dnsSupport,
    'Ipv6Support': obj.ipv6Support,
    'ApplianceModeSupport': obj.applianceModeSupport,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnsuccessfulItemError
 */
export interface Ec2UnsuccessfulItemError {
  /**
   * @schema Ec2UnsuccessfulItemError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2UnsuccessfulItemError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2UnsuccessfulItemError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnsuccessfulItemError(obj: Ec2UnsuccessfulItemError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcPeeringConnectionVpcInfo
 */
export interface Ec2VpcPeeringConnectionVpcInfo {
  /**
   * @schema Ec2VpcPeeringConnectionVpcInfo#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2VpcPeeringConnectionVpcInfo#Ipv6CidrBlockSet
   */
  readonly ipv6CidrBlockSet?: Ec2Ipv6CidrBlock[];

  /**
   * @schema Ec2VpcPeeringConnectionVpcInfo#CidrBlockSet
   */
  readonly cidrBlockSet?: Ec2CidrBlock[];

  /**
   * @schema Ec2VpcPeeringConnectionVpcInfo#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2VpcPeeringConnectionVpcInfo#PeeringOptions
   */
  readonly peeringOptions?: Ec2VpcPeeringConnectionOptionsDescription;

  /**
   * @schema Ec2VpcPeeringConnectionVpcInfo#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2VpcPeeringConnectionVpcInfo#Region
   */
  readonly region?: string;

}

/**
 * Converts an object of type 'Ec2VpcPeeringConnectionVpcInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcPeeringConnectionVpcInfo(obj: Ec2VpcPeeringConnectionVpcInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrBlock': obj.cidrBlock,
    'Ipv6CidrBlockSet': obj.ipv6CidrBlockSet?.map(y => toJson_Ec2Ipv6CidrBlock(y)),
    'CidrBlockSet': obj.cidrBlockSet?.map(y => toJson_Ec2CidrBlock(y)),
    'OwnerId': obj.ownerId,
    'PeeringOptions': toJson_Ec2VpcPeeringConnectionOptionsDescription(obj.peeringOptions),
    'VpcId': obj.vpcId,
    'Region': obj.region,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcPeeringConnectionStateReason
 */
export interface Ec2VpcPeeringConnectionStateReason {
  /**
   * @schema Ec2VpcPeeringConnectionStateReason#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2VpcPeeringConnectionStateReason#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2VpcPeeringConnectionStateReason' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcPeeringConnectionStateReason(obj: Ec2VpcPeeringConnectionStateReason | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IamInstanceProfile
 */
export interface Ec2IamInstanceProfile {
  /**
   * @schema Ec2IamInstanceProfile#Arn
   */
  readonly arn?: string;

  /**
   * @schema Ec2IamInstanceProfile#Id
   */
  readonly id?: string;

}

/**
 * Converts an object of type 'Ec2IamInstanceProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IamInstanceProfile(obj: Ec2IamInstanceProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Arn': obj.arn,
    'Id': obj.id,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceEventWindowTimeRange
 */
export interface Ec2InstanceEventWindowTimeRange {
  /**
   * @schema Ec2InstanceEventWindowTimeRange#StartWeekDay
   */
  readonly startWeekDay?: string;

  /**
   * @schema Ec2InstanceEventWindowTimeRange#StartHour
   */
  readonly startHour?: number;

  /**
   * @schema Ec2InstanceEventWindowTimeRange#EndWeekDay
   */
  readonly endWeekDay?: string;

  /**
   * @schema Ec2InstanceEventWindowTimeRange#EndHour
   */
  readonly endHour?: number;

}

/**
 * Converts an object of type 'Ec2InstanceEventWindowTimeRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceEventWindowTimeRange(obj: Ec2InstanceEventWindowTimeRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'StartWeekDay': obj.startWeekDay,
    'StartHour': obj.startHour,
    'EndWeekDay': obj.endWeekDay,
    'EndHour': obj.endHour,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceEventWindowAssociationTarget
 */
export interface Ec2InstanceEventWindowAssociationTarget {
  /**
   * @schema Ec2InstanceEventWindowAssociationTarget#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2InstanceEventWindowAssociationTarget#Tags
   */
  readonly tags?: Ec2Tag[];

  /**
   * @schema Ec2InstanceEventWindowAssociationTarget#DedicatedHostIds
   */
  readonly dedicatedHostIds?: string[];

}

/**
 * Converts an object of type 'Ec2InstanceEventWindowAssociationTarget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceEventWindowAssociationTarget(obj: Ec2InstanceEventWindowAssociationTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceIds': obj.instanceIds?.map(y => y),
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
    'DedicatedHostIds': obj.dedicatedHostIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SubnetCidrBlockState
 */
export interface Ec2SubnetCidrBlockState {
  /**
   * @schema Ec2SubnetCidrBlockState#State
   */
  readonly state?: string;

  /**
   * @schema Ec2SubnetCidrBlockState#StatusMessage
   */
  readonly statusMessage?: string;

}

/**
 * Converts an object of type 'Ec2SubnetCidrBlockState' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SubnetCidrBlockState(obj: Ec2SubnetCidrBlockState | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'StatusMessage': obj.statusMessage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcCidrBlockState
 */
export interface Ec2VpcCidrBlockState {
  /**
   * @schema Ec2VpcCidrBlockState#State
   */
  readonly state?: string;

  /**
   * @schema Ec2VpcCidrBlockState#StatusMessage
   */
  readonly statusMessage?: string;

}

/**
 * Converts an object of type 'Ec2VpcCidrBlockState' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcCidrBlockState(obj: Ec2VpcCidrBlockState | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'StatusMessage': obj.statusMessage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IpRange
 */
export interface Ec2IpRange {
  /**
   * @schema Ec2IpRange#CidrIp
   */
  readonly cidrIp?: string;

  /**
   * @schema Ec2IpRange#Description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'Ec2IpRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IpRange(obj: Ec2IpRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrIp': obj.cidrIp,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv6Range
 */
export interface Ec2Ipv6Range {
  /**
   * @schema Ec2Ipv6Range#CidrIpv6
   */
  readonly cidrIpv6?: string;

  /**
   * @schema Ec2Ipv6Range#Description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'Ec2Ipv6Range' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv6Range(obj: Ec2Ipv6Range | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrIpv6': obj.cidrIpv6,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PrefixListId
 */
export interface Ec2PrefixListId {
  /**
   * @schema Ec2PrefixListId#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2PrefixListId#PrefixListId
   */
  readonly prefixListId?: string;

}

/**
 * Converts an object of type 'Ec2PrefixListId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PrefixListId(obj: Ec2PrefixListId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'PrefixListId': obj.prefixListId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UserIdGroupPair
 */
export interface Ec2UserIdGroupPair {
  /**
   * @schema Ec2UserIdGroupPair#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2UserIdGroupPair#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2UserIdGroupPair#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2UserIdGroupPair#PeeringStatus
   */
  readonly peeringStatus?: string;

  /**
   * @schema Ec2UserIdGroupPair#UserId
   */
  readonly userId?: string;

  /**
   * @schema Ec2UserIdGroupPair#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2UserIdGroupPair#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2UserIdGroupPair' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UserIdGroupPair(obj: Ec2UserIdGroupPair | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'GroupId': obj.groupId,
    'GroupName': obj.groupName,
    'PeeringStatus': obj.peeringStatus,
    'UserId': obj.userId,
    'VpcId': obj.vpcId,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReferencedSecurityGroup
 */
export interface Ec2ReferencedSecurityGroup {
  /**
   * @schema Ec2ReferencedSecurityGroup#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2ReferencedSecurityGroup#PeeringStatus
   */
  readonly peeringStatus?: string;

  /**
   * @schema Ec2ReferencedSecurityGroup#UserId
   */
  readonly userId?: string;

  /**
   * @schema Ec2ReferencedSecurityGroup#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2ReferencedSecurityGroup#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2ReferencedSecurityGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReferencedSecurityGroup(obj: Ec2ReferencedSecurityGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupId': obj.groupId,
    'PeeringStatus': obj.peeringStatus,
    'UserId': obj.userId,
    'VpcId': obj.vpcId,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2S3Storage
 */
export interface Ec2S3Storage {
  /**
   * @schema Ec2S3Storage#AWSAccessKeyId
   */
  readonly awsAccessKeyId?: string;

  /**
   * @schema Ec2S3Storage#Bucket
   */
  readonly bucket?: string;

  /**
   * @schema Ec2S3Storage#Prefix
   */
  readonly prefix?: string;

  /**
   * @schema Ec2S3Storage#UploadPolicy
   */
  readonly uploadPolicy?: any;

  /**
   * @schema Ec2S3Storage#UploadPolicySignature
   */
  readonly uploadPolicySignature?: string;

}

/**
 * Converts an object of type 'Ec2S3Storage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2S3Storage(obj: Ec2S3Storage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AWSAccessKeyId': obj.awsAccessKeyId,
    'Bucket': obj.bucket,
    'Prefix': obj.prefix,
    'UploadPolicy': obj.uploadPolicy,
    'UploadPolicySignature': obj.uploadPolicySignature,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2BundleTaskError
 */
export interface Ec2BundleTaskError {
  /**
   * @schema Ec2BundleTaskError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2BundleTaskError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2BundleTaskError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2BundleTaskError(obj: Ec2BundleTaskError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceCount
 */
export interface Ec2InstanceCount {
  /**
   * @schema Ec2InstanceCount#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2InstanceCount#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2InstanceCount' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceCount(obj: Ec2InstanceCount | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceCount': obj.instanceCount,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PriceSchedule
 */
export interface Ec2PriceSchedule {
  /**
   * @schema Ec2PriceSchedule#Active
   */
  readonly active?: boolean;

  /**
   * @schema Ec2PriceSchedule#CurrencyCode
   */
  readonly currencyCode?: string;

  /**
   * @schema Ec2PriceSchedule#Price
   */
  readonly price?: number;

  /**
   * @schema Ec2PriceSchedule#Term
   */
  readonly term?: number;

}

/**
 * Converts an object of type 'Ec2PriceSchedule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PriceSchedule(obj: Ec2PriceSchedule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Active': obj.active,
    'CurrencyCode': obj.currencyCode,
    'Price': obj.price,
    'Term': obj.term,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CancelSpotFleetRequestsError
 */
export interface Ec2CancelSpotFleetRequestsError {
  /**
   * @schema Ec2CancelSpotFleetRequestsError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2CancelSpotFleetRequestsError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2CancelSpotFleetRequestsError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CancelSpotFleetRequestsError(obj: Ec2CancelSpotFleetRequestsError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DirectoryServiceAuthenticationRequest
 */
export interface Ec2DirectoryServiceAuthenticationRequest {
  /**
   * @schema Ec2DirectoryServiceAuthenticationRequest#DirectoryId
   */
  readonly directoryId?: string;

}

/**
 * Converts an object of type 'Ec2DirectoryServiceAuthenticationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DirectoryServiceAuthenticationRequest(obj: Ec2DirectoryServiceAuthenticationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DirectoryId': obj.directoryId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CertificateAuthenticationRequest
 */
export interface Ec2CertificateAuthenticationRequest {
  /**
   * @schema Ec2CertificateAuthenticationRequest#ClientRootCertificateChainArn
   */
  readonly clientRootCertificateChainArn?: string;

}

/**
 * Converts an object of type 'Ec2CertificateAuthenticationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CertificateAuthenticationRequest(obj: Ec2CertificateAuthenticationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientRootCertificateChainArn': obj.clientRootCertificateChainArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FederatedAuthenticationRequest
 */
export interface Ec2FederatedAuthenticationRequest {
  /**
   * @schema Ec2FederatedAuthenticationRequest#SAMLProviderArn
   */
  readonly samlProviderArn?: string;

  /**
   * @schema Ec2FederatedAuthenticationRequest#SelfServiceSAMLProviderArn
   */
  readonly selfServiceSamlProviderArn?: string;

}

/**
 * Converts an object of type 'Ec2FederatedAuthenticationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FederatedAuthenticationRequest(obj: Ec2FederatedAuthenticationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SAMLProviderArn': obj.samlProviderArn,
    'SelfServiceSAMLProviderArn': obj.selfServiceSamlProviderArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DhcpConfiguration
 */
export interface Ec2DhcpConfiguration {
  /**
   * @schema Ec2DhcpConfiguration#Key
   */
  readonly key?: string;

  /**
   * @schema Ec2DhcpConfiguration#Values
   */
  readonly values?: Ec2AttributeValue[];

}

/**
 * Converts an object of type 'Ec2DhcpConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DhcpConfiguration(obj: Ec2DhcpConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'Values': obj.values?.map(y => toJson_Ec2AttributeValue(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InternetGatewayAttachment
 */
export interface Ec2InternetGatewayAttachment {
  /**
   * @schema Ec2InternetGatewayAttachment#State
   */
  readonly state?: string;

  /**
   * @schema Ec2InternetGatewayAttachment#VpcId
   */
  readonly vpcId?: string;

}

/**
 * Converts an object of type 'Ec2InternetGatewayAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InternetGatewayAttachment(obj: Ec2InternetGatewayAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'VpcId': obj.vpcId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetSpotMaintenanceStrategiesRequest
 */
export interface Ec2FleetSpotMaintenanceStrategiesRequest {
  /**
   * @schema Ec2FleetSpotMaintenanceStrategiesRequest#CapacityRebalance
   */
  readonly capacityRebalance?: Ec2FleetSpotCapacityRebalanceRequest;

}

/**
 * Converts an object of type 'Ec2FleetSpotMaintenanceStrategiesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetSpotMaintenanceStrategiesRequest(obj: Ec2FleetSpotMaintenanceStrategiesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityRebalance': toJson_Ec2FleetSpotCapacityRebalanceRequest(obj.capacityRebalance),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CapacityReservationOptionsRequest
 */
export interface Ec2CapacityReservationOptionsRequest {
  /**
   * @schema Ec2CapacityReservationOptionsRequest#UsageStrategy
   */
  readonly usageStrategy?: string;

}

/**
 * Converts an object of type 'Ec2CapacityReservationOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CapacityReservationOptionsRequest(obj: Ec2CapacityReservationOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'UsageStrategy': obj.usageStrategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetLaunchTemplateSpecificationRequest
 */
export interface Ec2FleetLaunchTemplateSpecificationRequest {
  /**
   * @schema Ec2FleetLaunchTemplateSpecificationRequest#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2FleetLaunchTemplateSpecificationRequest#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2FleetLaunchTemplateSpecificationRequest#Version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'Ec2FleetLaunchTemplateSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetLaunchTemplateSpecificationRequest(obj: Ec2FleetLaunchTemplateSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'Version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetLaunchTemplateOverridesRequest
 */
export interface Ec2FleetLaunchTemplateOverridesRequest {
  /**
   * @schema Ec2FleetLaunchTemplateOverridesRequest#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2FleetLaunchTemplateOverridesRequest#MaxPrice
   */
  readonly maxPrice?: string;

  /**
   * @schema Ec2FleetLaunchTemplateOverridesRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2FleetLaunchTemplateOverridesRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2FleetLaunchTemplateOverridesRequest#WeightedCapacity
   */
  readonly weightedCapacity?: number;

  /**
   * @schema Ec2FleetLaunchTemplateOverridesRequest#Priority
   */
  readonly priority?: number;

  /**
   * @schema Ec2FleetLaunchTemplateOverridesRequest#Placement
   */
  readonly placement?: Ec2Placement;

}

/**
 * Converts an object of type 'Ec2FleetLaunchTemplateOverridesRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetLaunchTemplateOverridesRequest(obj: Ec2FleetLaunchTemplateOverridesRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceType': obj.instanceType,
    'MaxPrice': obj.maxPrice,
    'SubnetId': obj.subnetId,
    'AvailabilityZone': obj.availabilityZone,
    'WeightedCapacity': obj.weightedCapacity,
    'Priority': obj.priority,
    'Placement': toJson_Ec2Placement(obj.placement),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateAndOverridesResponse
 */
export interface Ec2LaunchTemplateAndOverridesResponse {
  /**
   * @schema Ec2LaunchTemplateAndOverridesResponse#LaunchTemplateSpecification
   */
  readonly launchTemplateSpecification?: Ec2FleetLaunchTemplateSpecification;

  /**
   * @schema Ec2LaunchTemplateAndOverridesResponse#Overrides
   */
  readonly overrides?: Ec2FleetLaunchTemplateOverrides;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateAndOverridesResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateAndOverridesResponse(obj: Ec2LaunchTemplateAndOverridesResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateSpecification': toJson_Ec2FleetLaunchTemplateSpecification(obj.launchTemplateSpecification),
    'Overrides': toJson_Ec2FleetLaunchTemplateOverrides(obj.overrides),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EbsBlockDevice
 */
export interface Ec2EbsBlockDevice {
  /**
   * @schema Ec2EbsBlockDevice#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2EbsBlockDevice#Iops
   */
  readonly iops?: number;

  /**
   * @schema Ec2EbsBlockDevice#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2EbsBlockDevice#VolumeSize
   */
  readonly volumeSize?: number;

  /**
   * @schema Ec2EbsBlockDevice#VolumeType
   */
  readonly volumeType?: string;

  /**
   * @schema Ec2EbsBlockDevice#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2EbsBlockDevice#Throughput
   */
  readonly throughput?: number;

  /**
   * @schema Ec2EbsBlockDevice#OutpostArn
   */
  readonly outpostArn?: string;

  /**
   * @schema Ec2EbsBlockDevice#Encrypted
   */
  readonly encrypted?: boolean;

}

/**
 * Converts an object of type 'Ec2EbsBlockDevice' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EbsBlockDevice(obj: Ec2EbsBlockDevice | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeleteOnTermination': obj.deleteOnTermination,
    'Iops': obj.iops,
    'SnapshotId': obj.snapshotId,
    'VolumeSize': obj.volumeSize,
    'VolumeType': obj.volumeType,
    'KmsKeyId': obj.kmsKeyId,
    'Throughput': obj.throughput,
    'OutpostArn': obj.outpostArn,
    'Encrypted': obj.encrypted,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ExportToS3Task
 */
export interface Ec2ExportToS3Task {
  /**
   * @schema Ec2ExportToS3Task#ContainerFormat
   */
  readonly containerFormat?: string;

  /**
   * @schema Ec2ExportToS3Task#DiskImageFormat
   */
  readonly diskImageFormat?: string;

  /**
   * @schema Ec2ExportToS3Task#S3Bucket
   */
  readonly s3Bucket?: string;

  /**
   * @schema Ec2ExportToS3Task#S3Key
   */
  readonly s3Key?: string;

}

/**
 * Converts an object of type 'Ec2ExportToS3Task' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ExportToS3Task(obj: Ec2ExportToS3Task | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ContainerFormat': obj.containerFormat,
    'DiskImageFormat': obj.diskImageFormat,
    'S3Bucket': obj.s3Bucket,
    'S3Key': obj.s3Key,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceExportDetails
 */
export interface Ec2InstanceExportDetails {
  /**
   * @schema Ec2InstanceExportDetails#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2InstanceExportDetails#TargetEnvironment
   */
  readonly targetEnvironment?: string;

}

/**
 * Converts an object of type 'Ec2InstanceExportDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceExportDetails(obj: Ec2InstanceExportDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'TargetEnvironment': obj.targetEnvironment,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateIamInstanceProfileSpecificationRequest
 */
export interface Ec2LaunchTemplateIamInstanceProfileSpecificationRequest {
  /**
   * @schema Ec2LaunchTemplateIamInstanceProfileSpecificationRequest#Arn
   */
  readonly arn?: string;

  /**
   * @schema Ec2LaunchTemplateIamInstanceProfileSpecificationRequest#Name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateIamInstanceProfileSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateIamInstanceProfileSpecificationRequest(obj: Ec2LaunchTemplateIamInstanceProfileSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Arn': obj.arn,
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateBlockDeviceMappingRequest
 */
export interface Ec2LaunchTemplateBlockDeviceMappingRequest {
  /**
   * @schema Ec2LaunchTemplateBlockDeviceMappingRequest#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2LaunchTemplateBlockDeviceMappingRequest#VirtualName
   */
  readonly virtualName?: string;

  /**
   * @schema Ec2LaunchTemplateBlockDeviceMappingRequest#Ebs
   */
  readonly ebs?: Ec2LaunchTemplateEbsBlockDeviceRequest;

  /**
   * @schema Ec2LaunchTemplateBlockDeviceMappingRequest#NoDevice
   */
  readonly noDevice?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateBlockDeviceMappingRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateBlockDeviceMappingRequest(obj: Ec2LaunchTemplateBlockDeviceMappingRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeviceName': obj.deviceName,
    'VirtualName': obj.virtualName,
    'Ebs': toJson_Ec2LaunchTemplateEbsBlockDeviceRequest(obj.ebs),
    'NoDevice': obj.noDevice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
 */
export interface Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest {
  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#AssociateCarrierIpAddress
   */
  readonly associateCarrierIpAddress?: boolean;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#AssociatePublicIpAddress
   */
  readonly associatePublicIpAddress?: boolean;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#DeviceIndex
   */
  readonly deviceIndex?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#Groups
   */
  readonly groups?: string[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#InterfaceType
   */
  readonly interfaceType?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#Ipv6AddressCount
   */
  readonly ipv6AddressCount?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#Ipv6Addresses
   */
  readonly ipv6Addresses?: Ec2InstanceIpv6AddressRequest[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#PrivateIpAddresses
   */
  readonly privateIpAddresses?: Ec2PrivateIpAddressSpecification[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#SecondaryPrivateIpAddressCount
   */
  readonly secondaryPrivateIpAddressCount?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#NetworkCardIndex
   */
  readonly networkCardIndex?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#Ipv4Prefixes
   */
  readonly ipv4Prefixes?: Ec2Ipv4PrefixSpecificationRequest[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#Ipv4PrefixCount
   */
  readonly ipv4PrefixCount?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#Ipv6Prefixes
   */
  readonly ipv6Prefixes?: Ec2Ipv6PrefixSpecificationRequest[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest#Ipv6PrefixCount
   */
  readonly ipv6PrefixCount?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(obj: Ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociateCarrierIpAddress': obj.associateCarrierIpAddress,
    'AssociatePublicIpAddress': obj.associatePublicIpAddress,
    'DeleteOnTermination': obj.deleteOnTermination,
    'Description': obj.description,
    'DeviceIndex': obj.deviceIndex,
    'Groups': obj.groups?.map(y => y),
    'InterfaceType': obj.interfaceType,
    'Ipv6AddressCount': obj.ipv6AddressCount,
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => toJson_Ec2InstanceIpv6AddressRequest(y)),
    'NetworkInterfaceId': obj.networkInterfaceId,
    'PrivateIpAddress': obj.privateIpAddress,
    'PrivateIpAddresses': obj.privateIpAddresses?.map(y => toJson_Ec2PrivateIpAddressSpecification(y)),
    'SecondaryPrivateIpAddressCount': obj.secondaryPrivateIpAddressCount,
    'SubnetId': obj.subnetId,
    'NetworkCardIndex': obj.networkCardIndex,
    'Ipv4Prefixes': obj.ipv4Prefixes?.map(y => toJson_Ec2Ipv4PrefixSpecificationRequest(y)),
    'Ipv4PrefixCount': obj.ipv4PrefixCount,
    'Ipv6Prefixes': obj.ipv6Prefixes?.map(y => toJson_Ec2Ipv6PrefixSpecificationRequest(y)),
    'Ipv6PrefixCount': obj.ipv6PrefixCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplatesMonitoringRequest
 */
export interface Ec2LaunchTemplatesMonitoringRequest {
  /**
   * @schema Ec2LaunchTemplatesMonitoringRequest#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2LaunchTemplatesMonitoringRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplatesMonitoringRequest(obj: Ec2LaunchTemplatesMonitoringRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplatePlacementRequest
 */
export interface Ec2LaunchTemplatePlacementRequest {
  /**
   * @schema Ec2LaunchTemplatePlacementRequest#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2LaunchTemplatePlacementRequest#Affinity
   */
  readonly affinity?: string;

  /**
   * @schema Ec2LaunchTemplatePlacementRequest#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2LaunchTemplatePlacementRequest#HostId
   */
  readonly hostId?: string;

  /**
   * @schema Ec2LaunchTemplatePlacementRequest#Tenancy
   */
  readonly tenancy?: string;

  /**
   * @schema Ec2LaunchTemplatePlacementRequest#SpreadDomain
   */
  readonly spreadDomain?: string;

  /**
   * @schema Ec2LaunchTemplatePlacementRequest#HostResourceGroupArn
   */
  readonly hostResourceGroupArn?: string;

  /**
   * @schema Ec2LaunchTemplatePlacementRequest#PartitionNumber
   */
  readonly partitionNumber?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplatePlacementRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplatePlacementRequest(obj: Ec2LaunchTemplatePlacementRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Affinity': obj.affinity,
    'GroupName': obj.groupName,
    'HostId': obj.hostId,
    'Tenancy': obj.tenancy,
    'SpreadDomain': obj.spreadDomain,
    'HostResourceGroupArn': obj.hostResourceGroupArn,
    'PartitionNumber': obj.partitionNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateTagSpecificationRequest
 */
export interface Ec2LaunchTemplateTagSpecificationRequest {
  /**
   * @schema Ec2LaunchTemplateTagSpecificationRequest#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2LaunchTemplateTagSpecificationRequest#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LaunchTemplateTagSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateTagSpecificationRequest(obj: Ec2LaunchTemplateTagSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ResourceType': obj.resourceType,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateElasticInferenceAccelerator
 */
export interface Ec2LaunchTemplateElasticInferenceAccelerator {
  /**
   * @schema Ec2LaunchTemplateElasticInferenceAccelerator#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2LaunchTemplateElasticInferenceAccelerator#Count
   */
  readonly count?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateElasticInferenceAccelerator' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateElasticInferenceAccelerator(obj: Ec2LaunchTemplateElasticInferenceAccelerator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Count': obj.count,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateInstanceMarketOptionsRequest
 */
export interface Ec2LaunchTemplateInstanceMarketOptionsRequest {
  /**
   * @schema Ec2LaunchTemplateInstanceMarketOptionsRequest#MarketType
   */
  readonly marketType?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceMarketOptionsRequest#SpotOptions
   */
  readonly spotOptions?: Ec2LaunchTemplateSpotMarketOptionsRequest;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateInstanceMarketOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateInstanceMarketOptionsRequest(obj: Ec2LaunchTemplateInstanceMarketOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MarketType': obj.marketType,
    'SpotOptions': toJson_Ec2LaunchTemplateSpotMarketOptionsRequest(obj.spotOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateCpuOptionsRequest
 */
export interface Ec2LaunchTemplateCpuOptionsRequest {
  /**
   * @schema Ec2LaunchTemplateCpuOptionsRequest#CoreCount
   */
  readonly coreCount?: number;

  /**
   * @schema Ec2LaunchTemplateCpuOptionsRequest#ThreadsPerCore
   */
  readonly threadsPerCore?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateCpuOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateCpuOptionsRequest(obj: Ec2LaunchTemplateCpuOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CoreCount': obj.coreCount,
    'ThreadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateCapacityReservationSpecificationRequest
 */
export interface Ec2LaunchTemplateCapacityReservationSpecificationRequest {
  /**
   * @schema Ec2LaunchTemplateCapacityReservationSpecificationRequest#CapacityReservationPreference
   */
  readonly capacityReservationPreference?: string;

  /**
   * @schema Ec2LaunchTemplateCapacityReservationSpecificationRequest#CapacityReservationTarget
   */
  readonly capacityReservationTarget?: Ec2CapacityReservationTarget;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateCapacityReservationSpecificationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateCapacityReservationSpecificationRequest(obj: Ec2LaunchTemplateCapacityReservationSpecificationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationPreference': obj.capacityReservationPreference,
    'CapacityReservationTarget': toJson_Ec2CapacityReservationTarget(obj.capacityReservationTarget),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateLicenseConfigurationRequest
 */
export interface Ec2LaunchTemplateLicenseConfigurationRequest {
  /**
   * @schema Ec2LaunchTemplateLicenseConfigurationRequest#LicenseConfigurationArn
   */
  readonly licenseConfigurationArn?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateLicenseConfigurationRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateLicenseConfigurationRequest(obj: Ec2LaunchTemplateLicenseConfigurationRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LicenseConfigurationArn': obj.licenseConfigurationArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateHibernationOptionsRequest
 */
export interface Ec2LaunchTemplateHibernationOptionsRequest {
  /**
   * @schema Ec2LaunchTemplateHibernationOptionsRequest#Configured
   */
  readonly configured?: boolean;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateHibernationOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateHibernationOptionsRequest(obj: Ec2LaunchTemplateHibernationOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Configured': obj.configured,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateInstanceMetadataOptionsRequest
 */
export interface Ec2LaunchTemplateInstanceMetadataOptionsRequest {
  /**
   * @schema Ec2LaunchTemplateInstanceMetadataOptionsRequest#HttpTokens
   */
  readonly httpTokens?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceMetadataOptionsRequest#HttpPutResponseHopLimit
   */
  readonly httpPutResponseHopLimit?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceMetadataOptionsRequest#HttpEndpoint
   */
  readonly httpEndpoint?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateInstanceMetadataOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateInstanceMetadataOptionsRequest(obj: Ec2LaunchTemplateInstanceMetadataOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'HttpTokens': obj.httpTokens,
    'HttpPutResponseHopLimit': obj.httpPutResponseHopLimit,
    'HttpEndpoint': obj.httpEndpoint,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateEnclaveOptionsRequest
 */
export interface Ec2LaunchTemplateEnclaveOptionsRequest {
  /**
   * @schema Ec2LaunchTemplateEnclaveOptionsRequest#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateEnclaveOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateEnclaveOptionsRequest(obj: Ec2LaunchTemplateEnclaveOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ValidationError
 */
export interface Ec2ValidationError {
  /**
   * @schema Ec2ValidationError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2ValidationError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2ValidationError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ValidationError(obj: Ec2ValidationError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NatGatewayAddress
 */
export interface Ec2NatGatewayAddress {
  /**
   * @schema Ec2NatGatewayAddress#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2NatGatewayAddress#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2NatGatewayAddress#PrivateIp
   */
  readonly privateIp?: string;

  /**
   * @schema Ec2NatGatewayAddress#PublicIp
   */
  readonly publicIp?: string;

}

/**
 * Converts an object of type 'Ec2NatGatewayAddress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NatGatewayAddress(obj: Ec2NatGatewayAddress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'PrivateIp': obj.privateIp,
    'PublicIp': obj.publicIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ProvisionedBandwidth
 */
export interface Ec2ProvisionedBandwidth {
  /**
   * @schema Ec2ProvisionedBandwidth#ProvisionTime
   */
  readonly provisionTime?: string;

  /**
   * @schema Ec2ProvisionedBandwidth#Provisioned
   */
  readonly provisioned?: string;

  /**
   * @schema Ec2ProvisionedBandwidth#RequestTime
   */
  readonly requestTime?: string;

  /**
   * @schema Ec2ProvisionedBandwidth#Requested
   */
  readonly requested?: string;

  /**
   * @schema Ec2ProvisionedBandwidth#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2ProvisionedBandwidth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ProvisionedBandwidth(obj: Ec2ProvisionedBandwidth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ProvisionTime': obj.provisionTime,
    'Provisioned': obj.provisioned,
    'RequestTime': obj.requestTime,
    'Requested': obj.requested,
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkAclAssociation
 */
export interface Ec2NetworkAclAssociation {
  /**
   * @schema Ec2NetworkAclAssociation#NetworkAclAssociationId
   */
  readonly networkAclAssociationId?: string;

  /**
   * @schema Ec2NetworkAclAssociation#NetworkAclId
   */
  readonly networkAclId?: string;

  /**
   * @schema Ec2NetworkAclAssociation#SubnetId
   */
  readonly subnetId?: string;

}

/**
 * Converts an object of type 'Ec2NetworkAclAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkAclAssociation(obj: Ec2NetworkAclAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkAclAssociationId': obj.networkAclAssociationId,
    'NetworkAclId': obj.networkAclId,
    'SubnetId': obj.subnetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkAclEntry
 */
export interface Ec2NetworkAclEntry {
  /**
   * @schema Ec2NetworkAclEntry#CidrBlock
   */
  readonly cidrBlock?: string;

  /**
   * @schema Ec2NetworkAclEntry#Egress
   */
  readonly egress?: boolean;

  /**
   * @schema Ec2NetworkAclEntry#IcmpTypeCode
   */
  readonly icmpTypeCode?: Ec2IcmpTypeCode;

  /**
   * @schema Ec2NetworkAclEntry#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

  /**
   * @schema Ec2NetworkAclEntry#PortRange
   */
  readonly portRange?: Ec2PortRange;

  /**
   * @schema Ec2NetworkAclEntry#Protocol
   */
  readonly protocol?: string;

  /**
   * @schema Ec2NetworkAclEntry#RuleAction
   */
  readonly ruleAction?: string;

  /**
   * @schema Ec2NetworkAclEntry#RuleNumber
   */
  readonly ruleNumber?: number;

}

/**
 * Converts an object of type 'Ec2NetworkAclEntry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkAclEntry(obj: Ec2NetworkAclEntry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrBlock': obj.cidrBlock,
    'Egress': obj.egress,
    'IcmpTypeCode': toJson_Ec2IcmpTypeCode(obj.icmpTypeCode),
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
    'PortRange': toJson_Ec2PortRange(obj.portRange),
    'Protocol': obj.protocol,
    'RuleAction': obj.ruleAction,
    'RuleNumber': obj.ruleNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInterfaceAssociation
 */
export interface Ec2NetworkInterfaceAssociation {
  /**
   * @schema Ec2NetworkInterfaceAssociation#AllocationId
   */
  readonly allocationId?: string;

  /**
   * @schema Ec2NetworkInterfaceAssociation#AssociationId
   */
  readonly associationId?: string;

  /**
   * @schema Ec2NetworkInterfaceAssociation#IpOwnerId
   */
  readonly ipOwnerId?: string;

  /**
   * @schema Ec2NetworkInterfaceAssociation#PublicDnsName
   */
  readonly publicDnsName?: string;

  /**
   * @schema Ec2NetworkInterfaceAssociation#PublicIp
   */
  readonly publicIp?: string;

  /**
   * @schema Ec2NetworkInterfaceAssociation#CustomerOwnedIp
   */
  readonly customerOwnedIp?: string;

  /**
   * @schema Ec2NetworkInterfaceAssociation#CarrierIp
   */
  readonly carrierIp?: string;

}

/**
 * Converts an object of type 'Ec2NetworkInterfaceAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInterfaceAssociation(obj: Ec2NetworkInterfaceAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationId': obj.allocationId,
    'AssociationId': obj.associationId,
    'IpOwnerId': obj.ipOwnerId,
    'PublicDnsName': obj.publicDnsName,
    'PublicIp': obj.publicIp,
    'CustomerOwnedIp': obj.customerOwnedIp,
    'CarrierIp': obj.carrierIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInterfaceIpv6Address
 */
export interface Ec2NetworkInterfaceIpv6Address {
  /**
   * @schema Ec2NetworkInterfaceIpv6Address#Ipv6Address
   */
  readonly ipv6Address?: string;

}

/**
 * Converts an object of type 'Ec2NetworkInterfaceIpv6Address' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInterfaceIpv6Address(obj: Ec2NetworkInterfaceIpv6Address | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Address': obj.ipv6Address,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInterfacePrivateIpAddress
 */
export interface Ec2NetworkInterfacePrivateIpAddress {
  /**
   * @schema Ec2NetworkInterfacePrivateIpAddress#Association
   */
  readonly association?: Ec2NetworkInterfaceAssociation;

  /**
   * @schema Ec2NetworkInterfacePrivateIpAddress#Primary
   */
  readonly primary?: boolean;

  /**
   * @schema Ec2NetworkInterfacePrivateIpAddress#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2NetworkInterfacePrivateIpAddress#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2NetworkInterfacePrivateIpAddress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInterfacePrivateIpAddress(obj: Ec2NetworkInterfacePrivateIpAddress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Association': toJson_Ec2NetworkInterfaceAssociation(obj.association),
    'Primary': obj.primary,
    'PrivateDnsName': obj.privateDnsName,
    'PrivateIpAddress': obj.privateIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv6PrefixSpecification
 */
export interface Ec2Ipv6PrefixSpecification {
  /**
   * @schema Ec2Ipv6PrefixSpecification#Ipv6Prefix
   */
  readonly ipv6Prefix?: string;

}

/**
 * Converts an object of type 'Ec2Ipv6PrefixSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv6PrefixSpecification(obj: Ec2Ipv6PrefixSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Prefix': obj.ipv6Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInterfacePermissionState
 */
export interface Ec2NetworkInterfacePermissionState {
  /**
   * @schema Ec2NetworkInterfacePermissionState#State
   */
  readonly state?: string;

  /**
   * @schema Ec2NetworkInterfacePermissionState#StatusMessage
   */
  readonly statusMessage?: string;

}

/**
 * Converts an object of type 'Ec2NetworkInterfacePermissionState' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInterfacePermissionState(obj: Ec2NetworkInterfacePermissionState | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'StatusMessage': obj.statusMessage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RouteTableAssociation
 */
export interface Ec2RouteTableAssociation {
  /**
   * @schema Ec2RouteTableAssociation#Main
   */
  readonly main?: boolean;

  /**
   * @schema Ec2RouteTableAssociation#RouteTableAssociationId
   */
  readonly routeTableAssociationId?: string;

  /**
   * @schema Ec2RouteTableAssociation#RouteTableId
   */
  readonly routeTableId?: string;

  /**
   * @schema Ec2RouteTableAssociation#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2RouteTableAssociation#GatewayId
   */
  readonly gatewayId?: string;

  /**
   * @schema Ec2RouteTableAssociation#AssociationState
   */
  readonly associationState?: Ec2RouteTableAssociationState;

}

/**
 * Converts an object of type 'Ec2RouteTableAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RouteTableAssociation(obj: Ec2RouteTableAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Main': obj.main,
    'RouteTableAssociationId': obj.routeTableAssociationId,
    'RouteTableId': obj.routeTableId,
    'SubnetId': obj.subnetId,
    'GatewayId': obj.gatewayId,
    'AssociationState': toJson_Ec2RouteTableAssociationState(obj.associationState),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PropagatingVgw
 */
export interface Ec2PropagatingVgw {
  /**
   * @schema Ec2PropagatingVgw#GatewayId
   */
  readonly gatewayId?: string;

}

/**
 * Converts an object of type 'Ec2PropagatingVgw' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PropagatingVgw(obj: Ec2PropagatingVgw | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GatewayId': obj.gatewayId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Route
 */
export interface Ec2Route {
  /**
   * @schema Ec2Route#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2Route#DestinationIpv6CidrBlock
   */
  readonly destinationIpv6CidrBlock?: string;

  /**
   * @schema Ec2Route#DestinationPrefixListId
   */
  readonly destinationPrefixListId?: string;

  /**
   * @schema Ec2Route#EgressOnlyInternetGatewayId
   */
  readonly egressOnlyInternetGatewayId?: string;

  /**
   * @schema Ec2Route#GatewayId
   */
  readonly gatewayId?: string;

  /**
   * @schema Ec2Route#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2Route#InstanceOwnerId
   */
  readonly instanceOwnerId?: string;

  /**
   * @schema Ec2Route#NatGatewayId
   */
  readonly natGatewayId?: string;

  /**
   * @schema Ec2Route#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2Route#LocalGatewayId
   */
  readonly localGatewayId?: string;

  /**
   * @schema Ec2Route#CarrierGatewayId
   */
  readonly carrierGatewayId?: string;

  /**
   * @schema Ec2Route#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2Route#Origin
   */
  readonly origin?: string;

  /**
   * @schema Ec2Route#State
   */
  readonly state?: string;

  /**
   * @schema Ec2Route#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2Route' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Route(obj: Ec2Route | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'DestinationIpv6CidrBlock': obj.destinationIpv6CidrBlock,
    'DestinationPrefixListId': obj.destinationPrefixListId,
    'EgressOnlyInternetGatewayId': obj.egressOnlyInternetGatewayId,
    'GatewayId': obj.gatewayId,
    'InstanceId': obj.instanceId,
    'InstanceOwnerId': obj.instanceOwnerId,
    'NatGatewayId': obj.natGatewayId,
    'TransitGatewayId': obj.transitGatewayId,
    'LocalGatewayId': obj.localGatewayId,
    'CarrierGatewayId': obj.carrierGatewayId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'Origin': obj.origin,
    'State': obj.state,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotInstanceStateFault
 */
export interface Ec2SpotInstanceStateFault {
  /**
   * @schema Ec2SpotInstanceStateFault#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2SpotInstanceStateFault#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2SpotInstanceStateFault' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotInstanceStateFault(obj: Ec2SpotInstanceStateFault | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TrafficMirrorPortRange
 */
export interface Ec2TrafficMirrorPortRange {
  /**
   * @schema Ec2TrafficMirrorPortRange#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2TrafficMirrorPortRange#ToPort
   */
  readonly toPort?: number;

}

/**
 * Converts an object of type 'Ec2TrafficMirrorPortRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TrafficMirrorPortRange(obj: Ec2TrafficMirrorPortRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FromPort': obj.fromPort,
    'ToPort': obj.toPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayOptions
 */
export interface Ec2TransitGatewayOptions {
  /**
   * @schema Ec2TransitGatewayOptions#AmazonSideAsn
   */
  readonly amazonSideAsn?: number;

  /**
   * @schema Ec2TransitGatewayOptions#TransitGatewayCidrBlocks
   */
  readonly transitGatewayCidrBlocks?: string[];

  /**
   * @schema Ec2TransitGatewayOptions#AutoAcceptSharedAttachments
   */
  readonly autoAcceptSharedAttachments?: string;

  /**
   * @schema Ec2TransitGatewayOptions#DefaultRouteTableAssociation
   */
  readonly defaultRouteTableAssociation?: string;

  /**
   * @schema Ec2TransitGatewayOptions#AssociationDefaultRouteTableId
   */
  readonly associationDefaultRouteTableId?: string;

  /**
   * @schema Ec2TransitGatewayOptions#DefaultRouteTablePropagation
   */
  readonly defaultRouteTablePropagation?: string;

  /**
   * @schema Ec2TransitGatewayOptions#PropagationDefaultRouteTableId
   */
  readonly propagationDefaultRouteTableId?: string;

  /**
   * @schema Ec2TransitGatewayOptions#VpnEcmpSupport
   */
  readonly vpnEcmpSupport?: string;

  /**
   * @schema Ec2TransitGatewayOptions#DnsSupport
   */
  readonly dnsSupport?: string;

  /**
   * @schema Ec2TransitGatewayOptions#MulticastSupport
   */
  readonly multicastSupport?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayOptions(obj: Ec2TransitGatewayOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AmazonSideAsn': obj.amazonSideAsn,
    'TransitGatewayCidrBlocks': obj.transitGatewayCidrBlocks?.map(y => y),
    'AutoAcceptSharedAttachments': obj.autoAcceptSharedAttachments,
    'DefaultRouteTableAssociation': obj.defaultRouteTableAssociation,
    'AssociationDefaultRouteTableId': obj.associationDefaultRouteTableId,
    'DefaultRouteTablePropagation': obj.defaultRouteTablePropagation,
    'PropagationDefaultRouteTableId': obj.propagationDefaultRouteTableId,
    'VpnEcmpSupport': obj.vpnEcmpSupport,
    'DnsSupport': obj.dnsSupport,
    'MulticastSupport': obj.multicastSupport,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayConnectOptions
 */
export interface Ec2TransitGatewayConnectOptions {
  /**
   * @schema Ec2TransitGatewayConnectOptions#Protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayConnectOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayConnectOptions(obj: Ec2TransitGatewayConnectOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayConnectPeerConfiguration
 */
export interface Ec2TransitGatewayConnectPeerConfiguration {
  /**
   * @schema Ec2TransitGatewayConnectPeerConfiguration#TransitGatewayAddress
   */
  readonly transitGatewayAddress?: string;

  /**
   * @schema Ec2TransitGatewayConnectPeerConfiguration#PeerAddress
   */
  readonly peerAddress?: string;

  /**
   * @schema Ec2TransitGatewayConnectPeerConfiguration#InsideCidrBlocks
   */
  readonly insideCidrBlocks?: string[];

  /**
   * @schema Ec2TransitGatewayConnectPeerConfiguration#Protocol
   */
  readonly protocol?: string;

  /**
   * @schema Ec2TransitGatewayConnectPeerConfiguration#BgpConfigurations
   */
  readonly bgpConfigurations?: Ec2TransitGatewayAttachmentBgpConfiguration[];

}

/**
 * Converts an object of type 'Ec2TransitGatewayConnectPeerConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayConnectPeerConfiguration(obj: Ec2TransitGatewayConnectPeerConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAddress': obj.transitGatewayAddress,
    'PeerAddress': obj.peerAddress,
    'InsideCidrBlocks': obj.insideCidrBlocks?.map(y => y),
    'Protocol': obj.protocol,
    'BgpConfigurations': obj.bgpConfigurations?.map(y => toJson_Ec2TransitGatewayAttachmentBgpConfiguration(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayMulticastDomainOptions
 */
export interface Ec2TransitGatewayMulticastDomainOptions {
  /**
   * @schema Ec2TransitGatewayMulticastDomainOptions#Igmpv2Support
   */
  readonly igmpv2Support?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainOptions#StaticSourcesSupport
   */
  readonly staticSourcesSupport?: string;

  /**
   * @schema Ec2TransitGatewayMulticastDomainOptions#AutoAcceptSharedAssociations
   */
  readonly autoAcceptSharedAssociations?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayMulticastDomainOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayMulticastDomainOptions(obj: Ec2TransitGatewayMulticastDomainOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Igmpv2Support': obj.igmpv2Support,
    'StaticSourcesSupport': obj.staticSourcesSupport,
    'AutoAcceptSharedAssociations': obj.autoAcceptSharedAssociations,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayPrefixListAttachment
 */
export interface Ec2TransitGatewayPrefixListAttachment {
  /**
   * @schema Ec2TransitGatewayPrefixListAttachment#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayPrefixListAttachment#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2TransitGatewayPrefixListAttachment#ResourceId
   */
  readonly resourceId?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayPrefixListAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayPrefixListAttachment(obj: Ec2TransitGatewayPrefixListAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'ResourceType': obj.resourceType,
    'ResourceId': obj.resourceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayRouteAttachment
 */
export interface Ec2TransitGatewayRouteAttachment {
  /**
   * @schema Ec2TransitGatewayRouteAttachment#ResourceId
   */
  readonly resourceId?: string;

  /**
   * @schema Ec2TransitGatewayRouteAttachment#TransitGatewayAttachmentId
   */
  readonly transitGatewayAttachmentId?: string;

  /**
   * @schema Ec2TransitGatewayRouteAttachment#ResourceType
   */
  readonly resourceType?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayRouteAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayRouteAttachment(obj: Ec2TransitGatewayRouteAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ResourceId': obj.resourceId,
    'TransitGatewayAttachmentId': obj.transitGatewayAttachmentId,
    'ResourceType': obj.resourceType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SecurityGroupIdentifier
 */
export interface Ec2SecurityGroupIdentifier {
  /**
   * @schema Ec2SecurityGroupIdentifier#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema Ec2SecurityGroupIdentifier#GroupName
   */
  readonly groupName?: string;

}

/**
 * Converts an object of type 'Ec2SecurityGroupIdentifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SecurityGroupIdentifier(obj: Ec2SecurityGroupIdentifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupId': obj.groupId,
    'GroupName': obj.groupName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DnsEntry
 */
export interface Ec2DnsEntry {
  /**
   * @schema Ec2DnsEntry#DnsName
   */
  readonly dnsName?: string;

  /**
   * @schema Ec2DnsEntry#HostedZoneId
   */
  readonly hostedZoneId?: string;

}

/**
 * Converts an object of type 'Ec2DnsEntry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DnsEntry(obj: Ec2DnsEntry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DnsName': obj.dnsName,
    'HostedZoneId': obj.hostedZoneId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LastError
 */
export interface Ec2LastError {
  /**
   * @schema Ec2LastError#Message
   */
  readonly message?: string;

  /**
   * @schema Ec2LastError#Code
   */
  readonly code?: string;

}

/**
 * Converts an object of type 'Ec2LastError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LastError(obj: Ec2LastError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Message': obj.message,
    'Code': obj.code,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ServiceTypeDetail
 */
export interface Ec2ServiceTypeDetail {
  /**
   * @schema Ec2ServiceTypeDetail#ServiceType
   */
  readonly serviceType?: string;

}

/**
 * Converts an object of type 'Ec2ServiceTypeDetail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ServiceTypeDetail(obj: Ec2ServiceTypeDetail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ServiceType': obj.serviceType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PrivateDnsNameConfiguration
 */
export interface Ec2PrivateDnsNameConfiguration {
  /**
   * @schema Ec2PrivateDnsNameConfiguration#State
   */
  readonly state?: string;

  /**
   * @schema Ec2PrivateDnsNameConfiguration#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2PrivateDnsNameConfiguration#Value
   */
  readonly value?: string;

  /**
   * @schema Ec2PrivateDnsNameConfiguration#Name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'Ec2PrivateDnsNameConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PrivateDnsNameConfiguration(obj: Ec2PrivateDnsNameConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'Type': obj.type,
    'Value': obj.value,
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpnTunnelOptionsSpecification
 */
export interface Ec2VpnTunnelOptionsSpecification {
  /**
   * @schema Ec2VpnTunnelOptionsSpecification#TunnelInsideCidr
   */
  readonly tunnelInsideCidr?: string;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#TunnelInsideIpv6Cidr
   */
  readonly tunnelInsideIpv6Cidr?: string;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#PreSharedKey
   */
  readonly preSharedKey?: string;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#Phase1LifetimeSeconds
   */
  readonly phase1LifetimeSeconds?: number;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#Phase2LifetimeSeconds
   */
  readonly phase2LifetimeSeconds?: number;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#RekeyMarginTimeSeconds
   */
  readonly rekeyMarginTimeSeconds?: number;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#RekeyFuzzPercentage
   */
  readonly rekeyFuzzPercentage?: number;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#ReplayWindowSize
   */
  readonly replayWindowSize?: number;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#DPDTimeoutSeconds
   */
  readonly dpdTimeoutSeconds?: number;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#DPDTimeoutAction
   */
  readonly dpdTimeoutAction?: string;

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#Phase1EncryptionAlgorithms
   */
  readonly phase1EncryptionAlgorithms?: Ec2Phase1EncryptionAlgorithmsRequestListValue[];

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#Phase2EncryptionAlgorithms
   */
  readonly phase2EncryptionAlgorithms?: Ec2Phase2EncryptionAlgorithmsRequestListValue[];

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#Phase1IntegrityAlgorithms
   */
  readonly phase1IntegrityAlgorithms?: Ec2Phase1IntegrityAlgorithmsRequestListValue[];

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#Phase2IntegrityAlgorithms
   */
  readonly phase2IntegrityAlgorithms?: Ec2Phase2IntegrityAlgorithmsRequestListValue[];

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#Phase1DHGroupNumbers
   */
  readonly phase1DhGroupNumbers?: Ec2Phase1DhGroupNumbersRequestListValue[];

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#Phase2DHGroupNumbers
   */
  readonly phase2DhGroupNumbers?: Ec2Phase2DhGroupNumbersRequestListValue[];

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#IKEVersions
   */
  readonly ikeVersions?: Ec2IkeVersionsRequestListValue[];

  /**
   * @schema Ec2VpnTunnelOptionsSpecification#StartupAction
   */
  readonly startupAction?: string;

}

/**
 * Converts an object of type 'Ec2VpnTunnelOptionsSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpnTunnelOptionsSpecification(obj: Ec2VpnTunnelOptionsSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TunnelInsideCidr': obj.tunnelInsideCidr,
    'TunnelInsideIpv6Cidr': obj.tunnelInsideIpv6Cidr,
    'PreSharedKey': obj.preSharedKey,
    'Phase1LifetimeSeconds': obj.phase1LifetimeSeconds,
    'Phase2LifetimeSeconds': obj.phase2LifetimeSeconds,
    'RekeyMarginTimeSeconds': obj.rekeyMarginTimeSeconds,
    'RekeyFuzzPercentage': obj.rekeyFuzzPercentage,
    'ReplayWindowSize': obj.replayWindowSize,
    'DPDTimeoutSeconds': obj.dpdTimeoutSeconds,
    'DPDTimeoutAction': obj.dpdTimeoutAction,
    'Phase1EncryptionAlgorithms': obj.phase1EncryptionAlgorithms?.map(y => toJson_Ec2Phase1EncryptionAlgorithmsRequestListValue(y)),
    'Phase2EncryptionAlgorithms': obj.phase2EncryptionAlgorithms?.map(y => toJson_Ec2Phase2EncryptionAlgorithmsRequestListValue(y)),
    'Phase1IntegrityAlgorithms': obj.phase1IntegrityAlgorithms?.map(y => toJson_Ec2Phase1IntegrityAlgorithmsRequestListValue(y)),
    'Phase2IntegrityAlgorithms': obj.phase2IntegrityAlgorithms?.map(y => toJson_Ec2Phase2IntegrityAlgorithmsRequestListValue(y)),
    'Phase1DHGroupNumbers': obj.phase1DhGroupNumbers?.map(y => toJson_Ec2Phase1DhGroupNumbersRequestListValue(y)),
    'Phase2DHGroupNumbers': obj.phase2DhGroupNumbers?.map(y => toJson_Ec2Phase2DhGroupNumbersRequestListValue(y)),
    'IKEVersions': obj.ikeVersions?.map(y => toJson_Ec2IkeVersionsRequestListValue(y)),
    'StartupAction': obj.startupAction,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpnConnectionOptions
 */
export interface Ec2VpnConnectionOptions {
  /**
   * @schema Ec2VpnConnectionOptions#EnableAcceleration
   */
  readonly enableAcceleration?: boolean;

  /**
   * @schema Ec2VpnConnectionOptions#StaticRoutesOnly
   */
  readonly staticRoutesOnly?: boolean;

  /**
   * @schema Ec2VpnConnectionOptions#LocalIpv4NetworkCidr
   */
  readonly localIpv4NetworkCidr?: string;

  /**
   * @schema Ec2VpnConnectionOptions#RemoteIpv4NetworkCidr
   */
  readonly remoteIpv4NetworkCidr?: string;

  /**
   * @schema Ec2VpnConnectionOptions#LocalIpv6NetworkCidr
   */
  readonly localIpv6NetworkCidr?: string;

  /**
   * @schema Ec2VpnConnectionOptions#RemoteIpv6NetworkCidr
   */
  readonly remoteIpv6NetworkCidr?: string;

  /**
   * @schema Ec2VpnConnectionOptions#TunnelInsideIpVersion
   */
  readonly tunnelInsideIpVersion?: string;

  /**
   * @schema Ec2VpnConnectionOptions#TunnelOptions
   */
  readonly tunnelOptions?: Ec2TunnelOption[];

}

/**
 * Converts an object of type 'Ec2VpnConnectionOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpnConnectionOptions(obj: Ec2VpnConnectionOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EnableAcceleration': obj.enableAcceleration,
    'StaticRoutesOnly': obj.staticRoutesOnly,
    'LocalIpv4NetworkCidr': obj.localIpv4NetworkCidr,
    'RemoteIpv4NetworkCidr': obj.remoteIpv4NetworkCidr,
    'LocalIpv6NetworkCidr': obj.localIpv6NetworkCidr,
    'RemoteIpv6NetworkCidr': obj.remoteIpv6NetworkCidr,
    'TunnelInsideIpVersion': obj.tunnelInsideIpVersion,
    'TunnelOptions': obj.tunnelOptions?.map(y => toJson_Ec2TunnelOption(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpnStaticRoute
 */
export interface Ec2VpnStaticRoute {
  /**
   * @schema Ec2VpnStaticRoute#DestinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * @schema Ec2VpnStaticRoute#Source
   */
  readonly source?: string;

  /**
   * @schema Ec2VpnStaticRoute#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2VpnStaticRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpnStaticRoute(obj: Ec2VpnStaticRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidrBlock': obj.destinationCidrBlock,
    'Source': obj.source,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VgwTelemetry
 */
export interface Ec2VgwTelemetry {
  /**
   * @schema Ec2VgwTelemetry#AcceptedRouteCount
   */
  readonly acceptedRouteCount?: number;

  /**
   * @schema Ec2VgwTelemetry#LastStatusChange
   */
  readonly lastStatusChange?: string;

  /**
   * @schema Ec2VgwTelemetry#OutsideIpAddress
   */
  readonly outsideIpAddress?: string;

  /**
   * @schema Ec2VgwTelemetry#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2VgwTelemetry#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2VgwTelemetry#CertificateArn
   */
  readonly certificateArn?: string;

}

/**
 * Converts an object of type 'Ec2VgwTelemetry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VgwTelemetry(obj: Ec2VgwTelemetry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AcceptedRouteCount': obj.acceptedRouteCount,
    'LastStatusChange': obj.lastStatusChange,
    'OutsideIpAddress': obj.outsideIpAddress,
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'CertificateArn': obj.certificateArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteFleetError
 */
export interface Ec2DeleteFleetError {
  /**
   * @schema Ec2DeleteFleetError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2DeleteFleetError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2DeleteFleetError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteFleetError(obj: Ec2DeleteFleetError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ResponseError
 */
export interface Ec2ResponseError {
  /**
   * @schema Ec2ResponseError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2ResponseError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2ResponseError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ResponseError(obj: Ec2ResponseError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DeleteQueuedReservedInstancesError
 */
export interface Ec2DeleteQueuedReservedInstancesError {
  /**
   * @schema Ec2DeleteQueuedReservedInstancesError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2DeleteQueuedReservedInstancesError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2DeleteQueuedReservedInstancesError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DeleteQueuedReservedInstancesError(obj: Ec2DeleteQueuedReservedInstancesError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AccountAttributeValue
 */
export interface Ec2AccountAttributeValue {
  /**
   * @schema Ec2AccountAttributeValue#AttributeValue
   */
  readonly attributeValue?: string;

}

/**
 * Converts an object of type 'Ec2AccountAttributeValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AccountAttributeValue(obj: Ec2AccountAttributeValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttributeValue': obj.attributeValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PtrUpdateStatus
 */
export interface Ec2PtrUpdateStatus {
  /**
   * @schema Ec2PtrUpdateStatus#Value
   */
  readonly value?: string;

  /**
   * @schema Ec2PtrUpdateStatus#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2PtrUpdateStatus#Reason
   */
  readonly reason?: string;

}

/**
 * Converts an object of type 'Ec2PtrUpdateStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PtrUpdateStatus(obj: Ec2PtrUpdateStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
    'Status': obj.status,
    'Reason': obj.reason,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AvailabilityZoneMessage
 */
export interface Ec2AvailabilityZoneMessage {
  /**
   * @schema Ec2AvailabilityZoneMessage#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2AvailabilityZoneMessage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AvailabilityZoneMessage(obj: Ec2AvailabilityZoneMessage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnConnectionStatus
 */
export interface Ec2ClientVpnConnectionStatus {
  /**
   * @schema Ec2ClientVpnConnectionStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2ClientVpnConnectionStatus#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2ClientVpnConnectionStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnConnectionStatus(obj: Ec2ClientVpnConnectionStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AssociatedTargetNetwork
 */
export interface Ec2AssociatedTargetNetwork {
  /**
   * @schema Ec2AssociatedTargetNetwork#NetworkId
   */
  readonly networkId?: string;

  /**
   * @schema Ec2AssociatedTargetNetwork#NetworkType
   */
  readonly networkType?: string;

}

/**
 * Converts an object of type 'Ec2AssociatedTargetNetwork' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AssociatedTargetNetwork(obj: Ec2AssociatedTargetNetwork | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkId': obj.networkId,
    'NetworkType': obj.networkType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnAuthentication
 */
export interface Ec2ClientVpnAuthentication {
  /**
   * @schema Ec2ClientVpnAuthentication#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2ClientVpnAuthentication#ActiveDirectory
   */
  readonly activeDirectory?: Ec2DirectoryServiceAuthentication;

  /**
   * @schema Ec2ClientVpnAuthentication#MutualAuthentication
   */
  readonly mutualAuthentication?: Ec2CertificateAuthentication;

  /**
   * @schema Ec2ClientVpnAuthentication#FederatedAuthentication
   */
  readonly federatedAuthentication?: Ec2FederatedAuthentication;

}

/**
 * Converts an object of type 'Ec2ClientVpnAuthentication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnAuthentication(obj: Ec2ClientVpnAuthentication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'ActiveDirectory': toJson_Ec2DirectoryServiceAuthentication(obj.activeDirectory),
    'MutualAuthentication': toJson_Ec2CertificateAuthentication(obj.mutualAuthentication),
    'FederatedAuthentication': toJson_Ec2FederatedAuthentication(obj.federatedAuthentication),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ConnectionLogResponseOptions
 */
export interface Ec2ConnectionLogResponseOptions {
  /**
   * @schema Ec2ConnectionLogResponseOptions#Enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema Ec2ConnectionLogResponseOptions#CloudwatchLogGroup
   */
  readonly cloudwatchLogGroup?: string;

  /**
   * @schema Ec2ConnectionLogResponseOptions#CloudwatchLogStream
   */
  readonly cloudwatchLogStream?: string;

}

/**
 * Converts an object of type 'Ec2ConnectionLogResponseOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ConnectionLogResponseOptions(obj: Ec2ConnectionLogResponseOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
    'CloudwatchLogGroup': obj.cloudwatchLogGroup,
    'CloudwatchLogStream': obj.cloudwatchLogStream,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientConnectResponseOptions
 */
export interface Ec2ClientConnectResponseOptions {
  /**
   * @schema Ec2ClientConnectResponseOptions#Enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema Ec2ClientConnectResponseOptions#LambdaFunctionArn
   */
  readonly lambdaFunctionArn?: string;

  /**
   * @schema Ec2ClientConnectResponseOptions#Status
   */
  readonly status?: Ec2ClientVpnEndpointAttributeStatus;

}

/**
 * Converts an object of type 'Ec2ClientConnectResponseOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientConnectResponseOptions(obj: Ec2ClientConnectResponseOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
    'LambdaFunctionArn': obj.lambdaFunctionArn,
    'Status': toJson_Ec2ClientVpnEndpointAttributeStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportInstanceTaskDetails
 */
export interface Ec2ImportInstanceTaskDetails {
  /**
   * @schema Ec2ImportInstanceTaskDetails#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportInstanceTaskDetails#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2ImportInstanceTaskDetails#Platform
   */
  readonly platform?: string;

  /**
   * @schema Ec2ImportInstanceTaskDetails#Volumes
   */
  readonly volumes?: Ec2ImportInstanceVolumeDetailItem[];

}

/**
 * Converts an object of type 'Ec2ImportInstanceTaskDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportInstanceTaskDetails(obj: Ec2ImportInstanceTaskDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'InstanceId': obj.instanceId,
    'Platform': obj.platform,
    'Volumes': obj.volumes?.map(y => toJson_Ec2ImportInstanceVolumeDetailItem(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportVolumeTaskDetails
 */
export interface Ec2ImportVolumeTaskDetails {
  /**
   * @schema Ec2ImportVolumeTaskDetails#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ImportVolumeTaskDetails#BytesConverted
   */
  readonly bytesConverted?: number;

  /**
   * @schema Ec2ImportVolumeTaskDetails#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportVolumeTaskDetails#Image
   */
  readonly image?: Ec2DiskImageDescription;

  /**
   * @schema Ec2ImportVolumeTaskDetails#Volume
   */
  readonly volume?: Ec2DiskImageVolumeDescription;

}

/**
 * Converts an object of type 'Ec2ImportVolumeTaskDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportVolumeTaskDetails(obj: Ec2ImportVolumeTaskDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'BytesConverted': obj.bytesConverted,
    'Description': obj.description,
    'Image': toJson_Ec2DiskImageDescription(obj.image),
    'Volume': toJson_Ec2DiskImageVolumeDescription(obj.volume),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ElasticGpuHealth
 */
export interface Ec2ElasticGpuHealth {
  /**
   * @schema Ec2ElasticGpuHealth#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2ElasticGpuHealth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ElasticGpuHealth(obj: Ec2ElasticGpuHealth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EventInformation
 */
export interface Ec2EventInformation {
  /**
   * @schema Ec2EventInformation#EventDescription
   */
  readonly eventDescription?: string;

  /**
   * @schema Ec2EventInformation#EventSubType
   */
  readonly eventSubType?: string;

  /**
   * @schema Ec2EventInformation#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2EventInformation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EventInformation(obj: Ec2EventInformation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EventDescription': obj.eventDescription,
    'EventSubType': obj.eventSubType,
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetLaunchTemplateConfig
 */
export interface Ec2FleetLaunchTemplateConfig {
  /**
   * @schema Ec2FleetLaunchTemplateConfig#LaunchTemplateSpecification
   */
  readonly launchTemplateSpecification?: Ec2FleetLaunchTemplateSpecification;

  /**
   * @schema Ec2FleetLaunchTemplateConfig#Overrides
   */
  readonly overrides?: Ec2FleetLaunchTemplateOverrides[];

}

/**
 * Converts an object of type 'Ec2FleetLaunchTemplateConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetLaunchTemplateConfig(obj: Ec2FleetLaunchTemplateConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateSpecification': toJson_Ec2FleetLaunchTemplateSpecification(obj.launchTemplateSpecification),
    'Overrides': obj.overrides?.map(y => toJson_Ec2FleetLaunchTemplateOverrides(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TargetCapacitySpecification
 */
export interface Ec2TargetCapacitySpecification {
  /**
   * @schema Ec2TargetCapacitySpecification#TotalTargetCapacity
   */
  readonly totalTargetCapacity?: number;

  /**
   * @schema Ec2TargetCapacitySpecification#OnDemandTargetCapacity
   */
  readonly onDemandTargetCapacity?: number;

  /**
   * @schema Ec2TargetCapacitySpecification#SpotTargetCapacity
   */
  readonly spotTargetCapacity?: number;

  /**
   * @schema Ec2TargetCapacitySpecification#DefaultTargetCapacityType
   */
  readonly defaultTargetCapacityType?: string;

}

/**
 * Converts an object of type 'Ec2TargetCapacitySpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TargetCapacitySpecification(obj: Ec2TargetCapacitySpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TotalTargetCapacity': obj.totalTargetCapacity,
    'OnDemandTargetCapacity': obj.onDemandTargetCapacity,
    'SpotTargetCapacity': obj.spotTargetCapacity,
    'DefaultTargetCapacityType': obj.defaultTargetCapacityType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotOptions
 */
export interface Ec2SpotOptions {
  /**
   * @schema Ec2SpotOptions#AllocationStrategy
   */
  readonly allocationStrategy?: string;

  /**
   * @schema Ec2SpotOptions#MaintenanceStrategies
   */
  readonly maintenanceStrategies?: Ec2FleetSpotMaintenanceStrategies;

  /**
   * @schema Ec2SpotOptions#InstanceInterruptionBehavior
   */
  readonly instanceInterruptionBehavior?: string;

  /**
   * @schema Ec2SpotOptions#InstancePoolsToUseCount
   */
  readonly instancePoolsToUseCount?: number;

  /**
   * @schema Ec2SpotOptions#SingleInstanceType
   */
  readonly singleInstanceType?: boolean;

  /**
   * @schema Ec2SpotOptions#SingleAvailabilityZone
   */
  readonly singleAvailabilityZone?: boolean;

  /**
   * @schema Ec2SpotOptions#MinTargetCapacity
   */
  readonly minTargetCapacity?: number;

  /**
   * @schema Ec2SpotOptions#MaxTotalPrice
   */
  readonly maxTotalPrice?: string;

}

/**
 * Converts an object of type 'Ec2SpotOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotOptions(obj: Ec2SpotOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationStrategy': obj.allocationStrategy,
    'MaintenanceStrategies': toJson_Ec2FleetSpotMaintenanceStrategies(obj.maintenanceStrategies),
    'InstanceInterruptionBehavior': obj.instanceInterruptionBehavior,
    'InstancePoolsToUseCount': obj.instancePoolsToUseCount,
    'SingleInstanceType': obj.singleInstanceType,
    'SingleAvailabilityZone': obj.singleAvailabilityZone,
    'MinTargetCapacity': obj.minTargetCapacity,
    'MaxTotalPrice': obj.maxTotalPrice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2OnDemandOptions
 */
export interface Ec2OnDemandOptions {
  /**
   * @schema Ec2OnDemandOptions#AllocationStrategy
   */
  readonly allocationStrategy?: string;

  /**
   * @schema Ec2OnDemandOptions#CapacityReservationOptions
   */
  readonly capacityReservationOptions?: Ec2CapacityReservationOptions;

  /**
   * @schema Ec2OnDemandOptions#SingleInstanceType
   */
  readonly singleInstanceType?: boolean;

  /**
   * @schema Ec2OnDemandOptions#SingleAvailabilityZone
   */
  readonly singleAvailabilityZone?: boolean;

  /**
   * @schema Ec2OnDemandOptions#MinTargetCapacity
   */
  readonly minTargetCapacity?: number;

  /**
   * @schema Ec2OnDemandOptions#MaxTotalPrice
   */
  readonly maxTotalPrice?: string;

}

/**
 * Converts an object of type 'Ec2OnDemandOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2OnDemandOptions(obj: Ec2OnDemandOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllocationStrategy': obj.allocationStrategy,
    'CapacityReservationOptions': toJson_Ec2CapacityReservationOptions(obj.capacityReservationOptions),
    'SingleInstanceType': obj.singleInstanceType,
    'SingleAvailabilityZone': obj.singleAvailabilityZone,
    'MinTargetCapacity': obj.minTargetCapacity,
    'MaxTotalPrice': obj.maxTotalPrice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFleetError
 */
export interface Ec2DescribeFleetError {
  /**
   * @schema Ec2DescribeFleetError#LaunchTemplateAndOverrides
   */
  readonly launchTemplateAndOverrides?: Ec2LaunchTemplateAndOverridesResponse;

  /**
   * @schema Ec2DescribeFleetError#Lifecycle
   */
  readonly lifecycle?: string;

  /**
   * @schema Ec2DescribeFleetError#ErrorCode
   */
  readonly errorCode?: string;

  /**
   * @schema Ec2DescribeFleetError#ErrorMessage
   */
  readonly errorMessage?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFleetError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFleetError(obj: Ec2DescribeFleetError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateAndOverrides': toJson_Ec2LaunchTemplateAndOverridesResponse(obj.launchTemplateAndOverrides),
    'Lifecycle': obj.lifecycle,
    'ErrorCode': obj.errorCode,
    'ErrorMessage': obj.errorMessage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DescribeFleetsInstances
 */
export interface Ec2DescribeFleetsInstances {
  /**
   * @schema Ec2DescribeFleetsInstances#LaunchTemplateAndOverrides
   */
  readonly launchTemplateAndOverrides?: Ec2LaunchTemplateAndOverridesResponse;

  /**
   * @schema Ec2DescribeFleetsInstances#Lifecycle
   */
  readonly lifecycle?: string;

  /**
   * @schema Ec2DescribeFleetsInstances#InstanceIds
   */
  readonly instanceIds?: string[];

  /**
   * @schema Ec2DescribeFleetsInstances#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2DescribeFleetsInstances#Platform
   */
  readonly platform?: string;

}

/**
 * Converts an object of type 'Ec2DescribeFleetsInstances' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DescribeFleetsInstances(obj: Ec2DescribeFleetsInstances | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateAndOverrides': toJson_Ec2LaunchTemplateAndOverridesResponse(obj.launchTemplateAndOverrides),
    'Lifecycle': obj.lifecycle,
    'InstanceIds': obj.instanceIds?.map(y => y),
    'InstanceType': obj.instanceType,
    'Platform': obj.platform,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LoadPermission
 */
export interface Ec2LoadPermission {
  /**
   * @schema Ec2LoadPermission#UserId
   */
  readonly userId?: string;

  /**
   * @schema Ec2LoadPermission#Group
   */
  readonly group?: string;

}

/**
 * Converts an object of type 'Ec2LoadPermission' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LoadPermission(obj: Ec2LoadPermission | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'UserId': obj.userId,
    'Group': obj.group,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PciId
 */
export interface Ec2PciId {
  /**
   * @schema Ec2PciId#DeviceId
   */
  readonly deviceId?: string;

  /**
   * @schema Ec2PciId#VendorId
   */
  readonly vendorId?: string;

  /**
   * @schema Ec2PciId#SubsystemId
   */
  readonly subsystemId?: string;

  /**
   * @schema Ec2PciId#SubsystemVendorId
   */
  readonly subsystemVendorId?: string;

}

/**
 * Converts an object of type 'Ec2PciId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PciId(obj: Ec2PciId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeviceId': obj.deviceId,
    'VendorId': obj.vendorId,
    'SubsystemId': obj.subsystemId,
    'SubsystemVendorId': obj.subsystemVendorId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FpgaImageState
 */
export interface Ec2FpgaImageState {
  /**
   * @schema Ec2FpgaImageState#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2FpgaImageState#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2FpgaImageState' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FpgaImageState(obj: Ec2FpgaImageState | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AvailableCapacity
 */
export interface Ec2AvailableCapacity {
  /**
   * @schema Ec2AvailableCapacity#AvailableInstanceCapacity
   */
  readonly availableInstanceCapacity?: Ec2InstanceCapacity[];

  /**
   * @schema Ec2AvailableCapacity#AvailableVCpus
   */
  readonly availableVCpus?: number;

}

/**
 * Converts an object of type 'Ec2AvailableCapacity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AvailableCapacity(obj: Ec2AvailableCapacity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailableInstanceCapacity': obj.availableInstanceCapacity?.map(y => toJson_Ec2InstanceCapacity(y)),
    'AvailableVCpus': obj.availableVCpus,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2HostProperties
 */
export interface Ec2HostProperties {
  /**
   * @schema Ec2HostProperties#Cores
   */
  readonly cores?: number;

  /**
   * @schema Ec2HostProperties#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2HostProperties#InstanceFamily
   */
  readonly instanceFamily?: string;

  /**
   * @schema Ec2HostProperties#Sockets
   */
  readonly sockets?: number;

  /**
   * @schema Ec2HostProperties#TotalVCpus
   */
  readonly totalVCpus?: number;

}

/**
 * Converts an object of type 'Ec2HostProperties' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2HostProperties(obj: Ec2HostProperties | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cores': obj.cores,
    'InstanceType': obj.instanceType,
    'InstanceFamily': obj.instanceFamily,
    'Sockets': obj.sockets,
    'TotalVCpus': obj.totalVCpus,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2HostInstance
 */
export interface Ec2HostInstance {
  /**
   * @schema Ec2HostInstance#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2HostInstance#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2HostInstance#OwnerId
   */
  readonly ownerId?: string;

}

/**
 * Converts an object of type 'Ec2HostInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2HostInstance(obj: Ec2HostInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceId': obj.instanceId,
    'InstanceType': obj.instanceType,
    'OwnerId': obj.ownerId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StateReason
 */
export interface Ec2StateReason {
  /**
   * @schema Ec2StateReason#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2StateReason#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2StateReason' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StateReason(obj: Ec2StateReason | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EbsInstanceBlockDevice
 */
export interface Ec2EbsInstanceBlockDevice {
  /**
   * @schema Ec2EbsInstanceBlockDevice#AttachTime
   */
  readonly attachTime?: string;

  /**
   * @schema Ec2EbsInstanceBlockDevice#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2EbsInstanceBlockDevice#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2EbsInstanceBlockDevice#VolumeId
   */
  readonly volumeId?: string;

}

/**
 * Converts an object of type 'Ec2EbsInstanceBlockDevice' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EbsInstanceBlockDevice(obj: Ec2EbsInstanceBlockDevice | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttachTime': obj.attachTime,
    'DeleteOnTermination': obj.deleteOnTermination,
    'Status': obj.status,
    'VolumeId': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceState
 */
export interface Ec2InstanceState {
  /**
   * @schema Ec2InstanceState#Code
   */
  readonly code?: number;

  /**
   * @schema Ec2InstanceState#Name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'Ec2InstanceState' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceState(obj: Ec2InstanceState | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceStatusSummary
 */
export interface Ec2InstanceStatusSummary {
  /**
   * @schema Ec2InstanceStatusSummary#Details
   */
  readonly details?: Ec2InstanceStatusDetails[];

  /**
   * @schema Ec2InstanceStatusSummary#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2InstanceStatusSummary' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceStatusSummary(obj: Ec2InstanceStatusSummary | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Details': obj.details?.map(y => toJson_Ec2InstanceStatusDetails(y)),
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ProcessorInfo
 */
export interface Ec2ProcessorInfo {
  /**
   * @schema Ec2ProcessorInfo#SupportedArchitectures
   */
  readonly supportedArchitectures?: string[];

  /**
   * @schema Ec2ProcessorInfo#SustainedClockSpeedInGhz
   */
  readonly sustainedClockSpeedInGhz?: number;

}

/**
 * Converts an object of type 'Ec2ProcessorInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ProcessorInfo(obj: Ec2ProcessorInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SupportedArchitectures': obj.supportedArchitectures?.map(y => y),
    'SustainedClockSpeedInGhz': obj.sustainedClockSpeedInGhz,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VCpuInfo
 */
export interface Ec2VCpuInfo {
  /**
   * @schema Ec2VCpuInfo#DefaultVCpus
   */
  readonly defaultVCpus?: number;

  /**
   * @schema Ec2VCpuInfo#DefaultCores
   */
  readonly defaultCores?: number;

  /**
   * @schema Ec2VCpuInfo#DefaultThreadsPerCore
   */
  readonly defaultThreadsPerCore?: number;

  /**
   * @schema Ec2VCpuInfo#ValidCores
   */
  readonly validCores?: number[];

  /**
   * @schema Ec2VCpuInfo#ValidThreadsPerCore
   */
  readonly validThreadsPerCore?: number[];

}

/**
 * Converts an object of type 'Ec2VCpuInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VCpuInfo(obj: Ec2VCpuInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DefaultVCpus': obj.defaultVCpus,
    'DefaultCores': obj.defaultCores,
    'DefaultThreadsPerCore': obj.defaultThreadsPerCore,
    'ValidCores': obj.validCores?.map(y => y),
    'ValidThreadsPerCore': obj.validThreadsPerCore?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2MemoryInfo
 */
export interface Ec2MemoryInfo {
  /**
   * @schema Ec2MemoryInfo#SizeInMiB
   */
  readonly sizeInMiB?: number;

}

/**
 * Converts an object of type 'Ec2MemoryInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2MemoryInfo(obj: Ec2MemoryInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SizeInMiB': obj.sizeInMiB,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceStorageInfo
 */
export interface Ec2InstanceStorageInfo {
  /**
   * @schema Ec2InstanceStorageInfo#TotalSizeInGB
   */
  readonly totalSizeInGb?: number;

  /**
   * @schema Ec2InstanceStorageInfo#Disks
   */
  readonly disks?: Ec2DiskInfo[];

  /**
   * @schema Ec2InstanceStorageInfo#NvmeSupport
   */
  readonly nvmeSupport?: string;

}

/**
 * Converts an object of type 'Ec2InstanceStorageInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceStorageInfo(obj: Ec2InstanceStorageInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TotalSizeInGB': obj.totalSizeInGb,
    'Disks': obj.disks?.map(y => toJson_Ec2DiskInfo(y)),
    'NvmeSupport': obj.nvmeSupport,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EbsInfo
 */
export interface Ec2EbsInfo {
  /**
   * @schema Ec2EbsInfo#EbsOptimizedSupport
   */
  readonly ebsOptimizedSupport?: string;

  /**
   * @schema Ec2EbsInfo#EncryptionSupport
   */
  readonly encryptionSupport?: string;

  /**
   * @schema Ec2EbsInfo#EbsOptimizedInfo
   */
  readonly ebsOptimizedInfo?: Ec2EbsOptimizedInfo;

  /**
   * @schema Ec2EbsInfo#NvmeSupport
   */
  readonly nvmeSupport?: string;

}

/**
 * Converts an object of type 'Ec2EbsInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EbsInfo(obj: Ec2EbsInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'EbsOptimizedSupport': obj.ebsOptimizedSupport,
    'EncryptionSupport': obj.encryptionSupport,
    'EbsOptimizedInfo': toJson_Ec2EbsOptimizedInfo(obj.ebsOptimizedInfo),
    'NvmeSupport': obj.nvmeSupport,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkInfo
 */
export interface Ec2NetworkInfo {
  /**
   * @schema Ec2NetworkInfo#NetworkPerformance
   */
  readonly networkPerformance?: string;

  /**
   * @schema Ec2NetworkInfo#MaximumNetworkInterfaces
   */
  readonly maximumNetworkInterfaces?: number;

  /**
   * @schema Ec2NetworkInfo#MaximumNetworkCards
   */
  readonly maximumNetworkCards?: number;

  /**
   * @schema Ec2NetworkInfo#DefaultNetworkCardIndex
   */
  readonly defaultNetworkCardIndex?: number;

  /**
   * @schema Ec2NetworkInfo#NetworkCards
   */
  readonly networkCards?: Ec2NetworkCardInfo[];

  /**
   * @schema Ec2NetworkInfo#Ipv4AddressesPerInterface
   */
  readonly ipv4AddressesPerInterface?: number;

  /**
   * @schema Ec2NetworkInfo#Ipv6AddressesPerInterface
   */
  readonly ipv6AddressesPerInterface?: number;

  /**
   * @schema Ec2NetworkInfo#Ipv6Supported
   */
  readonly ipv6Supported?: boolean;

  /**
   * @schema Ec2NetworkInfo#EnaSupport
   */
  readonly enaSupport?: string;

  /**
   * @schema Ec2NetworkInfo#EfaSupported
   */
  readonly efaSupported?: boolean;

  /**
   * @schema Ec2NetworkInfo#EfaInfo
   */
  readonly efaInfo?: Ec2EfaInfo;

}

/**
 * Converts an object of type 'Ec2NetworkInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkInfo(obj: Ec2NetworkInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkPerformance': obj.networkPerformance,
    'MaximumNetworkInterfaces': obj.maximumNetworkInterfaces,
    'MaximumNetworkCards': obj.maximumNetworkCards,
    'DefaultNetworkCardIndex': obj.defaultNetworkCardIndex,
    'NetworkCards': obj.networkCards?.map(y => toJson_Ec2NetworkCardInfo(y)),
    'Ipv4AddressesPerInterface': obj.ipv4AddressesPerInterface,
    'Ipv6AddressesPerInterface': obj.ipv6AddressesPerInterface,
    'Ipv6Supported': obj.ipv6Supported,
    'EnaSupport': obj.enaSupport,
    'EfaSupported': obj.efaSupported,
    'EfaInfo': toJson_Ec2EfaInfo(obj.efaInfo),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GpuInfo
 */
export interface Ec2GpuInfo {
  /**
   * @schema Ec2GpuInfo#Gpus
   */
  readonly gpus?: Ec2GpuDeviceInfo[];

  /**
   * @schema Ec2GpuInfo#TotalGpuMemoryInMiB
   */
  readonly totalGpuMemoryInMiB?: number;

}

/**
 * Converts an object of type 'Ec2GpuInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GpuInfo(obj: Ec2GpuInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Gpus': obj.gpus?.map(y => toJson_Ec2GpuDeviceInfo(y)),
    'TotalGpuMemoryInMiB': obj.totalGpuMemoryInMiB,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FpgaInfo
 */
export interface Ec2FpgaInfo {
  /**
   * @schema Ec2FpgaInfo#Fpgas
   */
  readonly fpgas?: Ec2FpgaDeviceInfo[];

  /**
   * @schema Ec2FpgaInfo#TotalFpgaMemoryInMiB
   */
  readonly totalFpgaMemoryInMiB?: number;

}

/**
 * Converts an object of type 'Ec2FpgaInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FpgaInfo(obj: Ec2FpgaInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Fpgas': obj.fpgas?.map(y => toJson_Ec2FpgaDeviceInfo(y)),
    'TotalFpgaMemoryInMiB': obj.totalFpgaMemoryInMiB,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PlacementGroupInfo
 */
export interface Ec2PlacementGroupInfo {
  /**
   * @schema Ec2PlacementGroupInfo#SupportedStrategies
   */
  readonly supportedStrategies?: string[];

}

/**
 * Converts an object of type 'Ec2PlacementGroupInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PlacementGroupInfo(obj: Ec2PlacementGroupInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SupportedStrategies': obj.supportedStrategies?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InferenceAcceleratorInfo
 */
export interface Ec2InferenceAcceleratorInfo {
  /**
   * @schema Ec2InferenceAcceleratorInfo#Accelerators
   */
  readonly accelerators?: Ec2InferenceDeviceInfo[];

}

/**
 * Converts an object of type 'Ec2InferenceAcceleratorInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InferenceAcceleratorInfo(obj: Ec2InferenceAcceleratorInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Accelerators': obj.accelerators?.map(y => toJson_Ec2InferenceDeviceInfo(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PoolCidrBlock
 */
export interface Ec2PoolCidrBlock {
  /**
   * @schema Ec2PoolCidrBlock#Cidr
   */
  readonly cidr?: string;

}

/**
 * Converts an object of type 'Ec2PoolCidrBlock' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PoolCidrBlock(obj: Ec2PoolCidrBlock | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PathComponent
 */
export interface Ec2PathComponent {
  /**
   * @schema Ec2PathComponent#SequenceNumber
   */
  readonly sequenceNumber?: number;

  /**
   * @schema Ec2PathComponent#AclRule
   */
  readonly aclRule?: Ec2AnalysisAclRule;

  /**
   * @schema Ec2PathComponent#Component
   */
  readonly component?: Ec2AnalysisComponent;

  /**
   * @schema Ec2PathComponent#DestinationVpc
   */
  readonly destinationVpc?: Ec2AnalysisComponent;

  /**
   * @schema Ec2PathComponent#OutboundHeader
   */
  readonly outboundHeader?: Ec2AnalysisPacketHeader;

  /**
   * @schema Ec2PathComponent#InboundHeader
   */
  readonly inboundHeader?: Ec2AnalysisPacketHeader;

  /**
   * @schema Ec2PathComponent#RouteTableRoute
   */
  readonly routeTableRoute?: Ec2AnalysisRouteTableRoute;

  /**
   * @schema Ec2PathComponent#SecurityGroupRule
   */
  readonly securityGroupRule?: Ec2AnalysisSecurityGroupRule;

  /**
   * @schema Ec2PathComponent#SourceVpc
   */
  readonly sourceVpc?: Ec2AnalysisComponent;

  /**
   * @schema Ec2PathComponent#Subnet
   */
  readonly subnet?: Ec2AnalysisComponent;

  /**
   * @schema Ec2PathComponent#Vpc
   */
  readonly vpc?: Ec2AnalysisComponent;

}

/**
 * Converts an object of type 'Ec2PathComponent' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PathComponent(obj: Ec2PathComponent | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SequenceNumber': obj.sequenceNumber,
    'AclRule': toJson_Ec2AnalysisAclRule(obj.aclRule),
    'Component': toJson_Ec2AnalysisComponent(obj.component),
    'DestinationVpc': toJson_Ec2AnalysisComponent(obj.destinationVpc),
    'OutboundHeader': toJson_Ec2AnalysisPacketHeader(obj.outboundHeader),
    'InboundHeader': toJson_Ec2AnalysisPacketHeader(obj.inboundHeader),
    'RouteTableRoute': toJson_Ec2AnalysisRouteTableRoute(obj.routeTableRoute),
    'SecurityGroupRule': toJson_Ec2AnalysisSecurityGroupRule(obj.securityGroupRule),
    'SourceVpc': toJson_Ec2AnalysisComponent(obj.sourceVpc),
    'Subnet': toJson_Ec2AnalysisComponent(obj.subnet),
    'Vpc': toJson_Ec2AnalysisComponent(obj.vpc),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Explanation
 */
export interface Ec2Explanation {
  /**
   * @schema Ec2Explanation#Acl
   */
  readonly acl?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#AclRule
   */
  readonly aclRule?: Ec2AnalysisAclRule;

  /**
   * @schema Ec2Explanation#Address
   */
  readonly address?: string;

  /**
   * @schema Ec2Explanation#Addresses
   */
  readonly addresses?: string[];

  /**
   * @schema Ec2Explanation#AttachedTo
   */
  readonly attachedTo?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#AvailabilityZones
   */
  readonly availabilityZones?: string[];

  /**
   * @schema Ec2Explanation#Cidrs
   */
  readonly cidrs?: string[];

  /**
   * @schema Ec2Explanation#Component
   */
  readonly component?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#CustomerGateway
   */
  readonly customerGateway?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#Destination
   */
  readonly destination?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#DestinationVpc
   */
  readonly destinationVpc?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#Direction
   */
  readonly direction?: string;

  /**
   * @schema Ec2Explanation#ExplanationCode
   */
  readonly explanationCode?: string;

  /**
   * @schema Ec2Explanation#IngressRouteTable
   */
  readonly ingressRouteTable?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#InternetGateway
   */
  readonly internetGateway?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#LoadBalancerArn
   */
  readonly loadBalancerArn?: string;

  /**
   * @schema Ec2Explanation#ClassicLoadBalancerListener
   */
  readonly classicLoadBalancerListener?: Ec2AnalysisLoadBalancerListener;

  /**
   * @schema Ec2Explanation#LoadBalancerListenerPort
   */
  readonly loadBalancerListenerPort?: number;

  /**
   * @schema Ec2Explanation#LoadBalancerTarget
   */
  readonly loadBalancerTarget?: Ec2AnalysisLoadBalancerTarget;

  /**
   * @schema Ec2Explanation#LoadBalancerTargetGroup
   */
  readonly loadBalancerTargetGroup?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#LoadBalancerTargetGroups
   */
  readonly loadBalancerTargetGroups?: Ec2AnalysisComponent[];

  /**
   * @schema Ec2Explanation#LoadBalancerTargetPort
   */
  readonly loadBalancerTargetPort?: number;

  /**
   * @schema Ec2Explanation#ElasticLoadBalancerListener
   */
  readonly elasticLoadBalancerListener?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#MissingComponent
   */
  readonly missingComponent?: string;

  /**
   * @schema Ec2Explanation#NatGateway
   */
  readonly natGateway?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#NetworkInterface
   */
  readonly networkInterface?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#PacketField
   */
  readonly packetField?: string;

  /**
   * @schema Ec2Explanation#VpcPeeringConnection
   */
  readonly vpcPeeringConnection?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#Port
   */
  readonly port?: number;

  /**
   * @schema Ec2Explanation#PortRanges
   */
  readonly portRanges?: Ec2PortRange[];

  /**
   * @schema Ec2Explanation#PrefixList
   */
  readonly prefixList?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#Protocols
   */
  readonly protocols?: string[];

  /**
   * @schema Ec2Explanation#RouteTableRoute
   */
  readonly routeTableRoute?: Ec2AnalysisRouteTableRoute;

  /**
   * @schema Ec2Explanation#RouteTable
   */
  readonly routeTable?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#SecurityGroup
   */
  readonly securityGroup?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#SecurityGroupRule
   */
  readonly securityGroupRule?: Ec2AnalysisSecurityGroupRule;

  /**
   * @schema Ec2Explanation#SecurityGroups
   */
  readonly securityGroups?: Ec2AnalysisComponent[];

  /**
   * @schema Ec2Explanation#SourceVpc
   */
  readonly sourceVpc?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#State
   */
  readonly state?: string;

  /**
   * @schema Ec2Explanation#Subnet
   */
  readonly subnet?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#SubnetRouteTable
   */
  readonly subnetRouteTable?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#Vpc
   */
  readonly vpc?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#VpcEndpoint
   */
  readonly vpcEndpoint?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#VpnConnection
   */
  readonly vpnConnection?: Ec2AnalysisComponent;

  /**
   * @schema Ec2Explanation#VpnGateway
   */
  readonly vpnGateway?: Ec2AnalysisComponent;

}

/**
 * Converts an object of type 'Ec2Explanation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Explanation(obj: Ec2Explanation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Acl': toJson_Ec2AnalysisComponent(obj.acl),
    'AclRule': toJson_Ec2AnalysisAclRule(obj.aclRule),
    'Address': obj.address,
    'Addresses': obj.addresses?.map(y => y),
    'AttachedTo': toJson_Ec2AnalysisComponent(obj.attachedTo),
    'AvailabilityZones': obj.availabilityZones?.map(y => y),
    'Cidrs': obj.cidrs?.map(y => y),
    'Component': toJson_Ec2AnalysisComponent(obj.component),
    'CustomerGateway': toJson_Ec2AnalysisComponent(obj.customerGateway),
    'Destination': toJson_Ec2AnalysisComponent(obj.destination),
    'DestinationVpc': toJson_Ec2AnalysisComponent(obj.destinationVpc),
    'Direction': obj.direction,
    'ExplanationCode': obj.explanationCode,
    'IngressRouteTable': toJson_Ec2AnalysisComponent(obj.ingressRouteTable),
    'InternetGateway': toJson_Ec2AnalysisComponent(obj.internetGateway),
    'LoadBalancerArn': obj.loadBalancerArn,
    'ClassicLoadBalancerListener': toJson_Ec2AnalysisLoadBalancerListener(obj.classicLoadBalancerListener),
    'LoadBalancerListenerPort': obj.loadBalancerListenerPort,
    'LoadBalancerTarget': toJson_Ec2AnalysisLoadBalancerTarget(obj.loadBalancerTarget),
    'LoadBalancerTargetGroup': toJson_Ec2AnalysisComponent(obj.loadBalancerTargetGroup),
    'LoadBalancerTargetGroups': obj.loadBalancerTargetGroups?.map(y => toJson_Ec2AnalysisComponent(y)),
    'LoadBalancerTargetPort': obj.loadBalancerTargetPort,
    'ElasticLoadBalancerListener': toJson_Ec2AnalysisComponent(obj.elasticLoadBalancerListener),
    'MissingComponent': obj.missingComponent,
    'NatGateway': toJson_Ec2AnalysisComponent(obj.natGateway),
    'NetworkInterface': toJson_Ec2AnalysisComponent(obj.networkInterface),
    'PacketField': obj.packetField,
    'VpcPeeringConnection': toJson_Ec2AnalysisComponent(obj.vpcPeeringConnection),
    'Port': obj.port,
    'PortRanges': obj.portRanges?.map(y => toJson_Ec2PortRange(y)),
    'PrefixList': toJson_Ec2AnalysisComponent(obj.prefixList),
    'Protocols': obj.protocols?.map(y => y),
    'RouteTableRoute': toJson_Ec2AnalysisRouteTableRoute(obj.routeTableRoute),
    'RouteTable': toJson_Ec2AnalysisComponent(obj.routeTable),
    'SecurityGroup': toJson_Ec2AnalysisComponent(obj.securityGroup),
    'SecurityGroupRule': toJson_Ec2AnalysisSecurityGroupRule(obj.securityGroupRule),
    'SecurityGroups': obj.securityGroups?.map(y => toJson_Ec2AnalysisComponent(y)),
    'SourceVpc': toJson_Ec2AnalysisComponent(obj.sourceVpc),
    'State': obj.state,
    'Subnet': toJson_Ec2AnalysisComponent(obj.subnet),
    'SubnetRouteTable': toJson_Ec2AnalysisComponent(obj.subnetRouteTable),
    'Vpc': toJson_Ec2AnalysisComponent(obj.vpc),
    'VpcEndpoint': toJson_Ec2AnalysisComponent(obj.vpcEndpoint),
    'VpnConnection': toJson_Ec2AnalysisComponent(obj.vpnConnection),
    'VpnGateway': toJson_Ec2AnalysisComponent(obj.vpnGateway),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AlternatePathHint
 */
export interface Ec2AlternatePathHint {
  /**
   * @schema Ec2AlternatePathHint#ComponentId
   */
  readonly componentId?: string;

  /**
   * @schema Ec2AlternatePathHint#ComponentArn
   */
  readonly componentArn?: string;

}

/**
 * Converts an object of type 'Ec2AlternatePathHint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AlternatePathHint(obj: Ec2AlternatePathHint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ComponentId': obj.componentId,
    'ComponentArn': obj.componentArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PublicIpv4PoolRange
 */
export interface Ec2PublicIpv4PoolRange {
  /**
   * @schema Ec2PublicIpv4PoolRange#FirstAddress
   */
  readonly firstAddress?: string;

  /**
   * @schema Ec2PublicIpv4PoolRange#LastAddress
   */
  readonly lastAddress?: string;

  /**
   * @schema Ec2PublicIpv4PoolRange#AddressCount
   */
  readonly addressCount?: number;

  /**
   * @schema Ec2PublicIpv4PoolRange#AvailableAddressCount
   */
  readonly availableAddressCount?: number;

}

/**
 * Converts an object of type 'Ec2PublicIpv4PoolRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PublicIpv4PoolRange(obj: Ec2PublicIpv4PoolRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FirstAddress': obj.firstAddress,
    'LastAddress': obj.lastAddress,
    'AddressCount': obj.addressCount,
    'AvailableAddressCount': obj.availableAddressCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2RecurringCharge
 */
export interface Ec2RecurringCharge {
  /**
   * @schema Ec2RecurringCharge#Amount
   */
  readonly amount?: number;

  /**
   * @schema Ec2RecurringCharge#Frequency
   */
  readonly frequency?: string;

}

/**
 * Converts an object of type 'Ec2RecurringCharge' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2RecurringCharge(obj: Ec2RecurringCharge | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Amount': obj.amount,
    'Frequency': obj.frequency,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstancesModificationResult
 */
export interface Ec2ReservedInstancesModificationResult {
  /**
   * @schema Ec2ReservedInstancesModificationResult#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

  /**
   * @schema Ec2ReservedInstancesModificationResult#TargetConfiguration
   */
  readonly targetConfiguration?: Ec2ReservedInstancesConfiguration;

}

/**
 * Converts an object of type 'Ec2ReservedInstancesModificationResult' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstancesModificationResult(obj: Ec2ReservedInstancesModificationResult | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesId': obj.reservedInstancesId,
    'TargetConfiguration': toJson_Ec2ReservedInstancesConfiguration(obj.targetConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ReservedInstancesId
 */
export interface Ec2ReservedInstancesId {
  /**
   * @schema Ec2ReservedInstancesId#ReservedInstancesId
   */
  readonly reservedInstancesId?: string;

}

/**
 * Converts an object of type 'Ec2ReservedInstancesId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ReservedInstancesId(obj: Ec2ReservedInstancesId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReservedInstancesId': obj.reservedInstancesId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PricingDetail
 */
export interface Ec2PricingDetail {
  /**
   * @schema Ec2PricingDetail#Count
   */
  readonly count?: number;

  /**
   * @schema Ec2PricingDetail#Price
   */
  readonly price?: number;

}

/**
 * Converts an object of type 'Ec2PricingDetail' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PricingDetail(obj: Ec2PricingDetail | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Count': obj.count,
    'Price': obj.price,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstanceRecurrence
 */
export interface Ec2ScheduledInstanceRecurrence {
  /**
   * @schema Ec2ScheduledInstanceRecurrence#Frequency
   */
  readonly frequency?: string;

  /**
   * @schema Ec2ScheduledInstanceRecurrence#Interval
   */
  readonly interval?: number;

  /**
   * @schema Ec2ScheduledInstanceRecurrence#OccurrenceDaySet
   */
  readonly occurrenceDaySet?: number[];

  /**
   * @schema Ec2ScheduledInstanceRecurrence#OccurrenceRelativeToEnd
   */
  readonly occurrenceRelativeToEnd?: boolean;

  /**
   * @schema Ec2ScheduledInstanceRecurrence#OccurrenceUnit
   */
  readonly occurrenceUnit?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstanceRecurrence' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstanceRecurrence(obj: Ec2ScheduledInstanceRecurrence | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Frequency': obj.frequency,
    'Interval': obj.interval,
    'OccurrenceDaySet': obj.occurrenceDaySet?.map(y => y),
    'OccurrenceRelativeToEnd': obj.occurrenceRelativeToEnd,
    'OccurrenceUnit': obj.occurrenceUnit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchSpecification
 */
export interface Ec2LaunchSpecification {
  /**
   * @schema Ec2LaunchSpecification#UserData
   */
  readonly userData?: string;

  /**
   * @schema Ec2LaunchSpecification#SecurityGroups
   */
  readonly securityGroups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2LaunchSpecification#AddressingType
   */
  readonly addressingType?: string;

  /**
   * @schema Ec2LaunchSpecification#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2BlockDeviceMapping[];

  /**
   * @schema Ec2LaunchSpecification#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2LaunchSpecification#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2IamInstanceProfileSpecification;

  /**
   * @schema Ec2LaunchSpecification#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2LaunchSpecification#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2LaunchSpecification#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2LaunchSpecification#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2LaunchSpecification#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2InstanceNetworkInterfaceSpecification[];

  /**
   * @schema Ec2LaunchSpecification#Placement
   */
  readonly placement?: Ec2SpotPlacement;

  /**
   * @schema Ec2LaunchSpecification#RamdiskId
   */
  readonly ramdiskId?: string;

  /**
   * @schema Ec2LaunchSpecification#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2LaunchSpecification#Monitoring
   */
  readonly monitoring?: Ec2RunInstancesMonitoringEnabled;

}

/**
 * Converts an object of type 'Ec2LaunchSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchSpecification(obj: Ec2LaunchSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'UserData': obj.userData,
    'SecurityGroups': obj.securityGroups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'AddressingType': obj.addressingType,
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2BlockDeviceMapping(y)),
    'EbsOptimized': obj.ebsOptimized,
    'IamInstanceProfile': toJson_Ec2IamInstanceProfileSpecification(obj.iamInstanceProfile),
    'ImageId': obj.imageId,
    'InstanceType': obj.instanceType,
    'KernelId': obj.kernelId,
    'KeyName': obj.keyName,
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2InstanceNetworkInterfaceSpecification(y)),
    'Placement': toJson_Ec2SpotPlacement(obj.placement),
    'RamdiskId': obj.ramdiskId,
    'SubnetId': obj.subnetId,
    'Monitoring': toJson_Ec2RunInstancesMonitoringEnabled(obj.monitoring),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotInstanceStatus
 */
export interface Ec2SpotInstanceStatus {
  /**
   * @schema Ec2SpotInstanceStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2SpotInstanceStatus#Message
   */
  readonly message?: string;

  /**
   * @schema Ec2SpotInstanceStatus#UpdateTime
   */
  readonly updateTime?: string;

}

/**
 * Converts an object of type 'Ec2SpotInstanceStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotInstanceStatus(obj: Ec2SpotInstanceStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
    'UpdateTime': obj.updateTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2StaleIpPermission
 */
export interface Ec2StaleIpPermission {
  /**
   * @schema Ec2StaleIpPermission#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2StaleIpPermission#IpProtocol
   */
  readonly ipProtocol?: string;

  /**
   * @schema Ec2StaleIpPermission#IpRanges
   */
  readonly ipRanges?: string[];

  /**
   * @schema Ec2StaleIpPermission#PrefixListIds
   */
  readonly prefixListIds?: string[];

  /**
   * @schema Ec2StaleIpPermission#ToPort
   */
  readonly toPort?: number;

  /**
   * @schema Ec2StaleIpPermission#UserIdGroupPairs
   */
  readonly userIdGroupPairs?: Ec2UserIdGroupPair[];

}

/**
 * Converts an object of type 'Ec2StaleIpPermission' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2StaleIpPermission(obj: Ec2StaleIpPermission | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'FromPort': obj.fromPort,
    'IpProtocol': obj.ipProtocol,
    'IpRanges': obj.ipRanges?.map(y => y),
    'PrefixListIds': obj.prefixListIds?.map(y => y),
    'ToPort': obj.toPort,
    'UserIdGroupPairs': obj.userIdGroupPairs?.map(y => toJson_Ec2UserIdGroupPair(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayAttachmentAssociation
 */
export interface Ec2TransitGatewayAttachmentAssociation {
  /**
   * @schema Ec2TransitGatewayAttachmentAssociation#TransitGatewayRouteTableId
   */
  readonly transitGatewayRouteTableId?: string;

  /**
   * @schema Ec2TransitGatewayAttachmentAssociation#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayAttachmentAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayAttachmentAssociation(obj: Ec2TransitGatewayAttachmentAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayRouteTableId': obj.transitGatewayRouteTableId,
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeStatusAction
 */
export interface Ec2VolumeStatusAction {
  /**
   * @schema Ec2VolumeStatusAction#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2VolumeStatusAction#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2VolumeStatusAction#EventId
   */
  readonly eventId?: string;

  /**
   * @schema Ec2VolumeStatusAction#EventType
   */
  readonly eventType?: string;

}

/**
 * Converts an object of type 'Ec2VolumeStatusAction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeStatusAction(obj: Ec2VolumeStatusAction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Description': obj.description,
    'EventId': obj.eventId,
    'EventType': obj.eventType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeStatusEvent
 */
export interface Ec2VolumeStatusEvent {
  /**
   * @schema Ec2VolumeStatusEvent#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2VolumeStatusEvent#EventId
   */
  readonly eventId?: string;

  /**
   * @schema Ec2VolumeStatusEvent#EventType
   */
  readonly eventType?: string;

  /**
   * @schema Ec2VolumeStatusEvent#NotAfter
   */
  readonly notAfter?: string;

  /**
   * @schema Ec2VolumeStatusEvent#NotBefore
   */
  readonly notBefore?: string;

  /**
   * @schema Ec2VolumeStatusEvent#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2VolumeStatusEvent' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeStatusEvent(obj: Ec2VolumeStatusEvent | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Description': obj.description,
    'EventId': obj.eventId,
    'EventType': obj.eventType,
    'NotAfter': obj.notAfter,
    'NotBefore': obj.notBefore,
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeStatusInfo
 */
export interface Ec2VolumeStatusInfo {
  /**
   * @schema Ec2VolumeStatusInfo#Details
   */
  readonly details?: Ec2VolumeStatusDetails[];

  /**
   * @schema Ec2VolumeStatusInfo#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2VolumeStatusInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeStatusInfo(obj: Ec2VolumeStatusInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Details': obj.details?.map(y => toJson_Ec2VolumeStatusDetails(y)),
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeStatusAttachmentStatus
 */
export interface Ec2VolumeStatusAttachmentStatus {
  /**
   * @schema Ec2VolumeStatusAttachmentStatus#IoPerformance
   */
  readonly ioPerformance?: string;

  /**
   * @schema Ec2VolumeStatusAttachmentStatus#InstanceId
   */
  readonly instanceId?: string;

}

/**
 * Converts an object of type 'Ec2VolumeStatusAttachmentStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeStatusAttachmentStatus(obj: Ec2VolumeStatusAttachmentStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IoPerformance': obj.ioPerformance,
    'InstanceId': obj.instanceId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PrivateDnsDetails
 */
export interface Ec2PrivateDnsDetails {
  /**
   * @schema Ec2PrivateDnsDetails#PrivateDnsName
   */
  readonly privateDnsName?: string;

}

/**
 * Converts an object of type 'Ec2PrivateDnsDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PrivateDnsDetails(obj: Ec2PrivateDnsDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateDnsName': obj.privateDnsName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableFastSnapshotRestoreStateErrorItem
 */
export interface Ec2DisableFastSnapshotRestoreStateErrorItem {
  /**
   * @schema Ec2DisableFastSnapshotRestoreStateErrorItem#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreStateErrorItem#Error
   */
  readonly error?: Ec2DisableFastSnapshotRestoreStateError;

}

/**
 * Converts an object of type 'Ec2DisableFastSnapshotRestoreStateErrorItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableFastSnapshotRestoreStateErrorItem(obj: Ec2DisableFastSnapshotRestoreStateErrorItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Error': toJson_Ec2DisableFastSnapshotRestoreStateError(obj.error),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableFastSnapshotRestoreStateErrorItem
 */
export interface Ec2EnableFastSnapshotRestoreStateErrorItem {
  /**
   * @schema Ec2EnableFastSnapshotRestoreStateErrorItem#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreStateErrorItem#Error
   */
  readonly error?: Ec2EnableFastSnapshotRestoreStateError;

}

/**
 * Converts an object of type 'Ec2EnableFastSnapshotRestoreStateErrorItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableFastSnapshotRestoreStateErrorItem(obj: Ec2EnableFastSnapshotRestoreStateErrorItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Error': toJson_Ec2EnableFastSnapshotRestoreStateError(obj.error),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AthenaIntegration
 */
export interface Ec2AthenaIntegration {
  /**
   * @schema Ec2AthenaIntegration#IntegrationResultS3DestinationArn
   */
  readonly integrationResultS3DestinationArn?: string;

  /**
   * @schema Ec2AthenaIntegration#PartitionLoadFrequency
   */
  readonly partitionLoadFrequency?: string;

  /**
   * @schema Ec2AthenaIntegration#PartitionStartDate
   */
  readonly partitionStartDate?: string;

  /**
   * @schema Ec2AthenaIntegration#PartitionEndDate
   */
  readonly partitionEndDate?: string;

}

/**
 * Converts an object of type 'Ec2AthenaIntegration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AthenaIntegration(obj: Ec2AthenaIntegration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IntegrationResultS3DestinationArn': obj.integrationResultS3DestinationArn,
    'PartitionLoadFrequency': obj.partitionLoadFrequency,
    'PartitionStartDate': obj.partitionStartDate,
    'PartitionEndDate': obj.partitionEndDate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateIamInstanceProfileSpecification
 */
export interface Ec2LaunchTemplateIamInstanceProfileSpecification {
  /**
   * @schema Ec2LaunchTemplateIamInstanceProfileSpecification#Arn
   */
  readonly arn?: string;

  /**
   * @schema Ec2LaunchTemplateIamInstanceProfileSpecification#Name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateIamInstanceProfileSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateIamInstanceProfileSpecification(obj: Ec2LaunchTemplateIamInstanceProfileSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Arn': obj.arn,
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateBlockDeviceMapping
 */
export interface Ec2LaunchTemplateBlockDeviceMapping {
  /**
   * @schema Ec2LaunchTemplateBlockDeviceMapping#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2LaunchTemplateBlockDeviceMapping#VirtualName
   */
  readonly virtualName?: string;

  /**
   * @schema Ec2LaunchTemplateBlockDeviceMapping#Ebs
   */
  readonly ebs?: Ec2LaunchTemplateEbsBlockDevice;

  /**
   * @schema Ec2LaunchTemplateBlockDeviceMapping#NoDevice
   */
  readonly noDevice?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateBlockDeviceMapping' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateBlockDeviceMapping(obj: Ec2LaunchTemplateBlockDeviceMapping | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeviceName': obj.deviceName,
    'VirtualName': obj.virtualName,
    'Ebs': toJson_Ec2LaunchTemplateEbsBlockDevice(obj.ebs),
    'NoDevice': obj.noDevice,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification
 */
export interface Ec2LaunchTemplateInstanceNetworkInterfaceSpecification {
  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#AssociateCarrierIpAddress
   */
  readonly associateCarrierIpAddress?: boolean;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#AssociatePublicIpAddress
   */
  readonly associatePublicIpAddress?: boolean;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#DeviceIndex
   */
  readonly deviceIndex?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#Groups
   */
  readonly groups?: string[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#InterfaceType
   */
  readonly interfaceType?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#Ipv6AddressCount
   */
  readonly ipv6AddressCount?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#Ipv6Addresses
   */
  readonly ipv6Addresses?: Ec2InstanceIpv6Address[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#PrivateIpAddresses
   */
  readonly privateIpAddresses?: Ec2PrivateIpAddressSpecification[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#SecondaryPrivateIpAddressCount
   */
  readonly secondaryPrivateIpAddressCount?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#NetworkCardIndex
   */
  readonly networkCardIndex?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#Ipv4Prefixes
   */
  readonly ipv4Prefixes?: Ec2Ipv4PrefixSpecificationResponse[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#Ipv4PrefixCount
   */
  readonly ipv4PrefixCount?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#Ipv6Prefixes
   */
  readonly ipv6Prefixes?: Ec2Ipv6PrefixSpecificationResponse[];

  /**
   * @schema Ec2LaunchTemplateInstanceNetworkInterfaceSpecification#Ipv6PrefixCount
   */
  readonly ipv6PrefixCount?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateInstanceNetworkInterfaceSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateInstanceNetworkInterfaceSpecification(obj: Ec2LaunchTemplateInstanceNetworkInterfaceSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociateCarrierIpAddress': obj.associateCarrierIpAddress,
    'AssociatePublicIpAddress': obj.associatePublicIpAddress,
    'DeleteOnTermination': obj.deleteOnTermination,
    'Description': obj.description,
    'DeviceIndex': obj.deviceIndex,
    'Groups': obj.groups?.map(y => y),
    'InterfaceType': obj.interfaceType,
    'Ipv6AddressCount': obj.ipv6AddressCount,
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => toJson_Ec2InstanceIpv6Address(y)),
    'NetworkInterfaceId': obj.networkInterfaceId,
    'PrivateIpAddress': obj.privateIpAddress,
    'PrivateIpAddresses': obj.privateIpAddresses?.map(y => toJson_Ec2PrivateIpAddressSpecification(y)),
    'SecondaryPrivateIpAddressCount': obj.secondaryPrivateIpAddressCount,
    'SubnetId': obj.subnetId,
    'NetworkCardIndex': obj.networkCardIndex,
    'Ipv4Prefixes': obj.ipv4Prefixes?.map(y => toJson_Ec2Ipv4PrefixSpecificationResponse(y)),
    'Ipv4PrefixCount': obj.ipv4PrefixCount,
    'Ipv6Prefixes': obj.ipv6Prefixes?.map(y => toJson_Ec2Ipv6PrefixSpecificationResponse(y)),
    'Ipv6PrefixCount': obj.ipv6PrefixCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplatesMonitoring
 */
export interface Ec2LaunchTemplatesMonitoring {
  /**
   * @schema Ec2LaunchTemplatesMonitoring#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2LaunchTemplatesMonitoring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplatesMonitoring(obj: Ec2LaunchTemplatesMonitoring | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplatePlacement
 */
export interface Ec2LaunchTemplatePlacement {
  /**
   * @schema Ec2LaunchTemplatePlacement#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2LaunchTemplatePlacement#Affinity
   */
  readonly affinity?: string;

  /**
   * @schema Ec2LaunchTemplatePlacement#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2LaunchTemplatePlacement#HostId
   */
  readonly hostId?: string;

  /**
   * @schema Ec2LaunchTemplatePlacement#Tenancy
   */
  readonly tenancy?: string;

  /**
   * @schema Ec2LaunchTemplatePlacement#SpreadDomain
   */
  readonly spreadDomain?: string;

  /**
   * @schema Ec2LaunchTemplatePlacement#HostResourceGroupArn
   */
  readonly hostResourceGroupArn?: string;

  /**
   * @schema Ec2LaunchTemplatePlacement#PartitionNumber
   */
  readonly partitionNumber?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplatePlacement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplatePlacement(obj: Ec2LaunchTemplatePlacement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'Affinity': obj.affinity,
    'GroupName': obj.groupName,
    'HostId': obj.hostId,
    'Tenancy': obj.tenancy,
    'SpreadDomain': obj.spreadDomain,
    'HostResourceGroupArn': obj.hostResourceGroupArn,
    'PartitionNumber': obj.partitionNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateTagSpecification
 */
export interface Ec2LaunchTemplateTagSpecification {
  /**
   * @schema Ec2LaunchTemplateTagSpecification#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2LaunchTemplateTagSpecification#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2LaunchTemplateTagSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateTagSpecification(obj: Ec2LaunchTemplateTagSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ResourceType': obj.resourceType,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ElasticGpuSpecificationResponse
 */
export interface Ec2ElasticGpuSpecificationResponse {
  /**
   * @schema Ec2ElasticGpuSpecificationResponse#Type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'Ec2ElasticGpuSpecificationResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ElasticGpuSpecificationResponse(obj: Ec2ElasticGpuSpecificationResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateElasticInferenceAcceleratorResponse
 */
export interface Ec2LaunchTemplateElasticInferenceAcceleratorResponse {
  /**
   * @schema Ec2LaunchTemplateElasticInferenceAcceleratorResponse#Type
   */
  readonly type?: string;

  /**
   * @schema Ec2LaunchTemplateElasticInferenceAcceleratorResponse#Count
   */
  readonly count?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateElasticInferenceAcceleratorResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateElasticInferenceAcceleratorResponse(obj: Ec2LaunchTemplateElasticInferenceAcceleratorResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Type': obj.type,
    'Count': obj.count,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateInstanceMarketOptions
 */
export interface Ec2LaunchTemplateInstanceMarketOptions {
  /**
   * @schema Ec2LaunchTemplateInstanceMarketOptions#MarketType
   */
  readonly marketType?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceMarketOptions#SpotOptions
   */
  readonly spotOptions?: Ec2LaunchTemplateSpotMarketOptions;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateInstanceMarketOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateInstanceMarketOptions(obj: Ec2LaunchTemplateInstanceMarketOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MarketType': obj.marketType,
    'SpotOptions': toJson_Ec2LaunchTemplateSpotMarketOptions(obj.spotOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CreditSpecification
 */
export interface Ec2CreditSpecification {
  /**
   * @schema Ec2CreditSpecification#CpuCredits
   */
  readonly cpuCredits?: string;

}

/**
 * Converts an object of type 'Ec2CreditSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CreditSpecification(obj: Ec2CreditSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CpuCredits': obj.cpuCredits,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateCpuOptions
 */
export interface Ec2LaunchTemplateCpuOptions {
  /**
   * @schema Ec2LaunchTemplateCpuOptions#CoreCount
   */
  readonly coreCount?: number;

  /**
   * @schema Ec2LaunchTemplateCpuOptions#ThreadsPerCore
   */
  readonly threadsPerCore?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateCpuOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateCpuOptions(obj: Ec2LaunchTemplateCpuOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CoreCount': obj.coreCount,
    'ThreadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateCapacityReservationSpecificationResponse
 */
export interface Ec2LaunchTemplateCapacityReservationSpecificationResponse {
  /**
   * @schema Ec2LaunchTemplateCapacityReservationSpecificationResponse#CapacityReservationPreference
   */
  readonly capacityReservationPreference?: string;

  /**
   * @schema Ec2LaunchTemplateCapacityReservationSpecificationResponse#CapacityReservationTarget
   */
  readonly capacityReservationTarget?: Ec2CapacityReservationTargetResponse;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateCapacityReservationSpecificationResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateCapacityReservationSpecificationResponse(obj: Ec2LaunchTemplateCapacityReservationSpecificationResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationPreference': obj.capacityReservationPreference,
    'CapacityReservationTarget': toJson_Ec2CapacityReservationTargetResponse(obj.capacityReservationTarget),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateLicenseConfiguration
 */
export interface Ec2LaunchTemplateLicenseConfiguration {
  /**
   * @schema Ec2LaunchTemplateLicenseConfiguration#LicenseConfigurationArn
   */
  readonly licenseConfigurationArn?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateLicenseConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateLicenseConfiguration(obj: Ec2LaunchTemplateLicenseConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LicenseConfigurationArn': obj.licenseConfigurationArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateHibernationOptions
 */
export interface Ec2LaunchTemplateHibernationOptions {
  /**
   * @schema Ec2LaunchTemplateHibernationOptions#Configured
   */
  readonly configured?: boolean;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateHibernationOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateHibernationOptions(obj: Ec2LaunchTemplateHibernationOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Configured': obj.configured,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateInstanceMetadataOptions
 */
export interface Ec2LaunchTemplateInstanceMetadataOptions {
  /**
   * @schema Ec2LaunchTemplateInstanceMetadataOptions#State
   */
  readonly state?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceMetadataOptions#HttpTokens
   */
  readonly httpTokens?: string;

  /**
   * @schema Ec2LaunchTemplateInstanceMetadataOptions#HttpPutResponseHopLimit
   */
  readonly httpPutResponseHopLimit?: number;

  /**
   * @schema Ec2LaunchTemplateInstanceMetadataOptions#HttpEndpoint
   */
  readonly httpEndpoint?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateInstanceMetadataOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateInstanceMetadataOptions(obj: Ec2LaunchTemplateInstanceMetadataOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
    'HttpTokens': obj.httpTokens,
    'HttpPutResponseHopLimit': obj.httpPutResponseHopLimit,
    'HttpEndpoint': obj.httpEndpoint,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateEnclaveOptions
 */
export interface Ec2LaunchTemplateEnclaveOptions {
  /**
   * @schema Ec2LaunchTemplateEnclaveOptions#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateEnclaveOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateEnclaveOptions(obj: Ec2LaunchTemplateEnclaveOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TargetConfiguration
 */
export interface Ec2TargetConfiguration {
  /**
   * @schema Ec2TargetConfiguration#InstanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema Ec2TargetConfiguration#OfferingId
   */
  readonly offeringId?: string;

}

/**
 * Converts an object of type 'Ec2TargetConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TargetConfiguration(obj: Ec2TargetConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceCount': obj.instanceCount,
    'OfferingId': obj.offeringId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UserBucket
 */
export interface Ec2UserBucket {
  /**
   * @schema Ec2UserBucket#S3Bucket
   */
  readonly s3Bucket?: string;

  /**
   * @schema Ec2UserBucket#S3Key
   */
  readonly s3Key?: string;

}

/**
 * Converts an object of type 'Ec2UserBucket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UserBucket(obj: Ec2UserBucket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'S3Bucket': obj.s3Bucket,
    'S3Key': obj.s3Key,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UserBucketDetails
 */
export interface Ec2UserBucketDetails {
  /**
   * @schema Ec2UserBucketDetails#S3Bucket
   */
  readonly s3Bucket?: string;

  /**
   * @schema Ec2UserBucketDetails#S3Key
   */
  readonly s3Key?: string;

}

/**
 * Converts an object of type 'Ec2UserBucketDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UserBucketDetails(obj: Ec2UserBucketDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'S3Bucket': obj.s3Bucket,
    'S3Key': obj.s3Key,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UserData
 */
export interface Ec2UserData {
  /**
   * @schema Ec2UserData#Data
   */
  readonly data?: string;

}

/**
 * Converts an object of type 'Ec2UserData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UserData(obj: Ec2UserData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Data': obj.data,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LoadPermissionRequest
 */
export interface Ec2LoadPermissionRequest {
  /**
   * @schema Ec2LoadPermissionRequest#Group
   */
  readonly group?: string;

  /**
   * @schema Ec2LoadPermissionRequest#UserId
   */
  readonly userId?: string;

}

/**
 * Converts an object of type 'Ec2LoadPermissionRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LoadPermissionRequest(obj: Ec2LoadPermissionRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Group': obj.group,
    'UserId': obj.userId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EbsInstanceBlockDeviceSpecification
 */
export interface Ec2EbsInstanceBlockDeviceSpecification {
  /**
   * @schema Ec2EbsInstanceBlockDeviceSpecification#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2EbsInstanceBlockDeviceSpecification#VolumeId
   */
  readonly volumeId?: string;

}

/**
 * Converts an object of type 'Ec2EbsInstanceBlockDeviceSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EbsInstanceBlockDeviceSpecification(obj: Ec2EbsInstanceBlockDeviceSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeleteOnTermination': obj.deleteOnTermination,
    'VolumeId': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CapacityReservationTarget
 */
export interface Ec2CapacityReservationTarget {
  /**
   * @schema Ec2CapacityReservationTarget#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2CapacityReservationTarget#CapacityReservationResourceGroupArn
   */
  readonly capacityReservationResourceGroupArn?: string;

}

/**
 * Converts an object of type 'Ec2CapacityReservationTarget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CapacityReservationTarget(obj: Ec2CapacityReservationTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationId': obj.capacityReservationId,
    'CapacityReservationResourceGroupArn': obj.capacityReservationResourceGroupArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2UnsuccessfulInstanceCreditSpecificationItemError
 */
export interface Ec2UnsuccessfulInstanceCreditSpecificationItemError {
  /**
   * @schema Ec2UnsuccessfulInstanceCreditSpecificationItemError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2UnsuccessfulInstanceCreditSpecificationItemError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2UnsuccessfulInstanceCreditSpecificationItemError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2UnsuccessfulInstanceCreditSpecificationItemError(obj: Ec2UnsuccessfulInstanceCreditSpecificationItemError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SecurityGroupRuleRequest
 */
export interface Ec2SecurityGroupRuleRequest {
  /**
   * @schema Ec2SecurityGroupRuleRequest#IpProtocol
   */
  readonly ipProtocol?: string;

  /**
   * @schema Ec2SecurityGroupRuleRequest#FromPort
   */
  readonly fromPort?: number;

  /**
   * @schema Ec2SecurityGroupRuleRequest#ToPort
   */
  readonly toPort?: number;

  /**
   * @schema Ec2SecurityGroupRuleRequest#CidrIpv4
   */
  readonly cidrIpv4?: string;

  /**
   * @schema Ec2SecurityGroupRuleRequest#CidrIpv6
   */
  readonly cidrIpv6?: string;

  /**
   * @schema Ec2SecurityGroupRuleRequest#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2SecurityGroupRuleRequest#ReferencedGroupId
   */
  readonly referencedGroupId?: string;

  /**
   * @schema Ec2SecurityGroupRuleRequest#Description
   */
  readonly description?: string;

}

/**
 * Converts an object of type 'Ec2SecurityGroupRuleRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SecurityGroupRuleRequest(obj: Ec2SecurityGroupRuleRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'IpProtocol': obj.ipProtocol,
    'FromPort': obj.fromPort,
    'ToPort': obj.toPort,
    'CidrIpv4': obj.cidrIpv4,
    'CidrIpv6': obj.cidrIpv6,
    'PrefixListId': obj.prefixListId,
    'ReferencedGroupId': obj.referencedGroupId,
    'Description': obj.description,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetLaunchTemplateSpecification
 */
export interface Ec2FleetLaunchTemplateSpecification {
  /**
   * @schema Ec2FleetLaunchTemplateSpecification#LaunchTemplateId
   */
  readonly launchTemplateId?: string;

  /**
   * @schema Ec2FleetLaunchTemplateSpecification#LaunchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema Ec2FleetLaunchTemplateSpecification#Version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'Ec2FleetLaunchTemplateSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetLaunchTemplateSpecification(obj: Ec2FleetLaunchTemplateSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LaunchTemplateId': obj.launchTemplateId,
    'LaunchTemplateName': obj.launchTemplateName,
    'Version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateOverrides
 */
export interface Ec2LaunchTemplateOverrides {
  /**
   * @schema Ec2LaunchTemplateOverrides#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2LaunchTemplateOverrides#SpotPrice
   */
  readonly spotPrice?: string;

  /**
   * @schema Ec2LaunchTemplateOverrides#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2LaunchTemplateOverrides#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2LaunchTemplateOverrides#WeightedCapacity
   */
  readonly weightedCapacity?: number;

  /**
   * @schema Ec2LaunchTemplateOverrides#Priority
   */
  readonly priority?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateOverrides' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateOverrides(obj: Ec2LaunchTemplateOverrides | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceType': obj.instanceType,
    'SpotPrice': obj.spotPrice,
    'SubnetId': obj.subnetId,
    'AvailabilityZone': obj.availabilityZone,
    'WeightedCapacity': obj.weightedCapacity,
    'Priority': obj.priority,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase1EncryptionAlgorithmsRequestListValue
 */
export interface Ec2Phase1EncryptionAlgorithmsRequestListValue {
  /**
   * @schema Ec2Phase1EncryptionAlgorithmsRequestListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Phase1EncryptionAlgorithmsRequestListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase1EncryptionAlgorithmsRequestListValue(obj: Ec2Phase1EncryptionAlgorithmsRequestListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase2EncryptionAlgorithmsRequestListValue
 */
export interface Ec2Phase2EncryptionAlgorithmsRequestListValue {
  /**
   * @schema Ec2Phase2EncryptionAlgorithmsRequestListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Phase2EncryptionAlgorithmsRequestListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase2EncryptionAlgorithmsRequestListValue(obj: Ec2Phase2EncryptionAlgorithmsRequestListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase1IntegrityAlgorithmsRequestListValue
 */
export interface Ec2Phase1IntegrityAlgorithmsRequestListValue {
  /**
   * @schema Ec2Phase1IntegrityAlgorithmsRequestListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Phase1IntegrityAlgorithmsRequestListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase1IntegrityAlgorithmsRequestListValue(obj: Ec2Phase1IntegrityAlgorithmsRequestListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase2IntegrityAlgorithmsRequestListValue
 */
export interface Ec2Phase2IntegrityAlgorithmsRequestListValue {
  /**
   * @schema Ec2Phase2IntegrityAlgorithmsRequestListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Phase2IntegrityAlgorithmsRequestListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase2IntegrityAlgorithmsRequestListValue(obj: Ec2Phase2IntegrityAlgorithmsRequestListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase1DhGroupNumbersRequestListValue
 */
export interface Ec2Phase1DhGroupNumbersRequestListValue {
  /**
   * @schema Ec2Phase1DhGroupNumbersRequestListValue#Value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'Ec2Phase1DhGroupNumbersRequestListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase1DhGroupNumbersRequestListValue(obj: Ec2Phase1DhGroupNumbersRequestListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase2DhGroupNumbersRequestListValue
 */
export interface Ec2Phase2DhGroupNumbersRequestListValue {
  /**
   * @schema Ec2Phase2DhGroupNumbersRequestListValue#Value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'Ec2Phase2DhGroupNumbersRequestListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase2DhGroupNumbersRequestListValue(obj: Ec2Phase2DhGroupNumbersRequestListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IkeVersionsRequestListValue
 */
export interface Ec2IkeVersionsRequestListValue {
  /**
   * @schema Ec2IkeVersionsRequestListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2IkeVersionsRequestListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IkeVersionsRequestListValue(obj: Ec2IkeVersionsRequestListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Monitoring
 */
export interface Ec2Monitoring {
  /**
   * @schema Ec2Monitoring#State
   */
  readonly state?: string;

}

/**
 * Converts an object of type 'Ec2Monitoring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Monitoring(obj: Ec2Monitoring | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'State': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotMaintenanceStrategies
 */
export interface Ec2SpotMaintenanceStrategies {
  /**
   * @schema Ec2SpotMaintenanceStrategies#CapacityRebalance
   */
  readonly capacityRebalance?: Ec2SpotCapacityRebalance;

}

/**
 * Converts an object of type 'Ec2SpotMaintenanceStrategies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotMaintenanceStrategies(obj: Ec2SpotMaintenanceStrategies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityRebalance': toJson_Ec2SpotCapacityRebalance(obj.capacityRebalance),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotFleetLaunchSpecification
 */
export interface Ec2SpotFleetLaunchSpecification {
  /**
   * @schema Ec2SpotFleetLaunchSpecification#SecurityGroups
   */
  readonly securityGroups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2SpotFleetLaunchSpecification#AddressingType
   */
  readonly addressingType?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#BlockDeviceMappings
   */
  readonly blockDeviceMappings?: Ec2BlockDeviceMapping[];

  /**
   * @schema Ec2SpotFleetLaunchSpecification#EbsOptimized
   */
  readonly ebsOptimized?: boolean;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#IamInstanceProfile
   */
  readonly iamInstanceProfile?: Ec2IamInstanceProfileSpecification;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#ImageId
   */
  readonly imageId?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#KernelId
   */
  readonly kernelId?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#KeyName
   */
  readonly keyName?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#Monitoring
   */
  readonly monitoring?: Ec2SpotFleetMonitoring;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#NetworkInterfaces
   */
  readonly networkInterfaces?: Ec2InstanceNetworkInterfaceSpecification[];

  /**
   * @schema Ec2SpotFleetLaunchSpecification#Placement
   */
  readonly placement?: Ec2SpotPlacement;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#RamdiskId
   */
  readonly ramdiskId?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#SpotPrice
   */
  readonly spotPrice?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#UserData
   */
  readonly userData?: string;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#WeightedCapacity
   */
  readonly weightedCapacity?: number;

  /**
   * @schema Ec2SpotFleetLaunchSpecification#TagSpecifications
   */
  readonly tagSpecifications?: Ec2SpotFleetTagSpecification[];

}

/**
 * Converts an object of type 'Ec2SpotFleetLaunchSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotFleetLaunchSpecification(obj: Ec2SpotFleetLaunchSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroups': obj.securityGroups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'AddressingType': obj.addressingType,
    'BlockDeviceMappings': obj.blockDeviceMappings?.map(y => toJson_Ec2BlockDeviceMapping(y)),
    'EbsOptimized': obj.ebsOptimized,
    'IamInstanceProfile': toJson_Ec2IamInstanceProfileSpecification(obj.iamInstanceProfile),
    'ImageId': obj.imageId,
    'InstanceType': obj.instanceType,
    'KernelId': obj.kernelId,
    'KeyName': obj.keyName,
    'Monitoring': toJson_Ec2SpotFleetMonitoring(obj.monitoring),
    'NetworkInterfaces': obj.networkInterfaces?.map(y => toJson_Ec2InstanceNetworkInterfaceSpecification(y)),
    'Placement': toJson_Ec2SpotPlacement(obj.placement),
    'RamdiskId': obj.ramdiskId,
    'SpotPrice': obj.spotPrice,
    'SubnetId': obj.subnetId,
    'UserData': obj.userData,
    'WeightedCapacity': obj.weightedCapacity,
    'TagSpecifications': obj.tagSpecifications?.map(y => toJson_Ec2SpotFleetTagSpecification(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LoadBalancersConfig
 */
export interface Ec2LoadBalancersConfig {
  /**
   * @schema Ec2LoadBalancersConfig#ClassicLoadBalancersConfig
   */
  readonly classicLoadBalancersConfig?: Ec2ClassicLoadBalancersConfig;

  /**
   * @schema Ec2LoadBalancersConfig#TargetGroupsConfig
   */
  readonly targetGroupsConfig?: Ec2TargetGroupsConfig;

}

/**
 * Converts an object of type 'Ec2LoadBalancersConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LoadBalancersConfig(obj: Ec2LoadBalancersConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClassicLoadBalancersConfig': toJson_Ec2ClassicLoadBalancersConfig(obj.classicLoadBalancersConfig),
    'TargetGroupsConfig': toJson_Ec2TargetGroupsConfig(obj.targetGroupsConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotPlacement
 */
export interface Ec2SpotPlacement {
  /**
   * @schema Ec2SpotPlacement#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2SpotPlacement#GroupName
   */
  readonly groupName?: string;

  /**
   * @schema Ec2SpotPlacement#Tenancy
   */
  readonly tenancy?: string;

}

/**
 * Converts an object of type 'Ec2SpotPlacement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotPlacement(obj: Ec2SpotPlacement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'GroupName': obj.groupName,
    'Tenancy': obj.tenancy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotMarketOptions
 */
export interface Ec2SpotMarketOptions {
  /**
   * @schema Ec2SpotMarketOptions#MaxPrice
   */
  readonly maxPrice?: string;

  /**
   * @schema Ec2SpotMarketOptions#SpotInstanceType
   */
  readonly spotInstanceType?: string;

  /**
   * @schema Ec2SpotMarketOptions#BlockDurationMinutes
   */
  readonly blockDurationMinutes?: number;

  /**
   * @schema Ec2SpotMarketOptions#ValidUntil
   */
  readonly validUntil?: string;

  /**
   * @schema Ec2SpotMarketOptions#InstanceInterruptionBehavior
   */
  readonly instanceInterruptionBehavior?: string;

}

/**
 * Converts an object of type 'Ec2SpotMarketOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotMarketOptions(obj: Ec2SpotMarketOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MaxPrice': obj.maxPrice,
    'SpotInstanceType': obj.spotInstanceType,
    'BlockDurationMinutes': obj.blockDurationMinutes,
    'ValidUntil': obj.validUntil,
    'InstanceInterruptionBehavior': obj.instanceInterruptionBehavior,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ElasticGpuAssociation
 */
export interface Ec2ElasticGpuAssociation {
  /**
   * @schema Ec2ElasticGpuAssociation#ElasticGpuId
   */
  readonly elasticGpuId?: string;

  /**
   * @schema Ec2ElasticGpuAssociation#ElasticGpuAssociationId
   */
  readonly elasticGpuAssociationId?: string;

  /**
   * @schema Ec2ElasticGpuAssociation#ElasticGpuAssociationState
   */
  readonly elasticGpuAssociationState?: string;

  /**
   * @schema Ec2ElasticGpuAssociation#ElasticGpuAssociationTime
   */
  readonly elasticGpuAssociationTime?: string;

}

/**
 * Converts an object of type 'Ec2ElasticGpuAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ElasticGpuAssociation(obj: Ec2ElasticGpuAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ElasticGpuId': obj.elasticGpuId,
    'ElasticGpuAssociationId': obj.elasticGpuAssociationId,
    'ElasticGpuAssociationState': obj.elasticGpuAssociationState,
    'ElasticGpuAssociationTime': obj.elasticGpuAssociationTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ElasticInferenceAcceleratorAssociation
 */
export interface Ec2ElasticInferenceAcceleratorAssociation {
  /**
   * @schema Ec2ElasticInferenceAcceleratorAssociation#ElasticInferenceAcceleratorArn
   */
  readonly elasticInferenceAcceleratorArn?: string;

  /**
   * @schema Ec2ElasticInferenceAcceleratorAssociation#ElasticInferenceAcceleratorAssociationId
   */
  readonly elasticInferenceAcceleratorAssociationId?: string;

  /**
   * @schema Ec2ElasticInferenceAcceleratorAssociation#ElasticInferenceAcceleratorAssociationState
   */
  readonly elasticInferenceAcceleratorAssociationState?: string;

  /**
   * @schema Ec2ElasticInferenceAcceleratorAssociation#ElasticInferenceAcceleratorAssociationTime
   */
  readonly elasticInferenceAcceleratorAssociationTime?: string;

}

/**
 * Converts an object of type 'Ec2ElasticInferenceAcceleratorAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ElasticInferenceAcceleratorAssociation(obj: Ec2ElasticInferenceAcceleratorAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ElasticInferenceAcceleratorArn': obj.elasticInferenceAcceleratorArn,
    'ElasticInferenceAcceleratorAssociationId': obj.elasticInferenceAcceleratorAssociationId,
    'ElasticInferenceAcceleratorAssociationState': obj.elasticInferenceAcceleratorAssociationState,
    'ElasticInferenceAcceleratorAssociationTime': obj.elasticInferenceAcceleratorAssociationTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceNetworkInterface
 */
export interface Ec2InstanceNetworkInterface {
  /**
   * @schema Ec2InstanceNetworkInterface#Association
   */
  readonly association?: Ec2InstanceNetworkInterfaceAssociation;

  /**
   * @schema Ec2InstanceNetworkInterface#Attachment
   */
  readonly attachment?: Ec2InstanceNetworkInterfaceAttachment;

  /**
   * @schema Ec2InstanceNetworkInterface#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#Groups
   */
  readonly groups?: Ec2GroupIdentifier[];

  /**
   * @schema Ec2InstanceNetworkInterface#Ipv6Addresses
   */
  readonly ipv6Addresses?: Ec2InstanceIpv6Address[];

  /**
   * @schema Ec2InstanceNetworkInterface#MacAddress
   */
  readonly macAddress?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#OwnerId
   */
  readonly ownerId?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#PrivateIpAddresses
   */
  readonly privateIpAddresses?: Ec2InstancePrivateIpAddress[];

  /**
   * @schema Ec2InstanceNetworkInterface#SourceDestCheck
   */
  readonly sourceDestCheck?: boolean;

  /**
   * @schema Ec2InstanceNetworkInterface#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#VpcId
   */
  readonly vpcId?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#InterfaceType
   */
  readonly interfaceType?: string;

  /**
   * @schema Ec2InstanceNetworkInterface#Ipv4Prefixes
   */
  readonly ipv4Prefixes?: Ec2InstanceIpv4Prefix[];

  /**
   * @schema Ec2InstanceNetworkInterface#Ipv6Prefixes
   */
  readonly ipv6Prefixes?: Ec2InstanceIpv6Prefix[];

}

/**
 * Converts an object of type 'Ec2InstanceNetworkInterface' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceNetworkInterface(obj: Ec2InstanceNetworkInterface | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Association': toJson_Ec2InstanceNetworkInterfaceAssociation(obj.association),
    'Attachment': toJson_Ec2InstanceNetworkInterfaceAttachment(obj.attachment),
    'Description': obj.description,
    'Groups': obj.groups?.map(y => toJson_Ec2GroupIdentifier(y)),
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => toJson_Ec2InstanceIpv6Address(y)),
    'MacAddress': obj.macAddress,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'OwnerId': obj.ownerId,
    'PrivateDnsName': obj.privateDnsName,
    'PrivateIpAddress': obj.privateIpAddress,
    'PrivateIpAddresses': obj.privateIpAddresses?.map(y => toJson_Ec2InstancePrivateIpAddress(y)),
    'SourceDestCheck': obj.sourceDestCheck,
    'Status': obj.status,
    'SubnetId': obj.subnetId,
    'VpcId': obj.vpcId,
    'InterfaceType': obj.interfaceType,
    'Ipv4Prefixes': obj.ipv4Prefixes?.map(y => toJson_Ec2InstanceIpv4Prefix(y)),
    'Ipv6Prefixes': obj.ipv6Prefixes?.map(y => toJson_Ec2InstanceIpv6Prefix(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CpuOptions
 */
export interface Ec2CpuOptions {
  /**
   * @schema Ec2CpuOptions#CoreCount
   */
  readonly coreCount?: number;

  /**
   * @schema Ec2CpuOptions#ThreadsPerCore
   */
  readonly threadsPerCore?: number;

}

/**
 * Converts an object of type 'Ec2CpuOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CpuOptions(obj: Ec2CpuOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CoreCount': obj.coreCount,
    'ThreadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CapacityReservationSpecificationResponse
 */
export interface Ec2CapacityReservationSpecificationResponse {
  /**
   * @schema Ec2CapacityReservationSpecificationResponse#CapacityReservationPreference
   */
  readonly capacityReservationPreference?: string;

  /**
   * @schema Ec2CapacityReservationSpecificationResponse#CapacityReservationTarget
   */
  readonly capacityReservationTarget?: Ec2CapacityReservationTargetResponse;

}

/**
 * Converts an object of type 'Ec2CapacityReservationSpecificationResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CapacityReservationSpecificationResponse(obj: Ec2CapacityReservationSpecificationResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationPreference': obj.capacityReservationPreference,
    'CapacityReservationTarget': toJson_Ec2CapacityReservationTargetResponse(obj.capacityReservationTarget),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2HibernationOptions
 */
export interface Ec2HibernationOptions {
  /**
   * @schema Ec2HibernationOptions#Configured
   */
  readonly configured?: boolean;

}

/**
 * Converts an object of type 'Ec2HibernationOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2HibernationOptions(obj: Ec2HibernationOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Configured': obj.configured,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LicenseConfiguration
 */
export interface Ec2LicenseConfiguration {
  /**
   * @schema Ec2LicenseConfiguration#LicenseConfigurationArn
   */
  readonly licenseConfigurationArn?: string;

}

/**
 * Converts an object of type 'Ec2LicenseConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LicenseConfiguration(obj: Ec2LicenseConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LicenseConfigurationArn': obj.licenseConfigurationArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesBlockDeviceMapping
 */
export interface Ec2ScheduledInstancesBlockDeviceMapping {
  /**
   * @schema Ec2ScheduledInstancesBlockDeviceMapping#DeviceName
   */
  readonly deviceName?: string;

  /**
   * @schema Ec2ScheduledInstancesBlockDeviceMapping#Ebs
   */
  readonly ebs?: Ec2ScheduledInstancesEbs;

  /**
   * @schema Ec2ScheduledInstancesBlockDeviceMapping#NoDevice
   */
  readonly noDevice?: string;

  /**
   * @schema Ec2ScheduledInstancesBlockDeviceMapping#VirtualName
   */
  readonly virtualName?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesBlockDeviceMapping' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesBlockDeviceMapping(obj: Ec2ScheduledInstancesBlockDeviceMapping | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeviceName': obj.deviceName,
    'Ebs': toJson_Ec2ScheduledInstancesEbs(obj.ebs),
    'NoDevice': obj.noDevice,
    'VirtualName': obj.virtualName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesIamInstanceProfile
 */
export interface Ec2ScheduledInstancesIamInstanceProfile {
  /**
   * @schema Ec2ScheduledInstancesIamInstanceProfile#Arn
   */
  readonly arn?: string;

  /**
   * @schema Ec2ScheduledInstancesIamInstanceProfile#Name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesIamInstanceProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesIamInstanceProfile(obj: Ec2ScheduledInstancesIamInstanceProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Arn': obj.arn,
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesMonitoring
 */
export interface Ec2ScheduledInstancesMonitoring {
  /**
   * @schema Ec2ScheduledInstancesMonitoring#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesMonitoring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesMonitoring(obj: Ec2ScheduledInstancesMonitoring | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesNetworkInterface
 */
export interface Ec2ScheduledInstancesNetworkInterface {
  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#AssociatePublicIpAddress
   */
  readonly associatePublicIpAddress?: boolean;

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#DeviceIndex
   */
  readonly deviceIndex?: number;

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#Groups
   */
  readonly groups?: string[];

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#Ipv6AddressCount
   */
  readonly ipv6AddressCount?: number;

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#Ipv6Addresses
   */
  readonly ipv6Addresses?: Ec2ScheduledInstancesIpv6Address[];

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#PrivateIpAddressConfigs
   */
  readonly privateIpAddressConfigs?: Ec2ScheduledInstancesPrivateIpAddressConfig[];

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#SecondaryPrivateIpAddressCount
   */
  readonly secondaryPrivateIpAddressCount?: number;

  /**
   * @schema Ec2ScheduledInstancesNetworkInterface#SubnetId
   */
  readonly subnetId?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesNetworkInterface' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesNetworkInterface(obj: Ec2ScheduledInstancesNetworkInterface | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AssociatePublicIpAddress': obj.associatePublicIpAddress,
    'DeleteOnTermination': obj.deleteOnTermination,
    'Description': obj.description,
    'DeviceIndex': obj.deviceIndex,
    'Groups': obj.groups?.map(y => y),
    'Ipv6AddressCount': obj.ipv6AddressCount,
    'Ipv6Addresses': obj.ipv6Addresses?.map(y => toJson_Ec2ScheduledInstancesIpv6Address(y)),
    'NetworkInterfaceId': obj.networkInterfaceId,
    'PrivateIpAddress': obj.privateIpAddress,
    'PrivateIpAddressConfigs': obj.privateIpAddressConfigs?.map(y => toJson_Ec2ScheduledInstancesPrivateIpAddressConfig(y)),
    'SecondaryPrivateIpAddressCount': obj.secondaryPrivateIpAddressCount,
    'SubnetId': obj.subnetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesPlacement
 */
export interface Ec2ScheduledInstancesPlacement {
  /**
   * @schema Ec2ScheduledInstancesPlacement#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ScheduledInstancesPlacement#GroupName
   */
  readonly groupName?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesPlacement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesPlacement(obj: Ec2ScheduledInstancesPlacement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'GroupName': obj.groupName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv6CidrBlock
 */
export interface Ec2Ipv6CidrBlock {
  /**
   * @schema Ec2Ipv6CidrBlock#Ipv6CidrBlock
   */
  readonly ipv6CidrBlock?: string;

}

/**
 * Converts an object of type 'Ec2Ipv6CidrBlock' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv6CidrBlock(obj: Ec2Ipv6CidrBlock | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6CidrBlock': obj.ipv6CidrBlock,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CidrBlock
 */
export interface Ec2CidrBlock {
  /**
   * @schema Ec2CidrBlock#CidrBlock
   */
  readonly cidrBlock?: string;

}

/**
 * Converts an object of type 'Ec2CidrBlock' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CidrBlock(obj: Ec2CidrBlock | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CidrBlock': obj.cidrBlock,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VpcPeeringConnectionOptionsDescription
 */
export interface Ec2VpcPeeringConnectionOptionsDescription {
  /**
   * @schema Ec2VpcPeeringConnectionOptionsDescription#AllowDnsResolutionFromRemoteVpc
   */
  readonly allowDnsResolutionFromRemoteVpc?: boolean;

  /**
   * @schema Ec2VpcPeeringConnectionOptionsDescription#AllowEgressFromLocalClassicLinkToRemoteVpc
   */
  readonly allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  /**
   * @schema Ec2VpcPeeringConnectionOptionsDescription#AllowEgressFromLocalVpcToRemoteClassicLink
   */
  readonly allowEgressFromLocalVpcToRemoteClassicLink?: boolean;

}

/**
 * Converts an object of type 'Ec2VpcPeeringConnectionOptionsDescription' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VpcPeeringConnectionOptionsDescription(obj: Ec2VpcPeeringConnectionOptionsDescription | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AllowDnsResolutionFromRemoteVpc': obj.allowDnsResolutionFromRemoteVpc,
    'AllowEgressFromLocalClassicLinkToRemoteVpc': obj.allowEgressFromLocalClassicLinkToRemoteVpc,
    'AllowEgressFromLocalVpcToRemoteClassicLink': obj.allowEgressFromLocalVpcToRemoteClassicLink,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetSpotCapacityRebalanceRequest
 */
export interface Ec2FleetSpotCapacityRebalanceRequest {
  /**
   * @schema Ec2FleetSpotCapacityRebalanceRequest#ReplacementStrategy
   */
  readonly replacementStrategy?: string;

}

/**
 * Converts an object of type 'Ec2FleetSpotCapacityRebalanceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetSpotCapacityRebalanceRequest(obj: Ec2FleetSpotCapacityRebalanceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReplacementStrategy': obj.replacementStrategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetLaunchTemplateOverrides
 */
export interface Ec2FleetLaunchTemplateOverrides {
  /**
   * @schema Ec2FleetLaunchTemplateOverrides#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2FleetLaunchTemplateOverrides#MaxPrice
   */
  readonly maxPrice?: string;

  /**
   * @schema Ec2FleetLaunchTemplateOverrides#SubnetId
   */
  readonly subnetId?: string;

  /**
   * @schema Ec2FleetLaunchTemplateOverrides#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2FleetLaunchTemplateOverrides#WeightedCapacity
   */
  readonly weightedCapacity?: number;

  /**
   * @schema Ec2FleetLaunchTemplateOverrides#Priority
   */
  readonly priority?: number;

  /**
   * @schema Ec2FleetLaunchTemplateOverrides#Placement
   */
  readonly placement?: Ec2PlacementResponse;

}

/**
 * Converts an object of type 'Ec2FleetLaunchTemplateOverrides' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetLaunchTemplateOverrides(obj: Ec2FleetLaunchTemplateOverrides | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'InstanceType': obj.instanceType,
    'MaxPrice': obj.maxPrice,
    'SubnetId': obj.subnetId,
    'AvailabilityZone': obj.availabilityZone,
    'WeightedCapacity': obj.weightedCapacity,
    'Priority': obj.priority,
    'Placement': toJson_Ec2PlacementResponse(obj.placement),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateEbsBlockDeviceRequest
 */
export interface Ec2LaunchTemplateEbsBlockDeviceRequest {
  /**
   * @schema Ec2LaunchTemplateEbsBlockDeviceRequest#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDeviceRequest#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDeviceRequest#Iops
   */
  readonly iops?: number;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDeviceRequest#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDeviceRequest#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDeviceRequest#VolumeSize
   */
  readonly volumeSize?: number;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDeviceRequest#VolumeType
   */
  readonly volumeType?: string;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDeviceRequest#Throughput
   */
  readonly throughput?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateEbsBlockDeviceRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateEbsBlockDeviceRequest(obj: Ec2LaunchTemplateEbsBlockDeviceRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Encrypted': obj.encrypted,
    'DeleteOnTermination': obj.deleteOnTermination,
    'Iops': obj.iops,
    'KmsKeyId': obj.kmsKeyId,
    'SnapshotId': obj.snapshotId,
    'VolumeSize': obj.volumeSize,
    'VolumeType': obj.volumeType,
    'Throughput': obj.throughput,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceIpv6AddressRequest
 */
export interface Ec2InstanceIpv6AddressRequest {
  /**
   * @schema Ec2InstanceIpv6AddressRequest#Ipv6Address
   */
  readonly ipv6Address?: string;

}

/**
 * Converts an object of type 'Ec2InstanceIpv6AddressRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceIpv6AddressRequest(obj: Ec2InstanceIpv6AddressRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Address': obj.ipv6Address,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateSpotMarketOptionsRequest
 */
export interface Ec2LaunchTemplateSpotMarketOptionsRequest {
  /**
   * @schema Ec2LaunchTemplateSpotMarketOptionsRequest#MaxPrice
   */
  readonly maxPrice?: string;

  /**
   * @schema Ec2LaunchTemplateSpotMarketOptionsRequest#SpotInstanceType
   */
  readonly spotInstanceType?: string;

  /**
   * @schema Ec2LaunchTemplateSpotMarketOptionsRequest#BlockDurationMinutes
   */
  readonly blockDurationMinutes?: number;

  /**
   * @schema Ec2LaunchTemplateSpotMarketOptionsRequest#ValidUntil
   */
  readonly validUntil?: string;

  /**
   * @schema Ec2LaunchTemplateSpotMarketOptionsRequest#InstanceInterruptionBehavior
   */
  readonly instanceInterruptionBehavior?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateSpotMarketOptionsRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateSpotMarketOptionsRequest(obj: Ec2LaunchTemplateSpotMarketOptionsRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MaxPrice': obj.maxPrice,
    'SpotInstanceType': obj.spotInstanceType,
    'BlockDurationMinutes': obj.blockDurationMinutes,
    'ValidUntil': obj.validUntil,
    'InstanceInterruptionBehavior': obj.instanceInterruptionBehavior,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TransitGatewayAttachmentBgpConfiguration
 */
export interface Ec2TransitGatewayAttachmentBgpConfiguration {
  /**
   * @schema Ec2TransitGatewayAttachmentBgpConfiguration#TransitGatewayAsn
   */
  readonly transitGatewayAsn?: number;

  /**
   * @schema Ec2TransitGatewayAttachmentBgpConfiguration#PeerAsn
   */
  readonly peerAsn?: number;

  /**
   * @schema Ec2TransitGatewayAttachmentBgpConfiguration#TransitGatewayAddress
   */
  readonly transitGatewayAddress?: string;

  /**
   * @schema Ec2TransitGatewayAttachmentBgpConfiguration#PeerAddress
   */
  readonly peerAddress?: string;

  /**
   * @schema Ec2TransitGatewayAttachmentBgpConfiguration#BgpStatus
   */
  readonly bgpStatus?: string;

}

/**
 * Converts an object of type 'Ec2TransitGatewayAttachmentBgpConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TransitGatewayAttachmentBgpConfiguration(obj: Ec2TransitGatewayAttachmentBgpConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TransitGatewayAsn': obj.transitGatewayAsn,
    'PeerAsn': obj.peerAsn,
    'TransitGatewayAddress': obj.transitGatewayAddress,
    'PeerAddress': obj.peerAddress,
    'BgpStatus': obj.bgpStatus,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TunnelOption
 */
export interface Ec2TunnelOption {
  /**
   * @schema Ec2TunnelOption#OutsideIpAddress
   */
  readonly outsideIpAddress?: string;

  /**
   * @schema Ec2TunnelOption#TunnelInsideCidr
   */
  readonly tunnelInsideCidr?: string;

  /**
   * @schema Ec2TunnelOption#TunnelInsideIpv6Cidr
   */
  readonly tunnelInsideIpv6Cidr?: string;

  /**
   * @schema Ec2TunnelOption#PreSharedKey
   */
  readonly preSharedKey?: string;

  /**
   * @schema Ec2TunnelOption#Phase1LifetimeSeconds
   */
  readonly phase1LifetimeSeconds?: number;

  /**
   * @schema Ec2TunnelOption#Phase2LifetimeSeconds
   */
  readonly phase2LifetimeSeconds?: number;

  /**
   * @schema Ec2TunnelOption#RekeyMarginTimeSeconds
   */
  readonly rekeyMarginTimeSeconds?: number;

  /**
   * @schema Ec2TunnelOption#RekeyFuzzPercentage
   */
  readonly rekeyFuzzPercentage?: number;

  /**
   * @schema Ec2TunnelOption#ReplayWindowSize
   */
  readonly replayWindowSize?: number;

  /**
   * @schema Ec2TunnelOption#DpdTimeoutSeconds
   */
  readonly dpdTimeoutSeconds?: number;

  /**
   * @schema Ec2TunnelOption#DpdTimeoutAction
   */
  readonly dpdTimeoutAction?: string;

  /**
   * @schema Ec2TunnelOption#Phase1EncryptionAlgorithms
   */
  readonly phase1EncryptionAlgorithms?: Ec2Phase1EncryptionAlgorithmsListValue[];

  /**
   * @schema Ec2TunnelOption#Phase2EncryptionAlgorithms
   */
  readonly phase2EncryptionAlgorithms?: Ec2Phase2EncryptionAlgorithmsListValue[];

  /**
   * @schema Ec2TunnelOption#Phase1IntegrityAlgorithms
   */
  readonly phase1IntegrityAlgorithms?: Ec2Phase1IntegrityAlgorithmsListValue[];

  /**
   * @schema Ec2TunnelOption#Phase2IntegrityAlgorithms
   */
  readonly phase2IntegrityAlgorithms?: Ec2Phase2IntegrityAlgorithmsListValue[];

  /**
   * @schema Ec2TunnelOption#Phase1DHGroupNumbers
   */
  readonly phase1DhGroupNumbers?: Ec2Phase1DhGroupNumbersListValue[];

  /**
   * @schema Ec2TunnelOption#Phase2DHGroupNumbers
   */
  readonly phase2DhGroupNumbers?: Ec2Phase2DhGroupNumbersListValue[];

  /**
   * @schema Ec2TunnelOption#IkeVersions
   */
  readonly ikeVersions?: Ec2IkeVersionsListValue[];

  /**
   * @schema Ec2TunnelOption#StartupAction
   */
  readonly startupAction?: string;

}

/**
 * Converts an object of type 'Ec2TunnelOption' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TunnelOption(obj: Ec2TunnelOption | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'OutsideIpAddress': obj.outsideIpAddress,
    'TunnelInsideCidr': obj.tunnelInsideCidr,
    'TunnelInsideIpv6Cidr': obj.tunnelInsideIpv6Cidr,
    'PreSharedKey': obj.preSharedKey,
    'Phase1LifetimeSeconds': obj.phase1LifetimeSeconds,
    'Phase2LifetimeSeconds': obj.phase2LifetimeSeconds,
    'RekeyMarginTimeSeconds': obj.rekeyMarginTimeSeconds,
    'RekeyFuzzPercentage': obj.rekeyFuzzPercentage,
    'ReplayWindowSize': obj.replayWindowSize,
    'DpdTimeoutSeconds': obj.dpdTimeoutSeconds,
    'DpdTimeoutAction': obj.dpdTimeoutAction,
    'Phase1EncryptionAlgorithms': obj.phase1EncryptionAlgorithms?.map(y => toJson_Ec2Phase1EncryptionAlgorithmsListValue(y)),
    'Phase2EncryptionAlgorithms': obj.phase2EncryptionAlgorithms?.map(y => toJson_Ec2Phase2EncryptionAlgorithmsListValue(y)),
    'Phase1IntegrityAlgorithms': obj.phase1IntegrityAlgorithms?.map(y => toJson_Ec2Phase1IntegrityAlgorithmsListValue(y)),
    'Phase2IntegrityAlgorithms': obj.phase2IntegrityAlgorithms?.map(y => toJson_Ec2Phase2IntegrityAlgorithmsListValue(y)),
    'Phase1DHGroupNumbers': obj.phase1DhGroupNumbers?.map(y => toJson_Ec2Phase1DhGroupNumbersListValue(y)),
    'Phase2DHGroupNumbers': obj.phase2DhGroupNumbers?.map(y => toJson_Ec2Phase2DhGroupNumbersListValue(y)),
    'IkeVersions': obj.ikeVersions?.map(y => toJson_Ec2IkeVersionsListValue(y)),
    'StartupAction': obj.startupAction,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DirectoryServiceAuthentication
 */
export interface Ec2DirectoryServiceAuthentication {
  /**
   * @schema Ec2DirectoryServiceAuthentication#DirectoryId
   */
  readonly directoryId?: string;

}

/**
 * Converts an object of type 'Ec2DirectoryServiceAuthentication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DirectoryServiceAuthentication(obj: Ec2DirectoryServiceAuthentication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DirectoryId': obj.directoryId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CertificateAuthentication
 */
export interface Ec2CertificateAuthentication {
  /**
   * @schema Ec2CertificateAuthentication#ClientRootCertificateChain
   */
  readonly clientRootCertificateChain?: string;

}

/**
 * Converts an object of type 'Ec2CertificateAuthentication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CertificateAuthentication(obj: Ec2CertificateAuthentication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClientRootCertificateChain': obj.clientRootCertificateChain,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FederatedAuthentication
 */
export interface Ec2FederatedAuthentication {
  /**
   * @schema Ec2FederatedAuthentication#SamlProviderArn
   */
  readonly samlProviderArn?: string;

  /**
   * @schema Ec2FederatedAuthentication#SelfServiceSamlProviderArn
   */
  readonly selfServiceSamlProviderArn?: string;

}

/**
 * Converts an object of type 'Ec2FederatedAuthentication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FederatedAuthentication(obj: Ec2FederatedAuthentication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SamlProviderArn': obj.samlProviderArn,
    'SelfServiceSamlProviderArn': obj.selfServiceSamlProviderArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClientVpnEndpointAttributeStatus
 */
export interface Ec2ClientVpnEndpointAttributeStatus {
  /**
   * @schema Ec2ClientVpnEndpointAttributeStatus#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2ClientVpnEndpointAttributeStatus#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2ClientVpnEndpointAttributeStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClientVpnEndpointAttributeStatus(obj: Ec2ClientVpnEndpointAttributeStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ImportInstanceVolumeDetailItem
 */
export interface Ec2ImportInstanceVolumeDetailItem {
  /**
   * @schema Ec2ImportInstanceVolumeDetailItem#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2ImportInstanceVolumeDetailItem#BytesConverted
   */
  readonly bytesConverted?: number;

  /**
   * @schema Ec2ImportInstanceVolumeDetailItem#Description
   */
  readonly description?: string;

  /**
   * @schema Ec2ImportInstanceVolumeDetailItem#Image
   */
  readonly image?: Ec2DiskImageDescription;

  /**
   * @schema Ec2ImportInstanceVolumeDetailItem#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2ImportInstanceVolumeDetailItem#StatusMessage
   */
  readonly statusMessage?: string;

  /**
   * @schema Ec2ImportInstanceVolumeDetailItem#Volume
   */
  readonly volume?: Ec2DiskImageVolumeDescription;

}

/**
 * Converts an object of type 'Ec2ImportInstanceVolumeDetailItem' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ImportInstanceVolumeDetailItem(obj: Ec2ImportInstanceVolumeDetailItem | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailabilityZone': obj.availabilityZone,
    'BytesConverted': obj.bytesConverted,
    'Description': obj.description,
    'Image': toJson_Ec2DiskImageDescription(obj.image),
    'Status': obj.status,
    'StatusMessage': obj.statusMessage,
    'Volume': toJson_Ec2DiskImageVolumeDescription(obj.volume),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DiskImageDescription
 */
export interface Ec2DiskImageDescription {
  /**
   * @schema Ec2DiskImageDescription#Checksum
   */
  readonly checksum?: string;

  /**
   * @schema Ec2DiskImageDescription#Format
   */
  readonly format?: string;

  /**
   * @schema Ec2DiskImageDescription#ImportManifestUrl
   */
  readonly importManifestUrl?: string;

  /**
   * @schema Ec2DiskImageDescription#Size
   */
  readonly size?: number;

}

/**
 * Converts an object of type 'Ec2DiskImageDescription' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DiskImageDescription(obj: Ec2DiskImageDescription | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Checksum': obj.checksum,
    'Format': obj.format,
    'ImportManifestUrl': obj.importManifestUrl,
    'Size': obj.size,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DiskImageVolumeDescription
 */
export interface Ec2DiskImageVolumeDescription {
  /**
   * @schema Ec2DiskImageVolumeDescription#Id
   */
  readonly id?: string;

  /**
   * @schema Ec2DiskImageVolumeDescription#Size
   */
  readonly size?: number;

}

/**
 * Converts an object of type 'Ec2DiskImageVolumeDescription' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DiskImageVolumeDescription(obj: Ec2DiskImageVolumeDescription | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Id': obj.id,
    'Size': obj.size,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetSpotMaintenanceStrategies
 */
export interface Ec2FleetSpotMaintenanceStrategies {
  /**
   * @schema Ec2FleetSpotMaintenanceStrategies#CapacityRebalance
   */
  readonly capacityRebalance?: Ec2FleetSpotCapacityRebalance;

}

/**
 * Converts an object of type 'Ec2FleetSpotMaintenanceStrategies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetSpotMaintenanceStrategies(obj: Ec2FleetSpotMaintenanceStrategies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityRebalance': toJson_Ec2FleetSpotCapacityRebalance(obj.capacityRebalance),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CapacityReservationOptions
 */
export interface Ec2CapacityReservationOptions {
  /**
   * @schema Ec2CapacityReservationOptions#UsageStrategy
   */
  readonly usageStrategy?: string;

}

/**
 * Converts an object of type 'Ec2CapacityReservationOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CapacityReservationOptions(obj: Ec2CapacityReservationOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'UsageStrategy': obj.usageStrategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceCapacity
 */
export interface Ec2InstanceCapacity {
  /**
   * @schema Ec2InstanceCapacity#AvailableCapacity
   */
  readonly availableCapacity?: number;

  /**
   * @schema Ec2InstanceCapacity#InstanceType
   */
  readonly instanceType?: string;

  /**
   * @schema Ec2InstanceCapacity#TotalCapacity
   */
  readonly totalCapacity?: number;

}

/**
 * Converts an object of type 'Ec2InstanceCapacity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceCapacity(obj: Ec2InstanceCapacity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AvailableCapacity': obj.availableCapacity,
    'InstanceType': obj.instanceType,
    'TotalCapacity': obj.totalCapacity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceStatusDetails
 */
export interface Ec2InstanceStatusDetails {
  /**
   * @schema Ec2InstanceStatusDetails#ImpairedSince
   */
  readonly impairedSince?: string;

  /**
   * @schema Ec2InstanceStatusDetails#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2InstanceStatusDetails#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2InstanceStatusDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceStatusDetails(obj: Ec2InstanceStatusDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ImpairedSince': obj.impairedSince,
    'Name': obj.name,
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DiskInfo
 */
export interface Ec2DiskInfo {
  /**
   * @schema Ec2DiskInfo#SizeInGB
   */
  readonly sizeInGb?: number;

  /**
   * @schema Ec2DiskInfo#Count
   */
  readonly count?: number;

  /**
   * @schema Ec2DiskInfo#Type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'Ec2DiskInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DiskInfo(obj: Ec2DiskInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SizeInGB': obj.sizeInGb,
    'Count': obj.count,
    'Type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EbsOptimizedInfo
 */
export interface Ec2EbsOptimizedInfo {
  /**
   * @schema Ec2EbsOptimizedInfo#BaselineBandwidthInMbps
   */
  readonly baselineBandwidthInMbps?: number;

  /**
   * @schema Ec2EbsOptimizedInfo#BaselineThroughputInMBps
   */
  readonly baselineThroughputInMBps?: number;

  /**
   * @schema Ec2EbsOptimizedInfo#BaselineIops
   */
  readonly baselineIops?: number;

  /**
   * @schema Ec2EbsOptimizedInfo#MaximumBandwidthInMbps
   */
  readonly maximumBandwidthInMbps?: number;

  /**
   * @schema Ec2EbsOptimizedInfo#MaximumThroughputInMBps
   */
  readonly maximumThroughputInMBps?: number;

  /**
   * @schema Ec2EbsOptimizedInfo#MaximumIops
   */
  readonly maximumIops?: number;

}

/**
 * Converts an object of type 'Ec2EbsOptimizedInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EbsOptimizedInfo(obj: Ec2EbsOptimizedInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'BaselineBandwidthInMbps': obj.baselineBandwidthInMbps,
    'BaselineThroughputInMBps': obj.baselineThroughputInMBps,
    'BaselineIops': obj.baselineIops,
    'MaximumBandwidthInMbps': obj.maximumBandwidthInMbps,
    'MaximumThroughputInMBps': obj.maximumThroughputInMBps,
    'MaximumIops': obj.maximumIops,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2NetworkCardInfo
 */
export interface Ec2NetworkCardInfo {
  /**
   * @schema Ec2NetworkCardInfo#NetworkCardIndex
   */
  readonly networkCardIndex?: number;

  /**
   * @schema Ec2NetworkCardInfo#NetworkPerformance
   */
  readonly networkPerformance?: string;

  /**
   * @schema Ec2NetworkCardInfo#MaximumNetworkInterfaces
   */
  readonly maximumNetworkInterfaces?: number;

}

/**
 * Converts an object of type 'Ec2NetworkCardInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2NetworkCardInfo(obj: Ec2NetworkCardInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'NetworkCardIndex': obj.networkCardIndex,
    'NetworkPerformance': obj.networkPerformance,
    'MaximumNetworkInterfaces': obj.maximumNetworkInterfaces,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EfaInfo
 */
export interface Ec2EfaInfo {
  /**
   * @schema Ec2EfaInfo#MaximumEfaInterfaces
   */
  readonly maximumEfaInterfaces?: number;

}

/**
 * Converts an object of type 'Ec2EfaInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EfaInfo(obj: Ec2EfaInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MaximumEfaInterfaces': obj.maximumEfaInterfaces,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GpuDeviceInfo
 */
export interface Ec2GpuDeviceInfo {
  /**
   * @schema Ec2GpuDeviceInfo#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2GpuDeviceInfo#Manufacturer
   */
  readonly manufacturer?: string;

  /**
   * @schema Ec2GpuDeviceInfo#Count
   */
  readonly count?: number;

  /**
   * @schema Ec2GpuDeviceInfo#MemoryInfo
   */
  readonly memoryInfo?: Ec2GpuDeviceMemoryInfo;

}

/**
 * Converts an object of type 'Ec2GpuDeviceInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GpuDeviceInfo(obj: Ec2GpuDeviceInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Manufacturer': obj.manufacturer,
    'Count': obj.count,
    'MemoryInfo': toJson_Ec2GpuDeviceMemoryInfo(obj.memoryInfo),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FpgaDeviceInfo
 */
export interface Ec2FpgaDeviceInfo {
  /**
   * @schema Ec2FpgaDeviceInfo#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2FpgaDeviceInfo#Manufacturer
   */
  readonly manufacturer?: string;

  /**
   * @schema Ec2FpgaDeviceInfo#Count
   */
  readonly count?: number;

  /**
   * @schema Ec2FpgaDeviceInfo#MemoryInfo
   */
  readonly memoryInfo?: Ec2FpgaDeviceMemoryInfo;

}

/**
 * Converts an object of type 'Ec2FpgaDeviceInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FpgaDeviceInfo(obj: Ec2FpgaDeviceInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Manufacturer': obj.manufacturer,
    'Count': obj.count,
    'MemoryInfo': toJson_Ec2FpgaDeviceMemoryInfo(obj.memoryInfo),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InferenceDeviceInfo
 */
export interface Ec2InferenceDeviceInfo {
  /**
   * @schema Ec2InferenceDeviceInfo#Count
   */
  readonly count?: number;

  /**
   * @schema Ec2InferenceDeviceInfo#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2InferenceDeviceInfo#Manufacturer
   */
  readonly manufacturer?: string;

}

/**
 * Converts an object of type 'Ec2InferenceDeviceInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InferenceDeviceInfo(obj: Ec2InferenceDeviceInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Count': obj.count,
    'Name': obj.name,
    'Manufacturer': obj.manufacturer,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AnalysisAclRule
 */
export interface Ec2AnalysisAclRule {
  /**
   * @schema Ec2AnalysisAclRule#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2AnalysisAclRule#Egress
   */
  readonly egress?: boolean;

  /**
   * @schema Ec2AnalysisAclRule#PortRange
   */
  readonly portRange?: Ec2PortRange;

  /**
   * @schema Ec2AnalysisAclRule#Protocol
   */
  readonly protocol?: string;

  /**
   * @schema Ec2AnalysisAclRule#RuleAction
   */
  readonly ruleAction?: string;

  /**
   * @schema Ec2AnalysisAclRule#RuleNumber
   */
  readonly ruleNumber?: number;

}

/**
 * Converts an object of type 'Ec2AnalysisAclRule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AnalysisAclRule(obj: Ec2AnalysisAclRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'Egress': obj.egress,
    'PortRange': toJson_Ec2PortRange(obj.portRange),
    'Protocol': obj.protocol,
    'RuleAction': obj.ruleAction,
    'RuleNumber': obj.ruleNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AnalysisComponent
 */
export interface Ec2AnalysisComponent {
  /**
   * @schema Ec2AnalysisComponent#Id
   */
  readonly id?: string;

  /**
   * @schema Ec2AnalysisComponent#Arn
   */
  readonly arn?: string;

}

/**
 * Converts an object of type 'Ec2AnalysisComponent' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AnalysisComponent(obj: Ec2AnalysisComponent | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Id': obj.id,
    'Arn': obj.arn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AnalysisPacketHeader
 */
export interface Ec2AnalysisPacketHeader {
  /**
   * @schema Ec2AnalysisPacketHeader#DestinationAddresses
   */
  readonly destinationAddresses?: string[];

  /**
   * @schema Ec2AnalysisPacketHeader#DestinationPortRanges
   */
  readonly destinationPortRanges?: Ec2PortRange[];

  /**
   * @schema Ec2AnalysisPacketHeader#Protocol
   */
  readonly protocol?: string;

  /**
   * @schema Ec2AnalysisPacketHeader#SourceAddresses
   */
  readonly sourceAddresses?: string[];

  /**
   * @schema Ec2AnalysisPacketHeader#SourcePortRanges
   */
  readonly sourcePortRanges?: Ec2PortRange[];

}

/**
 * Converts an object of type 'Ec2AnalysisPacketHeader' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AnalysisPacketHeader(obj: Ec2AnalysisPacketHeader | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationAddresses': obj.destinationAddresses?.map(y => y),
    'DestinationPortRanges': obj.destinationPortRanges?.map(y => toJson_Ec2PortRange(y)),
    'Protocol': obj.protocol,
    'SourceAddresses': obj.sourceAddresses?.map(y => y),
    'SourcePortRanges': obj.sourcePortRanges?.map(y => toJson_Ec2PortRange(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AnalysisRouteTableRoute
 */
export interface Ec2AnalysisRouteTableRoute {
  /**
   * @schema Ec2AnalysisRouteTableRoute#DestinationCidr
   */
  readonly destinationCidr?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#DestinationPrefixListId
   */
  readonly destinationPrefixListId?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#EgressOnlyInternetGatewayId
   */
  readonly egressOnlyInternetGatewayId?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#GatewayId
   */
  readonly gatewayId?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#InstanceId
   */
  readonly instanceId?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#NatGatewayId
   */
  readonly natGatewayId?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#NetworkInterfaceId
   */
  readonly networkInterfaceId?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#Origin
   */
  readonly origin?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#TransitGatewayId
   */
  readonly transitGatewayId?: string;

  /**
   * @schema Ec2AnalysisRouteTableRoute#VpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * Converts an object of type 'Ec2AnalysisRouteTableRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AnalysisRouteTableRoute(obj: Ec2AnalysisRouteTableRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DestinationCidr': obj.destinationCidr,
    'DestinationPrefixListId': obj.destinationPrefixListId,
    'EgressOnlyInternetGatewayId': obj.egressOnlyInternetGatewayId,
    'GatewayId': obj.gatewayId,
    'InstanceId': obj.instanceId,
    'NatGatewayId': obj.natGatewayId,
    'NetworkInterfaceId': obj.networkInterfaceId,
    'Origin': obj.origin,
    'TransitGatewayId': obj.transitGatewayId,
    'VpcPeeringConnectionId': obj.vpcPeeringConnectionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AnalysisSecurityGroupRule
 */
export interface Ec2AnalysisSecurityGroupRule {
  /**
   * @schema Ec2AnalysisSecurityGroupRule#Cidr
   */
  readonly cidr?: string;

  /**
   * @schema Ec2AnalysisSecurityGroupRule#Direction
   */
  readonly direction?: string;

  /**
   * @schema Ec2AnalysisSecurityGroupRule#SecurityGroupId
   */
  readonly securityGroupId?: string;

  /**
   * @schema Ec2AnalysisSecurityGroupRule#PortRange
   */
  readonly portRange?: Ec2PortRange;

  /**
   * @schema Ec2AnalysisSecurityGroupRule#PrefixListId
   */
  readonly prefixListId?: string;

  /**
   * @schema Ec2AnalysisSecurityGroupRule#Protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'Ec2AnalysisSecurityGroupRule' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AnalysisSecurityGroupRule(obj: Ec2AnalysisSecurityGroupRule | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Cidr': obj.cidr,
    'Direction': obj.direction,
    'SecurityGroupId': obj.securityGroupId,
    'PortRange': toJson_Ec2PortRange(obj.portRange),
    'PrefixListId': obj.prefixListId,
    'Protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AnalysisLoadBalancerListener
 */
export interface Ec2AnalysisLoadBalancerListener {
  /**
   * @schema Ec2AnalysisLoadBalancerListener#LoadBalancerPort
   */
  readonly loadBalancerPort?: number;

  /**
   * @schema Ec2AnalysisLoadBalancerListener#InstancePort
   */
  readonly instancePort?: number;

}

/**
 * Converts an object of type 'Ec2AnalysisLoadBalancerListener' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AnalysisLoadBalancerListener(obj: Ec2AnalysisLoadBalancerListener | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LoadBalancerPort': obj.loadBalancerPort,
    'InstancePort': obj.instancePort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2AnalysisLoadBalancerTarget
 */
export interface Ec2AnalysisLoadBalancerTarget {
  /**
   * @schema Ec2AnalysisLoadBalancerTarget#Address
   */
  readonly address?: string;

  /**
   * @schema Ec2AnalysisLoadBalancerTarget#AvailabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * @schema Ec2AnalysisLoadBalancerTarget#Instance
   */
  readonly instance?: Ec2AnalysisComponent;

  /**
   * @schema Ec2AnalysisLoadBalancerTarget#Port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'Ec2AnalysisLoadBalancerTarget' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2AnalysisLoadBalancerTarget(obj: Ec2AnalysisLoadBalancerTarget | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Address': obj.address,
    'AvailabilityZone': obj.availabilityZone,
    'Instance': toJson_Ec2AnalysisComponent(obj.instance),
    'Port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2VolumeStatusDetails
 */
export interface Ec2VolumeStatusDetails {
  /**
   * @schema Ec2VolumeStatusDetails#Name
   */
  readonly name?: string;

  /**
   * @schema Ec2VolumeStatusDetails#Status
   */
  readonly status?: string;

}

/**
 * Converts an object of type 'Ec2VolumeStatusDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2VolumeStatusDetails(obj: Ec2VolumeStatusDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'Status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2DisableFastSnapshotRestoreStateError
 */
export interface Ec2DisableFastSnapshotRestoreStateError {
  /**
   * @schema Ec2DisableFastSnapshotRestoreStateError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2DisableFastSnapshotRestoreStateError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2DisableFastSnapshotRestoreStateError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2DisableFastSnapshotRestoreStateError(obj: Ec2DisableFastSnapshotRestoreStateError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2EnableFastSnapshotRestoreStateError
 */
export interface Ec2EnableFastSnapshotRestoreStateError {
  /**
   * @schema Ec2EnableFastSnapshotRestoreStateError#Code
   */
  readonly code?: string;

  /**
   * @schema Ec2EnableFastSnapshotRestoreStateError#Message
   */
  readonly message?: string;

}

/**
 * Converts an object of type 'Ec2EnableFastSnapshotRestoreStateError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2EnableFastSnapshotRestoreStateError(obj: Ec2EnableFastSnapshotRestoreStateError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Code': obj.code,
    'Message': obj.message,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateEbsBlockDevice
 */
export interface Ec2LaunchTemplateEbsBlockDevice {
  /**
   * @schema Ec2LaunchTemplateEbsBlockDevice#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDevice#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDevice#Iops
   */
  readonly iops?: number;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDevice#KmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDevice#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDevice#VolumeSize
   */
  readonly volumeSize?: number;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDevice#VolumeType
   */
  readonly volumeType?: string;

  /**
   * @schema Ec2LaunchTemplateEbsBlockDevice#Throughput
   */
  readonly throughput?: number;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateEbsBlockDevice' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateEbsBlockDevice(obj: Ec2LaunchTemplateEbsBlockDevice | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Encrypted': obj.encrypted,
    'DeleteOnTermination': obj.deleteOnTermination,
    'Iops': obj.iops,
    'KmsKeyId': obj.kmsKeyId,
    'SnapshotId': obj.snapshotId,
    'VolumeSize': obj.volumeSize,
    'VolumeType': obj.volumeType,
    'Throughput': obj.throughput,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv4PrefixSpecificationResponse
 */
export interface Ec2Ipv4PrefixSpecificationResponse {
  /**
   * @schema Ec2Ipv4PrefixSpecificationResponse#Ipv4Prefix
   */
  readonly ipv4Prefix?: string;

}

/**
 * Converts an object of type 'Ec2Ipv4PrefixSpecificationResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv4PrefixSpecificationResponse(obj: Ec2Ipv4PrefixSpecificationResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv4Prefix': obj.ipv4Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Ipv6PrefixSpecificationResponse
 */
export interface Ec2Ipv6PrefixSpecificationResponse {
  /**
   * @schema Ec2Ipv6PrefixSpecificationResponse#Ipv6Prefix
   */
  readonly ipv6Prefix?: string;

}

/**
 * Converts an object of type 'Ec2Ipv6PrefixSpecificationResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Ipv6PrefixSpecificationResponse(obj: Ec2Ipv6PrefixSpecificationResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Prefix': obj.ipv6Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2LaunchTemplateSpotMarketOptions
 */
export interface Ec2LaunchTemplateSpotMarketOptions {
  /**
   * @schema Ec2LaunchTemplateSpotMarketOptions#MaxPrice
   */
  readonly maxPrice?: string;

  /**
   * @schema Ec2LaunchTemplateSpotMarketOptions#SpotInstanceType
   */
  readonly spotInstanceType?: string;

  /**
   * @schema Ec2LaunchTemplateSpotMarketOptions#BlockDurationMinutes
   */
  readonly blockDurationMinutes?: number;

  /**
   * @schema Ec2LaunchTemplateSpotMarketOptions#ValidUntil
   */
  readonly validUntil?: string;

  /**
   * @schema Ec2LaunchTemplateSpotMarketOptions#InstanceInterruptionBehavior
   */
  readonly instanceInterruptionBehavior?: string;

}

/**
 * Converts an object of type 'Ec2LaunchTemplateSpotMarketOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2LaunchTemplateSpotMarketOptions(obj: Ec2LaunchTemplateSpotMarketOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'MaxPrice': obj.maxPrice,
    'SpotInstanceType': obj.spotInstanceType,
    'BlockDurationMinutes': obj.blockDurationMinutes,
    'ValidUntil': obj.validUntil,
    'InstanceInterruptionBehavior': obj.instanceInterruptionBehavior,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2CapacityReservationTargetResponse
 */
export interface Ec2CapacityReservationTargetResponse {
  /**
   * @schema Ec2CapacityReservationTargetResponse#CapacityReservationId
   */
  readonly capacityReservationId?: string;

  /**
   * @schema Ec2CapacityReservationTargetResponse#CapacityReservationResourceGroupArn
   */
  readonly capacityReservationResourceGroupArn?: string;

}

/**
 * Converts an object of type 'Ec2CapacityReservationTargetResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2CapacityReservationTargetResponse(obj: Ec2CapacityReservationTargetResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CapacityReservationId': obj.capacityReservationId,
    'CapacityReservationResourceGroupArn': obj.capacityReservationResourceGroupArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotCapacityRebalance
 */
export interface Ec2SpotCapacityRebalance {
  /**
   * @schema Ec2SpotCapacityRebalance#ReplacementStrategy
   */
  readonly replacementStrategy?: string;

}

/**
 * Converts an object of type 'Ec2SpotCapacityRebalance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotCapacityRebalance(obj: Ec2SpotCapacityRebalance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReplacementStrategy': obj.replacementStrategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotFleetMonitoring
 */
export interface Ec2SpotFleetMonitoring {
  /**
   * @schema Ec2SpotFleetMonitoring#Enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'Ec2SpotFleetMonitoring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotFleetMonitoring(obj: Ec2SpotFleetMonitoring | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2SpotFleetTagSpecification
 */
export interface Ec2SpotFleetTagSpecification {
  /**
   * @schema Ec2SpotFleetTagSpecification#ResourceType
   */
  readonly resourceType?: string;

  /**
   * @schema Ec2SpotFleetTagSpecification#Tags
   */
  readonly tags?: Ec2Tag[];

}

/**
 * Converts an object of type 'Ec2SpotFleetTagSpecification' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2SpotFleetTagSpecification(obj: Ec2SpotFleetTagSpecification | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ResourceType': obj.resourceType,
    'Tags': obj.tags?.map(y => toJson_Ec2Tag(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClassicLoadBalancersConfig
 */
export interface Ec2ClassicLoadBalancersConfig {
  /**
   * @schema Ec2ClassicLoadBalancersConfig#ClassicLoadBalancers
   */
  readonly classicLoadBalancers?: Ec2ClassicLoadBalancer[];

}

/**
 * Converts an object of type 'Ec2ClassicLoadBalancersConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClassicLoadBalancersConfig(obj: Ec2ClassicLoadBalancersConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ClassicLoadBalancers': obj.classicLoadBalancers?.map(y => toJson_Ec2ClassicLoadBalancer(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TargetGroupsConfig
 */
export interface Ec2TargetGroupsConfig {
  /**
   * @schema Ec2TargetGroupsConfig#TargetGroups
   */
  readonly targetGroups?: Ec2TargetGroup[];

}

/**
 * Converts an object of type 'Ec2TargetGroupsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TargetGroupsConfig(obj: Ec2TargetGroupsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'TargetGroups': obj.targetGroups?.map(y => toJson_Ec2TargetGroup(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceNetworkInterfaceAssociation
 */
export interface Ec2InstanceNetworkInterfaceAssociation {
  /**
   * @schema Ec2InstanceNetworkInterfaceAssociation#CarrierIp
   */
  readonly carrierIp?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceAssociation#IpOwnerId
   */
  readonly ipOwnerId?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceAssociation#PublicDnsName
   */
  readonly publicDnsName?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceAssociation#PublicIp
   */
  readonly publicIp?: string;

}

/**
 * Converts an object of type 'Ec2InstanceNetworkInterfaceAssociation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceNetworkInterfaceAssociation(obj: Ec2InstanceNetworkInterfaceAssociation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CarrierIp': obj.carrierIp,
    'IpOwnerId': obj.ipOwnerId,
    'PublicDnsName': obj.publicDnsName,
    'PublicIp': obj.publicIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceNetworkInterfaceAttachment
 */
export interface Ec2InstanceNetworkInterfaceAttachment {
  /**
   * @schema Ec2InstanceNetworkInterfaceAttachment#AttachTime
   */
  readonly attachTime?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceAttachment#AttachmentId
   */
  readonly attachmentId?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceAttachment#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2InstanceNetworkInterfaceAttachment#DeviceIndex
   */
  readonly deviceIndex?: number;

  /**
   * @schema Ec2InstanceNetworkInterfaceAttachment#Status
   */
  readonly status?: string;

  /**
   * @schema Ec2InstanceNetworkInterfaceAttachment#NetworkCardIndex
   */
  readonly networkCardIndex?: number;

}

/**
 * Converts an object of type 'Ec2InstanceNetworkInterfaceAttachment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceNetworkInterfaceAttachment(obj: Ec2InstanceNetworkInterfaceAttachment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'AttachTime': obj.attachTime,
    'AttachmentId': obj.attachmentId,
    'DeleteOnTermination': obj.deleteOnTermination,
    'DeviceIndex': obj.deviceIndex,
    'Status': obj.status,
    'NetworkCardIndex': obj.networkCardIndex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstancePrivateIpAddress
 */
export interface Ec2InstancePrivateIpAddress {
  /**
   * @schema Ec2InstancePrivateIpAddress#Association
   */
  readonly association?: Ec2InstanceNetworkInterfaceAssociation;

  /**
   * @schema Ec2InstancePrivateIpAddress#Primary
   */
  readonly primary?: boolean;

  /**
   * @schema Ec2InstancePrivateIpAddress#PrivateDnsName
   */
  readonly privateDnsName?: string;

  /**
   * @schema Ec2InstancePrivateIpAddress#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2InstancePrivateIpAddress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstancePrivateIpAddress(obj: Ec2InstancePrivateIpAddress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Association': toJson_Ec2InstanceNetworkInterfaceAssociation(obj.association),
    'Primary': obj.primary,
    'PrivateDnsName': obj.privateDnsName,
    'PrivateIpAddress': obj.privateIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceIpv4Prefix
 */
export interface Ec2InstanceIpv4Prefix {
  /**
   * @schema Ec2InstanceIpv4Prefix#Ipv4Prefix
   */
  readonly ipv4Prefix?: string;

}

/**
 * Converts an object of type 'Ec2InstanceIpv4Prefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceIpv4Prefix(obj: Ec2InstanceIpv4Prefix | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv4Prefix': obj.ipv4Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2InstanceIpv6Prefix
 */
export interface Ec2InstanceIpv6Prefix {
  /**
   * @schema Ec2InstanceIpv6Prefix#Ipv6Prefix
   */
  readonly ipv6Prefix?: string;

}

/**
 * Converts an object of type 'Ec2InstanceIpv6Prefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2InstanceIpv6Prefix(obj: Ec2InstanceIpv6Prefix | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Prefix': obj.ipv6Prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesEbs
 */
export interface Ec2ScheduledInstancesEbs {
  /**
   * @schema Ec2ScheduledInstancesEbs#DeleteOnTermination
   */
  readonly deleteOnTermination?: boolean;

  /**
   * @schema Ec2ScheduledInstancesEbs#Encrypted
   */
  readonly encrypted?: boolean;

  /**
   * @schema Ec2ScheduledInstancesEbs#Iops
   */
  readonly iops?: number;

  /**
   * @schema Ec2ScheduledInstancesEbs#SnapshotId
   */
  readonly snapshotId?: string;

  /**
   * @schema Ec2ScheduledInstancesEbs#VolumeSize
   */
  readonly volumeSize?: number;

  /**
   * @schema Ec2ScheduledInstancesEbs#VolumeType
   */
  readonly volumeType?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesEbs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesEbs(obj: Ec2ScheduledInstancesEbs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'DeleteOnTermination': obj.deleteOnTermination,
    'Encrypted': obj.encrypted,
    'Iops': obj.iops,
    'SnapshotId': obj.snapshotId,
    'VolumeSize': obj.volumeSize,
    'VolumeType': obj.volumeType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesIpv6Address
 */
export interface Ec2ScheduledInstancesIpv6Address {
  /**
   * @schema Ec2ScheduledInstancesIpv6Address#Ipv6Address
   */
  readonly ipv6Address?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesIpv6Address' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesIpv6Address(obj: Ec2ScheduledInstancesIpv6Address | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Ipv6Address': obj.ipv6Address,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ScheduledInstancesPrivateIpAddressConfig
 */
export interface Ec2ScheduledInstancesPrivateIpAddressConfig {
  /**
   * @schema Ec2ScheduledInstancesPrivateIpAddressConfig#Primary
   */
  readonly primary?: boolean;

  /**
   * @schema Ec2ScheduledInstancesPrivateIpAddressConfig#PrivateIpAddress
   */
  readonly privateIpAddress?: string;

}

/**
 * Converts an object of type 'Ec2ScheduledInstancesPrivateIpAddressConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ScheduledInstancesPrivateIpAddressConfig(obj: Ec2ScheduledInstancesPrivateIpAddressConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Primary': obj.primary,
    'PrivateIpAddress': obj.privateIpAddress,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2PlacementResponse
 */
export interface Ec2PlacementResponse {
  /**
   * @schema Ec2PlacementResponse#GroupName
   */
  readonly groupName?: string;

}

/**
 * Converts an object of type 'Ec2PlacementResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2PlacementResponse(obj: Ec2PlacementResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupName': obj.groupName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase1EncryptionAlgorithmsListValue
 */
export interface Ec2Phase1EncryptionAlgorithmsListValue {
  /**
   * @schema Ec2Phase1EncryptionAlgorithmsListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Phase1EncryptionAlgorithmsListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase1EncryptionAlgorithmsListValue(obj: Ec2Phase1EncryptionAlgorithmsListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase2EncryptionAlgorithmsListValue
 */
export interface Ec2Phase2EncryptionAlgorithmsListValue {
  /**
   * @schema Ec2Phase2EncryptionAlgorithmsListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Phase2EncryptionAlgorithmsListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase2EncryptionAlgorithmsListValue(obj: Ec2Phase2EncryptionAlgorithmsListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase1IntegrityAlgorithmsListValue
 */
export interface Ec2Phase1IntegrityAlgorithmsListValue {
  /**
   * @schema Ec2Phase1IntegrityAlgorithmsListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Phase1IntegrityAlgorithmsListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase1IntegrityAlgorithmsListValue(obj: Ec2Phase1IntegrityAlgorithmsListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase2IntegrityAlgorithmsListValue
 */
export interface Ec2Phase2IntegrityAlgorithmsListValue {
  /**
   * @schema Ec2Phase2IntegrityAlgorithmsListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2Phase2IntegrityAlgorithmsListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase2IntegrityAlgorithmsListValue(obj: Ec2Phase2IntegrityAlgorithmsListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase1DhGroupNumbersListValue
 */
export interface Ec2Phase1DhGroupNumbersListValue {
  /**
   * @schema Ec2Phase1DhGroupNumbersListValue#Value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'Ec2Phase1DhGroupNumbersListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase1DhGroupNumbersListValue(obj: Ec2Phase1DhGroupNumbersListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2Phase2DhGroupNumbersListValue
 */
export interface Ec2Phase2DhGroupNumbersListValue {
  /**
   * @schema Ec2Phase2DhGroupNumbersListValue#Value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'Ec2Phase2DhGroupNumbersListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2Phase2DhGroupNumbersListValue(obj: Ec2Phase2DhGroupNumbersListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2IkeVersionsListValue
 */
export interface Ec2IkeVersionsListValue {
  /**
   * @schema Ec2IkeVersionsListValue#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'Ec2IkeVersionsListValue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2IkeVersionsListValue(obj: Ec2IkeVersionsListValue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FleetSpotCapacityRebalance
 */
export interface Ec2FleetSpotCapacityRebalance {
  /**
   * @schema Ec2FleetSpotCapacityRebalance#ReplacementStrategy
   */
  readonly replacementStrategy?: string;

}

/**
 * Converts an object of type 'Ec2FleetSpotCapacityRebalance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FleetSpotCapacityRebalance(obj: Ec2FleetSpotCapacityRebalance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ReplacementStrategy': obj.replacementStrategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2GpuDeviceMemoryInfo
 */
export interface Ec2GpuDeviceMemoryInfo {
  /**
   * @schema Ec2GpuDeviceMemoryInfo#SizeInMiB
   */
  readonly sizeInMiB?: number;

}

/**
 * Converts an object of type 'Ec2GpuDeviceMemoryInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2GpuDeviceMemoryInfo(obj: Ec2GpuDeviceMemoryInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SizeInMiB': obj.sizeInMiB,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2FpgaDeviceMemoryInfo
 */
export interface Ec2FpgaDeviceMemoryInfo {
  /**
   * @schema Ec2FpgaDeviceMemoryInfo#SizeInMiB
   */
  readonly sizeInMiB?: number;

}

/**
 * Converts an object of type 'Ec2FpgaDeviceMemoryInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2FpgaDeviceMemoryInfo(obj: Ec2FpgaDeviceMemoryInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SizeInMiB': obj.sizeInMiB,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2ClassicLoadBalancer
 */
export interface Ec2ClassicLoadBalancer {
  /**
   * @schema Ec2ClassicLoadBalancer#Name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'Ec2ClassicLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2ClassicLoadBalancer(obj: Ec2ClassicLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Ec2TargetGroup
 */
export interface Ec2TargetGroup {
  /**
   * @schema Ec2TargetGroup#Arn
   */
  readonly arn?: string;

}

/**
 * Converts an object of type 'Ec2TargetGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Ec2TargetGroup(obj: Ec2TargetGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Arn': obj.arn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
